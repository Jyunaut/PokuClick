(function () {
	'use strict';

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	var react = {exports: {}};

	var react_production_min = {};

	/**
	 * @license React
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production_min;

	function requireReact_production_min () {
		if (hasRequiredReact_production_min) return react_production_min;
		hasRequiredReact_production_min = 1;
	var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return "function"===typeof a?a:null}
		var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}E.prototype.isReactComponent={};
		E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState");};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}var H=G.prototype=new F;
		H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
		function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f;}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return {$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
		function N(a,b){return {$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
		function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0;}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
		a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c);}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
		function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b;},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b;});-1===a._status&&(a._status=0,a._result=b);}if(1===a._status)return a._result.default;throw a._result;}
		var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error("act(...) is not supported in production builds of React.");}
		react_production_min.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments);},e);},count:function(a){var b=0;S(a,function(){b++;});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};react_production_min.Component=E;react_production_min.Fragment=p;react_production_min.Profiler=r;react_production_min.PureComponent=G;react_production_min.StrictMode=q;react_production_min.Suspense=w;
		react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;react_production_min.act=X;
		react_production_min.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
		for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g;}return {$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};react_production_min.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};
		react_production_min.forwardRef=function(a){return {$$typeof:v,render:a}};react_production_min.isValidElement=O;react_production_min.lazy=function(a){return {$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};react_production_min.memo=function(a,b){return {$$typeof:x,type:a,compare:void 0===b?null:b}};react_production_min.startTransition=function(a){var b=V.transition;V.transition={};try{a();}finally{V.transition=b;}};react_production_min.unstable_act=X;react_production_min.useCallback=function(a,b){return U.current.useCallback(a,b)};react_production_min.useContext=function(a){return U.current.useContext(a)};
		react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(a){return U.current.useDeferredValue(a)};react_production_min.useEffect=function(a,b){return U.current.useEffect(a,b)};react_production_min.useId=function(){return U.current.useId()};react_production_min.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};react_production_min.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};react_production_min.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};
		react_production_min.useMemo=function(a,b){return U.current.useMemo(a,b)};react_production_min.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};react_production_min.useRef=function(a){return U.current.useRef(a)};react_production_min.useState=function(a){return U.current.useState(a)};react_production_min.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};react_production_min.useTransition=function(){return U.current.useTransition()};react_production_min.version="18.3.1";
		return react_production_min;
	}

	var hasRequiredReact;

	function requireReact () {
		if (hasRequiredReact) return react.exports;
		hasRequiredReact = 1;

		{
		  react.exports = requireReact_production_min();
		}
		return react.exports;
	}

	var reactExports = requireReact();
	var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

	var reactDom = {exports: {}};

	var reactDom_production_min = {};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/**
	 * @license React
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_production_min;

	function requireScheduler_production_min () {
		if (hasRequiredScheduler_production_min) return scheduler_production_min;
		hasRequiredScheduler_production_min = 1;
		(function (exports) {
	function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
			function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
			"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
			function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
			function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
			exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
			exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
			exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
			exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
			exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}}; 
		} (scheduler_production_min));
		return scheduler_production_min;
	}

	var hasRequiredScheduler;

	function requireScheduler () {
		if (hasRequiredScheduler) return scheduler.exports;
		hasRequiredScheduler = 1;

		{
		  scheduler.exports = requireScheduler_production_min();
		}
		return scheduler.exports;
	}

	/**
	 * @license React
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_production_min;

	function requireReactDom_production_min () {
		if (hasRequiredReactDom_production_min) return reactDom_production_min;
		hasRequiredReactDom_production_min = 1;
	var aa=requireReact(),ca=requireScheduler();function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b);}
		function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a]);}
		var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
		{},ma={};function oa(a){if(ja.call(ma,a))return !0;if(ja.call(la,a))return !1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return !1}function pa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
		function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var z={};
		"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1);});
		["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1);});
		["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1);});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
		"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
		sa);z[b]=new v(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1);});
		z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0);});
		function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)));}
		var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");	var Ia=Symbol.for("react.offscreen");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return "function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||"";}return "\n"+La+a}var Na=!1;
		function Oa(a,b){if(!a||Na)return "";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
		f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Ma(a):""}
		function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return ""}}
		function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return "Fragment";case wa:return "Portal";case Aa:return "Profiler";case za:return "StrictMode";case Ea:return "Suspense";case Fa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return (a.displayName||"Context")+".Consumer";case Ba:return (a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
		b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
		function Ra(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return "Offscreen";
		case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return ""}}
		function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
		function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
		null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
		function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1);}
		function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
		function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
		function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var eb=Array.isArray;
		function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
		function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
		function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}function kb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}
		function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
		var mb,nb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else {mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
		function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
		var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
		zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a];});});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
		function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
		function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
		function vb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
		function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb();}}
		function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
		typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0;}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb);}catch(a){Lb=!1;}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a;}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments);}
		function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null;}else throw Error(p(198));Qb||(Qb=!0,Rb=l);}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
		function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling;}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
		c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling;}return null}
		var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128));}catch(b){}}
		var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
		function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
		default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)));}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
		function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
		function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
		function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c;}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
		function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
		function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId);}}
		function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
		function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return !1}
		function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c);});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
		function Xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null;}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift();}return !0}function Zc(a,b,c){Xc(a)&&c.delete(b);}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc);}
		function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)));}
		function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift();}var cd=ua.ReactCurrentBatchConfig,dd=!0;
		function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}
		function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f;}null!==e&&d.stopPropagation();}else hd(a,b,d,null,c);}}var id=null;
		function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null;}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null;}else b!==a&&(a=null);id=a;return null}
		function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
		case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
		function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
		function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
		(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
		var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
		a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
		Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
		119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
		var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
		a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
		deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
		function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
		function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
		var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
		function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b);}}
		function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
		function Ie(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return !1}return !0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
		function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Je(c);}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
		function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
		function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
		d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)));}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top;}}
		var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
		function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
		function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
		ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
		function ff(a,b){df.set(a,b);fa(b,[a]);}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf);}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
		ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
		fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
		function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null;}
		function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
		function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d));}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b);}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a));});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b));}}
		function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd;}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
		function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Jb(function(){var d=f,e=xb(c),g=[];
		a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
		Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
		w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return;}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
		n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null;}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
		vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x);}t=null;}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else {na=De;var xa=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
		xa.controlled&&"number"===h.type&&cb(h,"number",h.value);}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
		break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0;}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
		0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a);}se(g,b);});}function tf(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return;}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
		function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return ("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
		var Cf=null,Df=null;function Ef(a,b){return "textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
		var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;});}
		function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--;}else "$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e;}while(c);bd(b);}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
		function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
		function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[Of]||a[uf];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return {current:a}}
		function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--);}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b;}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
		function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H);}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c);}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
		function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return !0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c);}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a);}function ig(a){fg=!0;hg(a);}
		function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1;}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1;}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b;}
		function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a;}else rg=1<<f|c<<e|d,sg=a;}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0));}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null;}var xg=null,yg=null,I=!1,zg=null;
		function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
		function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
		null,!0):!1;default:return !1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a);}}else {if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a;}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a;}
		function Gg(a){if(a!==xg)return !1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling);}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}yg=
		null;}}else yg=xg?Lf(a.stateNode.nextSibling):null;return !0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling);}function Ig(){yg=xg=null;I=!1;}function Jg(a){null===zg?zg=[a]:zg.push(a);}var Kg=ua.ReactCurrentBatchConfig;
		function Lg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode;}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
		function Mg(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function Ng(a){var b=a._init;return b(a._payload)}
		function Og(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Pg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
		null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Qg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&Ng(f)===b.type))return d=e(b,c.props),d.ref=Lg(a,b,c),d.return=a,d;d=Rg(c.type,c.key,c.props,null,a.mode,d);d.ref=Lg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
		b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Sg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Tg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=Qg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=Rg(b.type,b.key,b.props,null,a.mode,c),
		c.ref=Lg(a,null,b),c.return=a,c;case wa:return b=Sg(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Tg(b,a.mode,c,null),b.return=a,b;Mg(a,b);}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
		b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);Mg(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);Mg(b,d);}return null}
		function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x;}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
		x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x;}if(n.done)return c(e,
		m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
		f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&Ng(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Lg(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ya?(d=Tg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Rg(f.type,f.key,f.props,null,a.mode,h),h.ref=Lg(a,d,f),h.return=a,a=h);}return g(a);case wa:a:{for(l=f.key;null!==
		d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=Sg(f,a.mode,h);d.return=a;a=d;}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);Mg(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
		(c(a,d),d=Qg(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Ug=Og(!0),Vg=Og(!1),Wg=Uf(null),Xg=null,Yg=null,Zg=null;function $g(){Zg=Yg=Xg=null;}function ah(a){var b=Wg.current;E(Wg);a._currentValue=b;}function bh(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}
		function ch(a,b){Xg=a;Zg=Yg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(dh=!0),a.firstContext=null);}function eh(a){var b=a._currentValue;if(Zg!==a)if(a={context:a,memoizedValue:b,next:null},null===Yg){if(null===Xg)throw Error(p(308));Yg=a;Xg.dependencies={lanes:0,firstContext:a};}else Yg=Yg.next=a;return b}var fh=null;function gh(a){null===fh?fh=[a]:fh.push(a);}
		function hh(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,gh(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ih(a,d)}function ih(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var jh=!1;function kh(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
		function lh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function mh(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
		function nh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ih(a,c)}e=d.interleaved;null===e?(b.next=b,gh(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ih(a,c)}function oh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		function ph(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
		b;c.lastBaseUpdate=b;}
		function qh(a,b,c,d){var e=a.updateQueue;jh=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
		next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:jh=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h));}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
		h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null;}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);rh|=g;a.lanes=g;a.memoizedState=q;}}
		function sh(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d);}}}var th={},uh=Uf(th),vh=Uf(th),wh=Uf(th);function xh(a){if(a===th)throw Error(p(174));return a}
		function yh(a,b){G(wh,b);G(vh,a);G(uh,th);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a);}E(uh);G(uh,b);}function zh(){E(uh);E(vh);E(wh);}function Ah(a){xh(wh.current);var b=xh(uh.current);var c=lb(b,a.type);b!==c&&(G(vh,a),G(uh,c));}function Bh(a){vh.current===a&&(E(uh),E(vh));}var L=Uf(0);
		function Ch(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Dh=[];
		function Eh(){for(var a=0;a<Dh.length;a++)Dh[a]._workInProgressVersionPrimary=null;Dh.length=0;}var Fh=ua.ReactCurrentDispatcher,Gh=ua.ReactCurrentBatchConfig,Hh=0,M=null,N=null,O=null,Ih=!1,Jh=!1,Kh=0,Lh=0;function P(){throw Error(p(321));}function Mh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
		function Nh(a,b,c,d,e,f){Hh=f;M=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Fh.current=null===a||null===a.memoizedState?Oh:Ph;a=c(d,e);if(Jh){f=0;do{Jh=!1;Kh=0;if(25<=f)throw Error(p(301));f+=1;O=N=null;b.updateQueue=null;Fh.current=Qh;a=c(d,e);}while(Jh)}Fh.current=Rh;b=null!==N&&null!==N.next;Hh=0;O=N=M=null;Ih=!1;if(b)throw Error(p(300));return a}function Sh(){var a=0!==Kh;Kh=0;return a}
		function Th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===O?M.memoizedState=O=a:O=O.next=a;return O}function Uh(){if(null===N){var a=M.alternate;a=null!==a?a.memoizedState:null;}else a=N.next;var b=null===O?M.memoizedState:O.next;if(null!==b)O=b,N=a;else {if(null===a)throw Error(p(310));N=a;a={memoizedState:N.memoizedState,baseState:N.baseState,baseQueue:N.baseQueue,queue:N.queue,next:null};null===O?M.memoizedState=O=a:O=O.next=a;}return O}
		function Vh(a,b){return "function"===typeof b?b(a):b}
		function Wh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=N,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Hh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
		eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;M.lanes|=m;rh|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(dh=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,M.lanes|=f,rh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
		function Xh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(dh=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function Yh(){}
		function Zh(a,b){var c=M,d=Uh(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,dh=!0);d=d.queue;$h(ai.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==O&&O.memoizedState.tag&1){c.flags|=2048;bi(9,ci.bind(null,c,d,e,b),void 0,null);if(null===Q)throw Error(p(349));0!==(Hh&30)||di(c,b,e);}return e}function di(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
		function ci(a,b,c,d){b.value=c;b.getSnapshot=d;ei(b)&&fi(a);}function ai(a,b,c){return c(function(){ei(b)&&fi(a);})}function ei(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !He(a,c)}catch(d){return !0}}function fi(a){var b=ih(a,1);null!==b&&gi(b,a,1,-1);}
		function hi(a){var b=Th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Vh,lastRenderedState:a};b.queue=a;a=a.dispatch=ii.bind(null,M,a);return [b.memoizedState,a]}
		function bi(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function ji(){return Uh().memoizedState}function ki(a,b,c,d){var e=Th();M.flags|=a;e.memoizedState=bi(1|b,c,void 0,void 0===d?null:d);}
		function li(a,b,c,d){var e=Uh();d=void 0===d?null:d;var f=void 0;if(null!==N){var g=N.memoizedState;f=g.destroy;if(null!==d&&Mh(d,g.deps)){e.memoizedState=bi(b,c,f,d);return}}M.flags|=a;e.memoizedState=bi(1|b,c,f,d);}function mi(a,b){return ki(8390656,8,a,b)}function $h(a,b){return li(2048,8,a,b)}function ni(a,b){return li(4,2,a,b)}function oi(a,b){return li(4,4,a,b)}
		function pi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function qi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return li(4,4,pi.bind(null,b,a),c)}function ri(){}function si(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
		function ti(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function ui(a,b,c){if(0===(Hh&21))return a.baseState&&(a.baseState=!1,dh=!0),a.memoizedState=c;He(c,b)||(c=yc(),M.lanes|=c,rh|=c,a.baseState=!0);return b}function vi(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Gh.transition;Gh.transition={};try{a(!1),b();}finally{C=c,Gh.transition=d;}}function wi(){return Uh().memoizedState}
		function xi(a,b,c){var d=yi(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,c);else if(c=hh(a,b,c,d),null!==c){var e=R();gi(c,a,d,e);Bi(c,b,d);}}
		function ii(a,b,c){var d=yi(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,gh(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=hh(a,b,e,d);null!==c&&(e=R(),gi(c,a,d,e),Bi(c,b,d));}}
		function zi(a){var b=a.alternate;return a===M||null!==b&&b===M}function Ai(a,b){Jh=Ih=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function Bi(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
		var Rh={readContext:eh,useCallback:P,useContext:P,useEffect:P,useImperativeHandle:P,useInsertionEffect:P,useLayoutEffect:P,useMemo:P,useReducer:P,useRef:P,useState:P,useDebugValue:P,useDeferredValue:P,useTransition:P,useMutableSource:P,useSyncExternalStore:P,useId:P,unstable_isNewReconciler:!1},Oh={readContext:eh,useCallback:function(a,b){Th().memoizedState=[a,void 0===b?null:b];return a},useContext:eh,useEffect:mi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ki(4194308,
		4,pi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ki(4194308,4,a,b)},useInsertionEffect:function(a,b){return ki(4,2,a,b)},useMemo:function(a,b){var c=Th();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=xi.bind(null,M,a);return [d.memoizedState,a]},useRef:function(a){var b=
		Th();a={current:a};return b.memoizedState=a},useState:hi,useDebugValue:ri,useDeferredValue:function(a){return Th().memoizedState=a},useTransition:function(){var a=hi(!1),b=a[0];a=vi.bind(null,a[1]);Th().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=M,e=Th();if(I){if(void 0===c)throw Error(p(407));c=c();}else {c=b();if(null===Q)throw Error(p(349));0!==(Hh&30)||di(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;mi(ai.bind(null,d,
		f,a),[a]);d.flags|=2048;bi(9,ci.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Th(),b=Q.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Kh++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Lh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Ph={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Wh,useRef:ji,useState:function(){return Wh(Vh)},
		useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return ui(b,N.memoizedState,a)},useTransition:function(){var a=Wh(Vh)[0],b=Uh().memoizedState;return [a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1},Qh={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Xh,useRef:ji,useState:function(){return Xh(Vh)},useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return null===
		N?b.memoizedState=a:ui(b,N.memoizedState,a)},useTransition:function(){var a=Xh(Vh)[0],b=Uh().memoizedState;return [a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1};function Ci(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function Di(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
		var Ei={isMounted:function(a){return (a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=R(),d=
		yi(a),e=mh(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=nh(a,e,d);null!==b&&(gi(b,a,d,c),oh(b,a,d));}};function Fi(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
		function Gi(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=eh(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Ei;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
		function Hi(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Ei.enqueueReplaceState(b,b.state,null);}
		function Ii(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};kh(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=eh(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Di(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
		"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Ei.enqueueReplaceState(e,e.state,null),qh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}function Ji(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}
		function Ki(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Li(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Mi="function"===typeof WeakMap?WeakMap:Map;function Ni(a,b,c){c=mh(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Oi||(Oi=!0,Pi=d);Li(a,b);};return c}
		function Qi(a,b,c){c=mh(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Li(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Li(a,b);"function"!==typeof d&&(null===Ri?Ri=new Set([this]):Ri.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
		function Si(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Mi;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ti.bind(null,a,b,c),b.then(a,a));}function Ui(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
		function Vi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=mh(-1,1),b.tag=2,nh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Wi=ua.ReactCurrentOwner,dh=!1;function Xi(a,b,c,d){b.child=null===a?Vg(b,null,c,d):Ug(b,a.child,c,d);}
		function Yi(a,b,c,d,e){c=c.render;var f=b.ref;ch(b,e);d=Nh(a,b,c,d,f,e);c=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&c&&vg(b);b.flags|=1;Xi(a,b,d,e);return b.child}
		function $i(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!aj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,bj(a,b,f,d,e);a=Rg(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return Zi(a,b,e)}b.flags|=1;a=Pg(f,d);a.ref=b.ref;a.return=b;return b.child=a}
		function bj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(dh=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(dh=!0);else return b.lanes=a.lanes,Zi(a,b,e)}return cj(a,b,c,d,e)}
		function dj(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(ej,fj),fj|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(ej,fj),fj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(ej,fj);fj|=d;}else null!==
		f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(ej,fj),fj|=d;Xi(a,b,e,c);return b.child}function gj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function cj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);ch(b,e);c=Nh(a,b,c,d,f,e);d=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&d&&vg(b);b.flags|=1;Xi(a,b,c,e);return b.child}
		function hj(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b);}else f=!1;ch(b,e);if(null===b.stateNode)ij(a,b),Gi(b,c,d),Ii(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=eh(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
		(h!==d||k!==l)&&Hi(b,g,d,l);jh=!1;var r=b.memoizedState;g.state=r;qh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||jh?("function"===typeof m&&(Di(b,c,m,d),k=b.memoizedState),(h=jh||Fi(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
		("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;lh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Ci(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=eh(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
		"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&Hi(b,g,d,k);jh=!1;r=b.memoizedState;g.state=r;qh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||jh?("function"===typeof y&&(Di(b,c,y,d),n=b.memoizedState),(l=jh||Fi(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
		g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
		a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1);}return jj(a,b,c,d,f,e)}
		function jj(a,b,c,d,e,f){gj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),Zi(a,b,f);d=b.stateNode;Wi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Ug(b,a.child,null,f),b.child=Ug(b,null,h,f)):Xi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function kj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);yh(a,b.containerInfo);}
		function lj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Xi(a,b,c,d);return b.child}var mj={dehydrated:null,treeContext:null,retryLane:0};function nj(a){return {baseLanes:a,cachePool:null,transitions:null}}
		function oj(a,b,c){var d=b.pendingProps,e=L.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(L,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
		g):f=pj(g,d,0,null),a=Tg(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=nj(c),b.memoizedState=mj,a):qj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return rj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Pg(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Pg(h,f):(f=Tg(f,g,c,null),f.flags|=2);f.return=
		b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?nj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=mj;return d}f=a.child;a=f.sibling;d=Pg(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
		function qj(a,b){b=pj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function sj(a,b,c,d){null!==d&&Jg(d);Ug(b,a.child,null,c);a=qj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
		function rj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ki(Error(p(422))),sj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=pj({mode:"visible",children:d.children},e,0,null);f=Tg(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Ug(b,a.child,null,g);b.child.memoizedState=nj(g);b.memoizedState=mj;return f}if(0===(b.mode&1))return sj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
		if(d)var h=d.dgst;d=h;f=Error(p(419));d=Ki(f,d,void 0);return sj(a,b,g,d)}h=0!==(g&a.childLanes);if(dh||h){d=Q;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;
		0!==e&&e!==f.retryLane&&(f.retryLane=e,ih(a,e),gi(d,a,e,-1));}tj();d=Ki(Error(p(421)));return sj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=uj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=qj(b,d.children);b.flags|=4096;return b}function vj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);bh(a.return,b,c);}
		function wj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
		function xj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Xi(a,b,d.children,c);d=L.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&vj(a,c,b);else if(19===a.tag)vj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}G(L,d);if(0===(b.mode&1))b.memoizedState=
		null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ch(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);wj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ch(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}wj(b,!0,c,null,f);break;case "together":wj(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
		function ij(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function Zi(a,b,c){null!==a&&(b.dependencies=a.dependencies);rh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=Pg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Pg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
		function yj(a,b,c){switch(b.tag){case 3:kj(b);Ig();break;case 5:Ah(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:yh(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Wg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(L,L.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return oj(a,b,c);G(L,L.current&1);a=Zi(a,b,c);return null!==a?a.sibling:null}G(L,L.current&1);break;case 19:d=0!==(c&
		b.childLanes);if(0!==(a.flags&128)){if(d)return xj(a,b,c);b.flags|=128;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(L,L.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,dj(a,b,c)}return Zi(a,b,c)}var zj,Aj,Bj,Cj;
		zj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Aj=function(){};
		Bj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;xh(uh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf);}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
		(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,
		c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Cj=function(a,b,c,d){c!==d&&(b.flags|=4);};
		function Dj(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
		function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
		function Ej(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;zh();E(Wf);E(H);Eh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Fj(zg),zg=null));Aj(a,b);S(b);return null;case 5:Bh(b);var e=xh(wh.current);
		c=b.type;if(null!==a&&null!=b.stateNode)Bj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
		d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d);}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
		h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d);}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf);}d=e;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
		"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;zj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
		a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d;}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
		c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g));}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
		!0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf);}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1;}}d&&(b.flags|=4);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}S(b);return null;case 6:if(a&&null!=b.stateNode)Cj(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=xh(wh.current);xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
		xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1));}f&&(b.flags|=4);}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d;}S(b);return null;case 13:E(L);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
		a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b;}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1;}else null!==zg&&(Fj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(L.current&1)?0===T&&(T=3):tj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return zh(),
		Aj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return ah(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(L);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Dj(f,!1);else {if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Ch(a);if(null!==g){b.flags|=128;Dj(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
		g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(L,L.current&1|2);return b.child}a=
		a.sibling;}null!==f.tail&&B()>Gj&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);}else {if(!d)if(a=Ch(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Dj(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Gj&&1073741824!==c&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g);}if(null!==f.tail)return b=f.tail,f.rendering=
		b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=L.current,G(L,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Hj(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(fj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
		function Ij(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return zh(),E(Wf),E(H),Eh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Bh(b),null;case 13:E(L);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(L),null;case 4:return zh(),null;case 10:return ah(b.type._context),null;case 22:case 23:return Hj(),
		null;case 24:return null;default:return null}}var Jj=!1,U=!1,Kj="function"===typeof WeakSet?WeakSet:Set,V=null;function Lj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){W(a,b,d);}else c.current=null;}function Mj(a,b,c){try{c();}catch(d){W(a,b,d);}}var Nj=!1;
		function Oj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType;}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
		q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y;}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode;}q=y;}c=-1===h||-1===k?null:{start:h,end:k};}else c=null;}c=c||{start:0,end:0};}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
		case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Ci(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w;}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F);}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return;}n=Nj;Nj=!1;return n}
		function Pj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Mj(b,c,f);}e=e.next;}while(e!==d)}}function Qj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}function Rj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}
		function Sj(a){var b=a.alternate;null!==b&&(a.alternate=null,Sj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}function Tj(a){return 5===a.tag||3===a.tag||4===a.tag}
		function Uj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Tj(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
		function Vj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Vj(a,b,c),a=a.sibling;null!==a;)Vj(a,b,c),a=a.sibling;}
		function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling;}var X=null,Xj=!1;function Yj(a,b,c){for(c=c.child;null!==c;)Zj(a,b,c),c=c.sibling;}
		function Zj(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c);}catch(h){}switch(c.tag){case 5:U||Lj(c,b);case 6:var d=X,e=Xj;X=null;Yj(a,b,c);X=d;Xj=e;null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Xj;X=c.stateNode.containerInfo;Xj=!0;
		Yj(a,b,c);X=d;Xj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Mj(c,b,g):0!==(f&4)&&Mj(c,b,g));e=e.next;}while(e!==d)}Yj(a,b,c);break;case 1:if(!U&&(Lj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){W(c,b,h);}Yj(a,b,c);break;case 21:Yj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
		c.memoizedState,Yj(a,b,c),U=d):Yj(a,b,c);break;default:Yj(a,b,c);}}function ak(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Kj);b.forEach(function(b){var d=bk.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
		function ck(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Xj=!1;break a;case 3:X=h.stateNode.containerInfo;Xj=!0;break a;case 4:X=h.stateNode.containerInfo;Xj=!0;break a}h=h.return;}if(null===X)throw Error(p(160));Zj(f,g,e);X=null;Xj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){W(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)dk(b,a),b=b.sibling;}
		function dk(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:ck(b,a);ek(a);if(d&4){try{Pj(3,a,a.return),Qj(3,a);}catch(t){W(a,a.return,t);}try{Pj(5,a,a.return);}catch(t){W(a,a.return,t);}}break;case 1:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);break;case 5:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"");}catch(t){W(a,a.return,t);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
		a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l);}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
		f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1));}e[Pf]=f;}catch(t){W(a,a.return,t);}}break;case 6:ck(b,a);ek(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f;}catch(t){W(a,a.return,t);}}break;case 3:ck(b,a);ek(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo);}catch(t){W(a,a.return,t);}break;case 4:ck(b,a);ek(a);break;case 13:ck(b,a);ek(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
		null!==e.alternate&&null!==e.alternate.memoizedState||(fk=B()));d&4&&ak(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,ck(b,a),U=l):ck(b,a);ek(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Pj(4,r,r.return);break;case 1:Lj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
		b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount();}catch(t){W(d,c,t);}}break;case 5:Lj(r,r.return);break;case 22:if(null!==r.memoizedState){gk(q);continue}}null!==y?(y.return=r,V=y):gk(q);}m=m.sibling;}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
		rb("display",g));}catch(t){W(a,a.return,t);}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps;}catch(t){W(a,a.return,t);}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return;}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling;}}break;case 19:ck(b,a);ek(a);d&4&&ak(a);break;case 21:break;default:ck(b,
		a),ek(a);}}function ek(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Tj(c)){var d=c;break a}c=c.return;}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Uj(a);Wj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Uj(a);Vj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function hk(a,b,c){V=a;ik(a);}
		function ik(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Jj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Jj;var l=U;Jj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?jk(e):null!==k?(k.return=g,V=k):jk(e);for(;null!==f;)V=f,ik(f),f=f.sibling;V=e;Jj=h;U=l;}kk(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):kk(a);}}
		function kk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Qj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:Ci(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&sh(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
		b.child.stateNode;break;case 1:c=b.child.stateNode;}sh(b,g,c);}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src);}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
		default:throw Error(p(163));}U||b.flags&512&&Rj(b);}catch(r){W(b,b.return,r);}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}function gk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}
		function jk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Qj(4,b);}catch(k){W(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){W(b,e,k);}}var f=b.return;try{Rj(b);}catch(k){W(b,f,k);}break;case 5:var g=b.return;try{Rj(b);}catch(k){W(b,g,k);}}}catch(k){W(b,b.return,k);}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return;}}
		var lk=Math.ceil,mk=ua.ReactCurrentDispatcher,nk=ua.ReactCurrentOwner,ok=ua.ReactCurrentBatchConfig,K=0,Q=null,Y=null,Z=0,fj=0,ej=Uf(0),T=0,pk=null,rh=0,qk=0,rk=0,sk=null,tk=null,fk=0,Gj=Infinity,uk=null,Oi=!1,Pi=null,Ri=null,vk=!1,wk=null,xk=0,yk=0,zk=null,Ak=-1,Bk=0;function R(){return 0!==(K&6)?B():-1!==Ak?Ak:Ak=B()}
		function yi(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Bk&&(Bk=yc()),Bk;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function gi(a,b,c,d){if(50<yk)throw yk=0,zk=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==Q)a===Q&&(0===(K&2)&&(qk|=c),4===T&&Ck(a,Z)),Dk(a,d),1===c&&0===K&&0===(b.mode&1)&&(Gj=B()+500,fg&&jg());}
		function Dk(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===Q?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Ek.bind(null,a)):hg(Ek.bind(null,a)),Jf(function(){0===(K&6)&&jg();}),c=null;else {switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc;}c=Fk(c,Gk.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
		function Gk(a,b){Ak=-1;Bk=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Hk()&&a.callbackNode!==c)return null;var d=uc(a,a===Q?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ik(a,d);else {b=d;var e=K;K|=2;var f=Jk();if(Q!==a||Z!==b)uk=null,Gj=B()+500,Kk(a,b);do try{Lk();break}catch(h){Mk(a,h);}while(1);$g();mk.current=f;K=e;null!==Y?b=0:(Q=null,Z=0,b=T);}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Nk(a,e)));if(1===b)throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;if(6===b)Ck(a,d);
		else {e=a.current.alternate;if(0===(d&30)&&!Ok(e)&&(b=Ik(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Nk(a,f))),1===b))throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Pk(a,tk,uk);break;case 3:Ck(a,d);if((d&130023424)===d&&(b=fk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){R();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),b);break}Pk(a,tk,uk);break;case 4:Ck(a,d);if((d&4194240)===
		d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*lk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),d);break}Pk(a,tk,uk);break;case 5:Pk(a,tk,uk);break;default:throw Error(p(329));}}}Dk(a,B());return a.callbackNode===c?Gk.bind(null,a):null}
		function Nk(a,b){var c=sk;a.current.memoizedState.isDehydrated&&(Kk(a,b).flags|=256);a=Ik(a,b);2!==a&&(b=tk,tk=c,null!==b&&Fj(b));return a}function Fj(a){null===tk?tk=a:tk.push.apply(tk,a);}
		function Ok(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
		function Ck(a,b){b&=~rk;b&=~qk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d;}}function Ek(a){if(0!==(K&6))throw Error(p(327));Hk();var b=uc(a,0);if(0===(b&1))return Dk(a,B()),null;var c=Ik(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Nk(a,d));}if(1===c)throw c=pk,Kk(a,0),Ck(a,b),Dk(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Pk(a,tk,uk);Dk(a,B());return null}
		function Qk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Gj=B()+500,fg&&jg());}}function Rk(a){null!==wk&&0===wk.tag&&0===(K&6)&&Hk();var b=K;K|=1;var c=ok.transition,d=C;try{if(ok.transition=null,C=1,a)return a()}finally{C=d,ok.transition=c,K=b,0===(K&6)&&jg();}}function Hj(){fj=ej.current;E(ej);}
		function Kk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:zh();E(Wf);E(H);Eh();break;case 5:Bh(d);break;case 4:zh();break;case 13:E(L);break;case 19:E(L);break;case 10:ah(d.type._context);break;case 22:case 23:Hj();}c=c.return;}Q=a;Y=a=Pg(a.current,null);Z=fj=b;T=0;pk=null;rk=qk=rh=0;tk=sk=null;if(null!==fh){for(b=
		0;b<fh.length;b++)if(c=fh[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}fh=null;}return a}
		function Mk(a,b){do{var c=Y;try{$g();Fh.current=Rh;if(Ih){for(var d=M.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Ih=!1;}Hh=0;O=N=M=null;Jh=!1;Kh=0;nk.current=null;if(null===c||null===c.return){T=1;pk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
		m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null);}var y=Ui(g);if(null!==y){y.flags&=-257;Vi(y,g,h,f,b);y.mode&1&&Si(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t;}else n.add(k);break a}else {if(0===(b&1)){Si(f,l,b);tj();break a}k=Error(p(426));}}else if(I&&h.mode&1){var J=Ui(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Vi(J,g,h,f,b);Jg(Ji(k,h));break a}}f=k=Ji(k,h);4!==T&&(T=2);null===sk?sk=[f]:sk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
		b&=-b;f.lanes|=b;var x=Ni(f,k,b);ph(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Ri||!Ri.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Qi(f,h,b);ph(f,F);break a}}f=f.return;}while(null!==f)}Sk(c);}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Jk(){var a=mk.current;mk.current=Rh;return null===a?Rh:a}
		function tj(){if(0===T||3===T||2===T)T=4;null===Q||0===(rh&268435455)&&0===(qk&268435455)||Ck(Q,Z);}function Ik(a,b){var c=K;K|=2;var d=Jk();if(Q!==a||Z!==b)uk=null,Kk(a,b);do try{Tk();break}catch(e){Mk(a,e);}while(1);$g();K=c;mk.current=d;if(null!==Y)throw Error(p(261));Q=null;Z=0;return T}function Tk(){for(;null!==Y;)Uk(Y);}function Lk(){for(;null!==Y&&!cc();)Uk(Y);}function Uk(a){var b=Vk(a.alternate,a,fj);a.memoizedProps=a.pendingProps;null===b?Sk(a):Y=b;nk.current=null;}
		function Sk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Ej(c,b,fj),null!==c){Y=c;return}}else {c=Ij(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===T&&(T=5);}function Pk(a,b,c){var d=C,e=ok.transition;try{ok.transition=null,C=1,Wk(a,b,c,d);}finally{ok.transition=e,C=d;}return null}
		function Wk(a,b,c,d){do Hk();while(null!==wk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===Q&&(Y=Q=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||vk||(vk=!0,Fk(hc,function(){Hk();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=ok.transition;ok.transition=null;
		var g=C;C=1;var h=K;K|=4;nk.current=null;Oj(a,c);dk(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;hk(c);dc();K=h;C=g;ok.transition=f;}else a.current=c;vk&&(vk=!1,wk=a,xk=e);f=a.pendingLanes;0===f&&(Ri=null);mc(c.stateNode);Dk(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Oi)throw Oi=!1,a=Pi,Pi=null,a;0!==(xk&1)&&0!==a.tag&&Hk();f=a.pendingLanes;0!==(f&1)?a===zk?yk++:(yk=0,zk=a):yk=0;jg();return null}
		function Hk(){if(null!==wk){var a=Dc(xk),b=ok.transition,c=C;try{ok.transition=null;C=16>a?16:a;if(null===wk)var d=!1;else {a=wk;wk=null;xk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Pj(8,m,f);}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Sj(m);if(m===
		l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y;}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J;}while(null!==t)}}V=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Pj(9,f,f.return);}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return;}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
		u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Qj(9,h);}}catch(na){W(h,h.return,na);}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return;}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a);}catch(na){}d=!0;}return d}finally{C=c,ok.transition=b;}}return !1}function Xk(a,b,c){b=Ji(c,b);b=Ni(a,b,1);a=nh(a,b,1);b=R();null!==a&&(Ac(a,1,b),Dk(a,b));}
		function W(a,b,c){if(3===a.tag)Xk(a,a,c);else for(;null!==b;){if(3===b.tag){Xk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ri||!Ri.has(d))){a=Ji(c,a);a=Qi(b,a,1);b=nh(b,a,1);a=R();null!==b&&(Ac(b,1,a),Dk(b,a));break}}b=b.return;}}
		function Ti(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=R();a.pingedLanes|=a.suspendedLanes&c;Q===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-fk?Kk(a,0):rk|=c);Dk(a,b);}function Yk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=R();a=ih(a,b);null!==a&&(Ac(a,b,c),Dk(a,c));}function uj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Yk(a,c);}
		function bk(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Yk(a,c);}var Vk;
		Vk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)dh=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return dh=!1,yj(a,b,c);dh=0!==(a.flags&131072)?!0:!1;}else dh=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;ij(a,b);a=b.pendingProps;var e=Yf(b,H.current);ch(b,c);e=Nh(null,b,d,a,e,c);var f=Sh();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
		null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,kh(b),e.updater=Ei,b.stateNode=e,e._reactInternals=b,Ii(b,d,a,c),b=jj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Xi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{ij(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=Zk(d);a=Ci(d,a);switch(e){case 0:b=cj(null,b,d,a,c);break a;case 1:b=hj(null,b,d,a,c);break a;case 11:b=Yi(null,b,d,a,c);break a;case 14:b=$i(null,b,d,Ci(d.type,a),c);break a}throw Error(p(306,
		d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),cj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),hj(a,b,d,e,c);case 3:a:{kj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;lh(a,b);qh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
		f,b.memoizedState=f,b.flags&256){e=Ji(Error(p(423)),b);b=lj(a,b,d,c,e);break a}else if(d!==e){e=Ji(Error(p(424)),b);b=lj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Vg(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ig();if(d===e){b=Zi(a,b,c);break a}Xi(a,b,d,c);}b=b.child;}return b;case 5:return Ah(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
		gj(a,b),Xi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return oj(a,b,c);case 4:return yh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Ug(b,null,d,c):Xi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),Yi(a,b,d,e,c);case 7:return Xi(a,b,b.pendingProps,c),b.child;case 8:return Xi(a,b,b.pendingProps.children,c),b.child;case 12:return Xi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
		g=e.value;G(Wg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=Zi(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=mh(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);bh(f.return,
		c,b);h.lanes|=c;break}k=k.next;}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);bh(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}Xi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,ch(b,c),e=eh(e),d=d(e),b.flags|=1,Xi(a,b,d,c),
		b.child;case 14:return d=b.type,e=Ci(d,b.pendingProps),e=Ci(d.type,e),$i(a,b,d,e,c);case 15:return bj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),ij(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,ch(b,c),Gi(b,d,e),Ii(b,d,e,c),jj(null,b,d,!0,a,c);case 19:return xj(a,b,c);case 22:return dj(a,b,c)}throw Error(p(156,b.tag));};function Fk(a,b){return ac(a,b)}
		function $k(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function Bg(a,b,c,d){return new $k(a,b,c,d)}function aj(a){a=a.prototype;return !(!a||!a.isReactComponent)}
		function Zk(a){if("function"===typeof a)return aj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
		function Pg(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
		c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
		function Rg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)aj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Tg(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return pj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
		break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Tg(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function pj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function Qg(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
		function Sg(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
		function al(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
		null;}function bl(a,b,c,d,e,f,g,h,k){a=new al(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};kh(f);return a}function cl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
		function dl(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
		function el(a,b,c,d,e,f,g,h,k){a=bl(c,d,!0,a,e,f,g,h,k);a.context=dl(null);c=a.current;d=R();e=yi(c);f=mh(d,e);f.callback=void 0!==b&&null!==b?b:null;nh(c,f,e);a.current.lanes=e;Ac(a,e,d);Dk(a,d);return a}function fl(a,b,c,d){var e=b.current,f=R(),g=yi(e);c=dl(c);null===b.context?b.context=c:b.pendingContext=c;b=mh(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=nh(e,b,g);null!==a&&(gi(a,e,g,f),oh(a,e,g));return g}
		function gl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function hl(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function il(a,b){hl(a,b);(a=a.alternate)&&hl(a,b);}function jl(){return null}var kl="function"===typeof reportError?reportError:function(a){console.error(a);};function ll(a){this._internalRoot=a;}
		ml.prototype.render=ll.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));fl(a,b,null,null);};ml.prototype.unmount=ll.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Rk(function(){fl(null,a,null,null);});b[uf]=null;}};function ml(a){this._internalRoot=a;}
		ml.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a);}};function nl(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function ol(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function pl(){}
		function ql(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=gl(g);f.call(a);};}var g=el(b,d,a,0,null,!1,!1,"",pl);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Rk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=gl(k);h.call(a);};}var k=bl(a,0,!1,null,null,!1,!1,"",pl);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Rk(function(){fl(b,k,c,d);});return k}
		function rl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=gl(g);h.call(a);};}fl(b,g,a,e);}else g=ql(c,b,a,e,d);return gl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Dk(b,B()),0===(K&6)&&(Gj=B()+500,jg()));}break;case 13:Rk(function(){var b=ih(a,1);if(null!==b){var c=R();gi(b,a,1,c);}}),il(a,1);}};
		Fc=function(a){if(13===a.tag){var b=ih(a,134217728);if(null!==b){var c=R();gi(b,a,134217728,c);}il(a,134217728);}};Gc=function(a){if(13===a.tag){var b=yi(a),c=ih(a,b);if(null!==c){var d=R();gi(c,a,b,d);}il(a,b);}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};
		yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Qk;Hb=Rk;
		var sl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Qk]},tl={findFiberByHostInstance:Wc,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"};
		var ul={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||
		jl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vl.isDisabled&&vl.supportsFiber)try{kc=vl.inject(ul),lc=vl;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sl;
		reactDom_production_min.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(b))throw Error(p(200));return cl(a,b,null,c)};reactDom_production_min.createRoot=function(a,b){if(!nl(a))throw Error(p(299));var c=!1,d="",e=kl;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=bl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ll(b)};
		reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a){return Rk(a)};reactDom_production_min.hydrate=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!0,c)};
		reactDom_production_min.hydrateRoot=function(a,b,c){if(!nl(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=kl;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=el(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
		e);return new ml(b)};reactDom_production_min.render=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!ol(a))throw Error(p(40));return a._reactRootContainer?(Rk(function(){rl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Qk;
		reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!ol(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return rl(a,b,c,!1,d)};reactDom_production_min.version="18.3.1-next-f1338f8080-20240426";
		return reactDom_production_min;
	}

	var hasRequiredReactDom;

	function requireReactDom () {
		if (hasRequiredReactDom) return reactDom.exports;
		hasRequiredReactDom = 1;

		function checkDCE() {
		  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		  if (
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
		    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
		  ) {
		    return;
		  }
		  try {
		    // Verify that the code above has been dead code eliminated (DCE'd).
		    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
		  } catch (err) {
		    // DevTools shouldn't crash React, no matter what.
		    // We should still report in case we break this code.
		    console.error(err);
		  }
		}

		{
		  // DCE check should happen before ReactDOM bundle executes so that
		  // DevTools can report bad minification during injection.
		  checkDCE();
		  reactDom.exports = requireReactDom_production_min();
		}
		return reactDom.exports;
	}

	var reactDomExports = requireReactDom();
	var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);

	function _assertClassBrand(e, t, n) {
	  if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
	  throw new TypeError("Private element is not present on this object");
	}
	function _assertThisInitialized$1(e) {
	  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  return e;
	}
	function asyncGeneratorStep(n, t, e, r, o, a, c) {
	  try {
	    var i = n[a](c),
	      u = i.value;
	  } catch (n) {
	    return void e(n);
	  }
	  i.done ? t(u) : Promise.resolve(u).then(r, o);
	}
	function _asyncToGenerator(n) {
	  return function () {
	    var t = this,
	      e = arguments;
	    return new Promise(function (r, o) {
	      var a = n.apply(t, e);
	      function _next(n) {
	        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
	      }
	      function _throw(n) {
	        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
	      }
	      _next(void 0);
	    });
	  };
	}
	function _callSuper(t, o, e) {
	  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
	}
	function _checkPrivateRedeclaration(e, t) {
	  if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object");
	}
	function _classCallCheck(a, n) {
	  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
	}
	function _classPrivateMethodInitSpec(e, a) {
	  _checkPrivateRedeclaration(e, a), a.add(e);
	}
	function _defineProperties(e, r) {
	  for (var t = 0; t < r.length; t++) {
	    var o = r[t];
	    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
	  }
	}
	function _createClass(e, r, t) {
	  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
	    writable: !1
	  }), e;
	}
	function _getPrototypeOf(t) {
	  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
	    return t.__proto__ || Object.getPrototypeOf(t);
	  }, _getPrototypeOf(t);
	}
	function _inherits(t, e) {
	  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
	  t.prototype = Object.create(e && e.prototype, {
	    constructor: {
	      value: t,
	      writable: !0,
	      configurable: !0
	    }
	  }), Object.defineProperty(t, "prototype", {
	    writable: !1
	  }), e && _setPrototypeOf(t, e);
	}
	function _isNativeReflectConstruct() {
	  try {
	    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
	  } catch (t) {}
	  return (_isNativeReflectConstruct = function () {
	    return !!t;
	  })();
	}
	function _possibleConstructorReturn(t, e) {
	  if (e && ("object" == typeof e || "function" == typeof e)) return e;
	  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
	  return _assertThisInitialized$1(t);
	}
	function _regeneratorRuntime() {
	  _regeneratorRuntime = function () {
	    return e;
	  };
	  var t,
	    e = {},
	    r = Object.prototype,
	    n = r.hasOwnProperty,
	    o = Object.defineProperty || function (t, e, r) {
	      t[e] = r.value;
	    },
	    i = "function" == typeof Symbol ? Symbol : {},
	    a = i.iterator || "@@iterator",
	    c = i.asyncIterator || "@@asyncIterator",
	    u = i.toStringTag || "@@toStringTag";
	  function define(t, e, r) {
	    return Object.defineProperty(t, e, {
	      value: r,
	      enumerable: !0,
	      configurable: !0,
	      writable: !0
	    }), t[e];
	  }
	  try {
	    define({}, "");
	  } catch (t) {
	    define = function (t, e, r) {
	      return t[e] = r;
	    };
	  }
	  function wrap(t, e, r, n) {
	    var i = e && e.prototype instanceof Generator ? e : Generator,
	      a = Object.create(i.prototype),
	      c = new Context(n || []);
	    return o(a, "_invoke", {
	      value: makeInvokeMethod(t, r, c)
	    }), a;
	  }
	  function tryCatch(t, e, r) {
	    try {
	      return {
	        type: "normal",
	        arg: t.call(e, r)
	      };
	    } catch (t) {
	      return {
	        type: "throw",
	        arg: t
	      };
	    }
	  }
	  e.wrap = wrap;
	  var h = "suspendedStart",
	    l = "suspendedYield",
	    f = "executing",
	    s = "completed",
	    y = {};
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	  var p = {};
	  define(p, a, function () {
	    return this;
	  });
	  var d = Object.getPrototypeOf,
	    v = d && d(d(values([])));
	  v && v !== r && n.call(v, a) && (p = v);
	  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
	  function defineIteratorMethods(t) {
	    ["next", "throw", "return"].forEach(function (e) {
	      define(t, e, function (t) {
	        return this._invoke(e, t);
	      });
	    });
	  }
	  function AsyncIterator(t, e) {
	    function invoke(r, o, i, a) {
	      var c = tryCatch(t[r], t, o);
	      if ("throw" !== c.type) {
	        var u = c.arg,
	          h = u.value;
	        return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
	          invoke("next", t, i, a);
	        }, function (t) {
	          invoke("throw", t, i, a);
	        }) : e.resolve(h).then(function (t) {
	          u.value = t, i(u);
	        }, function (t) {
	          return invoke("throw", t, i, a);
	        });
	      }
	      a(c.arg);
	    }
	    var r;
	    o(this, "_invoke", {
	      value: function (t, n) {
	        function callInvokeWithMethodAndArg() {
	          return new e(function (e, r) {
	            invoke(t, n, e, r);
	          });
	        }
	        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
	      }
	    });
	  }
	  function makeInvokeMethod(e, r, n) {
	    var o = h;
	    return function (i, a) {
	      if (o === f) throw Error("Generator is already running");
	      if (o === s) {
	        if ("throw" === i) throw a;
	        return {
	          value: t,
	          done: !0
	        };
	      }
	      for (n.method = i, n.arg = a;;) {
	        var c = n.delegate;
	        if (c) {
	          var u = maybeInvokeDelegate(c, n);
	          if (u) {
	            if (u === y) continue;
	            return u;
	          }
	        }
	        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
	          if (o === h) throw o = s, n.arg;
	          n.dispatchException(n.arg);
	        } else "return" === n.method && n.abrupt("return", n.arg);
	        o = f;
	        var p = tryCatch(e, r, n);
	        if ("normal" === p.type) {
	          if (o = n.done ? s : l, p.arg === y) continue;
	          return {
	            value: p.arg,
	            done: n.done
	          };
	        }
	        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
	      }
	    };
	  }
	  function maybeInvokeDelegate(e, r) {
	    var n = r.method,
	      o = e.iterator[n];
	    if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
	    var i = tryCatch(o, e.iterator, r.arg);
	    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
	    var a = i.arg;
	    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
	  }
	  function pushTryEntry(t) {
	    var e = {
	      tryLoc: t[0]
	    };
	    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
	  }
	  function resetTryEntry(t) {
	    var e = t.completion || {};
	    e.type = "normal", delete e.arg, t.completion = e;
	  }
	  function Context(t) {
	    this.tryEntries = [{
	      tryLoc: "root"
	    }], t.forEach(pushTryEntry, this), this.reset(!0);
	  }
	  function values(e) {
	    if (e || "" === e) {
	      var r = e[a];
	      if (r) return r.call(e);
	      if ("function" == typeof e.next) return e;
	      if (!isNaN(e.length)) {
	        var o = -1,
	          i = function next() {
	            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
	            return next.value = t, next.done = !0, next;
	          };
	        return i.next = i;
	      }
	    }
	    throw new TypeError(typeof e + " is not iterable");
	  }
	  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
	    value: GeneratorFunctionPrototype,
	    configurable: !0
	  }), o(GeneratorFunctionPrototype, "constructor", {
	    value: GeneratorFunction,
	    configurable: !0
	  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
	    var e = "function" == typeof t && t.constructor;
	    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
	  }, e.mark = function (t) {
	    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
	  }, e.awrap = function (t) {
	    return {
	      __await: t
	    };
	  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
	    return this;
	  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
	    void 0 === i && (i = Promise);
	    var a = new AsyncIterator(wrap(t, r, n, o), i);
	    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
	      return t.done ? t.value : a.next();
	    });
	  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
	    return this;
	  }), define(g, "toString", function () {
	    return "[object Generator]";
	  }), e.keys = function (t) {
	    var e = Object(t),
	      r = [];
	    for (var n in e) r.push(n);
	    return r.reverse(), function next() {
	      for (; r.length;) {
	        var t = r.pop();
	        if (t in e) return next.value = t, next.done = !1, next;
	      }
	      return next.done = !0, next;
	    };
	  }, e.values = values, Context.prototype = {
	    constructor: Context,
	    reset: function (e) {
	      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
	    },
	    stop: function () {
	      this.done = !0;
	      var t = this.tryEntries[0].completion;
	      if ("throw" === t.type) throw t.arg;
	      return this.rval;
	    },
	    dispatchException: function (e) {
	      if (this.done) throw e;
	      var r = this;
	      function handle(n, o) {
	        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
	      }
	      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
	        var i = this.tryEntries[o],
	          a = i.completion;
	        if ("root" === i.tryLoc) return handle("end");
	        if (i.tryLoc <= this.prev) {
	          var c = n.call(i, "catchLoc"),
	            u = n.call(i, "finallyLoc");
	          if (c && u) {
	            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
	            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
	          } else if (c) {
	            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
	          } else {
	            if (!u) throw Error("try statement without catch or finally");
	            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
	          }
	        }
	      }
	    },
	    abrupt: function (t, e) {
	      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
	        var o = this.tryEntries[r];
	        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
	          var i = o;
	          break;
	        }
	      }
	      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
	      var a = i ? i.completion : {};
	      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
	    },
	    complete: function (t, e) {
	      if ("throw" === t.type) throw t.arg;
	      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
	    },
	    finish: function (t) {
	      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
	        var r = this.tryEntries[e];
	        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
	      }
	    },
	    catch: function (t) {
	      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
	        var r = this.tryEntries[e];
	        if (r.tryLoc === t) {
	          var n = r.completion;
	          if ("throw" === n.type) {
	            var o = n.arg;
	            resetTryEntry(r);
	          }
	          return o;
	        }
	      }
	      throw Error("illegal catch attempt");
	    },
	    delegateYield: function (e, r, n) {
	      return this.delegate = {
	        iterator: values(e),
	        resultName: r,
	        nextLoc: n
	      }, "next" === this.method && (this.arg = t), y;
	    }
	  }, e;
	}
	function _setPrototypeOf(t, e) {
	  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
	    return t.__proto__ = e, t;
	  }, _setPrototypeOf(t, e);
	}
	function _toPrimitive(t, r) {
	  if ("object" != typeof t || !t) return t;
	  var e = t[Symbol.toPrimitive];
	  if (void 0 !== e) {
	    var i = e.call(t, r || "default");
	    if ("object" != typeof i) return i;
	    throw new TypeError("@@toPrimitive must return a primitive value.");
	  }
	  return ("string" === r ? String : Number)(t);
	}
	function _toPropertyKey(t) {
	  var i = _toPrimitive(t, "string");
	  return "symbol" == typeof i ? i : i + "";
	}

	/**
	 * @license
	 * Copyright 2010-2023 Three.js Authors
	 * SPDX-License-Identifier: MIT
	 */
	const REVISION = '162';
	const CullFaceNone = 0;
	const CullFaceBack = 1;
	const CullFaceFront = 2;
	const PCFShadowMap = 1;
	const PCFSoftShadowMap = 2;
	const VSMShadowMap = 3;
	const FrontSide = 0;
	const BackSide = 1;
	const DoubleSide = 2;
	const NoBlending = 0;
	const NormalBlending = 1;
	const AdditiveBlending = 2;
	const SubtractiveBlending = 3;
	const MultiplyBlending = 4;
	const CustomBlending = 5;
	const AddEquation = 100;
	const SubtractEquation = 101;
	const ReverseSubtractEquation = 102;
	const MinEquation = 103;
	const MaxEquation = 104;
	const ZeroFactor = 200;
	const OneFactor = 201;
	const SrcColorFactor = 202;
	const OneMinusSrcColorFactor = 203;
	const SrcAlphaFactor = 204;
	const OneMinusSrcAlphaFactor = 205;
	const DstAlphaFactor = 206;
	const OneMinusDstAlphaFactor = 207;
	const DstColorFactor = 208;
	const OneMinusDstColorFactor = 209;
	const SrcAlphaSaturateFactor = 210;
	const ConstantColorFactor = 211;
	const OneMinusConstantColorFactor = 212;
	const ConstantAlphaFactor = 213;
	const OneMinusConstantAlphaFactor = 214;
	const NeverDepth = 0;
	const AlwaysDepth = 1;
	const LessDepth = 2;
	const LessEqualDepth = 3;
	const EqualDepth = 4;
	const GreaterEqualDepth = 5;
	const GreaterDepth = 6;
	const NotEqualDepth = 7;
	const MultiplyOperation = 0;
	const MixOperation = 1;
	const AddOperation = 2;
	const NoToneMapping = 0;
	const LinearToneMapping = 1;
	const ReinhardToneMapping = 2;
	const CineonToneMapping = 3;
	const ACESFilmicToneMapping = 4;
	const CustomToneMapping = 5;
	const AgXToneMapping = 6;
	const NeutralToneMapping = 7;

	const UVMapping = 300;
	const CubeReflectionMapping = 301;
	const CubeRefractionMapping = 302;
	const EquirectangularReflectionMapping = 303;
	const EquirectangularRefractionMapping = 304;
	const CubeUVReflectionMapping = 306;
	const RepeatWrapping = 1000;
	const ClampToEdgeWrapping = 1001;
	const MirroredRepeatWrapping = 1002;
	const NearestFilter = 1003;
	const NearestMipmapNearestFilter = 1004;
	const NearestMipMapNearestFilter = 1004;
	const NearestMipmapLinearFilter = 1005;
	const NearestMipMapLinearFilter = 1005;
	const LinearFilter = 1006;
	const LinearMipmapNearestFilter = 1007;
	const LinearMipMapNearestFilter = 1007;
	const LinearMipmapLinearFilter = 1008;
	const LinearMipMapLinearFilter = 1008;
	const UnsignedByteType = 1009;
	const ByteType = 1010;
	const ShortType = 1011;
	const UnsignedShortType = 1012;
	const IntType = 1013;
	const UnsignedIntType = 1014;
	const FloatType = 1015;
	const HalfFloatType = 1016;
	const UnsignedShort4444Type = 1017;
	const UnsignedShort5551Type = 1018;
	const UnsignedInt248Type = 1020;
	const AlphaFormat = 1021;
	const RGBAFormat = 1023;
	const LuminanceFormat = 1024;
	const LuminanceAlphaFormat = 1025;
	const DepthFormat = 1026;
	const DepthStencilFormat = 1027;
	const RedFormat = 1028;
	const RedIntegerFormat = 1029;
	const RGFormat = 1030;
	const RGIntegerFormat = 1031;
	const RGBAIntegerFormat = 1033;

	const RGB_S3TC_DXT1_Format = 33776;
	const RGBA_S3TC_DXT1_Format = 33777;
	const RGBA_S3TC_DXT3_Format = 33778;
	const RGBA_S3TC_DXT5_Format = 33779;
	const RGB_PVRTC_4BPPV1_Format = 35840;
	const RGB_PVRTC_2BPPV1_Format = 35841;
	const RGBA_PVRTC_4BPPV1_Format = 35842;
	const RGBA_PVRTC_2BPPV1_Format = 35843;
	const RGB_ETC1_Format = 36196;
	const RGB_ETC2_Format = 37492;
	const RGBA_ETC2_EAC_Format = 37496;
	const RGBA_ASTC_4x4_Format = 37808;
	const RGBA_ASTC_5x4_Format = 37809;
	const RGBA_ASTC_5x5_Format = 37810;
	const RGBA_ASTC_6x5_Format = 37811;
	const RGBA_ASTC_6x6_Format = 37812;
	const RGBA_ASTC_8x5_Format = 37813;
	const RGBA_ASTC_8x6_Format = 37814;
	const RGBA_ASTC_8x8_Format = 37815;
	const RGBA_ASTC_10x5_Format = 37816;
	const RGBA_ASTC_10x6_Format = 37817;
	const RGBA_ASTC_10x8_Format = 37818;
	const RGBA_ASTC_10x10_Format = 37819;
	const RGBA_ASTC_12x10_Format = 37820;
	const RGBA_ASTC_12x12_Format = 37821;
	const RGBA_BPTC_Format = 36492;
	const RGB_BPTC_SIGNED_Format = 36494;
	const RGB_BPTC_UNSIGNED_Format = 36495;
	const RED_RGTC1_Format = 36283;
	const SIGNED_RED_RGTC1_Format = 36284;
	const RED_GREEN_RGTC2_Format = 36285;
	const SIGNED_RED_GREEN_RGTC2_Format = 36286;
	const BasicDepthPacking = 3200;
	const RGBADepthPacking = 3201;
	const TangentSpaceNormalMap = 0;
	const ObjectSpaceNormalMap = 1;

	// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
	const NoColorSpace = '';
	const SRGBColorSpace = 'srgb';
	const LinearSRGBColorSpace = 'srgb-linear';
	const DisplayP3ColorSpace = 'display-p3';
	const LinearDisplayP3ColorSpace = 'display-p3-linear';

	const LinearTransfer = 'linear';
	const SRGBTransfer = 'srgb';

	const Rec709Primaries = 'rec709';
	const P3Primaries = 'p3';
	const KeepStencilOp = 7680;
	const AlwaysStencilFunc = 519;

	const NeverCompare = 512;
	const LessCompare = 513;
	const EqualCompare = 514;
	const LessEqualCompare = 515;
	const GreaterCompare = 516;
	const NotEqualCompare = 517;
	const GreaterEqualCompare = 518;
	const AlwaysCompare = 519;

	const StaticDrawUsage = 35044;
	const GLSL3 = '300 es';

	const _SRGBAFormat = 1035; // fallback for WebGL 1

	const WebGLCoordinateSystem = 2000;
	const WebGPUCoordinateSystem = 2001;

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	class EventDispatcher {

		addEventListener( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			const listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		}

		hasEventListener( type, listener ) {

			if ( this._listeners === undefined ) return false;

			const listeners = this._listeners;

			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

		}

		removeEventListener( type, listener ) {

			if ( this._listeners === undefined ) return;

			const listeners = this._listeners;
			const listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				const index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		}

		dispatchEvent( event ) {

			if ( this._listeners === undefined ) return;

			const listeners = this._listeners;
			const listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				// Make a copy, in case listeners are removed while iterating.
				const array = listenerArray.slice( 0 );

				for ( let i = 0, l = array.length; i < l; i ++ ) {

					array[ i ].call( this, event );

				}

				event.target = null;

			}

		}

	}

	const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];


	const DEG2RAD = Math.PI / 180;
	const RAD2DEG = 180 / Math.PI;

	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
	function generateUUID() {

		const d0 = Math.random() * 0xffffffff | 0;
		const d1 = Math.random() * 0xffffffff | 0;
		const d2 = Math.random() * 0xffffffff | 0;
		const d3 = Math.random() * 0xffffffff | 0;
		const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
				_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
				_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
				_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

		// .toLowerCase() here flattens concatenated strings to save heap memory space.
		return uuid.toLowerCase();

	}

	function clamp$1( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	}

	// compute euclidean modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation
	function euclideanModulo( n, m ) {

		return ( ( n % m ) + m ) % m;

	}

	// https://en.wikipedia.org/wiki/Linear_interpolation
	function lerp$1( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	}

	function isPowerOfTwo( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	}

	function floorPowerOfTwo( value ) {

		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

	}

	function denormalize( value, array ) {

		switch ( array.constructor ) {

			case Float32Array:

				return value;

			case Uint32Array:

				return value / 4294967295.0;

			case Uint16Array:

				return value / 65535.0;

			case Uint8Array:

				return value / 255.0;

			case Int32Array:

				return Math.max( value / 2147483647.0, - 1.0 );

			case Int16Array:

				return Math.max( value / 32767.0, - 1.0 );

			case Int8Array:

				return Math.max( value / 127.0, - 1.0 );

			default:

				throw new Error( 'Invalid component type.' );

		}

	}

	function normalize$1( value, array ) {

		switch ( array.constructor ) {

			case Float32Array:

				return value;

			case Uint32Array:

				return Math.round( value * 4294967295.0 );

			case Uint16Array:

				return Math.round( value * 65535.0 );

			case Uint8Array:

				return Math.round( value * 255.0 );

			case Int32Array:

				return Math.round( value * 2147483647.0 );

			case Int16Array:

				return Math.round( value * 32767.0 );

			case Int8Array:

				return Math.round( value * 127.0 );

			default:

				throw new Error( 'Invalid component type.' );

		}

	}

	let Vector2$1 = class Vector2 {

		constructor( x = 0, y = 0 ) {

			Vector2.prototype.isVector2 = true;

			this.x = x;
			this.y = y;

		}

		get width() {

			return this.x;

		}

		set width( value ) {

			this.x = value;

		}

		get height() {

			return this.y;

		}

		set height( value ) {

			this.y = value;

		}

		set( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		}

		setScalar( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		}

		setX( x ) {

			this.x = x;

			return this;

		}

		setY( y ) {

			this.y = y;

			return this;

		}

		setComponent( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		}

		getComponent( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		}

		clone() {

			return new this.constructor( this.x, this.y );

		}

		copy( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		}

		add( v ) {

			this.x += v.x;
			this.y += v.y;

			return this;

		}

		addScalar( s ) {

			this.x += s;
			this.y += s;

			return this;

		}

		addVectors( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		}

		addScaledVector( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		}

		sub( v ) {

			this.x -= v.x;
			this.y -= v.y;

			return this;

		}

		subScalar( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		}

		subVectors( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		}

		multiply( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		}

		multiplyScalar( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		}

		divide( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		}

		divideScalar( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		}

		applyMatrix3( m ) {

			const x = this.x, y = this.y;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		}

		min( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		}

		max( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		}

		clamp( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		}

		clampScalar( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

			return this;

		}

		clampLength( min, max ) {

			const length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		}

		floor() {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		}

		ceil() {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		}

		round() {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		}

		roundToZero() {

			this.x = Math.trunc( this.x );
			this.y = Math.trunc( this.y );

			return this;

		}

		negate() {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		}

		dot( v ) {

			return this.x * v.x + this.y * v.y;

		}

		cross( v ) {

			return this.x * v.y - this.y * v.x;

		}

		lengthSq() {

			return this.x * this.x + this.y * this.y;

		}

		length() {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		}

		manhattanLength() {

			return Math.abs( this.x ) + Math.abs( this.y );

		}

		normalize() {

			return this.divideScalar( this.length() || 1 );

		}

		angle() {

			// computes the angle in radians with respect to the positive x-axis

			const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

			return angle;

		}

		angleTo( v ) {

			const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) return Math.PI / 2;

			const theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( clamp$1( theta, - 1, 1 ) );

		}

		distanceTo( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		}

		distanceToSquared( v ) {

			const dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		}

		manhattanDistanceTo( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		}

		setLength( length ) {

			return this.normalize().multiplyScalar( length );

		}

		lerp( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		}

		lerpVectors( v1, v2, alpha ) {

			this.x = v1.x + ( v2.x - v1.x ) * alpha;
			this.y = v1.y + ( v2.y - v1.y ) * alpha;

			return this;

		}

		equals( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		}

		fromArray( array, offset = 0 ) {

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );

			return this;

		}

		rotateAround( center, angle ) {

			const c = Math.cos( angle ), s = Math.sin( angle );

			const x = this.x - center.x;
			const y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

		random() {

			this.x = Math.random();
			this.y = Math.random();

			return this;

		}

		*[ Symbol.iterator ]() {

			yield this.x;
			yield this.y;

		}

	};

	class Matrix3 {

		constructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			Matrix3.prototype.isMatrix3 = true;

			this.elements = [

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			];

			if ( n11 !== undefined ) {

				this.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );

			}

		}

		set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			const te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		}

		identity() {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		}

		copy( m ) {

			const te = this.elements;
			const me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		}

		extractBasis( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrix3Column( this, 0 );
			yAxis.setFromMatrix3Column( this, 1 );
			zAxis.setFromMatrix3Column( this, 2 );

			return this;

		}

		setFromMatrix4( m ) {

			const me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		}

		multiply( m ) {

			return this.multiplyMatrices( this, m );

		}

		premultiply( m ) {

			return this.multiplyMatrices( m, this );

		}

		multiplyMatrices( a, b ) {

			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;

			const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		}

		multiplyScalar( s ) {

			const te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		}

		determinant() {

			const te = this.elements;

			const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		}

		invert() {

			const te = this.elements,

				n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
				n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
				n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

			const detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		}

		transpose() {

			let tmp;
			const m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		}

		getNormalMatrix( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).invert().transpose();

		}

		transposeIntoArray( r ) {

			const m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		}

		setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

			const c = Math.cos( rotation );
			const s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

			return this;

		}

		//

		scale( sx, sy ) {

			this.premultiply( _m3.makeScale( sx, sy ) );

			return this;

		}

		rotate( theta ) {

			this.premultiply( _m3.makeRotation( - theta ) );

			return this;

		}

		translate( tx, ty ) {

			this.premultiply( _m3.makeTranslation( tx, ty ) );

			return this;

		}

		// for 2D Transforms

		makeTranslation( x, y ) {

			if ( x.isVector2 ) {

				this.set(

					1, 0, x.x,
					0, 1, x.y,
					0, 0, 1

				);

			} else {

				this.set(

					1, 0, x,
					0, 1, y,
					0, 0, 1

				);

			}

			return this;

		}

		makeRotation( theta ) {

			// counterclockwise

			const c = Math.cos( theta );
			const s = Math.sin( theta );

			this.set(

				c, - s, 0,
				s, c, 0,
				0, 0, 1

			);

			return this;

		}

		makeScale( x, y ) {

			this.set(

				x, 0, 0,
				0, y, 0,
				0, 0, 1

			);

			return this;

		}

		//

		equals( matrix ) {

			const te = this.elements;
			const me = matrix.elements;

			for ( let i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		}

		fromArray( array, offset = 0 ) {

			for ( let i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		}

		toArray( array = [], offset = 0 ) {

			const te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		}

		clone() {

			return new this.constructor().fromArray( this.elements );

		}

	}

	const _m3 = /*@__PURE__*/ new Matrix3();

	function arrayNeedsUint32( array ) {

		// assumes larger values usually on last

		for ( let i = array.length - 1; i >= 0; -- i ) {

			if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

		}

		return false;

	}

	function createElementNS( name ) {

		return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

	}

	function createCanvasElement() {

		const canvas = createElementNS( 'canvas' );
		canvas.style.display = 'block';
		return canvas;

	}

	const _cache = {};

	function warnOnce( message ) {

		if ( message in _cache ) return;

		_cache[ message ] = true;

		console.warn( message );

	}

	/**
	 * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping
	 * or clipping. Based on W3C specifications for sRGB and Display P3,
	 * and ICC specifications for the D50 connection space. Values in/out
	 * are _linear_ sRGB and _linear_ Display P3.
	 *
	 * Note that both sRGB and Display P3 use the sRGB transfer functions.
	 *
	 * Reference:
	 * - http://www.russellcottrell.com/photo/matrixCalculator.htm
	 */

	const LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().set(
		0.8224621, 0.177538, 0.0,
		0.0331941, 0.9668058, 0.0,
		0.0170827, 0.0723974, 0.9105199,
	);

	const LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().set(
		1.2249401, - 0.2249404, 0.0,
		- 0.0420569, 1.0420571, 0.0,
		- 0.0196376, - 0.0786361, 1.0982735
	);

	/**
	 * Defines supported color spaces by transfer function and primaries,
	 * and provides conversions to/from the Linear-sRGB reference space.
	 */
	const COLOR_SPACES = {
		[ LinearSRGBColorSpace ]: {
			transfer: LinearTransfer,
			primaries: Rec709Primaries,
			toReference: ( color ) => color,
			fromReference: ( color ) => color,
		},
		[ SRGBColorSpace ]: {
			transfer: SRGBTransfer,
			primaries: Rec709Primaries,
			toReference: ( color ) => color.convertSRGBToLinear(),
			fromReference: ( color ) => color.convertLinearToSRGB(),
		},
		[ LinearDisplayP3ColorSpace ]: {
			transfer: LinearTransfer,
			primaries: P3Primaries,
			toReference: ( color ) => color.applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),
			fromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ),
		},
		[ DisplayP3ColorSpace ]: {
			transfer: SRGBTransfer,
			primaries: P3Primaries,
			toReference: ( color ) => color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),
			fromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB(),
		},
	};

	const SUPPORTED_WORKING_COLOR_SPACES = new Set( [ LinearSRGBColorSpace, LinearDisplayP3ColorSpace ] );

	const ColorManagement = {

		enabled: true,

		_workingColorSpace: LinearSRGBColorSpace,

		get workingColorSpace() {

			return this._workingColorSpace;

		},

		set workingColorSpace( colorSpace ) {

			if ( ! SUPPORTED_WORKING_COLOR_SPACES.has( colorSpace ) ) {

				throw new Error( `Unsupported working color space, "${ colorSpace }".` );

			}

			this._workingColorSpace = colorSpace;

		},

		convert: function ( color, sourceColorSpace, targetColorSpace ) {

			if ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

				return color;

			}

			const sourceToReference = COLOR_SPACES[ sourceColorSpace ].toReference;
			const targetFromReference = COLOR_SPACES[ targetColorSpace ].fromReference;

			return targetFromReference( sourceToReference( color ) );

		},

		fromWorkingColorSpace: function ( color, targetColorSpace ) {

			return this.convert( color, this._workingColorSpace, targetColorSpace );

		},

		toWorkingColorSpace: function ( color, sourceColorSpace ) {

			return this.convert( color, sourceColorSpace, this._workingColorSpace );

		},

		getPrimaries: function ( colorSpace ) {

			return COLOR_SPACES[ colorSpace ].primaries;

		},

		getTransfer: function ( colorSpace ) {

			if ( colorSpace === NoColorSpace ) return LinearTransfer;

			return COLOR_SPACES[ colorSpace ].transfer;

		},

	};


	function SRGBToLinear( c ) {

		return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

	}

	function LinearToSRGB( c ) {

		return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

	}

	let _canvas;

	class ImageUtils {

		static getDataURL( image ) {

			if ( /^data:/i.test( image.src ) ) {

				return image.src;

			}

			if ( typeof HTMLCanvasElement === 'undefined' ) {

				return image.src;

			}

			let canvas;

			if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

				_canvas.width = image.width;
				_canvas.height = image.height;

				const context = _canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

				canvas = _canvas;

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

		static sRGBToLinear( image ) {

			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

				const canvas = createElementNS( 'canvas' );

				canvas.width = image.width;
				canvas.height = image.height;

				const context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height );

				const imageData = context.getImageData( 0, 0, image.width, image.height );
				const data = imageData.data;

				for ( let i = 0; i < data.length; i ++ ) {

					data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;

				}

				context.putImageData( imageData, 0, 0 );

				return canvas;

			} else if ( image.data ) {

				const data = image.data.slice( 0 );

				for ( let i = 0; i < data.length; i ++ ) {

					if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

						data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );

					} else {

						// assuming float

						data[ i ] = SRGBToLinear( data[ i ] );

					}

				}

				return {
					data: data,
					width: image.width,
					height: image.height
				};

			} else {

				console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
				return image;

			}

		}

	}

	let _sourceId = 0;

	class Source {

		constructor( data = null ) {

			this.isSource = true;

			Object.defineProperty( this, 'id', { value: _sourceId ++ } );

			this.uuid = generateUUID();

			this.data = data;
			this.dataReady = true;

			this.version = 0;

		}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

		toJSON( meta ) {

			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

				return meta.images[ this.uuid ];

			}

			const output = {
				uuid: this.uuid,
				url: ''
			};

			const data = this.data;

			if ( data !== null ) {

				let url;

				if ( Array.isArray( data ) ) {

					// cube texture

					url = [];

					for ( let i = 0, l = data.length; i < l; i ++ ) {

						if ( data[ i ].isDataTexture ) {

							url.push( serializeImage( data[ i ].image ) );

						} else {

							url.push( serializeImage( data[ i ] ) );

						}

					}

				} else {

					// texture

					url = serializeImage( data );

				}

				output.url = url;

			}

			if ( ! isRootObject ) {

				meta.images[ this.uuid ] = output;

			}

			return output;

		}

	}

	function serializeImage( image ) {

		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

			// default images

			return ImageUtils.getDataURL( image );

		} else {

			if ( image.data ) {

				// images of DataTexture

				return {
					data: Array.from( image.data ),
					width: image.width,
					height: image.height,
					type: image.data.constructor.name
				};

			} else {

				console.warn( 'THREE.Texture: Unable to serialize Texture.' );
				return {};

			}

		}

	}

	let _textureId = 0;

	let Texture$1 = class Texture extends EventDispatcher {

		constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {

			super();

			this.isTexture = true;

			Object.defineProperty( this, 'id', { value: _textureId ++ } );

			this.uuid = generateUUID();

			this.name = '';

			this.source = new Source( image );
			this.mipmaps = [];

			this.mapping = mapping;
			this.channel = 0;

			this.wrapS = wrapS;
			this.wrapT = wrapT;

			this.magFilter = magFilter;
			this.minFilter = minFilter;

			this.anisotropy = anisotropy;

			this.format = format;
			this.internalFormat = null;
			this.type = type;

			this.offset = new Vector2$1( 0, 0 );
			this.repeat = new Vector2$1( 1, 1 );
			this.center = new Vector2$1( 0, 0 );
			this.rotation = 0;

			this.matrixAutoUpdate = true;
			this.matrix = new Matrix3();

			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

			this.colorSpace = colorSpace;

			this.userData = {};

			this.version = 0;
			this.onUpdate = null;

			this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
			this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

		}

		get image() {

			return this.source.data;

		}

		set image( value = null ) {

			this.source.data = value;

		}

		updateMatrix() {

			this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			this.name = source.name;

			this.source = source.source;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;
			this.channel = source.channel;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.internalFormat = source.internalFormat;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.colorSpace = source.colorSpace;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			this.needsUpdate = true;

			return this;

		}

		toJSON( meta ) {

			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			const output = {

				metadata: {
					version: 4.6,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				image: this.source.toJSON( meta ).uuid,

				mapping: this.mapping,
				channel: this.channel,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,

				wrap: [ this.wrapS, this.wrapT ],

				format: this.format,
				internalFormat: this.internalFormat,
				type: this.type,
				colorSpace: this.colorSpace,

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY,

				generateMipmaps: this.generateMipmaps,
				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment

			};

			if ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;

			if ( ! isRootObject ) {

				meta.textures[ this.uuid ] = output;

			}

			return output;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

		transformUv( uv ) {

			if ( this.mapping !== UVMapping ) return uv;

			uv.applyMatrix3( this.matrix );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}

						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}

						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

			return uv;

		}

		set needsUpdate( value ) {

			if ( value === true ) {

				this.version ++;
				this.source.needsUpdate = true;

			}

		}

	};

	Texture$1.DEFAULT_IMAGE = null;
	Texture$1.DEFAULT_MAPPING = UVMapping;
	Texture$1.DEFAULT_ANISOTROPY = 1;

	class Vector4 {

		constructor( x = 0, y = 0, z = 0, w = 1 ) {

			Vector4.prototype.isVector4 = true;

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

		}

		get width() {

			return this.z;

		}

		set width( value ) {

			this.z = value;

		}

		get height() {

			return this.w;

		}

		set height( value ) {

			this.w = value;

		}

		set( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		}

		setScalar( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		}

		setX( x ) {

			this.x = x;

			return this;

		}

		setY( y ) {

			this.y = y;

			return this;

		}

		setZ( z ) {

			this.z = z;

			return this;

		}

		setW( w ) {

			this.w = w;

			return this;

		}

		setComponent( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		}

		getComponent( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		}

		clone() {

			return new this.constructor( this.x, this.y, this.z, this.w );

		}

		copy( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		}

		add( v ) {

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		}

		addScalar( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		}

		addVectors( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		}

		addScaledVector( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		}

		sub( v ) {

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		}

		subScalar( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		}

		subVectors( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		}

		multiply( v ) {

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			this.w *= v.w;

			return this;

		}

		multiplyScalar( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		}

		applyMatrix4( m ) {

			const x = this.x, y = this.y, z = this.z, w = this.w;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		}

		divideScalar( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		}

		setAxisAngleFromQuaternion( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			const s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		}

		setAxisAngleFromRotationMatrix( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			let angle, x, y, z; // variables for result
			const epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				const xx = ( m11 + 1 ) / 2;
				const yy = ( m22 + 1 ) / 2;
				const zz = ( m33 + 1 ) / 2;
				const xy = ( m12 + m21 ) / 4;
				const xz = ( m13 + m31 ) / 4;
				const yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				( m13 - m31 ) * ( m13 - m31 ) +
				( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		}

		min( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		}

		max( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		}

		clamp( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		}

		clampScalar( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

			return this;

		}

		clampLength( min, max ) {

			const length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		}

		floor() {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		}

		ceil() {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		}

		round() {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		}

		roundToZero() {

			this.x = Math.trunc( this.x );
			this.y = Math.trunc( this.y );
			this.z = Math.trunc( this.z );
			this.w = Math.trunc( this.w );

			return this;

		}

		negate() {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		}

		dot( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		}

		lengthSq() {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		}

		length() {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		}

		manhattanLength() {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		}

		normalize() {

			return this.divideScalar( this.length() || 1 );

		}

		setLength( length ) {

			return this.normalize().multiplyScalar( length );

		}

		lerp( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		}

		lerpVectors( v1, v2, alpha ) {

			this.x = v1.x + ( v2.x - v1.x ) * alpha;
			this.y = v1.y + ( v2.y - v1.y ) * alpha;
			this.z = v1.z + ( v2.z - v1.z ) * alpha;
			this.w = v1.w + ( v2.w - v1.w ) * alpha;

			return this;

		}

		equals( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		}

		fromArray( array, offset = 0 ) {

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		}

		random() {

			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();
			this.w = Math.random();

			return this;

		}

		*[ Symbol.iterator ]() {

			yield this.x;
			yield this.y;
			yield this.z;
			yield this.w;

		}

	}

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	class RenderTarget extends EventDispatcher {

		constructor( width = 1, height = 1, options = {} ) {

			super();

			this.isRenderTarget = true;

			this.width = width;
			this.height = height;
			this.depth = 1;

			this.scissor = new Vector4( 0, 0, width, height );
			this.scissorTest = false;

			this.viewport = new Vector4( 0, 0, width, height );

			const image = { width: width, height: height, depth: 1 };

			options = Object.assign( {
				generateMipmaps: false,
				internalFormat: null,
				minFilter: LinearFilter,
				depthBuffer: true,
				stencilBuffer: false,
				depthTexture: null,
				samples: 0,
				count: 1
			}, options );

			const texture = new Texture$1( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

			texture.flipY = false;
			texture.generateMipmaps = options.generateMipmaps;
			texture.internalFormat = options.internalFormat;

			this.textures = [];

			const count = options.count;
			for ( let i = 0; i < count; i ++ ) {

				this.textures[ i ] = texture.clone();
				this.textures[ i ].isRenderTargetTexture = true;

			}

			this.depthBuffer = options.depthBuffer;
			this.stencilBuffer = options.stencilBuffer;

			this.depthTexture = options.depthTexture;

			this.samples = options.samples;

		}

		get texture() {

			return this.textures[ 0 ];

		}

		set texture( value ) {

			this.textures[ 0 ] = value;

		}

		setSize( width, height, depth = 1 ) {

			if ( this.width !== width || this.height !== height || this.depth !== depth ) {

				this.width = width;
				this.height = height;
				this.depth = depth;

				for ( let i = 0, il = this.textures.length; i < il; i ++ ) {

					this.textures[ i ].image.width = width;
					this.textures[ i ].image.height = height;
					this.textures[ i ].image.depth = depth;

				}

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			this.width = source.width;
			this.height = source.height;
			this.depth = source.depth;

			this.scissor.copy( source.scissor );
			this.scissorTest = source.scissorTest;

			this.viewport.copy( source.viewport );

			this.textures.length = 0;

			for ( let i = 0, il = source.textures.length; i < il; i ++ ) {

				this.textures[ i ] = source.textures[ i ].clone();
				this.textures[ i ].isRenderTargetTexture = true;

			}

			// ensure image object is not shared, see #20328

			const image = Object.assign( {}, source.texture.image );
			this.texture.source = new Source( image );

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;

			if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

			this.samples = source.samples;

			return this;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

	}

	class WebGLRenderTarget extends RenderTarget {

		constructor( width = 1, height = 1, options = {} ) {

			super( width, height, options );

			this.isWebGLRenderTarget = true;

		}

	}

	class DataArrayTexture extends Texture$1 {

		constructor( data = null, width = 1, height = 1, depth = 1 ) {

			super( null );

			this.isDataArrayTexture = true;

			this.image = { data, width, height, depth };

			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;

			this.wrapR = ClampToEdgeWrapping;

			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;

		}

	}

	class Data3DTexture extends Texture$1 {

		constructor( data = null, width = 1, height = 1, depth = 1 ) {

			// We're going to add .setXXX() methods for setting properties later.
			// Users can still set in DataTexture3D directly.
			//
			//	const texture = new THREE.DataTexture3D( data, width, height, depth );
			// 	texture.anisotropy = 16;
			//
			// See #14839

			super( null );

			this.isData3DTexture = true;

			this.image = { data, width, height, depth };

			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;

			this.wrapR = ClampToEdgeWrapping;

			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;

		}

	}

	class Quaternion {

		constructor( x = 0, y = 0, z = 0, w = 1 ) {

			this.isQuaternion = true;

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

		}

		static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			let x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ];

			const x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( t === 0 ) {

				dst[ dstOffset + 0 ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;
				return;

			}

			if ( t === 1 ) {

				dst[ dstOffset + 0 ] = x1;
				dst[ dstOffset + 1 ] = y1;
				dst[ dstOffset + 2 ] = z1;
				dst[ dstOffset + 3 ] = w1;
				return;

			}

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				let s = 1 - t;
				const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					const sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				const tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

		static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

			const x0 = src0[ srcOffset0 ];
			const y0 = src0[ srcOffset0 + 1 ];
			const z0 = src0[ srcOffset0 + 2 ];
			const w0 = src0[ srcOffset0 + 3 ];

			const x1 = src1[ srcOffset1 ];
			const y1 = src1[ srcOffset1 + 1 ];
			const z1 = src1[ srcOffset1 + 2 ];
			const w1 = src1[ srcOffset1 + 3 ];

			dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
			dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
			dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
			dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

			return dst;

		}

		get x() {

			return this._x;

		}

		set x( value ) {

			this._x = value;
			this._onChangeCallback();

		}

		get y() {

			return this._y;

		}

		set y( value ) {

			this._y = value;
			this._onChangeCallback();

		}

		get z() {

			return this._z;

		}

		set z( value ) {

			this._z = value;
			this._onChangeCallback();

		}

		get w() {

			return this._w;

		}

		set w( value ) {

			this._w = value;
			this._onChangeCallback();

		}

		set( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;

		}

		clone() {

			return new this.constructor( this._x, this._y, this._z, this._w );

		}

		copy( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;

		}

		setFromEuler( euler, update = true ) {

			const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			const cos = Math.cos;
			const sin = Math.sin;

			const c1 = cos( x / 2 );
			const c2 = cos( y / 2 );
			const c3 = cos( z / 2 );

			const s1 = sin( x / 2 );
			const s2 = sin( y / 2 );
			const s3 = sin( z / 2 );

			switch ( order ) {

				case 'XYZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'YXZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'ZXY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'ZYX':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'YZX':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'XZY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				default:
					console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

			}

			if ( update === true ) this._onChangeCallback();

			return this;

		}

		setFromAxisAngle( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			const halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this._onChangeCallback();

			return this;

		}

		setFromRotationMatrix( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			const te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33;

			if ( trace > 0 ) {

				const s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this._onChangeCallback();

			return this;

		}

		setFromUnitVectors( vFrom, vTo ) {

			// assumes direction vectors vFrom and vTo are normalized

			let r = vFrom.dot( vTo ) + 1;

			if ( r < Number.EPSILON ) {

				// vFrom and vTo point in opposite directions

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					this._x = - vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;

				} else {

					this._x = 0;
					this._y = - vFrom.z;
					this._z = vFrom.y;
					this._w = r;

				}

			} else {

				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;

			}

			return this.normalize();

		}

		angleTo( q ) {

			return 2 * Math.acos( Math.abs( clamp$1( this.dot( q ), - 1, 1 ) ) );

		}

		rotateTowards( q, step ) {

			const angle = this.angleTo( q );

			if ( angle === 0 ) return this;

			const t = Math.min( 1, step / angle );

			this.slerp( q, t );

			return this;

		}

		identity() {

			return this.set( 0, 0, 0, 1 );

		}

		invert() {

			// quaternion is assumed to have unit length

			return this.conjugate();

		}

		conjugate() {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this._onChangeCallback();

			return this;

		}

		dot( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		}

		lengthSq() {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		}

		length() {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		}

		normalize() {

			let l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this._onChangeCallback();

			return this;

		}

		multiply( q ) {

			return this.multiplyQuaternions( this, q );

		}

		premultiply( q ) {

			return this.multiplyQuaternions( q, this );

		}

		multiplyQuaternions( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;

		}

		slerp( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			const x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if ( sqrSinHalfTheta <= Number.EPSILON ) {

				const s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;

				this.normalize(); // normalize calls _onChangeCallback()

				return this;

			}

			const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this._onChangeCallback();

			return this;

		}

		slerpQuaternions( qa, qb, t ) {

			return this.copy( qa ).slerp( qb, t );

		}

		random() {

			// sets this quaternion to a uniform random unit quaternnion

			// Ken Shoemake
			// Uniform random rotations
			// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.

			const theta1 = 2 * Math.PI * Math.random();
			const theta2 = 2 * Math.PI * Math.random();

			const x0 = Math.random();
			const r1 = Math.sqrt( 1 - x0 );
			const r2 = Math.sqrt( x0 );

			return this.set(
				r1 * Math.sin( theta1 ),
				r1 * Math.cos( theta1 ),
				r2 * Math.sin( theta2 ),
				r2 * Math.cos( theta2 ),
			);

		}

		equals( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		}

		fromArray( array, offset = 0 ) {

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this._onChangeCallback();

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this._x = attribute.getX( index );
			this._y = attribute.getY( index );
			this._z = attribute.getZ( index );
			this._w = attribute.getW( index );

			this._onChangeCallback();

			return this;

		}

		toJSON() {

			return this.toArray();

		}

		_onChange( callback ) {

			this._onChangeCallback = callback;

			return this;

		}

		_onChangeCallback() {}

		*[ Symbol.iterator ]() {

			yield this._x;
			yield this._y;
			yield this._z;
			yield this._w;

		}

	}

	class Vector3 {

		constructor( x = 0, y = 0, z = 0 ) {

			Vector3.prototype.isVector3 = true;

			this.x = x;
			this.y = y;
			this.z = z;

		}

		set( x, y, z ) {

			if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		}

		setScalar( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		}

		setX( x ) {

			this.x = x;

			return this;

		}

		setY( y ) {

			this.y = y;

			return this;

		}

		setZ( z ) {

			this.z = z;

			return this;

		}

		setComponent( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		}

		getComponent( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		}

		clone() {

			return new this.constructor( this.x, this.y, this.z );

		}

		copy( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		}

		add( v ) {

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		}

		addScalar( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		}

		addVectors( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		}

		addScaledVector( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		}

		sub( v ) {

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		}

		subScalar( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		}

		subVectors( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		}

		multiply( v ) {

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		}

		multiplyScalar( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		}

		multiplyVectors( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		}

		applyEuler( euler ) {

			return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

		}

		applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

		}

		applyMatrix3( m ) {

			const x = this.x, y = this.y, z = this.z;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		}

		applyNormalMatrix( m ) {

			return this.applyMatrix3( m ).normalize();

		}

		applyMatrix4( m ) {

			const x = this.x, y = this.y, z = this.z;
			const e = m.elements;

			const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		}

		applyQuaternion( q ) {

			// quaternion q is assumed to have unit length

			const vx = this.x, vy = this.y, vz = this.z;
			const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// t = 2 * cross( q.xyz, v );
			const tx = 2 * ( qy * vz - qz * vy );
			const ty = 2 * ( qz * vx - qx * vz );
			const tz = 2 * ( qx * vy - qy * vx );

			// v + q.w * t + cross( q.xyz, t );
			this.x = vx + qw * tx + qy * tz - qz * ty;
			this.y = vy + qw * ty + qz * tx - qx * tz;
			this.z = vz + qw * tz + qx * ty - qy * tx;

			return this;

		}

		project( camera ) {

			return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

		}

		unproject( camera ) {

			return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

		}

		transformDirection( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			const x = this.x, y = this.y, z = this.z;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		}

		divide( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		}

		divideScalar( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		}

		min( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		}

		max( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		}

		clamp( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		}

		clampScalar( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

			return this;

		}

		clampLength( min, max ) {

			const length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		}

		floor() {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		}

		ceil() {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		}

		round() {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		}

		roundToZero() {

			this.x = Math.trunc( this.x );
			this.y = Math.trunc( this.y );
			this.z = Math.trunc( this.z );

			return this;

		}

		negate() {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		}

		dot( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		}

		// TODO lengthSquared?

		lengthSq() {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		}

		length() {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		}

		manhattanLength() {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		}

		normalize() {

			return this.divideScalar( this.length() || 1 );

		}

		setLength( length ) {

			return this.normalize().multiplyScalar( length );

		}

		lerp( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		}

		lerpVectors( v1, v2, alpha ) {

			this.x = v1.x + ( v2.x - v1.x ) * alpha;
			this.y = v1.y + ( v2.y - v1.y ) * alpha;
			this.z = v1.z + ( v2.z - v1.z ) * alpha;

			return this;

		}

		cross( v ) {

			return this.crossVectors( this, v );

		}

		crossVectors( a, b ) {

			const ax = a.x, ay = a.y, az = a.z;
			const bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		}

		projectOnVector( v ) {

			const denominator = v.lengthSq();

			if ( denominator === 0 ) return this.set( 0, 0, 0 );

			const scalar = v.dot( this ) / denominator;

			return this.copy( v ).multiplyScalar( scalar );

		}

		projectOnPlane( planeNormal ) {

			_vector$c.copy( this ).projectOnVector( planeNormal );

			return this.sub( _vector$c );

		}

		reflect( normal ) {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			return this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		}

		angleTo( v ) {

			const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) return Math.PI / 2;

			const theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( clamp$1( theta, - 1, 1 ) );

		}

		distanceTo( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		}

		distanceToSquared( v ) {

			const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		}

		manhattanDistanceTo( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		}

		setFromSpherical( s ) {

			return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

		}

		setFromSphericalCoords( radius, phi, theta ) {

			const sinPhiRadius = Math.sin( phi ) * radius;

			this.x = sinPhiRadius * Math.sin( theta );
			this.y = Math.cos( phi ) * radius;
			this.z = sinPhiRadius * Math.cos( theta );

			return this;

		}

		setFromCylindrical( c ) {

			return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

		}

		setFromCylindricalCoords( radius, theta, y ) {

			this.x = radius * Math.sin( theta );
			this.y = y;
			this.z = radius * Math.cos( theta );

			return this;

		}

		setFromMatrixPosition( m ) {

			const e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		}

		setFromMatrixScale( m ) {

			const sx = this.setFromMatrixColumn( m, 0 ).length();
			const sy = this.setFromMatrixColumn( m, 1 ).length();
			const sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		}

		setFromMatrixColumn( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		}

		setFromMatrix3Column( m, index ) {

			return this.fromArray( m.elements, index * 3 );

		}

		setFromEuler( e ) {

			this.x = e._x;
			this.y = e._y;
			this.z = e._z;

			return this;

		}

		setFromColor( c ) {

			this.x = c.r;
			this.y = c.g;
			this.z = c.b;

			return this;

		}

		equals( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		}

		fromArray( array, offset = 0 ) {

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		}

		random() {

			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();

			return this;

		}

		randomDirection() {

			// https://mathworld.wolfram.com/SpherePointPicking.html

			const theta = Math.random() * Math.PI * 2;
			const u = Math.random() * 2 - 1;
			const c = Math.sqrt( 1 - u * u );

			this.x = c * Math.cos( theta );
			this.y = u;
			this.z = c * Math.sin( theta );

			return this;

		}

		*[ Symbol.iterator ]() {

			yield this.x;
			yield this.y;
			yield this.z;

		}

	}

	const _vector$c = /*@__PURE__*/ new Vector3();
	const _quaternion$4 = /*@__PURE__*/ new Quaternion();

	class Box3 {

		constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

			this.isBox3 = true;

			this.min = min;
			this.max = max;

		}

		set( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		}

		setFromArray( array ) {

			this.makeEmpty();

			for ( let i = 0, il = array.length; i < il; i += 3 ) {

				this.expandByPoint( _vector$b.fromArray( array, i ) );

			}

			return this;

		}

		setFromBufferAttribute( attribute ) {

			this.makeEmpty();

			for ( let i = 0, il = attribute.count; i < il; i ++ ) {

				this.expandByPoint( _vector$b.fromBufferAttribute( attribute, i ) );

			}

			return this;

		}

		setFromPoints( points ) {

			this.makeEmpty();

			for ( let i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		}

		setFromCenterAndSize( center, size ) {

			const halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		}

		setFromObject( object, precise = false ) {

			this.makeEmpty();

			return this.expandByObject( object, precise );

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		}

		makeEmpty() {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		}

		isEmpty() {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		}

		getCenter( target ) {

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		}

		getSize( target ) {

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

		}

		expandByPoint( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		}

		expandByVector( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		}

		expandByScalar( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		}

		expandByObject( object, precise = false ) {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			object.updateWorldMatrix( false, false );

			const geometry = object.geometry;

			if ( geometry !== undefined ) {

				const positionAttribute = geometry.getAttribute( 'position' );

				// precise AABB computation based on vertex data requires at least a position attribute.
				// instancing isn't supported so far and uses the normal (conservative) code path.

				if ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {

					for ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {

						if ( object.isMesh === true ) {

							object.getVertexPosition( i, _vector$b );

						} else {

							_vector$b.fromBufferAttribute( positionAttribute, i );

						}

						_vector$b.applyMatrix4( object.matrixWorld );
						this.expandByPoint( _vector$b );

					}

				} else {

					if ( object.boundingBox !== undefined ) {

						// object-level bounding box

						if ( object.boundingBox === null ) {

							object.computeBoundingBox();

						}

						_box$4.copy( object.boundingBox );


					} else {

						// geometry-level bounding box

						if ( geometry.boundingBox === null ) {

							geometry.computeBoundingBox();

						}

						_box$4.copy( geometry.boundingBox );

					}

					_box$4.applyMatrix4( object.matrixWorld );

					this.union( _box$4 );

				}

			}

			const children = object.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				this.expandByObject( children[ i ], precise );

			}

			return this;

		}

		containsPoint( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;

		}

		containsBox( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;

		}

		getParameter( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		}

		intersectsBox( box ) {

			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

		}

		intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, _vector$b );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		}

		intersectsPlane( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			let min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= - plane.constant && max >= - plane.constant );

		}

		intersectsTriangle( triangle ) {

			if ( this.isEmpty() ) {

				return false;

			}

			// compute box center and extents
			this.getCenter( _center );
			_extents.subVectors( this.max, _center );

			// translate triangle to aabb origin
			_v0$2.subVectors( triangle.a, _center );
			_v1$7.subVectors( triangle.b, _center );
			_v2$4.subVectors( triangle.c, _center );

			// compute edge vectors for triangle
			_f0.subVectors( _v1$7, _v0$2 );
			_f1.subVectors( _v2$4, _v1$7 );
			_f2.subVectors( _v0$2, _v2$4 );

			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
			let axes = [
				0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
				_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
				- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
			];
			if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

				return false;

			}

			// test 3 face normals from the aabb
			axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
			if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

				return false;

			}

			// finally testing the face normal of the triangle
			// use already existing triangle edge vectors here
			_triangleNormal.crossVectors( _f0, _f1 );
			axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

			return satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );

		}

		clampPoint( point, target ) {

			return target.copy( point ).clamp( this.min, this.max );

		}

		distanceToPoint( point ) {

			return this.clampPoint( point, _vector$b ).distanceTo( point );

		}

		getBoundingSphere( target ) {

			if ( this.isEmpty() ) {

				target.makeEmpty();

			} else {

				this.getCenter( target.center );

				target.radius = this.getSize( _vector$b ).length() * 0.5;

			}

			return target;

		}

		intersect( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if ( this.isEmpty() ) this.makeEmpty();

			return this;

		}

		union( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		}

		applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) return this;

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

			this.setFromPoints( _points );

			return this;

		}

		translate( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		}

		equals( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	}

	const _points = [
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3()
	];

	const _vector$b = /*@__PURE__*/ new Vector3();

	const _box$4 = /*@__PURE__*/ new Box3();

	// triangle centered vertices

	const _v0$2 = /*@__PURE__*/ new Vector3();
	const _v1$7 = /*@__PURE__*/ new Vector3();
	const _v2$4 = /*@__PURE__*/ new Vector3();

	// triangle edge vectors

	const _f0 = /*@__PURE__*/ new Vector3();
	const _f1 = /*@__PURE__*/ new Vector3();
	const _f2 = /*@__PURE__*/ new Vector3();

	const _center = /*@__PURE__*/ new Vector3();
	const _extents = /*@__PURE__*/ new Vector3();
	const _triangleNormal = /*@__PURE__*/ new Vector3();
	const _testAxis = /*@__PURE__*/ new Vector3();

	function satForAxes( axes, v0, v1, v2, extents ) {

		for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

			_testAxis.fromArray( axes, i );
			// project the aabb onto the separating axis
			const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
			// project all 3 vertices of the triangle onto the separating axis
			const p0 = v0.dot( _testAxis );
			const p1 = v1.dot( _testAxis );
			const p2 = v2.dot( _testAxis );
			// actual test, basically see if either of the most extreme of the triangle points intersects r
			if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

				// points of the projected triangle are outside the projected half-length of the aabb
				// the axis is separating and we can exit
				return false;

			}

		}

		return true;

	}

	const _box$3 = /*@__PURE__*/ new Box3();
	const _v1$6 = /*@__PURE__*/ new Vector3();
	const _v2$3 = /*@__PURE__*/ new Vector3();

	class Sphere {

		constructor( center = new Vector3(), radius = - 1 ) {

			this.isSphere = true;

			this.center = center;
			this.radius = radius;

		}

		set( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		}

		setFromPoints( points, optionalCenter ) {

			const center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				_box$3.setFromPoints( points ).getCenter( center );

			}

			let maxRadiusSq = 0;

			for ( let i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		}

		copy( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		}

		isEmpty() {

			return ( this.radius < 0 );

		}

		makeEmpty() {

			this.center.set( 0, 0, 0 );
			this.radius = - 1;

			return this;

		}

		containsPoint( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		}

		distanceToPoint( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		}

		intersectsSphere( sphere ) {

			const radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		}

		intersectsBox( box ) {

			return box.intersectsSphere( this );

		}

		intersectsPlane( plane ) {

			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

		}

		clampPoint( point, target ) {

			const deltaLengthSq = this.center.distanceToSquared( point );

			target.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				target.sub( this.center ).normalize();
				target.multiplyScalar( this.radius ).add( this.center );

			}

			return target;

		}

		getBoundingBox( target ) {

			if ( this.isEmpty() ) {

				// Empty sphere produces empty bounding box
				target.makeEmpty();
				return target;

			}

			target.set( this.center, this.center );
			target.expandByScalar( this.radius );

			return target;

		}

		applyMatrix4( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		}

		translate( offset ) {

			this.center.add( offset );

			return this;

		}

		expandByPoint( point ) {

			if ( this.isEmpty() ) {

				this.center.copy( point );

				this.radius = 0;

				return this;

			}

			_v1$6.subVectors( point, this.center );

			const lengthSq = _v1$6.lengthSq();

			if ( lengthSq > ( this.radius * this.radius ) ) {

				// calculate the minimal sphere

				const length = Math.sqrt( lengthSq );

				const delta = ( length - this.radius ) * 0.5;

				this.center.addScaledVector( _v1$6, delta / length );

				this.radius += delta;

			}

			return this;

		}

		union( sphere ) {

			if ( sphere.isEmpty() ) {

				return this;

			}

			if ( this.isEmpty() ) {

				this.copy( sphere );

				return this;

			}

			if ( this.center.equals( sphere.center ) === true ) {

				 this.radius = Math.max( this.radius, sphere.radius );

			} else {

				_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );

				this.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );

				this.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );

			}

			return this;

		}

		equals( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	const _vector$a = /*@__PURE__*/ new Vector3();
	const _segCenter = /*@__PURE__*/ new Vector3();
	const _segDir = /*@__PURE__*/ new Vector3();
	const _diff = /*@__PURE__*/ new Vector3();

	const _edge1 = /*@__PURE__*/ new Vector3();
	const _edge2 = /*@__PURE__*/ new Vector3();
	const _normal$1 = /*@__PURE__*/ new Vector3();

	class Ray {

		constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {

			this.origin = origin;
			this.direction = direction;

		}

		set( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		}

		copy( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		}

		at( t, target ) {

			return target.copy( this.origin ).addScaledVector( this.direction, t );

		}

		lookAt( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		}

		recast( t ) {

			this.origin.copy( this.at( t, _vector$a ) );

			return this;

		}

		closestPointToPoint( point, target ) {

			target.subVectors( point, this.origin );

			const directionDistance = target.dot( this.direction );

			if ( directionDistance < 0 ) {

				return target.copy( this.origin );

			}

			return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );

		}

		distanceToPoint( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		}

		distanceSqToPoint( point ) {

			const directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			_vector$a.copy( this.origin ).addScaledVector( this.direction, directionDistance );

			return _vector$a.distanceToSquared( point );

		}

		distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			_segDir.copy( v1 ).sub( v0 ).normalize();
			_diff.copy( this.origin ).sub( _segCenter );

			const segExtent = v0.distanceTo( v1 ) * 0.5;
			const a01 = - this.direction.dot( _segDir );
			const b0 = _diff.dot( this.direction );
			const b1 = - _diff.dot( _segDir );
			const c = _diff.lengthSq();
			const det = Math.abs( 1 - a01 * a01 );
			let s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							const invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );

			}

			return sqrDist;

		}

		intersectSphere( sphere, target ) {

			_vector$a.subVectors( sphere.center, this.origin );
			const tca = _vector$a.dot( this.direction );
			const d2 = _vector$a.dot( _vector$a ) - tca * tca;
			const radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			const thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			const t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			const t1 = tca + thc;

			// test to see if t1 is behind the ray - if so, return null
			if ( t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, target );

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, target );

		}

		intersectsSphere( sphere ) {

			return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

		}

		distanceToPlane( plane ) {

			const denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t : null;

		}

		intersectPlane( plane, target ) {

			const t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, target );

		}

		intersectsPlane( plane ) {

			// check if the ray lies on the plane first

			const distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			const denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		}

		intersectBox( box, target ) {

			let tmin, tmax, tymin, tymax, tzmin, tzmax;

			const invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			const origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;

			if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, target );

		}

		intersectsBox( box ) {

			return this.intersectBox( box, _vector$a ) !== null;

		}

		intersectTriangle( a, b, c, backfaceCulling, target ) {

			// Compute the offset origin, edges, and normal.

			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			_edge1.subVectors( b, a );
			_edge2.subVectors( c, a );
			_normal$1.crossVectors( _edge1, _edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			let DdN = this.direction.dot( _normal$1 );
			let sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			_diff.subVectors( this.origin, a );
			const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			const QdN = - sign * _diff.dot( _normal$1 );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, target );

		}

		applyMatrix4( matrix4 ) {

			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );

			return this;

		}

		equals( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	class Matrix4 {

		constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			Matrix4.prototype.isMatrix4 = true;

			this.elements = [

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			];

			if ( n11 !== undefined ) {

				this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

			}

		}

		set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			const te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		}

		identity() {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		}

		clone() {

			return new Matrix4().fromArray( this.elements );

		}

		copy( m ) {

			const te = this.elements;
			const me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		}

		copyPosition( m ) {

			const te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		}

		setFromMatrix3( m ) {

			const me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ], 0,
				me[ 1 ], me[ 4 ], me[ 7 ], 0,
				me[ 2 ], me[ 5 ], me[ 8 ], 0,
				0, 0, 0, 1

			);

			return this;

		}

		extractBasis( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		}

		makeBasis( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		}

		extractRotation( m ) {

			// this method does not support reflection matrices

			const te = this.elements;
			const me = m.elements;

			const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
			const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
			const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;
			te[ 3 ] = 0;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;
			te[ 7 ] = 0;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;
			te[ 11 ] = 0;

			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		}

		makeRotationFromEuler( euler ) {

			const te = this.elements;

			const x = euler.x, y = euler.y, z = euler.z;
			const a = Math.cos( x ), b = Math.sin( x );
			const c = Math.cos( y ), d = Math.sin( y );
			const e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				const ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				const ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				const ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				const ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// bottom row
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// last column
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		}

		makeRotationFromQuaternion( q ) {

			return this.compose( _zero, q, _one );

		}

		lookAt( eye, target, up ) {

			const te = this.elements;

			_z.subVectors( eye, target );

			if ( _z.lengthSq() === 0 ) {

				// eye and target are in the same position

				_z.z = 1;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

			if ( _x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					_z.x += 0.0001;

				} else {

					_z.z += 0.0001;

				}

				_z.normalize();
				_x.crossVectors( up, _z );

			}

			_x.normalize();
			_y.crossVectors( _z, _x );

			te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
			te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
			te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

			return this;

		}

		multiply( m ) {

			return this.multiplyMatrices( this, m );

		}

		premultiply( m ) {

			return this.multiplyMatrices( m, this );

		}

		multiplyMatrices( a, b ) {

			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;

			const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		}

		multiplyScalar( s ) {

			const te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		}

		determinant() {

			const te = this.elements;

			const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		}

		transpose() {

			const te = this.elements;
			let tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		}

		setPosition( x, y, z ) {

			const te = this.elements;

			if ( x.isVector3 ) {

				te[ 12 ] = x.x;
				te[ 13 ] = x.y;
				te[ 14 ] = x.z;

			} else {

				te[ 12 ] = x;
				te[ 13 ] = y;
				te[ 14 ] = z;

			}

			return this;

		}

		invert() {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			const te = this.elements,

				n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
				n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
				n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
				n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

			const detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		}

		scale( v ) {

			const te = this.elements;
			const x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		}

		getMaxScaleOnAxis() {

			const te = this.elements;

			const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		}

		makeTranslation( x, y, z ) {

			if ( x.isVector3 ) {

				this.set(

					1, 0, 0, x.x,
					0, 1, 0, x.y,
					0, 0, 1, x.z,
					0, 0, 0, 1

				);

			} else {

				this.set(

					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1

				);

			}

			return this;

		}

		makeRotationX( theta ) {

			const c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeRotationY( theta ) {

			const c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		}

		makeRotationZ( theta ) {

			const c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeRotationAxis( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			const c = Math.cos( angle );
			const s = Math.sin( angle );
			const t = 1 - c;
			const x = axis.x, y = axis.y, z = axis.z;
			const tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeScale( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeShear( xy, xz, yx, yz, zx, zy ) {

			this.set(

				1, yx, zx, 0,
				xy, 1, zy, 0,
				xz, yz, 1, 0,
				0, 0, 0, 1

			);

			return this;

		}

		compose( position, quaternion, scale ) {

			const te = this.elements;

			const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			const x2 = x + x,	y2 = y + y, z2 = z + z;
			const xx = x * x2, xy = x * y2, xz = x * z2;
			const yy = y * y2, yz = y * z2, zz = z * z2;
			const wx = w * x2, wy = w * y2, wz = w * z2;

			const sx = scale.x, sy = scale.y, sz = scale.z;

			te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
			te[ 1 ] = ( xy + wz ) * sx;
			te[ 2 ] = ( xz - wy ) * sx;
			te[ 3 ] = 0;

			te[ 4 ] = ( xy - wz ) * sy;
			te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
			te[ 6 ] = ( yz + wx ) * sy;
			te[ 7 ] = 0;

			te[ 8 ] = ( xz + wy ) * sz;
			te[ 9 ] = ( yz - wx ) * sz;
			te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
			te[ 11 ] = 0;

			te[ 12 ] = position.x;
			te[ 13 ] = position.y;
			te[ 14 ] = position.z;
			te[ 15 ] = 1;

			return this;

		}

		decompose( position, quaternion, scale ) {

			const te = this.elements;

			let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			const det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			_m1$4.copy( this );

			const invSX = 1 / sx;
			const invSY = 1 / sy;
			const invSZ = 1 / sz;

			_m1$4.elements[ 0 ] *= invSX;
			_m1$4.elements[ 1 ] *= invSX;
			_m1$4.elements[ 2 ] *= invSX;

			_m1$4.elements[ 4 ] *= invSY;
			_m1$4.elements[ 5 ] *= invSY;
			_m1$4.elements[ 6 ] *= invSY;

			_m1$4.elements[ 8 ] *= invSZ;
			_m1$4.elements[ 9 ] *= invSZ;
			_m1$4.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( _m1$4 );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		}

		makePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

			const te = this.elements;
			const x = 2 * near / ( right - left );
			const y = 2 * near / ( top - bottom );

			const a = ( right + left ) / ( right - left );
			const b = ( top + bottom ) / ( top - bottom );

			let c, d;

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				c = - ( far + near ) / ( far - near );
				d = ( - 2 * far * near ) / ( far - near );

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				c = - far / ( far - near );
				d = ( - far * near ) / ( far - near );

			} else {

				throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

			}

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		}

		makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

			const te = this.elements;
			const w = 1.0 / ( right - left );
			const h = 1.0 / ( top - bottom );
			const p = 1.0 / ( far - near );

			const x = ( right + left ) * w;
			const y = ( top + bottom ) * h;

			let z, zInv;

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				z = ( far + near ) * p;
				zInv = - 2 * p;

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				z = near * p;
				zInv = - 1 * p;

			} else {

				throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

			}

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
			te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
			te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
			te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

			return this;

		}

		equals( matrix ) {

			const te = this.elements;
			const me = matrix.elements;

			for ( let i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		}

		fromArray( array, offset = 0 ) {

			for ( let i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		}

		toArray( array = [], offset = 0 ) {

			const te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	}

	const _v1$5 = /*@__PURE__*/ new Vector3();
	const _m1$4 = /*@__PURE__*/ new Matrix4();
	const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
	const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
	const _x = /*@__PURE__*/ new Vector3();
	const _y = /*@__PURE__*/ new Vector3();
	const _z = /*@__PURE__*/ new Vector3();

	const _matrix$2 = /*@__PURE__*/ new Matrix4();
	const _quaternion$3 = /*@__PURE__*/ new Quaternion();

	class Euler {

		constructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {

			this.isEuler = true;

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;

		}

		get x() {

			return this._x;

		}

		set x( value ) {

			this._x = value;
			this._onChangeCallback();

		}

		get y() {

			return this._y;

		}

		set y( value ) {

			this._y = value;
			this._onChangeCallback();

		}

		get z() {

			return this._z;

		}

		set z( value ) {

			this._z = value;
			this._onChangeCallback();

		}

		get order() {

			return this._order;

		}

		set order( value ) {

			this._order = value;
			this._onChangeCallback();

		}

		set( x, y, z, order = this._order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;

			this._onChangeCallback();

			return this;

		}

		clone() {

			return new this.constructor( this._x, this._y, this._z, this._order );

		}

		copy( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;

		}

		setFromRotationMatrix( m, order = this._order, update = true ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			const te = m.elements;
			const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			switch ( order ) {

				case 'XYZ':

					this._y = Math.asin( clamp$1( m13, - 1, 1 ) );

					if ( Math.abs( m13 ) < 0.9999999 ) {

						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );

					} else {

						this._x = Math.atan2( m32, m22 );
						this._z = 0;

					}

					break;

				case 'YXZ':

					this._x = Math.asin( - clamp$1( m23, - 1, 1 ) );

					if ( Math.abs( m23 ) < 0.9999999 ) {

						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );

					} else {

						this._y = Math.atan2( - m31, m11 );
						this._z = 0;

					}

					break;

				case 'ZXY':

					this._x = Math.asin( clamp$1( m32, - 1, 1 ) );

					if ( Math.abs( m32 ) < 0.9999999 ) {

						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );

					} else {

						this._y = 0;
						this._z = Math.atan2( m21, m11 );

					}

					break;

				case 'ZYX':

					this._y = Math.asin( - clamp$1( m31, - 1, 1 ) );

					if ( Math.abs( m31 ) < 0.9999999 ) {

						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );

					} else {

						this._x = 0;
						this._z = Math.atan2( - m12, m22 );

					}

					break;

				case 'YZX':

					this._z = Math.asin( clamp$1( m21, - 1, 1 ) );

					if ( Math.abs( m21 ) < 0.9999999 ) {

						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );

					} else {

						this._x = 0;
						this._y = Math.atan2( m13, m33 );

					}

					break;

				case 'XZY':

					this._z = Math.asin( - clamp$1( m12, - 1, 1 ) );

					if ( Math.abs( m12 ) < 0.9999999 ) {

						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );

					} else {

						this._x = Math.atan2( - m23, m33 );
						this._y = 0;

					}

					break;

				default:

					console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

			}

			this._order = order;

			if ( update === true ) this._onChangeCallback();

			return this;

		}

		setFromQuaternion( q, order, update ) {

			_matrix$2.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( _matrix$2, order, update );

		}

		setFromVector3( v, order = this._order ) {

			return this.set( v.x, v.y, v.z, order );

		}

		reorder( newOrder ) {

			// WARNING: this discards revolution information -bhouston

			_quaternion$3.setFromEuler( this );

			return this.setFromQuaternion( _quaternion$3, newOrder );

		}

		equals( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		}

		fromArray( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this._onChangeCallback();

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		}

		_onChange( callback ) {

			this._onChangeCallback = callback;

			return this;

		}

		_onChangeCallback() {}

		*[ Symbol.iterator ]() {

			yield this._x;
			yield this._y;
			yield this._z;
			yield this._order;

		}

	}

	Euler.DEFAULT_ORDER = 'XYZ';

	class Layers {

		constructor() {

			this.mask = 1 | 0;

		}

		set( channel ) {

			this.mask = ( 1 << channel | 0 ) >>> 0;

		}

		enable( channel ) {

			this.mask |= 1 << channel | 0;

		}

		enableAll() {

			this.mask = 0xffffffff | 0;

		}

		toggle( channel ) {

			this.mask ^= 1 << channel | 0;

		}

		disable( channel ) {

			this.mask &= ~ ( 1 << channel | 0 );

		}

		disableAll() {

			this.mask = 0;

		}

		test( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

		isEnabled( channel ) {

			return ( this.mask & ( 1 << channel | 0 ) ) !== 0;

		}

	}

	let _object3DId = 0;

	const _v1$4 = /*@__PURE__*/ new Vector3();
	const _q1 = /*@__PURE__*/ new Quaternion();
	const _m1$3 = /*@__PURE__*/ new Matrix4();
	const _target = /*@__PURE__*/ new Vector3();

	const _position$3 = /*@__PURE__*/ new Vector3();
	const _scale$2 = /*@__PURE__*/ new Vector3();
	const _quaternion$2 = /*@__PURE__*/ new Quaternion();

	const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
	const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
	const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

	const _addedEvent = { type: 'added' };
	const _removedEvent = { type: 'removed' };

	const _childaddedEvent = { type: 'childadded', child: null };
	const _childremovedEvent = { type: 'childremoved', child: null };

	class Object3D extends EventDispatcher {

		constructor() {

			super();

			this.isObject3D = true;

			Object.defineProperty( this, 'id', { value: _object3DId ++ } );

			this.uuid = generateUUID();

			this.name = '';
			this.type = 'Object3D';

			this.parent = null;
			this.children = [];

			this.up = Object3D.DEFAULT_UP.clone();

			const position = new Vector3();
			const rotation = new Euler();
			const quaternion = new Quaternion();
			const scale = new Vector3( 1, 1, 1 );

			function onRotationChange() {

				quaternion.setFromEuler( rotation, false );

			}

			function onQuaternionChange() {

				rotation.setFromQuaternion( quaternion, undefined, false );

			}

			rotation._onChange( onRotationChange );
			quaternion._onChange( onQuaternionChange );

			Object.defineProperties( this, {
				position: {
					configurable: true,
					enumerable: true,
					value: position
				},
				rotation: {
					configurable: true,
					enumerable: true,
					value: rotation
				},
				quaternion: {
					configurable: true,
					enumerable: true,
					value: quaternion
				},
				scale: {
					configurable: true,
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			} );

			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();

			this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;

			this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer
			this.matrixWorldNeedsUpdate = false;

			this.layers = new Layers();
			this.visible = true;

			this.castShadow = false;
			this.receiveShadow = false;

			this.frustumCulled = true;
			this.renderOrder = 0;

			this.animations = [];

			this.userData = {};

		}

		onBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

		onAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}

		onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

		onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

		applyMatrix4( matrix ) {

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			this.matrix.premultiply( matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		}

		applyQuaternion( q ) {

			this.quaternion.premultiply( q );

			return this;

		}

		setRotationFromAxisAngle( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		}

		setRotationFromEuler( euler ) {

			this.quaternion.setFromEuler( euler, true );

		}

		setRotationFromMatrix( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		}

		setRotationFromQuaternion( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		}

		rotateOnAxis( axis, angle ) {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( _q1 );

			return this;

		}

		rotateOnWorldAxis( axis, angle ) {

			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.premultiply( _q1 );

			return this;

		}

		rotateX( angle ) {

			return this.rotateOnAxis( _xAxis, angle );

		}

		rotateY( angle ) {

			return this.rotateOnAxis( _yAxis, angle );

		}

		rotateZ( angle ) {

			return this.rotateOnAxis( _zAxis, angle );

		}

		translateOnAxis( axis, distance ) {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			_v1$4.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( _v1$4.multiplyScalar( distance ) );

			return this;

		}

		translateX( distance ) {

			return this.translateOnAxis( _xAxis, distance );

		}

		translateY( distance ) {

			return this.translateOnAxis( _yAxis, distance );

		}

		translateZ( distance ) {

			return this.translateOnAxis( _zAxis, distance );

		}

		localToWorld( vector ) {

			this.updateWorldMatrix( true, false );

			return vector.applyMatrix4( this.matrixWorld );

		}

		worldToLocal( vector ) {

			this.updateWorldMatrix( true, false );

			return vector.applyMatrix4( _m1$3.copy( this.matrixWorld ).invert() );

		}

		lookAt( x, y, z ) {

			// This method does not support objects having non-uniformly-scaled parent(s)

			if ( x.isVector3 ) {

				_target.copy( x );

			} else {

				_target.set( x, y, z );

			}

			const parent = this.parent;

			this.updateWorldMatrix( true, false );

			_position$3.setFromMatrixPosition( this.matrixWorld );

			if ( this.isCamera || this.isLight ) {

				_m1$3.lookAt( _position$3, _target, this.up );

			} else {

				_m1$3.lookAt( _target, _position$3, this.up );

			}

			this.quaternion.setFromRotationMatrix( _m1$3 );

			if ( parent ) {

				_m1$3.extractRotation( parent.matrixWorld );
				_q1.setFromRotationMatrix( _m1$3 );
				this.quaternion.premultiply( _q1.invert() );

			}

		}

		add( object ) {

			if ( arguments.length > 1 ) {

				for ( let i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
				return this;

			}

			if ( object && object.isObject3D ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				this.children.push( object );

				object.dispatchEvent( _addedEvent );

				_childaddedEvent.child = object;
				this.dispatchEvent( _childaddedEvent );
				_childaddedEvent.child = null;

			} else {

				console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

			}

			return this;

		}

		remove( object ) {

			if ( arguments.length > 1 ) {

				for ( let i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

				return this;

			}

			const index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;
				this.children.splice( index, 1 );

				object.dispatchEvent( _removedEvent );

				_childremovedEvent.child = object;
				this.dispatchEvent( _childremovedEvent );
				_childremovedEvent.child = null;

			}

			return this;

		}

		removeFromParent() {

			const parent = this.parent;

			if ( parent !== null ) {

				parent.remove( this );

			}

			return this;

		}

		clear() {

			return this.remove( ... this.children );

		}

		attach( object ) {

			// adds object as a child of this, while maintaining the object's world transform

			// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

			this.updateWorldMatrix( true, false );

			_m1$3.copy( this.matrixWorld ).invert();

			if ( object.parent !== null ) {

				object.parent.updateWorldMatrix( true, false );

				_m1$3.multiply( object.parent.matrixWorld );

			}

			object.applyMatrix4( _m1$3 );

			this.add( object );

			object.updateWorldMatrix( false, true );

			return this;

		}

		getObjectById( id ) {

			return this.getObjectByProperty( 'id', id );

		}

		getObjectByName( name ) {

			return this.getObjectByProperty( 'name', name );

		}

		getObjectByProperty( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( let i = 0, l = this.children.length; i < l; i ++ ) {

				const child = this.children[ i ];
				const object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		}

		getObjectsByProperty( name, value, result = [] ) {

			if ( this[ name ] === value ) result.push( this );

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].getObjectsByProperty( name, value, result );

			}

			return result;

		}

		getWorldPosition( target ) {

			this.updateWorldMatrix( true, false );

			return target.setFromMatrixPosition( this.matrixWorld );

		}

		getWorldQuaternion( target ) {

			this.updateWorldMatrix( true, false );

			this.matrixWorld.decompose( _position$3, target, _scale$2 );

			return target;

		}

		getWorldScale( target ) {

			this.updateWorldMatrix( true, false );

			this.matrixWorld.decompose( _position$3, _quaternion$2, target );

			return target;

		}

		getWorldDirection( target ) {

			this.updateWorldMatrix( true, false );

			const e = this.matrixWorld.elements;

			return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

		}

		raycast( /* raycaster, intersects */ ) {}

		traverse( callback ) {

			callback( this );

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		}

		traverseVisible( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		}

		traverseAncestors( callback ) {

			const parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		}

		updateMatrix() {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		}

		updateMatrixWorld( force ) {

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate || force ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				const child = children[ i ];

				if ( child.matrixWorldAutoUpdate === true || force === true ) {

					child.updateMatrixWorld( force );

				}

			}

		}

		updateWorldMatrix( updateParents, updateChildren ) {

			const parent = this.parent;

			if ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {

				parent.updateWorldMatrix( true, false );

			}

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			// update children

			if ( updateChildren === true ) {

				const children = this.children;

				for ( let i = 0, l = children.length; i < l; i ++ ) {

					const child = children[ i ];

					if ( child.matrixWorldAutoUpdate === true ) {

						child.updateWorldMatrix( false, true );

					}

				}

			}

		}

		toJSON( meta ) {

			// meta is a string when called from JSON.stringify
			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			const output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {},
					skeletons: {},
					animations: {},
					nodes: {}
				};

				output.metadata = {
					version: 4.6,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			const object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;
			if ( this.frustumCulled === false ) object.frustumCulled = false;
			if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
			if ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;

			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();
			object.up = this.up.toArray();

			if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

			// object specific properties

			if ( this.isInstancedMesh ) {

				object.type = 'InstancedMesh';
				object.count = this.count;
				object.instanceMatrix = this.instanceMatrix.toJSON();
				if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

			}

			if ( this.isBatchedMesh ) {

				object.type = 'BatchedMesh';
				object.perObjectFrustumCulled = this.perObjectFrustumCulled;
				object.sortObjects = this.sortObjects;

				object.drawRanges = this._drawRanges;
				object.reservedRanges = this._reservedRanges;

				object.visibility = this._visibility;
				object.active = this._active;
				object.bounds = this._bounds.map( bound => ( {
					boxInitialized: bound.boxInitialized,
					boxMin: bound.box.min.toArray(),
					boxMax: bound.box.max.toArray(),

					sphereInitialized: bound.sphereInitialized,
					sphereRadius: bound.sphere.radius,
					sphereCenter: bound.sphere.center.toArray()
				} ) );

				object.maxGeometryCount = this._maxGeometryCount;
				object.maxVertexCount = this._maxVertexCount;
				object.maxIndexCount = this._maxIndexCount;

				object.geometryInitialized = this._geometryInitialized;
				object.geometryCount = this._geometryCount;

				object.matricesTexture = this._matricesTexture.toJSON( meta );

				if ( this.boundingSphere !== null ) {

					object.boundingSphere = {
						center: object.boundingSphere.center.toArray(),
						radius: object.boundingSphere.radius
					};

				}

				if ( this.boundingBox !== null ) {

					object.boundingBox = {
						min: object.boundingBox.min.toArray(),
						max: object.boundingBox.max.toArray()
					};

				}

			}

			//

			function serialize( library, element ) {

				if ( library[ element.uuid ] === undefined ) {

					library[ element.uuid ] = element.toJSON( meta );

				}

				return element.uuid;

			}

			if ( this.isScene ) {

				if ( this.background ) {

					if ( this.background.isColor ) {

						object.background = this.background.toJSON();

					} else if ( this.background.isTexture ) {

						object.background = this.background.toJSON( meta ).uuid;

					}

				}

				if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {

					object.environment = this.environment.toJSON( meta ).uuid;

				}

			} else if ( this.isMesh || this.isLine || this.isPoints ) {

				object.geometry = serialize( meta.geometries, this.geometry );

				const parameters = this.geometry.parameters;

				if ( parameters !== undefined && parameters.shapes !== undefined ) {

					const shapes = parameters.shapes;

					if ( Array.isArray( shapes ) ) {

						for ( let i = 0, l = shapes.length; i < l; i ++ ) {

							const shape = shapes[ i ];

							serialize( meta.shapes, shape );

						}

					} else {

						serialize( meta.shapes, shapes );

					}

				}

			}

			if ( this.isSkinnedMesh ) {

				object.bindMode = this.bindMode;
				object.bindMatrix = this.bindMatrix.toArray();

				if ( this.skeleton !== undefined ) {

					serialize( meta.skeletons, this.skeleton );

					object.skeleton = this.skeleton.uuid;

				}

			}

			if ( this.material !== undefined ) {

				if ( Array.isArray( this.material ) ) {

					const uuids = [];

					for ( let i = 0, l = this.material.length; i < l; i ++ ) {

						uuids.push( serialize( meta.materials, this.material[ i ] ) );

					}

					object.material = uuids;

				} else {

					object.material = serialize( meta.materials, this.material );

				}

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( let i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			//

			if ( this.animations.length > 0 ) {

				object.animations = [];

				for ( let i = 0; i < this.animations.length; i ++ ) {

					const animation = this.animations[ i ];

					object.animations.push( serialize( meta.animations, animation ) );

				}

			}

			if ( isRootObject ) {

				const geometries = extractFromCache( meta.geometries );
				const materials = extractFromCache( meta.materials );
				const textures = extractFromCache( meta.textures );
				const images = extractFromCache( meta.images );
				const shapes = extractFromCache( meta.shapes );
				const skeletons = extractFromCache( meta.skeletons );
				const animations = extractFromCache( meta.animations );
				const nodes = extractFromCache( meta.nodes );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;
				if ( shapes.length > 0 ) output.shapes = shapes;
				if ( skeletons.length > 0 ) output.skeletons = skeletons;
				if ( animations.length > 0 ) output.animations = animations;
				if ( nodes.length > 0 ) output.nodes = nodes;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				const values = [];
				for ( const key in cache ) {

					const data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

		}

		clone( recursive ) {

			return new this.constructor().copy( this, recursive );

		}

		copy( source, recursive = true ) {

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.rotation.order = source.rotation.order;
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;

			this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.layers.mask = source.layers.mask;
			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.animations = source.animations.slice();

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( let i = 0; i < source.children.length; i ++ ) {

					const child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	}

	Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );
	Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
	Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;

	const _v0$1 = /*@__PURE__*/ new Vector3();
	const _v1$3 = /*@__PURE__*/ new Vector3();
	const _v2$2 = /*@__PURE__*/ new Vector3();
	const _v3$2 = /*@__PURE__*/ new Vector3();

	const _vab = /*@__PURE__*/ new Vector3();
	const _vac = /*@__PURE__*/ new Vector3();
	const _vbc = /*@__PURE__*/ new Vector3();
	const _vap = /*@__PURE__*/ new Vector3();
	const _vbp = /*@__PURE__*/ new Vector3();
	const _vcp = /*@__PURE__*/ new Vector3();

	class Triangle {

		constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

			this.a = a;
			this.b = b;
			this.c = c;

		}

		static getNormal( a, b, c, target ) {

			target.subVectors( c, b );
			_v0$1.subVectors( a, b );
			target.cross( _v0$1 );

			const targetLengthSq = target.lengthSq();
			if ( targetLengthSq > 0 ) {

				return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

			}

			return target.set( 0, 0, 0 );

		}

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		static getBarycoord( point, a, b, c, target ) {

			_v0$1.subVectors( c, a );
			_v1$3.subVectors( b, a );
			_v2$2.subVectors( point, a );

			const dot00 = _v0$1.dot( _v0$1 );
			const dot01 = _v0$1.dot( _v1$3 );
			const dot02 = _v0$1.dot( _v2$2 );
			const dot11 = _v1$3.dot( _v1$3 );
			const dot12 = _v1$3.dot( _v2$2 );

			const denom = ( dot00 * dot11 - dot01 * dot01 );

			// collinear or singular triangle
			if ( denom === 0 ) {

				target.set( 0, 0, 0 );
				return null;

			}

			const invDenom = 1 / denom;
			const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return target.set( 1 - u - v, v, u );

		}

		static containsPoint( point, a, b, c ) {

			// if the triangle is degenerate then we can't contain a point
			if ( this.getBarycoord( point, a, b, c, _v3$2 ) === null ) {

				return false;

			}

			return ( _v3$2.x >= 0 ) && ( _v3$2.y >= 0 ) && ( ( _v3$2.x + _v3$2.y ) <= 1 );

		}

		static getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {

			if ( this.getBarycoord( point, p1, p2, p3, _v3$2 ) === null ) {

				target.x = 0;
				target.y = 0;
				if ( 'z' in target ) target.z = 0;
				if ( 'w' in target ) target.w = 0;
				return null;

			}

			target.setScalar( 0 );
			target.addScaledVector( v1, _v3$2.x );
			target.addScaledVector( v2, _v3$2.y );
			target.addScaledVector( v3, _v3$2.z );

			return target;

		}

		static isFrontFacing( a, b, c, direction ) {

			_v0$1.subVectors( c, b );
			_v1$3.subVectors( a, b );

			// strictly front facing
			return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

		}

		set( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		}

		setFromPointsAndIndices( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		}

		setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

			this.a.fromBufferAttribute( attribute, i0 );
			this.b.fromBufferAttribute( attribute, i1 );
			this.c.fromBufferAttribute( attribute, i2 );

			return this;

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		}

		getArea() {

			_v0$1.subVectors( this.c, this.b );
			_v1$3.subVectors( this.a, this.b );

			return _v0$1.cross( _v1$3 ).length() * 0.5;

		}

		getMidpoint( target ) {

			return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		}

		getNormal( target ) {

			return Triangle.getNormal( this.a, this.b, this.c, target );

		}

		getPlane( target ) {

			return target.setFromCoplanarPoints( this.a, this.b, this.c );

		}

		getBarycoord( point, target ) {

			return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

		}

		getInterpolation( point, v1, v2, v3, target ) {

			return Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );

		}

		containsPoint( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		}

		isFrontFacing( direction ) {

			return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

		}

		intersectsBox( box ) {

			return box.intersectsTriangle( this );

		}

		closestPointToPoint( p, target ) {

			const a = this.a, b = this.b, c = this.c;
			let v, w;

			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			_vab.subVectors( b, a );
			_vac.subVectors( c, a );
			_vap.subVectors( p, a );
			const d1 = _vab.dot( _vap );
			const d2 = _vac.dot( _vap );
			if ( d1 <= 0 && d2 <= 0 ) {

				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy( a );

			}

			_vbp.subVectors( p, b );
			const d3 = _vab.dot( _vbp );
			const d4 = _vac.dot( _vbp );
			if ( d3 >= 0 && d4 <= d3 ) {

				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy( b );

			}

			const vc = d1 * d4 - d3 * d2;
			if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

				v = d1 / ( d1 - d3 );
				// edge region of AB; barycentric coords (1-v, v, 0)
				return target.copy( a ).addScaledVector( _vab, v );

			}

			_vcp.subVectors( p, c );
			const d5 = _vab.dot( _vcp );
			const d6 = _vac.dot( _vcp );
			if ( d6 >= 0 && d5 <= d6 ) {

				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy( c );

			}

			const vb = d5 * d2 - d1 * d6;
			if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

				w = d2 / ( d2 - d6 );
				// edge region of AC; barycentric coords (1-w, 0, w)
				return target.copy( a ).addScaledVector( _vac, w );

			}

			const va = d3 * d6 - d5 * d4;
			if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

				_vbc.subVectors( c, b );
				w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
				// edge region of BC; barycentric coords (0, 1-w, w)
				return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

			}

			// face region
			const denom = 1 / ( va + vb + vc );
			// u = va * denom
			v = vb * denom;
			w = vc * denom;

			return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

		}

		equals( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	}

	const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	const _hslA = { h: 0, s: 0, l: 0 };
	const _hslB = { h: 0, s: 0, l: 0 };

	function hue2rgb( p, q, t ) {

		if ( t < 0 ) t += 1;
		if ( t > 1 ) t -= 1;
		if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
		if ( t < 1 / 2 ) return q;
		if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
		return p;

	}

	let Color$1 = class Color {

		constructor( r, g, b ) {

			this.isColor = true;

			this.r = 1;
			this.g = 1;
			this.b = 1;

			return this.set( r, g, b );

		}

		set( r, g, b ) {

			if ( g === undefined && b === undefined ) {

				// r is THREE.Color, hex or string

				const value = r;

				if ( value && value.isColor ) {

					this.copy( value );

				} else if ( typeof value === 'number' ) {

					this.setHex( value );

				} else if ( typeof value === 'string' ) {

					this.setStyle( value );

				}

			} else {

				this.setRGB( r, g, b );

			}

			return this;

		}

		setScalar( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		}

		setHex( hex, colorSpace = SRGBColorSpace ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			ColorManagement.toWorkingColorSpace( this, colorSpace );

			return this;

		}

		setRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {

			this.r = r;
			this.g = g;
			this.b = b;

			ColorManagement.toWorkingColorSpace( this, colorSpace );

			return this;

		}

		setHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = euclideanModulo( h, 1 );
			s = clamp$1( s, 0, 1 );
			l = clamp$1( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				const q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			ColorManagement.toWorkingColorSpace( this, colorSpace );

			return this;

		}

		setStyle( style, colorSpace = SRGBColorSpace ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			let m;

			if ( m = /^(\w+)\(([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				let color;
				const name = m[ 1 ];
				const components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)

							handleAlpha( color[ 4 ] );

							return this.setRGB(
								Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,
								Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,
								Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,
								colorSpace
							);

						}

						if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)

							handleAlpha( color[ 4 ] );

							return this.setRGB(
								Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,
								Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,
								Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,
								colorSpace
							);

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)

							handleAlpha( color[ 4 ] );

							return this.setHSL(
								parseFloat( color[ 1 ] ) / 360,
								parseFloat( color[ 2 ] ) / 100,
								parseFloat( color[ 3 ] ) / 100,
								colorSpace
							);

						}

						break;

					default:

						console.warn( 'THREE.Color: Unknown color model ' + style );

				}

			} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

				// hex color

				const hex = m[ 1 ];
				const size = hex.length;

				if ( size === 3 ) {

					// #ff0
					return this.setRGB(
						parseInt( hex.charAt( 0 ), 16 ) / 15,
						parseInt( hex.charAt( 1 ), 16 ) / 15,
						parseInt( hex.charAt( 2 ), 16 ) / 15,
						colorSpace
					);

				} else if ( size === 6 ) {

					// #ff0000
					return this.setHex( parseInt( hex, 16 ), colorSpace );

				} else {

					console.warn( 'THREE.Color: Invalid hex color ' + style );

				}

			} else if ( style && style.length > 0 ) {

				return this.setColorName( style, colorSpace );

			}

			return this;

		}

		setColorName( style, colorSpace = SRGBColorSpace ) {

			// color keywords
			const hex = _colorKeywords[ style.toLowerCase() ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex, colorSpace );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

			return this;

		}

		clone() {

			return new this.constructor( this.r, this.g, this.b );

		}

		copy( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		}

		copySRGBToLinear( color ) {

			this.r = SRGBToLinear( color.r );
			this.g = SRGBToLinear( color.g );
			this.b = SRGBToLinear( color.b );

			return this;

		}

		copyLinearToSRGB( color ) {

			this.r = LinearToSRGB( color.r );
			this.g = LinearToSRGB( color.g );
			this.b = LinearToSRGB( color.b );

			return this;

		}

		convertSRGBToLinear() {

			this.copySRGBToLinear( this );

			return this;

		}

		convertLinearToSRGB() {

			this.copyLinearToSRGB( this );

			return this;

		}

		getHex( colorSpace = SRGBColorSpace ) {

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			return Math.round( clamp$1( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp$1( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp$1( _color.b * 255, 0, 255 ) );

		}

		getHexString( colorSpace = SRGBColorSpace ) {

			return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );

		}

		getHSL( target, colorSpace = ColorManagement.workingColorSpace ) {

			// h,s,l ranges are in 0.0 - 1.0

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			const r = _color.r, g = _color.g, b = _color.b;

			const max = Math.max( r, g, b );
			const min = Math.min( r, g, b );

			let hue, saturation;
			const lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				const delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;

			return target;

		}

		getRGB( target, colorSpace = ColorManagement.workingColorSpace ) {

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			target.r = _color.r;
			target.g = _color.g;
			target.b = _color.b;

			return target;

		}

		getStyle( colorSpace = SRGBColorSpace ) {

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			const r = _color.r, g = _color.g, b = _color.b;

			if ( colorSpace !== SRGBColorSpace ) {

				// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
				return `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;

			}

			return `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;

		}

		offsetHSL( h, s, l ) {

			this.getHSL( _hslA );

			return this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );

		}

		add( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		}

		addColors( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		}

		addScalar( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		}

		sub( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		}

		multiply( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		}

		multiplyScalar( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		}

		lerp( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		}

		lerpColors( color1, color2, alpha ) {

			this.r = color1.r + ( color2.r - color1.r ) * alpha;
			this.g = color1.g + ( color2.g - color1.g ) * alpha;
			this.b = color1.b + ( color2.b - color1.b ) * alpha;

			return this;

		}

		lerpHSL( color, alpha ) {

			this.getHSL( _hslA );
			color.getHSL( _hslB );

			const h = lerp$1( _hslA.h, _hslB.h, alpha );
			const s = lerp$1( _hslA.s, _hslB.s, alpha );
			const l = lerp$1( _hslA.l, _hslB.l, alpha );

			this.setHSL( h, s, l );

			return this;

		}

		setFromVector3( v ) {

			this.r = v.x;
			this.g = v.y;
			this.b = v.z;

			return this;

		}

		applyMatrix3( m ) {

			const r = this.r, g = this.g, b = this.b;
			const e = m.elements;

			this.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;
			this.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;
			this.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;

			return this;

		}

		equals( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		}

		fromArray( array, offset = 0 ) {

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.r = attribute.getX( index );
			this.g = attribute.getY( index );
			this.b = attribute.getZ( index );

			return this;

		}

		toJSON() {

			return this.getHex();

		}

		*[ Symbol.iterator ]() {

			yield this.r;
			yield this.g;
			yield this.b;

		}

	};

	const _color = /*@__PURE__*/ new Color$1();

	Color$1.NAMES = _colorKeywords;

	let _materialId = 0;

	class Material extends EventDispatcher {

		constructor() {

			super();

			this.isMaterial = true;

			Object.defineProperty( this, 'id', { value: _materialId ++ } );

			this.uuid = generateUUID();

			this.name = '';
			this.type = 'Material';

			this.blending = NormalBlending;
			this.side = FrontSide;
			this.vertexColors = false;

			this.opacity = 1;
			this.transparent = false;
			this.alphaHash = false;

			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;
			this.blendColor = new Color$1( 0, 0, 0 );
			this.blendAlpha = 0;

			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;

			this.stencilWriteMask = 0xff;
			this.stencilFunc = AlwaysStencilFunc;
			this.stencilRef = 0;
			this.stencilFuncMask = 0xff;
			this.stencilFail = KeepStencilOp;
			this.stencilZFail = KeepStencilOp;
			this.stencilZPass = KeepStencilOp;
			this.stencilWrite = false;

			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;

			this.shadowSide = null;

			this.colorWrite = true;

			this.precision = null; // override the renderer's default precision for this material

			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;

			this.dithering = false;

			this.alphaToCoverage = false;
			this.premultipliedAlpha = false;
			this.forceSinglePass = false;

			this.visible = true;

			this.toneMapped = true;

			this.userData = {};

			this.version = 0;

			this._alphaTest = 0;

		}

		get alphaTest() {

			return this._alphaTest;

		}

		set alphaTest( value ) {

			if ( this._alphaTest > 0 !== value > 0 ) {

				this.version ++;

			}

			this._alphaTest = value;

		}

		onBuild( /* shaderobject, renderer */ ) {}

		onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

		onBeforeCompile( /* shaderobject, renderer */ ) {}

		customProgramCacheKey() {

			return this.onBeforeCompile.toString();

		}

		setValues( values ) {

			if ( values === undefined ) return;

			for ( const key in values ) {

				const newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );
					continue;

				}

				const currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );
					continue;

				}

				if ( currentValue && currentValue.isColor ) {

					currentValue.set( newValue );

				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

					currentValue.copy( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		}

		toJSON( meta ) {

			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( isRootObject ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			const data = {
				metadata: {
					version: 4.6,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( this.color && this.color.isColor ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( this.sheen !== undefined ) data.sheen = this.sheen;
			if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
			if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
			if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
			if ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

			if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
			if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
			if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;
			if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
			if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

			if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

				data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

			}

			if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

				data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

			}

			if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

			}

			if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
			if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
			if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

			if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

				data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

			}

			if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

				data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

			}

			if ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;
			if ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;

			if ( this.anisotropyMap && this.anisotropyMap.isTexture ) {

				data.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;

			}

			if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
			if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

			if ( this.lightMap && this.lightMap.isTexture ) {

				data.lightMap = this.lightMap.toJSON( meta ).uuid;
				data.lightMapIntensity = this.lightMapIntensity;

			}

			if ( this.aoMap && this.aoMap.isTexture ) {

				data.aoMap = this.aoMap.toJSON( meta ).uuid;
				data.aoMapIntensity = this.aoMapIntensity;

			}

			if ( this.bumpMap && this.bumpMap.isTexture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}

			if ( this.normalMap && this.normalMap.isTexture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();

			}

			if ( this.displacementMap && this.displacementMap.isTexture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}

			if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
			if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
			if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

			if ( this.envMap && this.envMap.isTexture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;

				if ( this.combine !== undefined ) data.combine = this.combine;

			}

			if ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();
			if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
			if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
			if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

			if ( this.gradientMap && this.gradientMap.isTexture ) {

				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

			}

			if ( this.transmission !== undefined ) data.transmission = this.transmission;
			if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
			if ( this.thickness !== undefined ) data.thickness = this.thickness;
			if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
			if ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;
			if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors === true ) data.vertexColors = true;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = true;

			if ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;
			if ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;
			if ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;
			if ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;
			if ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;
			if ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;
			if ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();
			if ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;

			if ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;
			if ( this.depthTest === false ) data.depthTest = this.depthTest;
			if ( this.depthWrite === false ) data.depthWrite = this.depthWrite;
			if ( this.colorWrite === false ) data.colorWrite = this.colorWrite;

			if ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;
			if ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;
			if ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;
			if ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;
			if ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;
			if ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;
			if ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;
			if ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;

			// rotation (SpriteMaterial)
			if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

			if ( this.polygonOffset === true ) data.polygonOffset = true;
			if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
			if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

			if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
			if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
			if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
			if ( this.scale !== undefined ) data.scale = this.scale;

			if ( this.dithering === true ) data.dithering = true;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.alphaHash === true ) data.alphaHash = true;
			if ( this.alphaToCoverage === true ) data.alphaToCoverage = true;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;
			if ( this.forceSinglePass === true ) data.forceSinglePass = true;

			if ( this.wireframe === true ) data.wireframe = true;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			if ( this.flatShading === true ) data.flatShading = true;

			if ( this.visible === false ) data.visible = false;

			if ( this.toneMapped === false ) data.toneMapped = false;

			if ( this.fog === false ) data.fog = false;

			if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				const values = [];

				for ( const key in cache ) {

					const data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRootObject ) {

				const textures = extractFromCache( meta.textures );
				const images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			this.name = source.name;

			this.blending = source.blending;
			this.side = source.side;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;
			this.blendColor.copy( source.blendColor );
			this.blendAlpha = source.blendAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.stencilWriteMask = source.stencilWriteMask;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilFuncMask = source.stencilFuncMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.stencilWrite = source.stencilWrite;

			const srcPlanes = source.clippingPlanes;
			let dstPlanes = null;

			if ( srcPlanes !== null ) {

				const n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( let i = 0; i !== n; ++ i ) {

					dstPlanes[ i ] = srcPlanes[ i ].clone();

				}

			}

			this.clippingPlanes = dstPlanes;
			this.clipIntersection = source.clipIntersection;
			this.clipShadows = source.clipShadows;

			this.shadowSide = source.shadowSide;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.dithering = source.dithering;

			this.alphaTest = source.alphaTest;
			this.alphaHash = source.alphaHash;
			this.alphaToCoverage = source.alphaToCoverage;
			this.premultipliedAlpha = source.premultipliedAlpha;
			this.forceSinglePass = source.forceSinglePass;

			this.visible = source.visible;

			this.toneMapped = source.toneMapped;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			return this;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

	}

	class MeshBasicMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isMeshBasicMaterial = true;

			this.type = 'MeshBasicMaterial';

			this.color = new Color$1( 0xffffff ); // emissive

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.envMapRotation = new Euler();
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.fog = true;

			this.setValues( parameters );

		}

		copy( source ) {

			super.copy( source );

			this.color.copy( source.color );

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.envMapRotation.copy( source.envMapRotation );
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.fog = source.fog;

			return this;

		}

	}

	const _vector$9 = /*@__PURE__*/ new Vector3();
	const _vector2$1 = /*@__PURE__*/ new Vector2$1();

	class BufferAttribute {

		constructor( array, itemSize, normalized = false ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.isBufferAttribute = true;

			this.name = '';

			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized;

			this.usage = StaticDrawUsage;
			this._updateRange = { offset: 0, count: - 1 };
			this.updateRanges = [];
			this.gpuType = FloatType;

			this.version = 0;

		}

		onUploadCallback() {}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

		get updateRange() {

			warnOnce( 'THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.' ); // @deprecated, r159
			return this._updateRange;

		}

		setUsage( value ) {

			this.usage = value;

			return this;

		}

		addUpdateRange( start, count ) {

			this.updateRanges.push( { start, count } );

		}

		clearUpdateRanges() {

			this.updateRanges.length = 0;

		}

		copy( source ) {

			this.name = source.name;
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.usage = source.usage;
			this.gpuType = source.gpuType;

			return this;

		}

		copyAt( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		}

		copyArray( array ) {

			this.array.set( array );

			return this;

		}

		applyMatrix3( m ) {

			if ( this.itemSize === 2 ) {

				for ( let i = 0, l = this.count; i < l; i ++ ) {

					_vector2$1.fromBufferAttribute( this, i );
					_vector2$1.applyMatrix3( m );

					this.setXY( i, _vector2$1.x, _vector2$1.y );

				}

			} else if ( this.itemSize === 3 ) {

				for ( let i = 0, l = this.count; i < l; i ++ ) {

					_vector$9.fromBufferAttribute( this, i );
					_vector$9.applyMatrix3( m );

					this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

				}

			}

			return this;

		}

		applyMatrix4( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$9.fromBufferAttribute( this, i );

				_vector$9.applyMatrix4( m );

				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

			}

			return this;

		}

		applyNormalMatrix( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$9.fromBufferAttribute( this, i );

				_vector$9.applyNormalMatrix( m );

				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

			}

			return this;

		}

		transformDirection( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$9.fromBufferAttribute( this, i );

				_vector$9.transformDirection( m );

				this.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );

			}

			return this;

		}

		set( value, offset = 0 ) {

			// Matching BufferAttribute constructor, do not normalize the array.
			this.array.set( value, offset );

			return this;

		}

		getComponent( index, component ) {

			let value = this.array[ index * this.itemSize + component ];

			if ( this.normalized ) value = denormalize( value, this.array );

			return value;

		}

		setComponent( index, component, value ) {

			if ( this.normalized ) value = normalize$1( value, this.array );

			this.array[ index * this.itemSize + component ] = value;

			return this;

		}

		getX( index ) {

			let x = this.array[ index * this.itemSize ];

			if ( this.normalized ) x = denormalize( x, this.array );

			return x;

		}

		setX( index, x ) {

			if ( this.normalized ) x = normalize$1( x, this.array );

			this.array[ index * this.itemSize ] = x;

			return this;

		}

		getY( index ) {

			let y = this.array[ index * this.itemSize + 1 ];

			if ( this.normalized ) y = denormalize( y, this.array );

			return y;

		}

		setY( index, y ) {

			if ( this.normalized ) y = normalize$1( y, this.array );

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		}

		getZ( index ) {

			let z = this.array[ index * this.itemSize + 2 ];

			if ( this.normalized ) z = denormalize( z, this.array );

			return z;

		}

		setZ( index, z ) {

			if ( this.normalized ) z = normalize$1( z, this.array );

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		}

		getW( index ) {

			let w = this.array[ index * this.itemSize + 3 ];

			if ( this.normalized ) w = denormalize( w, this.array );

			return w;

		}

		setW( index, w ) {

			if ( this.normalized ) w = normalize$1( w, this.array );

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		}

		setXY( index, x, y ) {

			index *= this.itemSize;

			if ( this.normalized ) {

				x = normalize$1( x, this.array );
				y = normalize$1( y, this.array );

			}

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		}

		setXYZ( index, x, y, z ) {

			index *= this.itemSize;

			if ( this.normalized ) {

				x = normalize$1( x, this.array );
				y = normalize$1( y, this.array );
				z = normalize$1( z, this.array );

			}

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		}

		setXYZW( index, x, y, z, w ) {

			index *= this.itemSize;

			if ( this.normalized ) {

				x = normalize$1( x, this.array );
				y = normalize$1( y, this.array );
				z = normalize$1( z, this.array );
				w = normalize$1( w, this.array );

			}

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		}

		onUpload( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

		clone() {

			return new this.constructor( this.array, this.itemSize ).copy( this );

		}

		toJSON() {

			const data = {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.from( this.array ),
				normalized: this.normalized
			};

			if ( this.name !== '' ) data.name = this.name;
			if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;

			return data;

		}

	}

	class Uint16BufferAttribute extends BufferAttribute {

		constructor( array, itemSize, normalized ) {

			super( new Uint16Array( array ), itemSize, normalized );

		}

	}

	class Uint32BufferAttribute extends BufferAttribute {

		constructor( array, itemSize, normalized ) {

			super( new Uint32Array( array ), itemSize, normalized );

		}

	}


	class Float32BufferAttribute extends BufferAttribute {

		constructor( array, itemSize, normalized ) {

			super( new Float32Array( array ), itemSize, normalized );

		}

	}

	let _id$2 = 0;

	const _m1$2 = /*@__PURE__*/ new Matrix4();
	const _obj = /*@__PURE__*/ new Object3D();
	const _offset = /*@__PURE__*/ new Vector3();
	const _box$2 = /*@__PURE__*/ new Box3();
	const _boxMorphTargets = /*@__PURE__*/ new Box3();
	const _vector$8 = /*@__PURE__*/ new Vector3();

	class BufferGeometry extends EventDispatcher {

		constructor() {

			super();

			this.isBufferGeometry = true;

			Object.defineProperty( this, 'id', { value: _id$2 ++ } );

			this.uuid = generateUUID();

			this.name = '';
			this.type = 'BufferGeometry';

			this.index = null;
			this.attributes = {};

			this.morphAttributes = {};
			this.morphTargetsRelative = false;

			this.groups = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			this.drawRange = { start: 0, count: Infinity };

			this.userData = {};

		}

		getIndex() {

			return this.index;

		}

		setIndex( index ) {

			if ( Array.isArray( index ) ) {

				this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

			} else {

				this.index = index;

			}

			return this;

		}

		getAttribute( name ) {

			return this.attributes[ name ];

		}

		setAttribute( name, attribute ) {

			this.attributes[ name ] = attribute;

			return this;

		}

		deleteAttribute( name ) {

			delete this.attributes[ name ];

			return this;

		}

		hasAttribute( name ) {

			return this.attributes[ name ] !== undefined;

		}

		addGroup( start, count, materialIndex = 0 ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex

			} );

		}

		clearGroups() {

			this.groups = [];

		}

		setDrawRange( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		}

		applyMatrix4( matrix ) {

			const position = this.attributes.position;

			if ( position !== undefined ) {

				position.applyMatrix4( matrix );

				position.needsUpdate = true;

			}

			const normal = this.attributes.normal;

			if ( normal !== undefined ) {

				const normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normal.applyNormalMatrix( normalMatrix );

				normal.needsUpdate = true;

			}

			const tangent = this.attributes.tangent;

			if ( tangent !== undefined ) {

				tangent.transformDirection( matrix );

				tangent.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		}

		applyQuaternion( q ) {

			_m1$2.makeRotationFromQuaternion( q );

			this.applyMatrix4( _m1$2 );

			return this;

		}

		rotateX( angle ) {

			// rotate geometry around world x-axis

			_m1$2.makeRotationX( angle );

			this.applyMatrix4( _m1$2 );

			return this;

		}

		rotateY( angle ) {

			// rotate geometry around world y-axis

			_m1$2.makeRotationY( angle );

			this.applyMatrix4( _m1$2 );

			return this;

		}

		rotateZ( angle ) {

			// rotate geometry around world z-axis

			_m1$2.makeRotationZ( angle );

			this.applyMatrix4( _m1$2 );

			return this;

		}

		translate( x, y, z ) {

			// translate geometry

			_m1$2.makeTranslation( x, y, z );

			this.applyMatrix4( _m1$2 );

			return this;

		}

		scale( x, y, z ) {

			// scale geometry

			_m1$2.makeScale( x, y, z );

			this.applyMatrix4( _m1$2 );

			return this;

		}

		lookAt( vector ) {

			_obj.lookAt( vector );

			_obj.updateMatrix();

			this.applyMatrix4( _obj.matrix );

			return this;

		}

		center() {

			this.computeBoundingBox();

			this.boundingBox.getCenter( _offset ).negate();

			this.translate( _offset.x, _offset.y, _offset.z );

			return this;

		}

		setFromPoints( points ) {

			const position = [];

			for ( let i = 0, l = points.length; i < l; i ++ ) {

				const point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );

			}

			this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

			return this;

		}

		computeBoundingBox() {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if ( position && position.isGLBufferAttribute ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );

				this.boundingBox.set(
					new Vector3( - Infinity, - Infinity, - Infinity ),
					new Vector3( + Infinity, + Infinity, + Infinity )
				);

				return;

			}

			if ( position !== undefined ) {

				this.boundingBox.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						const morphAttribute = morphAttributesPosition[ i ];
						_box$2.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$8.addVectors( this.boundingBox.min, _box$2.min );
							this.boundingBox.expandByPoint( _vector$8 );

							_vector$8.addVectors( this.boundingBox.max, _box$2.max );
							this.boundingBox.expandByPoint( _vector$8 );

						} else {

							this.boundingBox.expandByPoint( _box$2.min );
							this.boundingBox.expandByPoint( _box$2.max );

						}

					}

				}

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		}

		computeBoundingSphere() {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if ( position && position.isGLBufferAttribute ) {

				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );

				this.boundingSphere.set( new Vector3(), Infinity );

				return;

			}

			if ( position ) {

				// first, find the center of the bounding sphere

				const center = this.boundingSphere.center;

				_box$2.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						const morphAttribute = morphAttributesPosition[ i ];
						_boxMorphTargets.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$8.addVectors( _box$2.min, _boxMorphTargets.min );
							_box$2.expandByPoint( _vector$8 );

							_vector$8.addVectors( _box$2.max, _boxMorphTargets.max );
							_box$2.expandByPoint( _vector$8 );

						} else {

							_box$2.expandByPoint( _boxMorphTargets.min );
							_box$2.expandByPoint( _boxMorphTargets.max );

						}

					}

				}

				_box$2.getCenter( center );

				// second, try to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				let maxRadiusSq = 0;

				for ( let i = 0, il = position.count; i < il; i ++ ) {

					_vector$8.fromBufferAttribute( position, i );

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

				}

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						const morphAttribute = morphAttributesPosition[ i ];
						const morphTargetsRelative = this.morphTargetsRelative;

						for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

							_vector$8.fromBufferAttribute( morphAttribute, j );

							if ( morphTargetsRelative ) {

								_offset.fromBufferAttribute( position, j );
								_vector$8.add( _offset );

							}

							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );

						}

					}

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		}

		computeTangents() {

			const index = this.index;
			const attributes = this.attributes;

			// based on http://www.terathon.com/code/tangent.html
			// (per vertex tangents)

			if ( index === null ||
				 attributes.position === undefined ||
				 attributes.normal === undefined ||
				 attributes.uv === undefined ) {

				console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
				return;

			}

			const positionAttribute = attributes.position;
			const normalAttribute = attributes.normal;
			const uvAttribute = attributes.uv;

			if ( this.hasAttribute( 'tangent' ) === false ) {

				this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );

			}

			const tangentAttribute = this.getAttribute( 'tangent' );

			const tan1 = [], tan2 = [];

			for ( let i = 0; i < positionAttribute.count; i ++ ) {

				tan1[ i ] = new Vector3();
				tan2[ i ] = new Vector3();

			}

			const vA = new Vector3(),
				vB = new Vector3(),
				vC = new Vector3(),

				uvA = new Vector2$1(),
				uvB = new Vector2$1(),
				uvC = new Vector2$1(),

				sdir = new Vector3(),
				tdir = new Vector3();

			function handleTriangle( a, b, c ) {

				vA.fromBufferAttribute( positionAttribute, a );
				vB.fromBufferAttribute( positionAttribute, b );
				vC.fromBufferAttribute( positionAttribute, c );

				uvA.fromBufferAttribute( uvAttribute, a );
				uvB.fromBufferAttribute( uvAttribute, b );
				uvC.fromBufferAttribute( uvAttribute, c );

				vB.sub( vA );
				vC.sub( vA );

				uvB.sub( uvA );
				uvC.sub( uvA );

				const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

				// silently ignore degenerate uv triangles having coincident or colinear vertices

				if ( ! isFinite( r ) ) return;

				sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
				tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

				tan1[ a ].add( sdir );
				tan1[ b ].add( sdir );
				tan1[ c ].add( sdir );

				tan2[ a ].add( tdir );
				tan2[ b ].add( tdir );
				tan2[ c ].add( tdir );

			}

			let groups = this.groups;

			if ( groups.length === 0 ) {

				groups = [ {
					start: 0,
					count: index.count
				} ];

			}

			for ( let i = 0, il = groups.length; i < il; ++ i ) {

				const group = groups[ i ];

				const start = group.start;
				const count = group.count;

				for ( let j = start, jl = start + count; j < jl; j += 3 ) {

					handleTriangle(
						index.getX( j + 0 ),
						index.getX( j + 1 ),
						index.getX( j + 2 )
					);

				}

			}

			const tmp = new Vector3(), tmp2 = new Vector3();
			const n = new Vector3(), n2 = new Vector3();

			function handleVertex( v ) {

				n.fromBufferAttribute( normalAttribute, v );
				n2.copy( n );

				const t = tan1[ v ];

				// Gram-Schmidt orthogonalize

				tmp.copy( t );
				tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

				// Calculate handedness

				tmp2.crossVectors( n2, t );
				const test = tmp2.dot( tan2[ v ] );
				const w = ( test < 0.0 ) ? - 1.0 : 1.0;

				tangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );

			}

			for ( let i = 0, il = groups.length; i < il; ++ i ) {

				const group = groups[ i ];

				const start = group.start;
				const count = group.count;

				for ( let j = start, jl = start + count; j < jl; j += 3 ) {

					handleVertex( index.getX( j + 0 ) );
					handleVertex( index.getX( j + 1 ) );
					handleVertex( index.getX( j + 2 ) );

				}

			}

		}

		computeVertexNormals() {

			const index = this.index;
			const positionAttribute = this.getAttribute( 'position' );

			if ( positionAttribute !== undefined ) {

				let normalAttribute = this.getAttribute( 'normal' );

				if ( normalAttribute === undefined ) {

					normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
					this.setAttribute( 'normal', normalAttribute );

				} else {

					// reset existing normals to zero

					for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

						normalAttribute.setXYZ( i, 0, 0, 0 );

					}

				}

				const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
				const cb = new Vector3(), ab = new Vector3();

				// indexed elements

				if ( index ) {

					for ( let i = 0, il = index.count; i < il; i += 3 ) {

						const vA = index.getX( i + 0 );
						const vB = index.getX( i + 1 );
						const vC = index.getX( i + 2 );

						pA.fromBufferAttribute( positionAttribute, vA );
						pB.fromBufferAttribute( positionAttribute, vB );
						pC.fromBufferAttribute( positionAttribute, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						nA.fromBufferAttribute( normalAttribute, vA );
						nB.fromBufferAttribute( normalAttribute, vB );
						nC.fromBufferAttribute( normalAttribute, vC );

						nA.add( cb );
						nB.add( cb );
						nC.add( cb );

						normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
						normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
						normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

						pA.fromBufferAttribute( positionAttribute, i + 0 );
						pB.fromBufferAttribute( positionAttribute, i + 1 );
						pC.fromBufferAttribute( positionAttribute, i + 2 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
						normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
						normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

					}

				}

				this.normalizeNormals();

				normalAttribute.needsUpdate = true;

			}

		}

		normalizeNormals() {

			const normals = this.attributes.normal;

			for ( let i = 0, il = normals.count; i < il; i ++ ) {

				_vector$8.fromBufferAttribute( normals, i );

				_vector$8.normalize();

				normals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

			}

		}

		toNonIndexed() {

			function convertBufferAttribute( attribute, indices ) {

				const array = attribute.array;
				const itemSize = attribute.itemSize;
				const normalized = attribute.normalized;

				const array2 = new array.constructor( indices.length * itemSize );

				let index = 0, index2 = 0;

				for ( let i = 0, l = indices.length; i < l; i ++ ) {

					if ( attribute.isInterleavedBufferAttribute ) {

						index = indices[ i ] * attribute.data.stride + attribute.offset;

					} else {

						index = indices[ i ] * itemSize;

					}

					for ( let j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				return new BufferAttribute( array2, itemSize, normalized );

			}

			//

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
				return this;

			}

			const geometry2 = new BufferGeometry();

			const indices = this.index.array;
			const attributes = this.attributes;

			// attributes

			for ( const name in attributes ) {

				const attribute = attributes[ name ];

				const newAttribute = convertBufferAttribute( attribute, indices );

				geometry2.setAttribute( name, newAttribute );

			}

			// morph attributes

			const morphAttributes = this.morphAttributes;

			for ( const name in morphAttributes ) {

				const morphArray = [];
				const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

					const attribute = morphAttribute[ i ];

					const newAttribute = convertBufferAttribute( attribute, indices );

					morphArray.push( newAttribute );

				}

				geometry2.morphAttributes[ name ] = morphArray;

			}

			geometry2.morphTargetsRelative = this.morphTargetsRelative;

			// groups

			const groups = this.groups;

			for ( let i = 0, l = groups.length; i < l; i ++ ) {

				const group = groups[ i ];
				geometry2.addGroup( group.start, group.count, group.materialIndex );

			}

			return geometry2;

		}

		toJSON() {

			const data = {
				metadata: {
					version: 4.6,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
			if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

			if ( this.parameters !== undefined ) {

				const parameters = this.parameters;

				for ( const key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			// for simplicity the code assumes attributes are not shared across geometries, see #15811

			data.data = { attributes: {} };

			const index = this.index;

			if ( index !== null ) {

				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call( index.array )
				};

			}

			const attributes = this.attributes;

			for ( const key in attributes ) {

				const attribute = attributes[ key ];

				data.data.attributes[ key ] = attribute.toJSON( data.data );

			}

			const morphAttributes = {};
			let hasMorphAttributes = false;

			for ( const key in this.morphAttributes ) {

				const attributeArray = this.morphAttributes[ key ];

				const array = [];

				for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

					const attribute = attributeArray[ i ];

					array.push( attribute.toJSON( data.data ) );

				}

				if ( array.length > 0 ) {

					morphAttributes[ key ] = array;

					hasMorphAttributes = true;

				}

			}

			if ( hasMorphAttributes ) {

				data.data.morphAttributes = morphAttributes;
				data.data.morphTargetsRelative = this.morphTargetsRelative;

			}

			const groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			const boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			// reset

			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// used for storing cloned, shared data

			const data = {};

			// name

			this.name = source.name;

			// index

			const index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone( data ) );

			}

			// attributes

			const attributes = source.attributes;

			for ( const name in attributes ) {

				const attribute = attributes[ name ];
				this.setAttribute( name, attribute.clone( data ) );

			}

			// morph attributes

			const morphAttributes = source.morphAttributes;

			for ( const name in morphAttributes ) {

				const array = [];
				const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

					array.push( morphAttribute[ i ].clone( data ) );

				}

				this.morphAttributes[ name ] = array;

			}

			this.morphTargetsRelative = source.morphTargetsRelative;

			// groups

			const groups = source.groups;

			for ( let i = 0, l = groups.length; i < l; i ++ ) {

				const group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			// bounding box

			const boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			const boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// draw range

			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;

			// user data

			this.userData = source.userData;

			return this;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

	}

	const _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();
	const _ray$3 = /*@__PURE__*/ new Ray();
	const _sphere$6 = /*@__PURE__*/ new Sphere();
	const _sphereHitAt = /*@__PURE__*/ new Vector3();

	const _vA$1 = /*@__PURE__*/ new Vector3();
	const _vB$1 = /*@__PURE__*/ new Vector3();
	const _vC$1 = /*@__PURE__*/ new Vector3();

	const _tempA = /*@__PURE__*/ new Vector3();
	const _morphA = /*@__PURE__*/ new Vector3();

	const _uvA$1 = /*@__PURE__*/ new Vector2$1();
	const _uvB$1 = /*@__PURE__*/ new Vector2$1();
	const _uvC$1 = /*@__PURE__*/ new Vector2$1();

	const _normalA = /*@__PURE__*/ new Vector3();
	const _normalB = /*@__PURE__*/ new Vector3();
	const _normalC = /*@__PURE__*/ new Vector3();

	const _intersectionPoint = /*@__PURE__*/ new Vector3();
	const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

	class Mesh extends Object3D {

		constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

			super();

			this.isMesh = true;

			this.type = 'Mesh';

			this.geometry = geometry;
			this.material = material;

			this.updateMorphTargets();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			if ( source.morphTargetInfluences !== undefined ) {

				this.morphTargetInfluences = source.morphTargetInfluences.slice();

			}

			if ( source.morphTargetDictionary !== undefined ) {

				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

			}

			this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
			this.geometry = source.geometry;

			return this;

		}

		updateMorphTargets() {

			const geometry = this.geometry;

			const morphAttributes = geometry.morphAttributes;
			const keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				const morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						const name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		}

		getVertexPosition( index, target ) {

			const geometry = this.geometry;
			const position = geometry.attributes.position;
			const morphPosition = geometry.morphAttributes.position;
			const morphTargetsRelative = geometry.morphTargetsRelative;

			target.fromBufferAttribute( position, index );

			const morphInfluences = this.morphTargetInfluences;

			if ( morphPosition && morphInfluences ) {

				_morphA.set( 0, 0, 0 );

				for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

					const influence = morphInfluences[ i ];
					const morphAttribute = morphPosition[ i ];

					if ( influence === 0 ) continue;

					_tempA.fromBufferAttribute( morphAttribute, index );

					if ( morphTargetsRelative ) {

						_morphA.addScaledVector( _tempA, influence );

					} else {

						_morphA.addScaledVector( _tempA.sub( target ), influence );

					}

				}

				target.add( _morphA );

			}

			return target;

		}

		raycast( raycaster, intersects ) {

			const geometry = this.geometry;
			const material = this.material;
			const matrixWorld = this.matrixWorld;

			if ( material === undefined ) return;

			// test with bounding sphere in world space

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			_sphere$6.copy( geometry.boundingSphere );
			_sphere$6.applyMatrix4( matrixWorld );

			// check distance from ray origin to bounding sphere

			_ray$3.copy( raycaster.ray ).recast( raycaster.near );

			if ( _sphere$6.containsPoint( _ray$3.origin ) === false ) {

				if ( _ray$3.intersectSphere( _sphere$6, _sphereHitAt ) === null ) return;

				if ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;

			}

			// convert ray to local space of mesh

			_inverseMatrix$3.copy( matrixWorld ).invert();
			_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );

			// test with bounding box in local space

			if ( geometry.boundingBox !== null ) {

				if ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			// test for intersections with geometry

			this._computeIntersections( raycaster, intersects, _ray$3 );

		}

		_computeIntersections( raycaster, intersects, rayLocalSpace ) {

			let intersection;

			const geometry = this.geometry;
			const material = this.material;

			const index = geometry.index;
			const position = geometry.attributes.position;
			const uv = geometry.attributes.uv;
			const uv1 = geometry.attributes.uv1;
			const normal = geometry.attributes.normal;
			const groups = geometry.groups;
			const drawRange = geometry.drawRange;

			if ( index !== null ) {

				// indexed buffer geometry

				if ( Array.isArray( material ) ) {

					for ( let i = 0, il = groups.length; i < il; i ++ ) {

						const group = groups[ i ];
						const groupMaterial = material[ group.materialIndex ];

						const start = Math.max( group.start, drawRange.start );
						const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

						for ( let j = start, jl = end; j < jl; j += 3 ) {

							const a = index.getX( j );
							const b = index.getX( j + 1 );
							const c = index.getX( j + 2 );

							intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
								intersection.face.materialIndex = group.materialIndex;
								intersects.push( intersection );

							}

						}

					}

				} else {

					const start = Math.max( 0, drawRange.start );
					const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

					for ( let i = start, il = end; i < il; i += 3 ) {

						const a = index.getX( i );
						const b = index.getX( i + 1 );
						const c = index.getX( i + 2 );

						intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( position !== undefined ) {

				// non-indexed buffer geometry

				if ( Array.isArray( material ) ) {

					for ( let i = 0, il = groups.length; i < il; i ++ ) {

						const group = groups[ i ];
						const groupMaterial = material[ group.materialIndex ];

						const start = Math.max( group.start, drawRange.start );
						const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

						for ( let j = start, jl = end; j < jl; j += 3 ) {

							const a = j;
							const b = j + 1;
							const c = j + 2;

							intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
								intersection.face.materialIndex = group.materialIndex;
								intersects.push( intersection );

							}

						}

					}

				} else {

					const start = Math.max( 0, drawRange.start );
					const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

					for ( let i = start, il = end; i < il; i += 3 ) {

						const a = i;
						const b = i + 1;
						const c = i + 2;

						intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
							intersects.push( intersection );

						}

					}

				}

			}

		}

	}

	function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

		let intersect;

		if ( material.side === BackSide ) {

			intersect = ray.intersectTriangle( pC, pB, pA, true, point );

		} else {

			intersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );

		}

		if ( intersect === null ) return null;

		_intersectionPointWorld.copy( point );
		_intersectionPointWorld.applyMatrix4( object.matrixWorld );

		const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

		if ( distance < raycaster.near || distance > raycaster.far ) return null;

		return {
			distance: distance,
			point: _intersectionPointWorld.clone(),
			object: object
		};

	}

	function checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {

		object.getVertexPosition( a, _vA$1 );
		object.getVertexPosition( b, _vB$1 );
		object.getVertexPosition( c, _vC$1 );

		const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

		if ( intersection ) {

			if ( uv ) {

				_uvA$1.fromBufferAttribute( uv, a );
				_uvB$1.fromBufferAttribute( uv, b );
				_uvC$1.fromBufferAttribute( uv, c );

				intersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2$1() );

			}

			if ( uv1 ) {

				_uvA$1.fromBufferAttribute( uv1, a );
				_uvB$1.fromBufferAttribute( uv1, b );
				_uvC$1.fromBufferAttribute( uv1, c );

				intersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2$1() );

			}

			if ( normal ) {

				_normalA.fromBufferAttribute( normal, a );
				_normalB.fromBufferAttribute( normal, b );
				_normalC.fromBufferAttribute( normal, c );

				intersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3() );

				if ( intersection.normal.dot( ray.direction ) > 0 ) {

					intersection.normal.multiplyScalar( - 1 );

				}

			}

			const face = {
				a: a,
				b: b,
				c: c,
				normal: new Vector3(),
				materialIndex: 0
			};

			Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

			intersection.face = face;

		}

		return intersection;

	}

	class BoxGeometry extends BufferGeometry {

		constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

			super();

			this.type = 'BoxGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			const scope = this;

			// segments

			widthSegments = Math.floor( widthSegments );
			heightSegments = Math.floor( heightSegments );
			depthSegments = Math.floor( depthSegments );

			// buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];

			// helper variables

			let numberOfVertices = 0;
			let groupStart = 0;

			// build each side of the box geometry

			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
			buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
			buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

			// build geometry

			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

				const segmentWidth = width / gridX;
				const segmentHeight = height / gridY;

				const widthHalf = width / 2;
				const heightHalf = height / 2;
				const depthHalf = depth / 2;

				const gridX1 = gridX + 1;
				const gridY1 = gridY + 1;

				let vertexCounter = 0;
				let groupCount = 0;

				const vector = new Vector3();

				// generate vertices, normals and uvs

				for ( let iy = 0; iy < gridY1; iy ++ ) {

					const y = iy * segmentHeight - heightHalf;

					for ( let ix = 0; ix < gridX1; ix ++ ) {

						const x = ix * segmentWidth - widthHalf;

						// set values to correct vector component

						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;

						// now apply vector to vertex buffer

						vertices.push( vector.x, vector.y, vector.z );

						// set values to correct vector component

						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;

						// now apply vector to normal buffer

						normals.push( vector.x, vector.y, vector.z );

						// uvs

						uvs.push( ix / gridX );
						uvs.push( 1 - ( iy / gridY ) );

						// counters

						vertexCounter += 1;

					}

				}

				// indices

				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment

				for ( let iy = 0; iy < gridY; iy ++ ) {

					for ( let ix = 0; ix < gridX; ix ++ ) {

						const a = numberOfVertices + ix + gridX1 * iy;
						const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

						// increase counter

						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, materialIndex );

				// calculate new start value for groups

				groupStart += groupCount;

				// update total number of vertices

				numberOfVertices += vertexCounter;

			}

		}

		copy( source ) {

			super.copy( source );

			this.parameters = Object.assign( {}, source.parameters );

			return this;

		}

		static fromJSON( data ) {

			return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

		}

	}

	/**
	 * Uniform Utilities
	 */

	function cloneUniforms( src ) {

		const dst = {};

		for ( const u in src ) {

			dst[ u ] = {};

			for ( const p in src[ u ] ) {

				const property = src[ u ][ p ];

				if ( property && ( property.isColor ||
					property.isMatrix3 || property.isMatrix4 ||
					property.isVector2 || property.isVector3 || property.isVector4 ||
					property.isTexture || property.isQuaternion ) ) {

					if ( property.isRenderTargetTexture ) {

						console.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );
						dst[ u ][ p ] = null;

					} else {

						dst[ u ][ p ] = property.clone();

					}

				} else if ( Array.isArray( property ) ) {

					dst[ u ][ p ] = property.slice();

				} else {

					dst[ u ][ p ] = property;

				}

			}

		}

		return dst;

	}

	function mergeUniforms( uniforms ) {

		const merged = {};

		for ( let u = 0; u < uniforms.length; u ++ ) {

			const tmp = cloneUniforms( uniforms[ u ] );

			for ( const p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	}

	function cloneUniformsGroups( src ) {

		const dst = [];

		for ( let u = 0; u < src.length; u ++ ) {

			dst.push( src[ u ].clone() );

		}

		return dst;

	}

	function getUnlitUniformColorSpace( renderer ) {

		if ( renderer.getRenderTarget() === null ) {

			// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
			return renderer.outputColorSpace;

		}

		return ColorManagement.workingColorSpace;

	}

	// Legacy

	const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

	class ShaderMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isShaderMaterial = true;

			this.type = 'ShaderMaterial';

			this.defines = {};
			this.uniforms = {};
			this.uniformsGroups = [];

			this.vertexShader = default_vertex;
			this.fragmentShader = default_fragment;

			this.linewidth = 1;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes

			this.forceSinglePass = true;

			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false, // set to use shader texture LOD
				clipCullDistance: false, // set to use vertex shader clipping
				multiDraw: false // set to use vertex shader multi_draw / enable gl_DrawID
			};

			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv1': [ 0, 0 ]
			};

			this.index0AttributeName = undefined;
			this.uniformsNeedUpdate = false;

			this.glslVersion = null;

			if ( parameters !== undefined ) {

				this.setValues( parameters );

			}

		}

		copy( source ) {

			super.copy( source );

			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;

			this.uniforms = cloneUniforms( source.uniforms );
			this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );

			this.defines = Object.assign( {}, source.defines );

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			this.fog = source.fog;
			this.lights = source.lights;
			this.clipping = source.clipping;

			this.extensions = Object.assign( {}, source.extensions );

			this.glslVersion = source.glslVersion;

			return this;

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			data.glslVersion = this.glslVersion;
			data.uniforms = {};

			for ( const name in this.uniforms ) {

				const uniform = this.uniforms[ name ];
				const value = uniform.value;

				if ( value && value.isTexture ) {

					data.uniforms[ name ] = {
						type: 't',
						value: value.toJSON( meta ).uuid
					};

				} else if ( value && value.isColor ) {

					data.uniforms[ name ] = {
						type: 'c',
						value: value.getHex()
					};

				} else if ( value && value.isVector2 ) {

					data.uniforms[ name ] = {
						type: 'v2',
						value: value.toArray()
					};

				} else if ( value && value.isVector3 ) {

					data.uniforms[ name ] = {
						type: 'v3',
						value: value.toArray()
					};

				} else if ( value && value.isVector4 ) {

					data.uniforms[ name ] = {
						type: 'v4',
						value: value.toArray()
					};

				} else if ( value && value.isMatrix3 ) {

					data.uniforms[ name ] = {
						type: 'm3',
						value: value.toArray()
					};

				} else if ( value && value.isMatrix4 ) {

					data.uniforms[ name ] = {
						type: 'm4',
						value: value.toArray()
					};

				} else {

					data.uniforms[ name ] = {
						value: value
					};

					// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

				}

			}

			if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;

			data.lights = this.lights;
			data.clipping = this.clipping;

			const extensions = {};

			for ( const key in this.extensions ) {

				if ( this.extensions[ key ] === true ) extensions[ key ] = true;

			}

			if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

			return data;

		}

	}

	class Camera extends Object3D {

		constructor() {

			super();

			this.isCamera = true;

			this.type = 'Camera';

			this.matrixWorldInverse = new Matrix4();

			this.projectionMatrix = new Matrix4();
			this.projectionMatrixInverse = new Matrix4();

			this.coordinateSystem = WebGLCoordinateSystem;

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );

			this.projectionMatrix.copy( source.projectionMatrix );
			this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

			this.coordinateSystem = source.coordinateSystem;

			return this;

		}

		getWorldDirection( target ) {

			return super.getWorldDirection( target ).negate();

		}

		updateMatrixWorld( force ) {

			super.updateMatrixWorld( force );

			this.matrixWorldInverse.copy( this.matrixWorld ).invert();

		}

		updateWorldMatrix( updateParents, updateChildren ) {

			super.updateWorldMatrix( updateParents, updateChildren );

			this.matrixWorldInverse.copy( this.matrixWorld ).invert();

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	const _v3$1 = /*@__PURE__*/ new Vector3();
	const _minTarget = /*@__PURE__*/ new Vector2$1();
	const _maxTarget = /*@__PURE__*/ new Vector2$1();


	class PerspectiveCamera extends Camera {

		constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

			super();

			this.isPerspectiveCamera = true;

			this.type = 'PerspectiveCamera';

			this.fov = fov;
			this.zoom = 1;

			this.near = near;
			this.far = far;
			this.focus = 10;

			this.aspect = aspect;
			this.view = null;

			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

			this.updateProjectionMatrix();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		}

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength( focalLength ) {

			/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
			const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		}

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength() {

			const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		}

		getEffectiveFOV() {

			return RAD2DEG * 2 * Math.atan(
				Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

		}

		getFilmWidth() {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		}

		getFilmHeight() {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		}

		/**
		 * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
		 * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
		 */
		getViewBounds( distance, minTarget, maxTarget ) {

			_v3$1.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

			minTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );

			_v3$1.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );

			maxTarget.set( _v3$1.x, _v3$1.y ).multiplyScalar( - distance / _v3$1.z );

		}

		/**
		 * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
		 * Copies the result into the target Vector2, where x is width and y is height.
		 */
		getViewSize( distance, target ) {

			this.getViewBounds( distance, _minTarget, _maxTarget );

			return target.subVectors( _maxTarget, _minTarget );

		}

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   const w = 1920;
		 *   const h = 1080;
		 *   const fullWidth = w * 3;
		 *   const fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		}

		clearViewOffset() {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		}

		updateProjectionMatrix() {

			const near = this.near;
			let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
			let height = 2 * top;
			let width = this.aspect * height;
			let left = - 0.5 * width;
			const view = this.view;

			if ( this.view !== null && this.view.enabled ) {

				const fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			const skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );

			this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	}

	const fov = - 90; // negative fov is not an error
	const aspect = 1;

	class CubeCamera extends Object3D {

		constructor( near, far, renderTarget ) {

			super();

			this.type = 'CubeCamera';

			this.renderTarget = renderTarget;
			this.coordinateSystem = null;
			this.activeMipmapLevel = 0;

			const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
			cameraPX.layers = this.layers;
			this.add( cameraPX );

			const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
			cameraNX.layers = this.layers;
			this.add( cameraNX );

			const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
			cameraPY.layers = this.layers;
			this.add( cameraPY );

			const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
			cameraNY.layers = this.layers;
			this.add( cameraNY );

			const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.layers = this.layers;
			this.add( cameraPZ );

			const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.layers = this.layers;
			this.add( cameraNZ );

		}

		updateCoordinateSystem() {

			const coordinateSystem = this.coordinateSystem;

			const cameras = this.children.concat();

			const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;

			for ( const camera of cameras ) this.remove( camera );

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				cameraPX.up.set( 0, 1, 0 );
				cameraPX.lookAt( 1, 0, 0 );

				cameraNX.up.set( 0, 1, 0 );
				cameraNX.lookAt( - 1, 0, 0 );

				cameraPY.up.set( 0, 0, - 1 );
				cameraPY.lookAt( 0, 1, 0 );

				cameraNY.up.set( 0, 0, 1 );
				cameraNY.lookAt( 0, - 1, 0 );

				cameraPZ.up.set( 0, 1, 0 );
				cameraPZ.lookAt( 0, 0, 1 );

				cameraNZ.up.set( 0, 1, 0 );
				cameraNZ.lookAt( 0, 0, - 1 );

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				cameraPX.up.set( 0, - 1, 0 );
				cameraPX.lookAt( - 1, 0, 0 );

				cameraNX.up.set( 0, - 1, 0 );
				cameraNX.lookAt( 1, 0, 0 );

				cameraPY.up.set( 0, 0, 1 );
				cameraPY.lookAt( 0, 1, 0 );

				cameraNY.up.set( 0, 0, - 1 );
				cameraNY.lookAt( 0, - 1, 0 );

				cameraPZ.up.set( 0, - 1, 0 );
				cameraPZ.lookAt( 0, 0, 1 );

				cameraNZ.up.set( 0, - 1, 0 );
				cameraNZ.lookAt( 0, 0, - 1 );

			} else {

				throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );

			}

			for ( const camera of cameras ) {

				this.add( camera );

				camera.updateMatrixWorld();

			}

		}

		update( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			const { renderTarget, activeMipmapLevel } = this;

			if ( this.coordinateSystem !== renderer.coordinateSystem ) {

				this.coordinateSystem = renderer.coordinateSystem;

				this.updateCoordinateSystem();

			}

			const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

			const currentRenderTarget = renderer.getRenderTarget();
			const currentActiveCubeFace = renderer.getActiveCubeFace();
			const currentActiveMipmapLevel = renderer.getActiveMipmapLevel();

			const currentXrEnabled = renderer.xr.enabled;

			renderer.xr.enabled = false;

			const generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );
			renderer.render( scene, cameraPX );

			renderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );
			renderer.render( scene, cameraNX );

			renderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );
			renderer.render( scene, cameraPY );

			renderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );
			renderer.render( scene, cameraNY );

			renderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );
			renderer.render( scene, cameraPZ );

			// mipmaps are generated during the last call of render()
			// at this point, all sides of the cube render target are defined

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );
			renderer.render( scene, cameraNZ );

			renderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );

			renderer.xr.enabled = currentXrEnabled;

			renderTarget.texture.needsPMREMUpdate = true;

		}

	}

	class CubeTexture extends Texture$1 {

		constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {

			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

			super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

			this.isCubeTexture = true;

			this.flipY = false;

		}

		get images() {

			return this.image;

		}

		set images( value ) {

			this.image = value;

		}

	}

	class WebGLCubeRenderTarget extends WebGLRenderTarget {

		constructor( size = 1, options = {} ) {

			super( size, size, options );

			this.isWebGLCubeRenderTarget = true;

			const image = { width: size, height: size, depth: 1 };
			const images = [ image, image, image, image, image, image ];

			this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

			// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
			// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
			// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

			// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
			// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
			// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

			this.texture.isRenderTargetTexture = true;

			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		}

		fromEquirectangularTexture( renderer, texture ) {

			this.texture.type = texture.type;
			this.texture.colorSpace = texture.colorSpace;

			this.texture.generateMipmaps = texture.generateMipmaps;
			this.texture.minFilter = texture.minFilter;
			this.texture.magFilter = texture.magFilter;

			const shader = {

				uniforms: {
					tEquirect: { value: null },
				},

				vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

				fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
			};

			const geometry = new BoxGeometry( 5, 5, 5 );

			const material = new ShaderMaterial( {

				name: 'CubemapFromEquirect',

				uniforms: cloneUniforms( shader.uniforms ),
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader,
				side: BackSide,
				blending: NoBlending

			} );

			material.uniforms.tEquirect.value = texture;

			const mesh = new Mesh( geometry, material );

			const currentMinFilter = texture.minFilter;

			// Avoid blurred poles
			if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

			const camera = new CubeCamera( 1, 10, this );
			camera.update( renderer, mesh );

			texture.minFilter = currentMinFilter;

			mesh.geometry.dispose();
			mesh.material.dispose();

			return this;

		}

		clear( renderer, color, depth, stencil ) {

			const currentRenderTarget = renderer.getRenderTarget();

			for ( let i = 0; i < 6; i ++ ) {

				renderer.setRenderTarget( this, i );

				renderer.clear( color, depth, stencil );

			}

			renderer.setRenderTarget( currentRenderTarget );

		}

	}

	const _vector1 = /*@__PURE__*/ new Vector3();
	const _vector2 = /*@__PURE__*/ new Vector3();
	const _normalMatrix = /*@__PURE__*/ new Matrix3();

	class Plane {

		constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

			this.isPlane = true;

			// normal is assumed to be normalized

			this.normal = normal;
			this.constant = constant;

		}

		set( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		}

		setComponents( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		}

		setFromNormalAndCoplanarPoint( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		}

		setFromCoplanarPoints( a, b, c ) {

			const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		}

		copy( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		}

		normalize() {

			// Note: will lead to a divide by zero if the plane is invalid.

			const inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		}

		negate() {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		}

		distanceToPoint( point ) {

			return this.normal.dot( point ) + this.constant;

		}

		distanceToSphere( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		}

		projectPoint( point, target ) {

			return target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );

		}

		intersectLine( line, target ) {

			const direction = line.delta( _vector1 );

			const denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return target.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return null;

			}

			const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return null;

			}

			return target.copy( line.start ).addScaledVector( direction, t );

		}

		intersectsLine( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			const startSign = this.distanceToPoint( line.start );
			const endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		}

		intersectsBox( box ) {

			return box.intersectsPlane( this );

		}

		intersectsSphere( sphere ) {

			return sphere.intersectsPlane( this );

		}

		coplanarPoint( target ) {

			return target.copy( this.normal ).multiplyScalar( - this.constant );

		}

		applyMatrix4( matrix, optionalNormalMatrix ) {

			const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

			const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

			const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		}

		translate( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		}

		equals( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	const _sphere$5 = /*@__PURE__*/ new Sphere();
	const _vector$7 = /*@__PURE__*/ new Vector3();

	class Frustum {

		constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

			this.planes = [ p0, p1, p2, p3, p4, p5 ];

		}

		set( p0, p1, p2, p3, p4, p5 ) {

			const planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		}

		copy( frustum ) {

			const planes = this.planes;

			for ( let i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		}

		setFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {

			const planes = this.planes;
			const me = m.elements;
			const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				planes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();

			} else {

				throw new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );

			}

			return this;

		}

		intersectsObject( object ) {

			if ( object.boundingSphere !== undefined ) {

				if ( object.boundingSphere === null ) object.computeBoundingSphere();

				_sphere$5.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );

			} else {

				const geometry = object.geometry;

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				_sphere$5.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

			}

			return this.intersectsSphere( _sphere$5 );

		}

		intersectsSprite( sprite ) {

			_sphere$5.center.set( 0, 0, 0 );
			_sphere$5.radius = 0.7071067811865476;
			_sphere$5.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( _sphere$5 );

		}

		intersectsSphere( sphere ) {

			const planes = this.planes;
			const center = sphere.center;
			const negRadius = - sphere.radius;

			for ( let i = 0; i < 6; i ++ ) {

				const distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		}

		intersectsBox( box ) {

			const planes = this.planes;

			for ( let i = 0; i < 6; i ++ ) {

				const plane = planes[ i ];

				// corner at max distance

				_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				if ( plane.distanceToPoint( _vector$7 ) < 0 ) {

					return false;

				}

			}

			return true;

		}

		containsPoint( point ) {

			const planes = this.planes;

			for ( let i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	function WebGLAnimation() {

		let context = null;
		let isAnimating = false;
		let animationLoop = null;
		let requestId = null;

		function onAnimationFrame( time, frame ) {

			animationLoop( time, frame );

			requestId = context.requestAnimationFrame( onAnimationFrame );

		}

		return {

			start: function () {

				if ( isAnimating === true ) return;
				if ( animationLoop === null ) return;

				requestId = context.requestAnimationFrame( onAnimationFrame );

				isAnimating = true;

			},

			stop: function () {

				context.cancelAnimationFrame( requestId );

				isAnimating = false;

			},

			setAnimationLoop: function ( callback ) {

				animationLoop = callback;

			},

			setContext: function ( value ) {

				context = value;

			}

		};

	}

	function WebGLAttributes( gl, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		const buffers = new WeakMap();

		function createBuffer( attribute, bufferType ) {

			const array = attribute.array;
			const usage = attribute.usage;
			const size = array.byteLength;

			const buffer = gl.createBuffer();

			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );

			attribute.onUploadCallback();

			let type;

			if ( array instanceof Float32Array ) {

				type = gl.FLOAT;

			} else if ( array instanceof Uint16Array ) {

				if ( attribute.isFloat16BufferAttribute ) {

					if ( isWebGL2 ) {

						type = gl.HALF_FLOAT;

					} else {

						throw new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );

					}

				} else {

					type = gl.UNSIGNED_SHORT;

				}

			} else if ( array instanceof Int16Array ) {

				type = gl.SHORT;

			} else if ( array instanceof Uint32Array ) {

				type = gl.UNSIGNED_INT;

			} else if ( array instanceof Int32Array ) {

				type = gl.INT;

			} else if ( array instanceof Int8Array ) {

				type = gl.BYTE;

			} else if ( array instanceof Uint8Array ) {

				type = gl.UNSIGNED_BYTE;

			} else if ( array instanceof Uint8ClampedArray ) {

				type = gl.UNSIGNED_BYTE;

			} else {

				throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );

			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version,
				size: size
			};

		}

		function updateBuffer( buffer, attribute, bufferType ) {

			const array = attribute.array;
			const updateRange = attribute._updateRange; // @deprecated, r159
			const updateRanges = attribute.updateRanges;

			gl.bindBuffer( bufferType, buffer );

			if ( updateRange.count === - 1 && updateRanges.length === 0 ) {

				// Not using update ranges
				gl.bufferSubData( bufferType, 0, array );

			}

			if ( updateRanges.length !== 0 ) {

				for ( let i = 0, l = updateRanges.length; i < l; i ++ ) {

					const range = updateRanges[ i ];
					if ( isWebGL2 ) {

						gl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,
							array, range.start, range.count );

					} else {

						gl.bufferSubData( bufferType, range.start * array.BYTES_PER_ELEMENT,
							array.subarray( range.start, range.start + range.count ) );

					}

				}

				attribute.clearUpdateRanges();

			}

			// @deprecated, r159
			if ( updateRange.count !== - 1 ) {

				if ( isWebGL2 ) {

					gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
						array, updateRange.offset, updateRange.count );

				} else {

					gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
						array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

				}

				updateRange.count = - 1; // reset range

			}

			attribute.onUploadCallback();

		}

		//

		function get( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			return buffers.get( attribute );

		}

		function remove( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			const data = buffers.get( attribute );

			if ( data ) {

				gl.deleteBuffer( data.buffer );

				buffers.delete( attribute );

			}

		}

		function update( attribute, bufferType ) {

			if ( attribute.isGLBufferAttribute ) {

				const cached = buffers.get( attribute );

				if ( ! cached || cached.version < attribute.version ) {

					buffers.set( attribute, {
						buffer: attribute.buffer,
						type: attribute.type,
						bytesPerElement: attribute.elementSize,
						version: attribute.version
					} );

				}

				return;

			}

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			const data = buffers.get( attribute );

			if ( data === undefined ) {

				buffers.set( attribute, createBuffer( attribute, bufferType ) );

			} else if ( data.version < attribute.version ) {

				if ( data.size !== attribute.array.byteLength ) {

					throw new Error( 'THREE.WebGLAttributes: The size of the buffer attribute\'s array buffer does not match the original size. Resizing buffer attributes is not supported.' );

				}

				updateBuffer( data.buffer, attribute, bufferType );

				data.version = attribute.version;

			}

		}

		return {

			get: get,
			remove: remove,
			update: update

		};

	}

	class PlaneGeometry extends BufferGeometry {

		constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

			super();

			this.type = 'PlaneGeometry';

			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};

			const width_half = width / 2;
			const height_half = height / 2;

			const gridX = Math.floor( widthSegments );
			const gridY = Math.floor( heightSegments );

			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;

			const segment_width = width / gridX;
			const segment_height = height / gridY;

			//

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];

			for ( let iy = 0; iy < gridY1; iy ++ ) {

				const y = iy * segment_height - height_half;

				for ( let ix = 0; ix < gridX1; ix ++ ) {

					const x = ix * segment_width - width_half;

					vertices.push( x, - y, 0 );

					normals.push( 0, 0, 1 );

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

				}

			}

			for ( let iy = 0; iy < gridY; iy ++ ) {

				for ( let ix = 0; ix < gridX; ix ++ ) {

					const a = ix + gridX1 * iy;
					const b = ix + gridX1 * ( iy + 1 );
					const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					const d = ( ix + 1 ) + gridX1 * iy;

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		copy( source ) {

			super.copy( source );

			this.parameters = Object.assign( {}, source.parameters );

			return this;

		}

		static fromJSON( data ) {

			return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

		}

	}

	var alphahash_fragment = "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";

	var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var alphatest_fragment = "#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";

	var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var batching_pars_vertex = "#ifdef USE_BATCHING\n\tattribute float batchId;\n\tuniform highp sampler2D batchingTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";

	var batching_vertex = "#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( batchId );\n#endif";

	var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";

	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

	var bsdfs = "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";

	var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

	var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

	var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

	var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

	var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

	var colorspace_pars_fragment = "\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n\tvec3( 0.8224621, 0.177538, 0.0 ),\n\tvec3( 0.0331941, 0.9668058, 0.0 ),\n\tvec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.2249401, - 0.2249404, 0.0 ),\n\tvec3( - 0.0420569, 1.0420571, 0.0 ),\n\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn sRGBTransferOETF( value );\n}";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

	var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

	var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

	var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";

	var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";

	var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

	var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";

	var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

	var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

	var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

	var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

	var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[MORPHTARGETS_COUNT];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";

	var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t#endif\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\t#ifndef USE_INSTANCING_MORPH\n\t\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\t#endif\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

	var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";

	var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

	var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

	var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

	var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";

	var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";

	var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";

	var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";

	var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

	var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

	var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

	var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

	var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

	var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

	var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

	var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tfloat startCompression = 0.8 - 0.04;\n\tfloat desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min(color.r, min(color.g, color.b));\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max(color.r, max(color.g, color.b));\n\tif (peak < startCompression) return color;\n\tfloat d = 1. - startCompression;\n\tfloat newPeak = 1. - d * d / (peak + d - startCompression);\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\n\treturn mix(color, vec3(1, 1, 1), g);\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

	var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";

	var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";

	var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

	var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

	const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

	const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

	const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

	const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

	const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

	const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

	const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	const vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

	const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

	const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

	const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

	const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	const vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

	const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

	const ShaderChunk = {
		alphahash_fragment: alphahash_fragment,
		alphahash_pars_fragment: alphahash_pars_fragment,
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		alphatest_pars_fragment: alphatest_pars_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		batching_pars_vertex: batching_pars_vertex,
		batching_vertex: batching_vertex,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		iridescence_fragment: iridescence_fragment,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		colorspace_fragment: colorspace_fragment,
		colorspace_pars_fragment: colorspace_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_common_pars_fragment: envmap_common_pars_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_fragment: lights_lambert_fragment,
		lights_lambert_pars_fragment: lights_lambert_pars_fragment,
		lights_pars_begin: lights_pars_begin,
		lights_toon_fragment: lights_toon_fragment,
		lights_toon_pars_fragment: lights_toon_pars_fragment,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphinstance_vertex: morphinstance_vertex,
		morphcolor_vertex: morphcolor_vertex,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normal_pars_fragment: normal_pars_fragment,
		normal_pars_vertex: normal_pars_vertex,
		normal_vertex: normal_vertex,
		normalmap_pars_fragment: normalmap_pars_fragment,
		clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
		clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
		clearcoat_pars_fragment: clearcoat_pars_fragment,
		iridescence_pars_fragment: iridescence_pars_fragment,
		opaque_fragment: opaque_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		transmission_fragment: transmission_fragment,
		transmission_pars_fragment: transmission_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		worldpos_vertex: worldpos_vertex,

		background_vert: vertex$h,
		background_frag: fragment$h,
		backgroundCube_vert: vertex$g,
		backgroundCube_frag: fragment$g,
		cube_vert: vertex$f,
		cube_frag: fragment$f,
		depth_vert: vertex$e,
		depth_frag: fragment$e,
		distanceRGBA_vert: vertex$d,
		distanceRGBA_frag: fragment$d,
		equirect_vert: vertex$c,
		equirect_frag: fragment$c,
		linedashed_vert: vertex$b,
		linedashed_frag: fragment$b,
		meshbasic_vert: vertex$a,
		meshbasic_frag: fragment$a,
		meshlambert_vert: vertex$9,
		meshlambert_frag: fragment$9,
		meshmatcap_vert: vertex$8,
		meshmatcap_frag: fragment$8,
		meshnormal_vert: vertex$7,
		meshnormal_frag: fragment$7,
		meshphong_vert: vertex$6,
		meshphong_frag: fragment$6,
		meshphysical_vert: vertex$5,
		meshphysical_frag: fragment$5,
		meshtoon_vert: vertex$4,
		meshtoon_frag: fragment$4,
		points_vert: vertex$3,
		points_frag: fragment$3,
		shadow_vert: vertex$2,
		shadow_frag: fragment$2,
		sprite_vert: vertex$1,
		sprite_frag: fragment$1
	};

	/**
	 * Uniforms library for shared webgl shaders
	 */

	const UniformsLib = {

		common: {

			diffuse: { value: /*@__PURE__*/ new Color$1( 0xffffff ) },
			opacity: { value: 1.0 },

			map: { value: null },
			mapTransform: { value: /*@__PURE__*/ new Matrix3() },

			alphaMap: { value: null },
			alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },

			alphaTest: { value: 0 }

		},

		specularmap: {

			specularMap: { value: null },
			specularMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		envmap: {

			envMap: { value: null },
			envMapRotation: { value: /*@__PURE__*/ new Matrix3() },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 }, // basic, lambert, phong
			ior: { value: 1.5 }, // physical
			refractionRatio: { value: 0.98 }, // basic, lambert, phong

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 },
			aoMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 },
			lightMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			normalScale: { value: /*@__PURE__*/ new Vector2$1( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		emissivemap: {

			emissiveMap: { value: null },
			emissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		metalnessmap: {

			metalnessMap: { value: null },
			metalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		roughnessmap: {

			roughnessMap: { value: null },
			roughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		gradientmap: {

			gradientMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: /*@__PURE__*/ new Color$1( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			lightProbe: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {}
			} },

			directionalLightShadows: { value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {}
			} },

			spotLightShadows: { value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotLightMap: { value: [] },
			spotShadowMap: { value: [] },
			spotLightMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {}
			} },

			pointLightShadows: { value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },

			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} },

			ltc_1: { value: null },
			ltc_2: { value: null }

		},

		points: {

			diffuse: { value: /*@__PURE__*/ new Color$1( 0xffffff ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			alphaMap: { value: null },
			alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			alphaTest: { value: 0 },
			uvTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		sprite: {

			diffuse: { value: /*@__PURE__*/ new Color$1( 0xffffff ) },
			opacity: { value: 1.0 },
			center: { value: /*@__PURE__*/ new Vector2$1( 0.5, 0.5 ) },
			rotation: { value: 0.0 },
			map: { value: null },
			mapTransform: { value: /*@__PURE__*/ new Matrix3() },
			alphaMap: { value: null },
			alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			alphaTest: { value: 0 }

		}

	};

	const ShaderLib = {

		basic: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
					specular: { value: /*@__PURE__*/ new Color$1( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
					roughness: { value: 1.0 },
					metalness: { value: 0.0 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		toon: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color$1( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshtoon_vert,
			fragmentShader: ShaderChunk.meshtoon_frag

		},

		matcap: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				{
					matcap: { value: null }
				}
			] ),

			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag

		},

		points: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.points,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),

			vertexShader: ShaderChunk.meshnormal_vert,
			fragmentShader: ShaderChunk.meshnormal_frag

		},

		sprite: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.sprite,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag

		},

		background: {

			uniforms: {
				uvTransform: { value: /*@__PURE__*/ new Matrix3() },
				t2D: { value: null },
				backgroundIntensity: { value: 1 }
			},

			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag

		},

		backgroundCube: {

			uniforms: {
				envMap: { value: null },
				flipEnvMap: { value: - 1 },
				backgroundBlurriness: { value: 0 },
				backgroundIntensity: { value: 1 },
				backgroundRotation: { value: /*@__PURE__*/ new Matrix3() }
			},

			vertexShader: ShaderChunk.backgroundCube_vert,
			fragmentShader: ShaderChunk.backgroundCube_frag

		},

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		equirect: {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: /*@__PURE__*/ new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		},

		shadow: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: /*@__PURE__*/ new Color$1( 0x00000 ) },
					opacity: { value: 1.0 }
				},
			] ),

			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag

		}

	};

	ShaderLib.physical = {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			ShaderLib.standard.uniforms,
			{
				clearcoat: { value: 0 },
				clearcoatMap: { value: null },
				clearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				clearcoatNormalMap: { value: null },
				clearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2$1( 1, 1 ) },
				clearcoatRoughness: { value: 0 },
				clearcoatRoughnessMap: { value: null },
				clearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				iridescence: { value: 0 },
				iridescenceMap: { value: null },
				iridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				iridescenceIOR: { value: 1.3 },
				iridescenceThicknessMinimum: { value: 100 },
				iridescenceThicknessMaximum: { value: 400 },
				iridescenceThicknessMap: { value: null },
				iridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				sheen: { value: 0 },
				sheenColor: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
				sheenColorMap: { value: null },
				sheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				sheenRoughness: { value: 1 },
				sheenRoughnessMap: { value: null },
				sheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				transmission: { value: 0 },
				transmissionMap: { value: null },
				transmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2$1() },
				transmissionSamplerMap: { value: null },
				thickness: { value: 0 },
				thicknessMap: { value: null },
				thicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				attenuationDistance: { value: 0 },
				attenuationColor: { value: /*@__PURE__*/ new Color$1( 0x000000 ) },
				specularColor: { value: /*@__PURE__*/ new Color$1( 1, 1, 1 ) },
				specularColorMap: { value: null },
				specularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				specularIntensity: { value: 1 },
				specularIntensityMap: { value: null },
				specularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				anisotropyVector: { value: /*@__PURE__*/ new Vector2$1() },
				anisotropyMap: { value: null },
				anisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	const _rgb = { r: 0, b: 0, g: 0 };
	const _e1$1 = /*@__PURE__*/ new Euler();
	const _m1$1 = /*@__PURE__*/ new Matrix4();

	function WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {

		const clearColor = new Color$1( 0x000000 );
		let clearAlpha = alpha === true ? 0 : 1;

		let planeMesh;
		let boxMesh;

		let currentBackground = null;
		let currentBackgroundVersion = 0;
		let currentTonemapping = null;

		function render( renderList, scene ) {

			let forceClear = false;
			let background = scene.isScene === true ? scene.background : null;

			if ( background && background.isTexture ) {

				const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
				background = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );

			}

			if ( background === null ) {

				setClear( clearColor, clearAlpha );

			} else if ( background && background.isColor ) {

				setClear( background, 1 );
				forceClear = true;

			}

			const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();

			if ( environmentBlendMode === 'additive' ) {

				state.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );

			} else if ( environmentBlendMode === 'alpha-blend' ) {

				state.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );

			}

			if ( renderer.autoClear || forceClear ) {

				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

			}

			if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {

				if ( boxMesh === undefined ) {

					boxMesh = new Mesh(
						new BoxGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							name: 'BackgroundCubeMaterial',
							uniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),
							vertexShader: ShaderLib.backgroundCube.vertexShader,
							fragmentShader: ShaderLib.backgroundCube.fragmentShader,
							side: BackSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					boxMesh.geometry.deleteAttribute( 'normal' );
					boxMesh.geometry.deleteAttribute( 'uv' );

					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

						this.matrixWorld.copyPosition( camera.matrixWorld );

					};

					// add "envMap" material property so the renderer can evaluate it like for built-in materials
					Object.defineProperty( boxMesh.material, 'envMap', {

						get: function () {

							return this.uniforms.envMap.value;

						}

					} );

					objects.update( boxMesh );

				}

				_e1$1.copy( scene.backgroundRotation );

				// accommodate left-handed frame
				_e1$1.x *= - 1; _e1$1.y *= - 1; _e1$1.z *= - 1;

				if ( background.isCubeTexture && background.isRenderTargetTexture === false ) {

					// environment maps which are not cube render targets or PMREMs follow a different convention
					_e1$1.y *= - 1;
					_e1$1.z *= - 1;

				}

				boxMesh.material.uniforms.envMap.value = background;
				boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;
				boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
				boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
				boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4( _m1$1.makeRotationFromEuler( _e1$1 ) );
				boxMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;

				if ( currentBackground !== background ||
					currentBackgroundVersion !== background.version ||
					currentTonemapping !== renderer.toneMapping ) {

					boxMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;

				}

				boxMesh.layers.enableAll();

				// push to the pre-sorted opaque render list
				renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

			} else if ( background && background.isTexture ) {

				if ( planeMesh === undefined ) {

					planeMesh = new Mesh(
						new PlaneGeometry( 2, 2 ),
						new ShaderMaterial( {
							name: 'BackgroundMaterial',
							uniforms: cloneUniforms( ShaderLib.background.uniforms ),
							vertexShader: ShaderLib.background.vertexShader,
							fragmentShader: ShaderLib.background.fragmentShader,
							side: FrontSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					planeMesh.geometry.deleteAttribute( 'normal' );

					// add "map" material property so the renderer can evaluate it like for built-in materials
					Object.defineProperty( planeMesh.material, 'map', {

						get: function () {

							return this.uniforms.t2D.value;

						}

					} );

					objects.update( planeMesh );

				}

				planeMesh.material.uniforms.t2D.value = background;
				planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
				planeMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;

				if ( background.matrixAutoUpdate === true ) {

					background.updateMatrix();

				}

				planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

				if ( currentBackground !== background ||
					currentBackgroundVersion !== background.version ||
					currentTonemapping !== renderer.toneMapping ) {

					planeMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;

				}

				planeMesh.layers.enableAll();

				// push to the pre-sorted opaque render list
				renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

			}

		}

		function setClear( color, alpha ) {

			color.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );

			state.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );

		}

		return {

			getClearColor: function () {

				return clearColor;

			},
			setClearColor: function ( color, alpha = 1 ) {

				clearColor.set( color );
				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			getClearAlpha: function () {

				return clearAlpha;

			},
			setClearAlpha: function ( alpha ) {

				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			render: render

		};

	}

	function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

		const maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );

		const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
		const vaoAvailable = capabilities.isWebGL2 || extension !== null;

		const bindingStates = {};

		const defaultState = createBindingState( null );
		let currentState = defaultState;
		let forceUpdate = false;

		function setup( object, material, program, geometry, index ) {

			let updateBuffers = false;

			if ( vaoAvailable ) {

				const state = getBindingState( geometry, program, material );

				if ( currentState !== state ) {

					currentState = state;
					bindVertexArrayObject( currentState.object );

				}

				updateBuffers = needsUpdate( object, geometry, program, index );

				if ( updateBuffers ) saveCache( object, geometry, program, index );

			} else {

				const wireframe = ( material.wireframe === true );

				if ( currentState.geometry !== geometry.id ||
					currentState.program !== program.id ||
					currentState.wireframe !== wireframe ) {

					currentState.geometry = geometry.id;
					currentState.program = program.id;
					currentState.wireframe = wireframe;

					updateBuffers = true;

				}

			}

			if ( index !== null ) {

				attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			if ( updateBuffers || forceUpdate ) {

				forceUpdate = false;

				setupVertexAttributes( object, material, program, geometry );

				if ( index !== null ) {

					gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );

				}

			}

		}

		function createVertexArrayObject() {

			if ( capabilities.isWebGL2 ) return gl.createVertexArray();

			return extension.createVertexArrayOES();

		}

		function bindVertexArrayObject( vao ) {

			if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );

			return extension.bindVertexArrayOES( vao );

		}

		function deleteVertexArrayObject( vao ) {

			if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );

			return extension.deleteVertexArrayOES( vao );

		}

		function getBindingState( geometry, program, material ) {

			const wireframe = ( material.wireframe === true );

			let programMap = bindingStates[ geometry.id ];

			if ( programMap === undefined ) {

				programMap = {};
				bindingStates[ geometry.id ] = programMap;

			}

			let stateMap = programMap[ program.id ];

			if ( stateMap === undefined ) {

				stateMap = {};
				programMap[ program.id ] = stateMap;

			}

			let state = stateMap[ wireframe ];

			if ( state === undefined ) {

				state = createBindingState( createVertexArrayObject() );
				stateMap[ wireframe ] = state;

			}

			return state;

		}

		function createBindingState( vao ) {

			const newAttributes = [];
			const enabledAttributes = [];
			const attributeDivisors = [];

			for ( let i = 0; i < maxVertexAttributes; i ++ ) {

				newAttributes[ i ] = 0;
				enabledAttributes[ i ] = 0;
				attributeDivisors[ i ] = 0;

			}

			return {

				// for backward compatibility on non-VAO support browser
				geometry: null,
				program: null,
				wireframe: false,

				newAttributes: newAttributes,
				enabledAttributes: enabledAttributes,
				attributeDivisors: attributeDivisors,
				object: vao,
				attributes: {},
				index: null

			};

		}

		function needsUpdate( object, geometry, program, index ) {

			const cachedAttributes = currentState.attributes;
			const geometryAttributes = geometry.attributes;

			let attributesNum = 0;

			const programAttributes = program.getAttributes();

			for ( const name in programAttributes ) {

				const programAttribute = programAttributes[ name ];

				if ( programAttribute.location >= 0 ) {

					const cachedAttribute = cachedAttributes[ name ];
					let geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute === undefined ) {

						if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
						if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

					}

					if ( cachedAttribute === undefined ) return true;

					if ( cachedAttribute.attribute !== geometryAttribute ) return true;

					if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;

					attributesNum ++;

				}

			}

			if ( currentState.attributesNum !== attributesNum ) return true;

			if ( currentState.index !== index ) return true;

			return false;

		}

		function saveCache( object, geometry, program, index ) {

			const cache = {};
			const attributes = geometry.attributes;
			let attributesNum = 0;

			const programAttributes = program.getAttributes();

			for ( const name in programAttributes ) {

				const programAttribute = programAttributes[ name ];

				if ( programAttribute.location >= 0 ) {

					let attribute = attributes[ name ];

					if ( attribute === undefined ) {

						if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
						if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;

					}

					const data = {};
					data.attribute = attribute;

					if ( attribute && attribute.data ) {

						data.data = attribute.data;

					}

					cache[ name ] = data;

					attributesNum ++;

				}

			}

			currentState.attributes = cache;
			currentState.attributesNum = attributesNum;

			currentState.index = index;

		}

		function initAttributes() {

			const newAttributes = currentState.newAttributes;

			for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			enableAttributeAndDivisor( attribute, 0 );

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;
			const attributeDivisors = currentState.attributeDivisors;

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

				extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;

			for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {

			if ( integer === true ) {

				gl.vertexAttribIPointer( index, size, type, stride, offset );

			} else {

				gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

			}

		}

		function setupVertexAttributes( object, material, program, geometry ) {

			if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

			}

			initAttributes();

			const geometryAttributes = geometry.attributes;

			const programAttributes = program.getAttributes();

			const materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( const name in programAttributes ) {

				const programAttribute = programAttributes[ name ];

				if ( programAttribute.location >= 0 ) {

					let geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute === undefined ) {

						if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
						if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

					}

					if ( geometryAttribute !== undefined ) {

						const normalized = geometryAttribute.normalized;
						const size = geometryAttribute.itemSize;

						const attribute = attributes.get( geometryAttribute );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) continue;

						const buffer = attribute.buffer;
						const type = attribute.type;
						const bytesPerElement = attribute.bytesPerElement;

						// check for integer attributes (WebGL 2 only)

						const integer = ( capabilities.isWebGL2 === true && ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType ) );

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							const data = geometryAttribute.data;
							const stride = data.stride;
							const offset = geometryAttribute.offset;

							if ( data.isInstancedInterleavedBuffer ) {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

								}

								if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

									geometry._maxInstanceCount = data.meshPerAttribute * data.count;

								}

							} else {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttribute( programAttribute.location + i );

								}

							}

							gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								vertexAttribPointer(
									programAttribute.location + i,
									size / programAttribute.locationSize,
									type,
									normalized,
									stride * bytesPerElement,
									( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,
									integer
								);

							}

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

								}

								if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

									geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttribute( programAttribute.location + i );

								}

							}

							gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								vertexAttribPointer(
									programAttribute.location + i,
									size / programAttribute.locationSize,
									type,
									normalized,
									size * bytesPerElement,
									( size / programAttribute.locationSize ) * i * bytesPerElement,
									integer
								);

							}

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						const value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									gl.vertexAttrib2fv( programAttribute.location, value );
									break;

								case 3:
									gl.vertexAttrib3fv( programAttribute.location, value );
									break;

								case 4:
									gl.vertexAttrib4fv( programAttribute.location, value );
									break;

								default:
									gl.vertexAttrib1fv( programAttribute.location, value );

							}

						}

					}

				}

			}

			disableUnusedAttributes();

		}

		function dispose() {

			reset();

			for ( const geometryId in bindingStates ) {

				const programMap = bindingStates[ geometryId ];

				for ( const programId in programMap ) {

					const stateMap = programMap[ programId ];

					for ( const wireframe in stateMap ) {

						deleteVertexArrayObject( stateMap[ wireframe ].object );

						delete stateMap[ wireframe ];

					}

					delete programMap[ programId ];

				}

				delete bindingStates[ geometryId ];

			}

		}

		function releaseStatesOfGeometry( geometry ) {

			if ( bindingStates[ geometry.id ] === undefined ) return;

			const programMap = bindingStates[ geometry.id ];

			for ( const programId in programMap ) {

				const stateMap = programMap[ programId ];

				for ( const wireframe in stateMap ) {

					deleteVertexArrayObject( stateMap[ wireframe ].object );

					delete stateMap[ wireframe ];

				}

				delete programMap[ programId ];

			}

			delete bindingStates[ geometry.id ];

		}

		function releaseStatesOfProgram( program ) {

			for ( const geometryId in bindingStates ) {

				const programMap = bindingStates[ geometryId ];

				if ( programMap[ program.id ] === undefined ) continue;

				const stateMap = programMap[ program.id ];

				for ( const wireframe in stateMap ) {

					deleteVertexArrayObject( stateMap[ wireframe ].object );

					delete stateMap[ wireframe ];

				}

				delete programMap[ program.id ];

			}

		}

		function reset() {

			resetDefaultState();
			forceUpdate = true;

			if ( currentState === defaultState ) return;

			currentState = defaultState;
			bindVertexArrayObject( currentState.object );

		}

		// for backward-compatibility

		function resetDefaultState() {

			defaultState.geometry = null;
			defaultState.program = null;
			defaultState.wireframe = false;

		}

		return {

			setup: setup,
			reset: reset,
			resetDefaultState: resetDefaultState,
			dispose: dispose,
			releaseStatesOfGeometry: releaseStatesOfGeometry,
			releaseStatesOfProgram: releaseStatesOfProgram,

			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			disableUnusedAttributes: disableUnusedAttributes

		};

	}

	function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		let mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			info.update( count, mode, 1 );

		}

		function renderInstances( start, count, primcount ) {

			if ( primcount === 0 ) return;

			let extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawArraysInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawArraysInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, start, count, primcount );

			info.update( count, mode, primcount );

		}

		function renderMultiDraw( starts, counts, drawCount ) {

			if ( drawCount === 0 ) return;

			const extension = extensions.get( 'WEBGL_multi_draw' );
			if ( extension === null ) {

				for ( let i = 0; i < drawCount; i ++ ) {

					this.render( starts[ i ], counts[ i ] );

				}

			} else {

				extension.multiDrawArraysWEBGL( mode, starts, 0, counts, 0, drawCount );

				let elementCount = 0;
				for ( let i = 0; i < drawCount; i ++ ) {

					elementCount += counts[ i ];

				}

				info.update( elementCount, mode, 1 );

			}

		}

		//

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;
		this.renderMultiDraw = renderMultiDraw;

	}

	function WebGLCapabilities( gl, extensions, parameters ) {

		let maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

				const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
					gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
					gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';

		let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		const maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );

		const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

		const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		const vertexTextures = maxVertexTextures > 0;
		const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
		const floatVertexTextures = vertexTextures && floatFragmentTextures;

		const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;

		return {

			isWebGL2: isWebGL2,

			drawBuffers: drawBuffers,

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,

			maxSamples: maxSamples

		};

	}

	function WebGLClipping( properties ) {

		const scope = this;

		let globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false;

		const plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function ( planes, enableLocalClipping ) {

			const enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function () {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function () {

			renderingShadows = false;

		};

		this.setGlobalState = function ( planes, camera ) {

			globalState = projectPlanes( planes, camera, 0 );

		};

		this.setState = function ( material, camera, useCache ) {

			const planes = material.clippingPlanes,
				clipIntersection = material.clipIntersection,
				clipShadows = material.clipShadows;

			const materialProperties = properties.get( material );

			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

				// there's no local clipping

				if ( renderingShadows ) {

					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();

				}

			} else {

				const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4;

				let dstArray = materialProperties.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, useCache );

				for ( let i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				materialProperties.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			const nPlanes = planes !== null ? planes.length : 0;
			let dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					const flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;
			scope.numIntersection = 0;

			return dstArray;

		}

	}

	function WebGLCubeMaps( renderer ) {

		let cubemaps = new WeakMap();

		function mapTextureMapping( texture, mapping ) {

			if ( mapping === EquirectangularReflectionMapping ) {

				texture.mapping = CubeReflectionMapping;

			} else if ( mapping === EquirectangularRefractionMapping ) {

				texture.mapping = CubeRefractionMapping;

			}

			return texture;

		}

		function get( texture ) {

			if ( texture && texture.isTexture ) {

				const mapping = texture.mapping;

				if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

					if ( cubemaps.has( texture ) ) {

						const cubemap = cubemaps.get( texture ).texture;
						return mapTextureMapping( cubemap, texture.mapping );

					} else {

						const image = texture.image;

						if ( image && image.height > 0 ) {

							const renderTarget = new WebGLCubeRenderTarget( image.height );
							renderTarget.fromEquirectangularTexture( renderer, texture );
							cubemaps.set( texture, renderTarget );

							texture.addEventListener( 'dispose', onTextureDispose );

							return mapTextureMapping( renderTarget.texture, texture.mapping );

						} else {

							// image not yet ready. try the conversion next frame

							return null;

						}

					}

				}

			}

			return texture;

		}

		function onTextureDispose( event ) {

			const texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			const cubemap = cubemaps.get( texture );

			if ( cubemap !== undefined ) {

				cubemaps.delete( texture );
				cubemap.dispose();

			}

		}

		function dispose() {

			cubemaps = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	class OrthographicCamera extends Camera {

		constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

			super();

			this.isOrthographicCamera = true;

			this.type = 'OrthographicCamera';

			this.zoom = 1;
			this.view = null;

			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;

			this.near = near;
			this.far = far;

			this.updateProjectionMatrix();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		}

		setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		}

		clearViewOffset() {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		}

		updateProjectionMatrix() {

			const dx = ( this.right - this.left ) / ( 2 * this.zoom );
			const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			const cx = ( this.right + this.left ) / 2;
			const cy = ( this.top + this.bottom ) / 2;

			let left = cx - dx;
			let right = cx + dx;
			let top = cy + dy;
			let bottom = cy - dy;

			if ( this.view !== null && this.view.enabled ) {

				const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
				const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

				left += scaleW * this.view.offsetX;
				right = left + scaleW * this.view.width;
				top -= scaleH * this.view.offsetY;
				bottom = top - scaleH * this.view.height;

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );

			this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	}

	const LOD_MIN = 4;

	// The standard deviations (radians) associated with the extra mips. These are
	// chosen to approximate a Trowbridge-Reitz distribution function times the
	// geometric shadowing function. These sigma values squared must match the
	// variance #defines in cube_uv_reflection_fragment.glsl.js.
	const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

	// The maximum length of the blur for loop. Smaller sigmas will use fewer
	// samples and exit early, but not recompile the shader.
	const MAX_SAMPLES = 20;

	const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
	const _clearColor = /*@__PURE__*/ new Color$1();
	let _oldTarget = null;
	let _oldActiveCubeFace = 0;
	let _oldActiveMipmapLevel = 0;

	// Golden Ratio
	const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
	const INV_PHI = 1 / PHI;

	// Vertices of a dodecahedron (except the opposites, which represent the
	// same axis), used as axis directions evenly spread on a sphere.
	const _axisDirections = [
		/*@__PURE__*/ new Vector3( 1, 1, 1 ),
		/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
		/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
		/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
		/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
		/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
		/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
		/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
		/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
		/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];

	/**
	 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
	 * (PMREM) from a cubeMap environment texture. This allows different levels of
	 * blur to be quickly accessed based on material roughness. It is packed into a
	 * special CubeUV format that allows us to perform custom interpolation so that
	 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
	 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
	 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
	 * higher roughness levels. In this way we maintain resolution to smoothly
	 * interpolate diffuse lighting while limiting sampling computation.
	 *
	 * Paper: Fast, Accurate Image-Based Lighting
	 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
	*/

	class PMREMGenerator {

		constructor( renderer ) {

			this._renderer = renderer;
			this._pingPongRenderTarget = null;

			this._lodMax = 0;
			this._cubeSize = 0;
			this._lodPlanes = [];
			this._sizeLods = [];
			this._sigmas = [];

			this._blurMaterial = null;
			this._cubemapMaterial = null;
			this._equirectMaterial = null;

			this._compileMaterial( this._blurMaterial );

		}

		/**
		 * Generates a PMREM from a supplied Scene, which can be faster than using an
		 * image if networking bandwidth is low. Optional sigma specifies a blur radius
		 * in radians to be applied to the scene before PMREM generation. Optional near
		 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
		 * is placed at the origin).
		 */
		fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

			_oldTarget = this._renderer.getRenderTarget();
			_oldActiveCubeFace = this._renderer.getActiveCubeFace();
			_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();

			this._setSize( 256 );

			const cubeUVRenderTarget = this._allocateTargets();
			cubeUVRenderTarget.depthBuffer = true;

			this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );

			if ( sigma > 0 ) {

				this._blur( cubeUVRenderTarget, 0, 0, sigma );

			}

			this._applyPMREM( cubeUVRenderTarget );
			this._cleanup( cubeUVRenderTarget );

			return cubeUVRenderTarget;

		}

		/**
		 * Generates a PMREM from an equirectangular texture, which can be either LDR
		 * or HDR. The ideal input image size is 1k (1024 x 512),
		 * as this matches best with the 256 x 256 cubemap output.
		 * The smallest supported equirectangular image size is 64 x 32.
		 */
		fromEquirectangular( equirectangular, renderTarget = null ) {

			return this._fromTexture( equirectangular, renderTarget );

		}

		/**
		 * Generates a PMREM from an cubemap texture, which can be either LDR
		 * or HDR. The ideal input cube size is 256 x 256,
		 * as this matches best with the 256 x 256 cubemap output.
		 * The smallest supported cube size is 16 x 16.
		 */
		fromCubemap( cubemap, renderTarget = null ) {

			return this._fromTexture( cubemap, renderTarget );

		}

		/**
		 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */
		compileCubemapShader() {

			if ( this._cubemapMaterial === null ) {

				this._cubemapMaterial = _getCubemapMaterial();
				this._compileMaterial( this._cubemapMaterial );

			}

		}

		/**
		 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */
		compileEquirectangularShader() {

			if ( this._equirectMaterial === null ) {

				this._equirectMaterial = _getEquirectMaterial();
				this._compileMaterial( this._equirectMaterial );

			}

		}

		/**
		 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
		 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
		 * one of them will cause any others to also become unusable.
		 */
		dispose() {

			this._dispose();

			if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
			if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();

		}

		// private interface

		_setSize( cubeSize ) {

			this._lodMax = Math.floor( Math.log2( cubeSize ) );
			this._cubeSize = Math.pow( 2, this._lodMax );

		}

		_dispose() {

			if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

			if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

			for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

				this._lodPlanes[ i ].dispose();

			}

		}

		_cleanup( outputTarget ) {

			this._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );
			outputTarget.scissorTest = false;
			_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

		}

		_fromTexture( texture, renderTarget ) {

			if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {

				this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

			} else { // Equirectangular

				this._setSize( texture.image.width / 4 );

			}

			_oldTarget = this._renderer.getRenderTarget();
			_oldActiveCubeFace = this._renderer.getActiveCubeFace();
			_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();

			const cubeUVRenderTarget = renderTarget || this._allocateTargets();
			this._textureToCubeUV( texture, cubeUVRenderTarget );
			this._applyPMREM( cubeUVRenderTarget );
			this._cleanup( cubeUVRenderTarget );

			return cubeUVRenderTarget;

		}

		_allocateTargets() {

			const width = 3 * Math.max( this._cubeSize, 16 * 7 );
			const height = 4 * this._cubeSize;

			const params = {
				magFilter: LinearFilter,
				minFilter: LinearFilter,
				generateMipmaps: false,
				type: HalfFloatType,
				format: RGBAFormat,
				colorSpace: LinearSRGBColorSpace,
				depthBuffer: false
			};

			const cubeUVRenderTarget = _createRenderTarget( width, height, params );

			if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {

				if ( this._pingPongRenderTarget !== null ) {

					this._dispose();

				}

				this._pingPongRenderTarget = _createRenderTarget( width, height, params );

				const { _lodMax } = this;
				( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );

				this._blurMaterial = _getBlurShader( _lodMax, width, height );

			}

			return cubeUVRenderTarget;

		}

		_compileMaterial( material ) {

			const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
			this._renderer.compile( tmpMesh, _flatCamera );

		}

		_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

			const fov = 90;
			const aspect = 1;
			const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
			const upSign = [ 1, - 1, 1, 1, 1, 1 ];
			const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
			const renderer = this._renderer;

			const originalAutoClear = renderer.autoClear;
			const toneMapping = renderer.toneMapping;
			renderer.getClearColor( _clearColor );

			renderer.toneMapping = NoToneMapping;
			renderer.autoClear = false;

			const backgroundMaterial = new MeshBasicMaterial( {
				name: 'PMREM.Background',
				side: BackSide,
				depthWrite: false,
				depthTest: false,
			} );

			const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

			let useSolidColor = false;
			const background = scene.background;

			if ( background ) {

				if ( background.isColor ) {

					backgroundMaterial.color.copy( background );
					scene.background = null;
					useSolidColor = true;

				}

			} else {

				backgroundMaterial.color.copy( _clearColor );
				useSolidColor = true;

			}

			for ( let i = 0; i < 6; i ++ ) {

				const col = i % 3;

				if ( col === 0 ) {

					cubeCamera.up.set( 0, upSign[ i ], 0 );
					cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

				} else if ( col === 1 ) {

					cubeCamera.up.set( 0, 0, upSign[ i ] );
					cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

				} else {

					cubeCamera.up.set( 0, upSign[ i ], 0 );
					cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

				}

				const size = this._cubeSize;

				_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

				renderer.setRenderTarget( cubeUVRenderTarget );

				if ( useSolidColor ) {

					renderer.render( backgroundBox, cubeCamera );

				}

				renderer.render( scene, cubeCamera );

			}

			backgroundBox.geometry.dispose();
			backgroundBox.material.dispose();

			renderer.toneMapping = toneMapping;
			renderer.autoClear = originalAutoClear;
			scene.background = background;

		}

		_textureToCubeUV( texture, cubeUVRenderTarget ) {

			const renderer = this._renderer;

			const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

			if ( isCubeTexture ) {

				if ( this._cubemapMaterial === null ) {

					this._cubemapMaterial = _getCubemapMaterial();

				}

				this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;

			} else {

				if ( this._equirectMaterial === null ) {

					this._equirectMaterial = _getEquirectMaterial();

				}

			}

			const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
			const mesh = new Mesh( this._lodPlanes[ 0 ], material );

			const uniforms = material.uniforms;

			uniforms[ 'envMap' ].value = texture;

			const size = this._cubeSize;

			_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

			renderer.setRenderTarget( cubeUVRenderTarget );
			renderer.render( mesh, _flatCamera );

		}

		_applyPMREM( cubeUVRenderTarget ) {

			const renderer = this._renderer;
			const autoClear = renderer.autoClear;
			renderer.autoClear = false;

			for ( let i = 1; i < this._lodPlanes.length; i ++ ) {

				const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

				const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];

				this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

			}

			renderer.autoClear = autoClear;

		}

		/**
		 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
		 * vertically and horizontally, but this breaks down on a cube. Here we apply
		 * the blur latitudinally (around the poles), and then longitudinally (towards
		 * the poles) to approximate the orthogonally-separable blur. It is least
		 * accurate at the poles, but still does a decent job.
		 */
		_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

			const pingPongRenderTarget = this._pingPongRenderTarget;

			this._halfBlur(
				cubeUVRenderTarget,
				pingPongRenderTarget,
				lodIn,
				lodOut,
				sigma,
				'latitudinal',
				poleAxis );

			this._halfBlur(
				pingPongRenderTarget,
				cubeUVRenderTarget,
				lodOut,
				lodOut,
				sigma,
				'longitudinal',
				poleAxis );

		}

		_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

			const renderer = this._renderer;
			const blurMaterial = this._blurMaterial;

			if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

				console.error(
					'blur direction must be either latitudinal or longitudinal!' );

			}

			// Number of standard deviations at which to cut off the discrete approximation.
			const STANDARD_DEVIATIONS = 3;

			const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
			const blurUniforms = blurMaterial.uniforms;

			const pixels = this._sizeLods[ lodIn ] - 1;
			const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
			const sigmaPixels = sigmaRadians / radiansPerPixel;
			const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

			if ( samples > MAX_SAMPLES ) {

				console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

			}

			const weights = [];
			let sum = 0;

			for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

				const x = i / sigmaPixels;
				const weight = Math.exp( - x * x / 2 );
				weights.push( weight );

				if ( i === 0 ) {

					sum += weight;

				} else if ( i < samples ) {

					sum += 2 * weight;

				}

			}

			for ( let i = 0; i < weights.length; i ++ ) {

				weights[ i ] = weights[ i ] / sum;

			}

			blurUniforms[ 'envMap' ].value = targetIn.texture;
			blurUniforms[ 'samples' ].value = samples;
			blurUniforms[ 'weights' ].value = weights;
			blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

			if ( poleAxis ) {

				blurUniforms[ 'poleAxis' ].value = poleAxis;

			}

			const { _lodMax } = this;
			blurUniforms[ 'dTheta' ].value = radiansPerPixel;
			blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;

			const outputSize = this._sizeLods[ lodOut ];
			const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
			const y = 4 * ( this._cubeSize - outputSize );

			_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
			renderer.setRenderTarget( targetOut );
			renderer.render( blurMesh, _flatCamera );

		}

	}



	function _createPlanes( lodMax ) {

		const lodPlanes = [];
		const sizeLods = [];
		const sigmas = [];

		let lod = lodMax;

		const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

		for ( let i = 0; i < totalLods; i ++ ) {

			const sizeLod = Math.pow( 2, lod );
			sizeLods.push( sizeLod );
			let sigma = 1.0 / sizeLod;

			if ( i > lodMax - LOD_MIN ) {

				sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];

			} else if ( i === 0 ) {

				sigma = 0;

			}

			sigmas.push( sigma );

			const texelSize = 1.0 / ( sizeLod - 2 );
			const min = - texelSize;
			const max = 1 + texelSize;
			const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

			const cubeFaces = 6;
			const vertices = 6;
			const positionSize = 3;
			const uvSize = 2;
			const faceIndexSize = 1;

			const position = new Float32Array( positionSize * vertices * cubeFaces );
			const uv = new Float32Array( uvSize * vertices * cubeFaces );
			const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

			for ( let face = 0; face < cubeFaces; face ++ ) {

				const x = ( face % 3 ) * 2 / 3 - 1;
				const y = face > 2 ? 0 : - 1;
				const coordinates = [
					x, y, 0,
					x + 2 / 3, y, 0,
					x + 2 / 3, y + 1, 0,
					x, y, 0,
					x + 2 / 3, y + 1, 0,
					x, y + 1, 0
				];
				position.set( coordinates, positionSize * vertices * face );
				uv.set( uv1, uvSize * vertices * face );
				const fill = [ face, face, face, face, face, face ];
				faceIndex.set( fill, faceIndexSize * vertices * face );

			}

			const planes = new BufferGeometry();
			planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
			planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
			planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
			lodPlanes.push( planes );

			if ( lod > LOD_MIN ) {

				lod --;

			}

		}

		return { lodPlanes, sizeLods, sigmas };

	}

	function _createRenderTarget( width, height, params ) {

		const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
		cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
		cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
		cubeUVRenderTarget.scissorTest = true;
		return cubeUVRenderTarget;

	}

	function _setViewport( target, x, y, width, height ) {

		target.viewport.set( x, y, width, height );
		target.scissor.set( x, y, width, height );

	}

	function _getBlurShader( lodMax, width, height ) {

		const weights = new Float32Array( MAX_SAMPLES );
		const poleAxis = new Vector3( 0, 1, 0 );
		const shaderMaterial = new ShaderMaterial( {

			name: 'SphericalGaussianBlur',

			defines: {
				'n': MAX_SAMPLES,
				'CUBEUV_TEXEL_WIDTH': 1.0 / width,
				'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
				'CUBEUV_MAX_MIP': `${lodMax}.0`,
			},

			uniforms: {
				'envMap': { value: null },
				'samples': { value: 1 },
				'weights': { value: weights },
				'latitudinal': { value: false },
				'dTheta': { value: 0 },
				'mipInt': { value: 0 },
				'poleAxis': { value: poleAxis }
			},

			vertexShader: _getCommonVertexShader(),

			fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

			blending: NoBlending,
			depthTest: false,
			depthWrite: false

		} );

		return shaderMaterial;

	}

	function _getEquirectMaterial() {

		return new ShaderMaterial( {

			name: 'EquirectangularToCubeUV',

			uniforms: {
				'envMap': { value: null }
			},

			vertexShader: _getCommonVertexShader(),

			fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

			blending: NoBlending,
			depthTest: false,
			depthWrite: false

		} );

	}

	function _getCubemapMaterial() {

		return new ShaderMaterial( {

			name: 'CubemapToCubeUV',

			uniforms: {
				'envMap': { value: null },
				'flipEnvMap': { value: - 1 }
			},

			vertexShader: _getCommonVertexShader(),

			fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

			blending: NoBlending,
			depthTest: false,
			depthWrite: false

		} );

	}

	function _getCommonVertexShader() {

		return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

	}

	function WebGLCubeUVMaps( renderer ) {

		let cubeUVmaps = new WeakMap();

		let pmremGenerator = null;

		function get( texture ) {

			if ( texture && texture.isTexture ) {

				const mapping = texture.mapping;

				const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
				const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

				// equirect/cube map to cubeUV conversion

				if ( isEquirectMap || isCubeMap ) {

					if ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {

						texture.needsPMREMUpdate = false;

						let renderTarget = cubeUVmaps.get( texture );

						if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

						renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
						cubeUVmaps.set( texture, renderTarget );

						return renderTarget.texture;

					} else {

						if ( cubeUVmaps.has( texture ) ) {

							return cubeUVmaps.get( texture ).texture;

						} else {

							const image = texture.image;

							if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

								if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

								const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
								cubeUVmaps.set( texture, renderTarget );

								texture.addEventListener( 'dispose', onTextureDispose );

								return renderTarget.texture;

							} else {

								// image not yet ready. try the conversion next frame

								return null;

							}

						}

					}

				}

			}

			return texture;

		}

		function isCubeTextureComplete( image ) {

			let count = 0;
			const length = 6;

			for ( let i = 0; i < length; i ++ ) {

				if ( image[ i ] !== undefined ) count ++;

			}

			return count === length;


		}

		function onTextureDispose( event ) {

			const texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			const cubemapUV = cubeUVmaps.get( texture );

			if ( cubemapUV !== undefined ) {

				cubeUVmaps.delete( texture );
				cubemapUV.dispose();

			}

		}

		function dispose() {

			cubeUVmaps = new WeakMap();

			if ( pmremGenerator !== null ) {

				pmremGenerator.dispose();
				pmremGenerator = null;

			}

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	function WebGLExtensions( gl ) {

		const extensions = {};

		function getExtension( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			let extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			extensions[ name ] = extension;

			return extension;

		}

		return {

			has: function ( name ) {

				return getExtension( name ) !== null;

			},

			init: function ( capabilities ) {

				if ( capabilities.isWebGL2 ) {

					getExtension( 'EXT_color_buffer_float' );
					getExtension( 'WEBGL_clip_cull_distance' );

				} else {

					getExtension( 'WEBGL_depth_texture' );
					getExtension( 'OES_texture_float' );
					getExtension( 'OES_texture_half_float' );
					getExtension( 'OES_texture_half_float_linear' );
					getExtension( 'OES_standard_derivatives' );
					getExtension( 'OES_element_index_uint' );
					getExtension( 'OES_vertex_array_object' );
					getExtension( 'ANGLE_instanced_arrays' );

				}

				getExtension( 'OES_texture_float_linear' );
				getExtension( 'EXT_color_buffer_half_float' );
				getExtension( 'WEBGL_multisampled_render_to_texture' );

			},

			get: function ( name ) {

				const extension = getExtension( name );

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				return extension;

			}

		};

	}

	function WebGLGeometries( gl, attributes, info, bindingStates ) {

		const geometries = {};
		const wireframeAttributes = new WeakMap();

		function onGeometryDispose( event ) {

			const geometry = event.target;

			if ( geometry.index !== null ) {

				attributes.remove( geometry.index );

			}

			for ( const name in geometry.attributes ) {

				attributes.remove( geometry.attributes[ name ] );

			}

			for ( const name in geometry.morphAttributes ) {

				const array = geometry.morphAttributes[ name ];

				for ( let i = 0, l = array.length; i < l; i ++ ) {

					attributes.remove( array[ i ] );

				}

			}

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			const attribute = wireframeAttributes.get( geometry );

			if ( attribute ) {

				attributes.remove( attribute );
				wireframeAttributes.delete( geometry );

			}

			bindingStates.releaseStatesOfGeometry( geometry );

			if ( geometry.isInstancedBufferGeometry === true ) {

				delete geometry._maxInstanceCount;

			}

			//

			info.memory.geometries --;

		}

		function get( object, geometry ) {

			if ( geometries[ geometry.id ] === true ) return geometry;

			geometry.addEventListener( 'dispose', onGeometryDispose );

			geometries[ geometry.id ] = true;

			info.memory.geometries ++;

			return geometry;

		}

		function update( geometry ) {

			const geometryAttributes = geometry.attributes;

			// Updating index buffer in VAO now. See WebGLBindingStates.

			for ( const name in geometryAttributes ) {

				attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			const morphAttributes = geometry.morphAttributes;

			for ( const name in morphAttributes ) {

				const array = morphAttributes[ name ];

				for ( let i = 0, l = array.length; i < l; i ++ ) {

					attributes.update( array[ i ], gl.ARRAY_BUFFER );

				}

			}

		}

		function updateWireframeAttribute( geometry ) {

			const indices = [];

			const geometryIndex = geometry.index;
			const geometryPosition = geometry.attributes.position;
			let version = 0;

			if ( geometryIndex !== null ) {

				const array = geometryIndex.array;
				version = geometryIndex.version;

				for ( let i = 0, l = array.length; i < l; i += 3 ) {

					const a = array[ i + 0 ];
					const b = array[ i + 1 ];
					const c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else if ( geometryPosition !== undefined ) {

				const array = geometryPosition.array;
				version = geometryPosition.version;

				for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					const a = i + 0;
					const b = i + 1;
					const c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			} else {

				return;

			}

			const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
			attribute.version = version;

			// Updating index buffer in VAO now. See WebGLBindingStates

			//

			const previousAttribute = wireframeAttributes.get( geometry );

			if ( previousAttribute ) attributes.remove( previousAttribute );

			//

			wireframeAttributes.set( geometry, attribute );

		}

		function getWireframeAttribute( geometry ) {

			const currentAttribute = wireframeAttributes.get( geometry );

			if ( currentAttribute ) {

				const geometryIndex = geometry.index;

				if ( geometryIndex !== null ) {

					// if the attribute is obsolete, create a new one

					if ( currentAttribute.version < geometryIndex.version ) {

						updateWireframeAttribute( geometry );

					}

				}

			} else {

				updateWireframeAttribute( geometry );

			}

			return wireframeAttributes.get( geometry );

		}

		return {

			get: get,
			update: update,

			getWireframeAttribute: getWireframeAttribute

		};

	}

	function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		let mode;

		function setMode( value ) {

			mode = value;

		}

		let type, bytesPerElement;

		function setIndex( value ) {

			type = value.type;
			bytesPerElement = value.bytesPerElement;

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * bytesPerElement );

			info.update( count, mode, 1 );

		}

		function renderInstances( start, count, primcount ) {

			if ( primcount === 0 ) return;

			let extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawElementsInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawElementsInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

			info.update( count, mode, primcount );

		}

		function renderMultiDraw( starts, counts, drawCount ) {

			if ( drawCount === 0 ) return;

			const extension = extensions.get( 'WEBGL_multi_draw' );
			if ( extension === null ) {

				for ( let i = 0; i < drawCount; i ++ ) {

					this.render( starts[ i ] / bytesPerElement, counts[ i ] );

				}

			} else {

				extension.multiDrawElementsWEBGL( mode, counts, 0, type, starts, 0, drawCount );

				let elementCount = 0;
				for ( let i = 0; i < drawCount; i ++ ) {

					elementCount += counts[ i ];

				}

				info.update( elementCount, mode, 1 );

			}

		}

		//

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;
		this.renderMultiDraw = renderMultiDraw;

	}

	function WebGLInfo( gl ) {

		const memory = {
			geometries: 0,
			textures: 0
		};

		const render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update( count, mode, instanceCount ) {

			render.calls ++;

			switch ( mode ) {

				case gl.TRIANGLES:
					render.triangles += instanceCount * ( count / 3 );
					break;

				case gl.LINES:
					render.lines += instanceCount * ( count / 2 );
					break;

				case gl.LINE_STRIP:
					render.lines += instanceCount * ( count - 1 );
					break;

				case gl.LINE_LOOP:
					render.lines += instanceCount * count;
					break;

				case gl.POINTS:
					render.points += instanceCount * count;
					break;

				default:
					console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
					break;

			}

		}

		function reset() {

			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;

		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};

	}

	function numericalSort( a, b ) {

		return a[ 0 ] - b[ 0 ];

	}

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

	}

	function WebGLMorphtargets( gl, capabilities, textures ) {

		const influencesList = {};
		const morphInfluences = new Float32Array( 8 );
		const morphTextures = new WeakMap();
		const morph = new Vector4();

		const workInfluences = [];

		for ( let i = 0; i < 8; i ++ ) {

			workInfluences[ i ] = [ i, 0 ];

		}

		function update( object, geometry, program ) {

			const objectInfluences = object.morphTargetInfluences;

			if ( capabilities.isWebGL2 === true ) {

				// instead of using attributes, the WebGL 2 code path encodes morph targets
				// into an array of data textures. Each layer represents a single morph target.

				const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
				const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

				let entry = morphTextures.get( geometry );

				if ( entry === undefined || entry.count !== morphTargetsCount ) {

					if ( entry !== undefined ) entry.texture.dispose();

					const hasMorphPosition = geometry.morphAttributes.position !== undefined;
					const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
					const hasMorphColors = geometry.morphAttributes.color !== undefined;

					const morphTargets = geometry.morphAttributes.position || [];
					const morphNormals = geometry.morphAttributes.normal || [];
					const morphColors = geometry.morphAttributes.color || [];

					let vertexDataCount = 0;

					if ( hasMorphPosition === true ) vertexDataCount = 1;
					if ( hasMorphNormals === true ) vertexDataCount = 2;
					if ( hasMorphColors === true ) vertexDataCount = 3;

					let width = geometry.attributes.position.count * vertexDataCount;
					let height = 1;

					if ( width > capabilities.maxTextureSize ) {

						height = Math.ceil( width / capabilities.maxTextureSize );
						width = capabilities.maxTextureSize;

					}

					const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

					const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
					texture.type = FloatType;
					texture.needsUpdate = true;

					// fill buffer

					const vertexDataStride = vertexDataCount * 4;

					for ( let i = 0; i < morphTargetsCount; i ++ ) {

						const morphTarget = morphTargets[ i ];
						const morphNormal = morphNormals[ i ];
						const morphColor = morphColors[ i ];

						const offset = width * height * 4 * i;

						for ( let j = 0; j < morphTarget.count; j ++ ) {

							const stride = j * vertexDataStride;

							if ( hasMorphPosition === true ) {

								morph.fromBufferAttribute( morphTarget, j );

								buffer[ offset + stride + 0 ] = morph.x;
								buffer[ offset + stride + 1 ] = morph.y;
								buffer[ offset + stride + 2 ] = morph.z;
								buffer[ offset + stride + 3 ] = 0;

							}

							if ( hasMorphNormals === true ) {

								morph.fromBufferAttribute( morphNormal, j );

								buffer[ offset + stride + 4 ] = morph.x;
								buffer[ offset + stride + 5 ] = morph.y;
								buffer[ offset + stride + 6 ] = morph.z;
								buffer[ offset + stride + 7 ] = 0;

							}

							if ( hasMorphColors === true ) {

								morph.fromBufferAttribute( morphColor, j );

								buffer[ offset + stride + 8 ] = morph.x;
								buffer[ offset + stride + 9 ] = morph.y;
								buffer[ offset + stride + 10 ] = morph.z;
								buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;

							}

						}

					}

					entry = {
						count: morphTargetsCount,
						texture: texture,
						size: new Vector2$1( width, height )
					};

					morphTextures.set( geometry, entry );

					function disposeTexture() {

						texture.dispose();

						morphTextures.delete( geometry );

						geometry.removeEventListener( 'dispose', disposeTexture );

					}

					geometry.addEventListener( 'dispose', disposeTexture );

				}

				//
				if ( object.isInstancedMesh === true && object.morphTexture !== null ) {

					program.getUniforms().setValue( gl, 'morphTexture', object.morphTexture, textures );

				} else {

					let morphInfluencesSum = 0;

					for ( let i = 0; i < objectInfluences.length; i ++ ) {

						morphInfluencesSum += objectInfluences[ i ];

					}

					const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;


					program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
					program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

				}

				program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
				program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );

			} else {

				// When object doesn't have morph target influences defined, we treat it as a 0-length array
				// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

				const length = objectInfluences === undefined ? 0 : objectInfluences.length;

				let influences = influencesList[ geometry.id ];

				if ( influences === undefined || influences.length !== length ) {

					// initialise list

					influences = [];

					for ( let i = 0; i < length; i ++ ) {

						influences[ i ] = [ i, 0 ];

					}

					influencesList[ geometry.id ] = influences;

				}

				// Collect influences

				for ( let i = 0; i < length; i ++ ) {

					const influence = influences[ i ];

					influence[ 0 ] = i;
					influence[ 1 ] = objectInfluences[ i ];

				}

				influences.sort( absNumericalSort );

				for ( let i = 0; i < 8; i ++ ) {

					if ( i < length && influences[ i ][ 1 ] ) {

						workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
						workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];

					} else {

						workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
						workInfluences[ i ][ 1 ] = 0;

					}

				}

				workInfluences.sort( numericalSort );

				const morphTargets = geometry.morphAttributes.position;
				const morphNormals = geometry.morphAttributes.normal;

				let morphInfluencesSum = 0;

				for ( let i = 0; i < 8; i ++ ) {

					const influence = workInfluences[ i ];
					const index = influence[ 0 ];
					const value = influence[ 1 ];

					if ( index !== Number.MAX_SAFE_INTEGER && value ) {

						if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {

							geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );

						}

						if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {

							geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

						}

						morphInfluences[ i ] = value;
						morphInfluencesSum += value;

					} else {

						if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {

							geometry.deleteAttribute( 'morphTarget' + i );

						}

						if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {

							geometry.deleteAttribute( 'morphNormal' + i );

						}

						morphInfluences[ i ] = 0;

					}

				}

				// GLSL shader uses formula baseinfluence * base + sum(target * influence)
				// This allows us to switch between absolute morphs and relative morphs without changing shader code
				// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

				program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
				program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

			}

		}

		return {

			update: update

		};

	}

	function WebGLObjects( gl, geometries, attributes, info ) {

		let updateMap = new WeakMap();

		function update( object ) {

			const frame = info.render.frame;

			const geometry = object.geometry;
			const buffergeometry = geometries.get( object, geometry );

			// Update once per frame

			if ( updateMap.get( buffergeometry ) !== frame ) {

				geometries.update( buffergeometry );

				updateMap.set( buffergeometry, frame );

			}

			if ( object.isInstancedMesh ) {

				if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

					object.addEventListener( 'dispose', onInstancedMeshDispose );

				}

				if ( updateMap.get( object ) !== frame ) {

					attributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );

					if ( object.instanceColor !== null ) {

						attributes.update( object.instanceColor, gl.ARRAY_BUFFER );

					}

					updateMap.set( object, frame );

				}

			}

			if ( object.isSkinnedMesh ) {

				const skeleton = object.skeleton;

				if ( updateMap.get( skeleton ) !== frame ) {

					skeleton.update();

					updateMap.set( skeleton, frame );

				}

			}

			return buffergeometry;

		}

		function dispose() {

			updateMap = new WeakMap();

		}

		function onInstancedMeshDispose( event ) {

			const instancedMesh = event.target;

			instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

			attributes.remove( instancedMesh.instanceMatrix );

			if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

		}

		return {

			update: update,
			dispose: dispose

		};

	}

	class DepthTexture extends Texture$1 {

		constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

			format = format !== undefined ? format : DepthFormat;

			if ( format !== DepthFormat && format !== DepthStencilFormat ) {

				throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

			}

			if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
			if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

			super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.isDepthTexture = true;

			this.image = { width: width, height: height };

			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

			this.flipY = false;
			this.generateMipmaps = false;

			this.compareFunction = null;

		}


		copy( source ) {

			super.copy( source );

			this.compareFunction = source.compareFunction;

			return this;

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			if ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;

			return data;

		}

	}

	/**
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */


	const emptyTexture = /*@__PURE__*/ new Texture$1();

	const emptyShadowTexture = /*@__PURE__*/ new DepthTexture( 1, 1 );
	emptyShadowTexture.compareFunction = LessEqualCompare;

	const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
	const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
	const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	const arrayCacheF32 = [];
	const arrayCacheI32 = [];

	// Float32Array caches used for uploading Matrix uniforms

	const mat4array = new Float32Array( 16 );
	const mat3array = new Float32Array( 9 );
	const mat2array = new Float32Array( 4 );

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		const firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		const n = nBlocks * blockSize;
		let r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	function arraysEqual( a, b ) {

		if ( a.length !== b.length ) return false;

		for ( let i = 0, l = a.length; i < l; i ++ ) {

			if ( a[ i ] !== b[ i ] ) return false;

		}

		return true;

	}

	function copyArray( a, b ) {

		for ( let i = 0, l = b.length; i < l; i ++ ) {

			a[ i ] = b[ i ];

		}

	}

	// Texture unit allocation

	function allocTexUnits( textures, n ) {

		let r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( let i = 0; i !== n; ++ i ) {

			r[ i ] = textures.allocateTextureUnit();

		}

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValueV1f( gl, v ) {

		const cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1f( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single float vector (from flat array or THREE.VectorN)

	function setValueV2f( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2f( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3f( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3f( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else if ( v.r !== undefined ) {

			if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

				gl.uniform3f( this.addr, v.r, v.g, v.b );

				cache[ 0 ] = v.r;
				cache[ 1 ] = v.g;
				cache[ 2 ] = v.b;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4f( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single matrix (from flat array or THREE.MatrixN)

	function setValueM2( gl, v ) {

		const cache = this.cache;
		const elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix2fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat2array.set( elements );

			gl.uniformMatrix2fv( this.addr, false, mat2array );

			copyArray( cache, elements );

		}

	}

	function setValueM3( gl, v ) {

		const cache = this.cache;
		const elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix3fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat3array.set( elements );

			gl.uniformMatrix3fv( this.addr, false, mat3array );

			copyArray( cache, elements );

		}

	}

	function setValueM4( gl, v ) {

		const cache = this.cache;
		const elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix4fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat4array.set( elements );

			gl.uniformMatrix4fv( this.addr, false, mat4array );

			copyArray( cache, elements );

		}

	}

	// Single integer / boolean

	function setValueV1i( gl, v ) {

		const cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1i( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single integer / boolean vector (from flat array or THREE.VectorN)

	function setValueV2i( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2i( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2iv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3i( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3i( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3iv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4i( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4i( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4iv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single unsigned integer

	function setValueV1ui( gl, v ) {

		const cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1ui( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single unsigned integer vector (from flat array or THREE.VectorN)

	function setValueV2ui( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2ui( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2uiv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3ui( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3ui( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3uiv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4ui( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4uiv( this.addr, v );

			copyArray( cache, v );

		}

	}


	// Single texture (2D / Cube)

	function setValueT1( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		const emptyTexture2D = ( this.type === gl.SAMPLER_2D_SHADOW ) ? emptyShadowTexture : emptyTexture;

		textures.setTexture2D( v || emptyTexture2D, unit );

	}

	function setValueT3D1( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture3D( v || empty3dTexture, unit );

	}

	function setValueT6( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTextureCube( v || emptyCubeTexture, unit );

	}

	function setValueT2DArray1( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture2DArray( v || emptyArrayTexture, unit );

	}

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1f; // FLOAT
			case 0x8b50: return setValueV2f; // _VEC2
			case 0x8b51: return setValueV3f; // _VEC3
			case 0x8b52: return setValueV4f; // _VEC4

			case 0x8b5a: return setValueM2; // _MAT2
			case 0x8b5b: return setValueM3; // _MAT3
			case 0x8b5c: return setValueM4; // _MAT4

			case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

			case 0x1405: return setValueV1ui; // UINT
			case 0x8dc6: return setValueV2ui; // _VEC2
			case 0x8dc7: return setValueV3ui; // _VEC3
			case 0x8dc8: return setValueV4ui; // _VEC4

			case 0x8b5e: // SAMPLER_2D
			case 0x8d66: // SAMPLER_EXTERNAL_OES
			case 0x8dca: // INT_SAMPLER_2D
			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
			case 0x8b62: // SAMPLER_2D_SHADOW
				return setValueT1;

			case 0x8b5f: // SAMPLER_3D
			case 0x8dcb: // INT_SAMPLER_3D
			case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
				return setValueT3D1;

			case 0x8b60: // SAMPLER_CUBE
			case 0x8dcc: // INT_SAMPLER_CUBE
			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
			case 0x8dc5: // SAMPLER_CUBE_SHADOW
				return setValueT6;

			case 0x8dc1: // SAMPLER_2D_ARRAY
			case 0x8dcf: // INT_SAMPLER_2D_ARRAY
			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
			case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArray1;

		}

	}


	// Array of scalars

	function setValueV1fArray( gl, v ) {

		gl.uniform1fv( this.addr, v );

	}

	// Array of vectors (from flat array or array of THREE.VectorN)

	function setValueV2fArray( gl, v ) {

		const data = flatten( v, this.size, 2 );

		gl.uniform2fv( this.addr, data );

	}

	function setValueV3fArray( gl, v ) {

		const data = flatten( v, this.size, 3 );

		gl.uniform3fv( this.addr, data );

	}

	function setValueV4fArray( gl, v ) {

		const data = flatten( v, this.size, 4 );

		gl.uniform4fv( this.addr, data );

	}

	// Array of matrices (from flat array or array of THREE.MatrixN)

	function setValueM2Array( gl, v ) {

		const data = flatten( v, this.size, 4 );

		gl.uniformMatrix2fv( this.addr, false, data );

	}

	function setValueM3Array( gl, v ) {

		const data = flatten( v, this.size, 9 );

		gl.uniformMatrix3fv( this.addr, false, data );

	}

	function setValueM4Array( gl, v ) {

		const data = flatten( v, this.size, 16 );

		gl.uniformMatrix4fv( this.addr, false, data );

	}

	// Array of integer / boolean

	function setValueV1iArray( gl, v ) {

		gl.uniform1iv( this.addr, v );

	}

	// Array of integer / boolean vectors (from flat array)

	function setValueV2iArray( gl, v ) {

		gl.uniform2iv( this.addr, v );

	}

	function setValueV3iArray( gl, v ) {

		gl.uniform3iv( this.addr, v );

	}

	function setValueV4iArray( gl, v ) {

		gl.uniform4iv( this.addr, v );

	}

	// Array of unsigned integer

	function setValueV1uiArray( gl, v ) {

		gl.uniform1uiv( this.addr, v );

	}

	// Array of unsigned integer vectors (from flat array)

	function setValueV2uiArray( gl, v ) {

		gl.uniform2uiv( this.addr, v );

	}

	function setValueV3uiArray( gl, v ) {

		gl.uniform3uiv( this.addr, v );

	}

	function setValueV4uiArray( gl, v ) {

		gl.uniform4uiv( this.addr, v );

	}


	// Array of textures (2D / 3D / Cube / 2DArray)

	function setValueT1Array( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT3DArray( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );

		}

	}

	function setValueT6Array( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	function setValueT2DArrayArray( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );

		}

	}


	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1fArray; // FLOAT
			case 0x8b50: return setValueV2fArray; // _VEC2
			case 0x8b51: return setValueV3fArray; // _VEC3
			case 0x8b52: return setValueV4fArray; // _VEC4

			case 0x8b5a: return setValueM2Array; // _MAT2
			case 0x8b5b: return setValueM3Array; // _MAT3
			case 0x8b5c: return setValueM4Array; // _MAT4

			case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

			case 0x1405: return setValueV1uiArray; // UINT
			case 0x8dc6: return setValueV2uiArray; // _VEC2
			case 0x8dc7: return setValueV3uiArray; // _VEC3
			case 0x8dc8: return setValueV4uiArray; // _VEC4

			case 0x8b5e: // SAMPLER_2D
			case 0x8d66: // SAMPLER_EXTERNAL_OES
			case 0x8dca: // INT_SAMPLER_2D
			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
			case 0x8b62: // SAMPLER_2D_SHADOW
				return setValueT1Array;

			case 0x8b5f: // SAMPLER_3D
			case 0x8dcb: // INT_SAMPLER_3D
			case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
				return setValueT3DArray;

			case 0x8b60: // SAMPLER_CUBE
			case 0x8dcc: // INT_SAMPLER_CUBE
			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
			case 0x8dc5: // SAMPLER_CUBE_SHADOW
				return setValueT6Array;

			case 0x8dc1: // SAMPLER_2D_ARRAY
			case 0x8dcf: // INT_SAMPLER_2D_ARRAY
			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
			case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArrayArray;

		}

	}

	// --- Uniform Classes ---

	class SingleUniform {

		constructor( id, activeInfo, addr ) {

			this.id = id;
			this.addr = addr;
			this.cache = [];
			this.type = activeInfo.type;
			this.setValue = getSingularSetter( activeInfo.type );

			// this.path = activeInfo.name; // DEBUG

		}

	}

	class PureArrayUniform {

		constructor( id, activeInfo, addr ) {

			this.id = id;
			this.addr = addr;
			this.cache = [];
			this.type = activeInfo.type;
			this.size = activeInfo.size;
			this.setValue = getPureArraySetter( activeInfo.type );

			// this.path = activeInfo.name; // DEBUG

		}

	}

	class StructuredUniform {

		constructor( id ) {

			this.id = id;

			this.seq = [];
			this.map = {};

		}

		setValue( gl, value, textures ) {

			const seq = this.seq;

			for ( let i = 0, n = seq.length; i !== n; ++ i ) {

				const u = seq[ i ];
				u.setValue( gl, value[ u.id ], textures );

			}

		}

	}

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	const RePathPart = /(\w+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		const path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		while ( true ) {

			const match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex;

			let id = match[ 1 ];
			const idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {

				// step into inner node / create it in case it doesn't exist

				const map = container.map;
				let next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	class WebGLUniforms {

		constructor( gl, program ) {

			this.seq = [];
			this.map = {};

			const n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

			for ( let i = 0; i < n; ++ i ) {

				const info = gl.getActiveUniform( program, i ),
					addr = gl.getUniformLocation( program, info.name );

				parseUniform( info, addr, this );

			}

		}

		setValue( gl, name, value, textures ) {

			const u = this.map[ name ];

			if ( u !== undefined ) u.setValue( gl, value, textures );

		}

		setOptional( gl, object, name ) {

			const v = object[ name ];

			if ( v !== undefined ) this.setValue( gl, name, v );

		}

		static upload( gl, seq, values, textures ) {

			for ( let i = 0, n = seq.length; i !== n; ++ i ) {

				const u = seq[ i ],
					v = values[ u.id ];

				if ( v.needsUpdate !== false ) {

					// note: always updating when .needsUpdate is undefined
					u.setValue( gl, v.value, textures );

				}

			}

		}

		static seqWithValue( seq, values ) {

			const r = [];

			for ( let i = 0, n = seq.length; i !== n; ++ i ) {

				const u = seq[ i ];
				if ( u.id in values ) r.push( u );

			}

			return r;

		}

	}

	function WebGLShader( gl, type, string ) {

		const shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		return shader;

	}

	// From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/
	const COMPLETION_STATUS_KHR = 0x91B1;

	let programIdCount = 0;

	function handleSource( string, errorLine ) {

		const lines = string.split( '\n' );
		const lines2 = [];

		const from = Math.max( errorLine - 6, 0 );
		const to = Math.min( errorLine + 6, lines.length );

		for ( let i = from; i < to; i ++ ) {

			const line = i + 1;
			lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

		}

		return lines2.join( '\n' );

	}

	function getEncodingComponents( colorSpace ) {

		const workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );
		const encodingPrimaries = ColorManagement.getPrimaries( colorSpace );

		let gamutMapping;

		if ( workingPrimaries === encodingPrimaries ) {

			gamutMapping = '';

		} else if ( workingPrimaries === P3Primaries && encodingPrimaries === Rec709Primaries ) {

			gamutMapping = 'LinearDisplayP3ToLinearSRGB';

		} else if ( workingPrimaries === Rec709Primaries && encodingPrimaries === P3Primaries ) {

			gamutMapping = 'LinearSRGBToLinearDisplayP3';

		}

		switch ( colorSpace ) {

			case LinearSRGBColorSpace:
			case LinearDisplayP3ColorSpace:
				return [ gamutMapping, 'LinearTransferOETF' ];

			case SRGBColorSpace:
			case DisplayP3ColorSpace:
				return [ gamutMapping, 'sRGBTransferOETF' ];

			default:
				console.warn( 'THREE.WebGLProgram: Unsupported color space:', colorSpace );
				return [ gamutMapping, 'LinearTransferOETF' ];

		}

	}

	function getShaderErrors( gl, shader, type ) {

		const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
		const errors = gl.getShaderInfoLog( shader ).trim();

		if ( status && errors === '' ) return '';

		const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
		if ( errorMatches ) {

			// --enable-privileged-webgl-extension
			// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

			const errorLine = parseInt( errorMatches[ 1 ] );
			return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );

		} else {

			return errors;

		}

	}

	function getTexelEncodingFunction( functionName, colorSpace ) {

		const components = getEncodingComponents( colorSpace );
		return `vec4 ${functionName}( vec4 value ) { return ${components[ 0 ]}( ${components[ 1 ]}( value ) ); }`;

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		let toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;

			case AgXToneMapping:
				toneMappingName = 'AgX';
				break;

			case NeutralToneMapping:
				toneMappingName = 'Neutral';
				break;

			case CustomToneMapping:
				toneMappingName = 'Custom';
				break;

			default:
				console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
				toneMappingName = 'Linear';

		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

	}

	function generateExtensions( parameters ) {

		const chunks = [
			( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.alphaToCoverage || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
			( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateVertexExtensions( parameters ) {

		const chunks = [
			parameters.extensionClipCullDistance ? '#extension GL_ANGLE_clip_cull_distance : require' : '',
			parameters.extensionMultiDraw ? '#extension GL_ANGLE_multi_draw : require' : '',
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		const chunks = [];

		for ( const name in defines ) {

			const value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program ) {

		const attributes = {};

		const n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( let i = 0; i < n; i ++ ) {

			const info = gl.getActiveAttrib( program, i );
			const name = info.name;

			let locationSize = 1;
			if ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;
			if ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;
			if ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;

			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[ name ] = {
				type: info.type,
				location: gl.getAttribLocation( program, name ),
				locationSize: locationSize
			};

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
			.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
			.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
			.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
			.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
			.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

	}

	function replaceClippingPlaneNums( string, parameters ) {

		return string
			.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
			.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

	}

	// Resolve Includes

	const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

	function resolveIncludes( string ) {

		return string.replace( includePattern, includeReplacer );

	}

	const shaderChunkMap = new Map( [
		[ 'encodings_fragment', 'colorspace_fragment' ], // @deprecated, r154
		[ 'encodings_pars_fragment', 'colorspace_pars_fragment' ], // @deprecated, r154
		[ 'output_fragment', 'opaque_fragment' ], // @deprecated, r154
	] );

	function includeReplacer( match, include ) {

		let string = ShaderChunk[ include ];

		if ( string === undefined ) {

			const newInclude = shaderChunkMap.get( include );

			if ( newInclude !== undefined ) {

				string = ShaderChunk[ newInclude ];
				console.warn( 'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude );

			} else {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

		}

		return resolveIncludes( string );

	}

	// Unroll Loops

	const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

	function unrollLoops( string ) {

		return string.replace( unrollLoopPattern, loopReplacer );

	}

	function loopReplacer( match, start, end, snippet ) {

		let string = '';

		for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

			string += snippet
				.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
				.replace( /UNROLLED_LOOP_INDEX/g, i );

		}

		return string;

	}

	//

	function generatePrecision( parameters ) {

		let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	`;

		if ( parameters.isWebGL2 ) {

			precisionstring += `precision ${parameters.precision} sampler3D;
		precision ${parameters.precision} sampler2DArray;
		precision ${parameters.precision} sampler2DShadow;
		precision ${parameters.precision} samplerCubeShadow;
		precision ${parameters.precision} sampler2DArrayShadow;
		precision ${parameters.precision} isampler2D;
		precision ${parameters.precision} isampler3D;
		precision ${parameters.precision} isamplerCube;
		precision ${parameters.precision} isampler2DArray;
		precision ${parameters.precision} usampler2D;
		precision ${parameters.precision} usampler3D;
		precision ${parameters.precision} usamplerCube;
		precision ${parameters.precision} usampler2DArray;
		`;

		}

		if ( parameters.precision === 'highp' ) {

			precisionstring += '\n#define HIGH_PRECISION';

		} else if ( parameters.precision === 'mediump' ) {

			precisionstring += '\n#define MEDIUM_PRECISION';

		} else if ( parameters.precision === 'lowp' ) {

			precisionstring += '\n#define LOW_PRECISION';

		}

		return precisionstring;

	}

	function generateShadowMapTypeDefine( parameters ) {

		let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		} else if ( parameters.shadowMapType === VSMShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

		}

		return shadowMapTypeDefine;

	}

	function generateEnvMapTypeDefine( parameters ) {

		let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

			}

		}

		return envMapTypeDefine;

	}

	function generateEnvMapModeDefine( parameters ) {

		let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeRefractionMapping:

					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

		}

		return envMapModeDefine;

	}

	function generateEnvMapBlendingDefine( parameters ) {

		let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

		if ( parameters.envMap ) {

			switch ( parameters.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		return envMapBlendingDefine;

	}

	function generateCubeUVSize( parameters ) {

		const imageHeight = parameters.envMapCubeUVHeight;

		if ( imageHeight === null ) return null;

		const maxMip = Math.log2( imageHeight ) - 2;

		const texelHeight = 1.0 / imageHeight;

		const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

		return { texelWidth, texelHeight, maxMip };

	}

	function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

		// TODO Send this event to Three.js DevTools
		// console.log( 'WebGLProgram', cacheKey );

		const gl = renderer.getContext();

		const defines = parameters.defines;

		let vertexShader = parameters.vertexShader;
		let fragmentShader = parameters.fragmentShader;

		const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
		const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
		const envMapModeDefine = generateEnvMapModeDefine( parameters );
		const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
		const envMapCubeUVSize = generateCubeUVSize( parameters );

		const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

		const customVertexExtensions = generateVertexExtensions( parameters );

		const customDefines = generateDefines( defines );

		const program = gl.createProgram();

		let prefixVertex, prefixFragment;
		let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

		if ( parameters.isRawShaderMaterial ) {

			prefixVertex = [

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixVertex.length > 0 ) {

				prefixVertex += '\n';

			}

			prefixFragment = [

				customExtensions,

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixFragment.length > 0 ) {

				prefixFragment += '\n';

			}

		} else {

			prefixVertex = [

				generatePrecision( parameters ),

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines,

				parameters.extensionClipCullDistance ? '#define USE_CLIP_DISTANCE' : '',
				parameters.batching ? '#define USE_BATCHING' : '',
				parameters.instancing ? '#define USE_INSTANCING' : '',
				parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
				parameters.instancingMorph ? '#define USE_INSTANCING_MORPH' : '',

				parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
				parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
				parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
				parameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

				parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
				parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

				parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
				parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

				parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
				parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
				parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

				parameters.transmission ? '#define USE_TRANSMISSION' : '',
				parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
				parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

				parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
				parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

				//

				parameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',
				parameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',
				parameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',
				parameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',
				parameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',
				parameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',
				parameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',
				parameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',

				parameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',
				parameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',

				parameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',

				parameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',
				parameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',
				parameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',

				parameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',
				parameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',

				parameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',
				parameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',

				parameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',
				parameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',
				parameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',

				parameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',
				parameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',

				//

				parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
				parameters.vertexUv1s ? '#define USE_UV1' : '',
				parameters.vertexUv2s ? '#define USE_UV2' : '',
				parameters.vertexUv3s ? '#define USE_UV3' : '',

				parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',
				( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
				( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
				( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',

				parameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				'#ifdef USE_INSTANCING',

				'	attribute mat4 instanceMatrix;',

				'#endif',

				'#ifdef USE_INSTANCING_COLOR',

				'	attribute vec3 instanceColor;',

				'#endif',

				'#ifdef USE_INSTANCING_MORPH',

				'	uniform sampler2D morphTexture;',

				'#endif',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_UV1',

				'	attribute vec2 uv1;',

				'#endif',

				'#ifdef USE_UV2',

				'	attribute vec2 uv2;',

				'#endif',

				'#ifdef USE_UV3',

				'	attribute vec2 uv3;',

				'#endif',

				'#ifdef USE_TANGENT',

				'	attribute vec4 tangent;',

				'#endif',

				'#if defined( USE_COLOR_ALPHA )',

				'	attribute vec4 color;',

				'#elif defined( USE_COLOR )',

				'	attribute vec3 color;',

				'#endif',

				'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				generatePrecision( parameters ),

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines,

				parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
				parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

				parameters.alphaToCoverage ? '#define ALPHA_TO_COVERAGE' : '',
				parameters.map ? '#define USE_MAP' : '',
				parameters.matcap ? '#define USE_MATCAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
				envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
				envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
				parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

				parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
				parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

				parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
				parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
				parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

				parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
				parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
				parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
				parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.alphaTest ? '#define USE_ALPHATEST' : '',
				parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

				parameters.sheen ? '#define USE_SHEEN' : '',
				parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
				parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

				parameters.transmission ? '#define USE_TRANSMISSION' : '',
				parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
				parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

				parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
				parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
				parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
				parameters.vertexUv1s ? '#define USE_UV1' : '',
				parameters.vertexUv2s ? '#define USE_UV2' : '',
				parameters.vertexUv3s ? '#define USE_UV3' : '',

				parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

				parameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',

				parameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',

				parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

				parameters.dithering ? '#define DITHERING' : '',
				parameters.opaque ? '#define OPAQUE' : '',

				ShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
				getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),

				parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = resolveIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );
		vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

		fragmentShader = resolveIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );
		fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

		if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {

			// GLSL 3.0 conversion for built-in materials and ShaderMaterial

			versionString = '#version 300 es\n';

			prefixVertex = [
				customVertexExtensions,
				'precision mediump sampler2DArray;',
				'#define attribute in',
				'#define varying out',
				'#define texture2D texture'
			].join( '\n' ) + '\n' + prefixVertex;

			prefixFragment = [
				'precision mediump sampler2DArray;',
				'#define varying in',
				( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
				( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
				'#define gl_FragDepthEXT gl_FragDepth',
				'#define texture2D texture',
				'#define textureCube texture',
				'#define texture2DProj textureProj',
				'#define texture2DLodEXT textureLod',
				'#define texture2DProjLodEXT textureProjLod',
				'#define textureCubeLodEXT textureLod',
				'#define texture2DGradEXT textureGrad',
				'#define texture2DProjGradEXT textureProjGrad',
				'#define textureCubeGradEXT textureGrad'
			].join( '\n' ) + '\n' + prefixFragment;

		}

		const vertexGlsl = versionString + prefixVertex + vertexShader;
		const fragmentGlsl = versionString + prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		const glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		const glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( parameters.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		function onFirstUse( self ) {

			// check for link errors
			if ( renderer.debug.checkShaderErrors ) {

				const programLog = gl.getProgramInfoLog( program ).trim();
				const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
				const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

				let runnable = true;
				let haveDiagnostics = true;

				if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

					runnable = false;

					if ( typeof renderer.debug.onShaderError === 'function' ) {

						renderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );

					} else {

						// default error reporting

						const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
						const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

						console.error(
							'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
							'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\n\n' +
							'Material Name: ' + self.name + '\n' +
							'Material Type: ' + self.type + '\n\n' +
							'Program Info Log: ' + programLog + '\n' +
							vertexErrors + '\n' +
							fragmentErrors
						);

					}

				} else if ( programLog !== '' ) {

					console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

				} else if ( vertexLog === '' || fragmentLog === '' ) {

					haveDiagnostics = false;

				}

				if ( haveDiagnostics ) {

					self.diagnostics = {

						runnable: runnable,

						programLog: programLog,

						vertexShader: {

							log: vertexLog,
							prefix: prefixVertex

						},

						fragmentShader: {

							log: fragmentLog,
							prefix: prefixFragment

						}

					};

				}

			}

			// Clean up

			// Crashes in iOS9 and iOS10. #18402
			// gl.detachShader( program, glVertexShader );
			// gl.detachShader( program, glFragmentShader );

			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );

			cachedUniforms = new WebGLUniforms( gl, program );
			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		// set up caching for uniform locations

		let cachedUniforms;

		this.getUniforms = function () {

			if ( cachedUniforms === undefined ) {

				// Populates cachedUniforms and cachedAttributes
				onFirstUse( this );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		let cachedAttributes;

		this.getAttributes = function () {

			if ( cachedAttributes === undefined ) {

				// Populates cachedAttributes and cachedUniforms
				onFirstUse( this );

			}

			return cachedAttributes;

		};

		// indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,
		// flag the program as ready immediately. It may cause a stall when it's first used.

		let programReady = ( parameters.rendererExtensionParallelShaderCompile === false );

		this.isReady = function () {

			if ( programReady === false ) {

				programReady = gl.getProgramParameter( program, COMPLETION_STATUS_KHR );

			}

			return programReady;

		};

		// free resource

		this.destroy = function () {

			bindingStates.releaseStatesOfProgram( this );

			gl.deleteProgram( program );
			this.program = undefined;

		};

		//

		this.type = parameters.shaderType;
		this.name = parameters.shaderName;
		this.id = programIdCount ++;
		this.cacheKey = cacheKey;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	let _id$1 = 0;

	class WebGLShaderCache {

		constructor() {

			this.shaderCache = new Map();
			this.materialCache = new Map();

		}

		update( material ) {

			const vertexShader = material.vertexShader;
			const fragmentShader = material.fragmentShader;

			const vertexShaderStage = this._getShaderStage( vertexShader );
			const fragmentShaderStage = this._getShaderStage( fragmentShader );

			const materialShaders = this._getShaderCacheForMaterial( material );

			if ( materialShaders.has( vertexShaderStage ) === false ) {

				materialShaders.add( vertexShaderStage );
				vertexShaderStage.usedTimes ++;

			}

			if ( materialShaders.has( fragmentShaderStage ) === false ) {

				materialShaders.add( fragmentShaderStage );
				fragmentShaderStage.usedTimes ++;

			}

			return this;

		}

		remove( material ) {

			const materialShaders = this.materialCache.get( material );

			for ( const shaderStage of materialShaders ) {

				shaderStage.usedTimes --;

				if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );

			}

			this.materialCache.delete( material );

			return this;

		}

		getVertexShaderID( material ) {

			return this._getShaderStage( material.vertexShader ).id;

		}

		getFragmentShaderID( material ) {

			return this._getShaderStage( material.fragmentShader ).id;

		}

		dispose() {

			this.shaderCache.clear();
			this.materialCache.clear();

		}

		_getShaderCacheForMaterial( material ) {

			const cache = this.materialCache;
			let set = cache.get( material );

			if ( set === undefined ) {

				set = new Set();
				cache.set( material, set );

			}

			return set;

		}

		_getShaderStage( code ) {

			const cache = this.shaderCache;
			let stage = cache.get( code );

			if ( stage === undefined ) {

				stage = new WebGLShaderStage( code );
				cache.set( code, stage );

			}

			return stage;

		}

	}

	class WebGLShaderStage {

		constructor( code ) {

			this.id = _id$1 ++;

			this.code = code;
			this.usedTimes = 0;

		}

	}

	function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

		const _programLayers = new Layers();
		const _customShaders = new WebGLShaderCache();
		const _activeChannels = new Set();
		const programs = [];

		const IS_WEBGL2 = capabilities.isWebGL2;
		const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
		const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;

		let precision = capabilities.precision;

		const shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'toon',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};

		function getChannel( value ) {

			_activeChannels.add( value );

			if ( value === 0 ) return 'uv';

			return `uv${ value }`;

		}

		function getParameters( material, lights, shadows, scene, object ) {

			const fog = scene.fog;
			const geometry = object.geometry;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;

			const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
			const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;

			const shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			//

			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

			let morphTextureStride = 0;

			if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
			if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
			if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;

			//

			let vertexShader, fragmentShader;
			let customVertexShaderID, customFragmentShaderID;

			if ( shaderID ) {

				const shader = ShaderLib[ shaderID ];

				vertexShader = shader.vertexShader;
				fragmentShader = shader.fragmentShader;

			} else {

				vertexShader = material.vertexShader;
				fragmentShader = material.fragmentShader;

				_customShaders.update( material );

				customVertexShaderID = _customShaders.getVertexShaderID( material );
				customFragmentShaderID = _customShaders.getFragmentShaderID( material );

			}

			const currentRenderTarget = renderer.getRenderTarget();

			const IS_INSTANCEDMESH = object.isInstancedMesh === true;
			const IS_BATCHEDMESH = object.isBatchedMesh === true;

			const HAS_MAP = !! material.map;
			const HAS_MATCAP = !! material.matcap;
			const HAS_ENVMAP = !! envMap;
			const HAS_AOMAP = !! material.aoMap;
			const HAS_LIGHTMAP = !! material.lightMap;
			const HAS_BUMPMAP = !! material.bumpMap;
			const HAS_NORMALMAP = !! material.normalMap;
			const HAS_DISPLACEMENTMAP = !! material.displacementMap;
			const HAS_EMISSIVEMAP = !! material.emissiveMap;

			const HAS_METALNESSMAP = !! material.metalnessMap;
			const HAS_ROUGHNESSMAP = !! material.roughnessMap;

			const HAS_ANISOTROPY = material.anisotropy > 0;
			const HAS_CLEARCOAT = material.clearcoat > 0;
			const HAS_IRIDESCENCE = material.iridescence > 0;
			const HAS_SHEEN = material.sheen > 0;
			const HAS_TRANSMISSION = material.transmission > 0;

			const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;

			const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;
			const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;
			const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;

			const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;
			const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;

			const HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;
			const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;

			const HAS_SPECULARMAP = !! material.specularMap;
			const HAS_SPECULAR_COLORMAP = !! material.specularColorMap;
			const HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;

			const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;
			const HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;

			const HAS_GRADIENTMAP = !! material.gradientMap;

			const HAS_ALPHAMAP = !! material.alphaMap;

			const HAS_ALPHATEST = material.alphaTest > 0;

			const HAS_ALPHAHASH = !! material.alphaHash;

			const HAS_EXTENSIONS = !! material.extensions;

			let toneMapping = NoToneMapping;

			if ( material.toneMapped ) {

				if ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {

					toneMapping = renderer.toneMapping;

				}

			}

			const parameters = {

				isWebGL2: IS_WEBGL2,

				shaderID: shaderID,
				shaderType: material.type,
				shaderName: material.name,

				vertexShader: vertexShader,
				fragmentShader: fragmentShader,
				defines: material.defines,

				customVertexShaderID: customVertexShaderID,
				customFragmentShaderID: customFragmentShaderID,

				isRawShaderMaterial: material.isRawShaderMaterial === true,
				glslVersion: material.glslVersion,

				precision: precision,

				batching: IS_BATCHEDMESH,
				instancing: IS_INSTANCEDMESH,
				instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,
				instancingMorph: IS_INSTANCEDMESH && object.morphTexture !== null,

				supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
				outputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),
				alphaToCoverage: !! material.alphaToCoverage,

				map: HAS_MAP,
				matcap: HAS_MATCAP,
				envMap: HAS_ENVMAP,
				envMapMode: HAS_ENVMAP && envMap.mapping,
				envMapCubeUVHeight: envMapCubeUVHeight,
				aoMap: HAS_AOMAP,
				lightMap: HAS_LIGHTMAP,
				bumpMap: HAS_BUMPMAP,
				normalMap: HAS_NORMALMAP,
				displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
				emissiveMap: HAS_EMISSIVEMAP,

				normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
				normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,

				metalnessMap: HAS_METALNESSMAP,
				roughnessMap: HAS_ROUGHNESSMAP,

				anisotropy: HAS_ANISOTROPY,
				anisotropyMap: HAS_ANISOTROPYMAP,

				clearcoat: HAS_CLEARCOAT,
				clearcoatMap: HAS_CLEARCOATMAP,
				clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
				clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,

				iridescence: HAS_IRIDESCENCE,
				iridescenceMap: HAS_IRIDESCENCEMAP,
				iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,

				sheen: HAS_SHEEN,
				sheenColorMap: HAS_SHEEN_COLORMAP,
				sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,

				specularMap: HAS_SPECULARMAP,
				specularColorMap: HAS_SPECULAR_COLORMAP,
				specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,

				transmission: HAS_TRANSMISSION,
				transmissionMap: HAS_TRANSMISSIONMAP,
				thicknessMap: HAS_THICKNESSMAP,

				gradientMap: HAS_GRADIENTMAP,

				opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,

				alphaMap: HAS_ALPHAMAP,
				alphaTest: HAS_ALPHATEST,
				alphaHash: HAS_ALPHAHASH,

				combine: material.combine,

				//

				mapUv: HAS_MAP && getChannel( material.map.channel ),
				aoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),
				lightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),
				bumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),
				normalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),
				displacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),
				emissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),

				metalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),
				roughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),

				anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),

				clearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),
				clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),
				clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),

				iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),
				iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),

				sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),
				sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),

				specularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),
				specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),
				specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),

				transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),
				thicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),

				alphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),

				//

				vertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),
				vertexColors: material.vertexColors,
				vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,

				pointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),

				fog: !! fog,
				useFog: material.fog === true,
				fogExp2: ( !! fog && fog.isFogExp2 ),

				flatShading: material.flatShading === true,

				sizeAttenuation: material.sizeAttenuation === true,
				logarithmicDepthBuffer: logarithmicDepthBuffer,

				skinning: object.isSkinnedMesh === true,

				morphTargets: geometry.morphAttributes.position !== undefined,
				morphNormals: geometry.morphAttributes.normal !== undefined,
				morphColors: geometry.morphAttributes.color !== undefined,
				morphTargetsCount: morphTargetsCount,
				morphTextureStride: morphTextureStride,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numSpotLightMaps: lights.spotLightMap.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,

				numDirLightShadows: lights.directionalShadowMap.length,
				numPointLightShadows: lights.pointShadowMap.length,
				numSpotLightShadows: lights.spotShadowMap.length,
				numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,

				numLightProbes: lights.numLightProbes,

				numClippingPlanes: clipping.numPlanes,
				numClipIntersection: clipping.numIntersection,

				dithering: material.dithering,

				shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: toneMapping,
				useLegacyLights: renderer._useLegacyLights,

				decodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.map.colorSpace ) === SRGBTransfer ),

				premultipliedAlpha: material.premultipliedAlpha,

				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				useDepthPacking: material.depthPacking >= 0,
				depthPacking: material.depthPacking || 0,

				index0AttributeName: material.index0AttributeName,

				extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
				extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
				extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
				extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,
				extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has( 'WEBGL_clip_cull_distance' ),
				extensionMultiDraw: HAS_EXTENSIONS && material.extensions.multiDraw === true && extensions.has( 'WEBGL_multi_draw' ),

				rendererExtensionFragDepth: IS_WEBGL2 || extensions.has( 'EXT_frag_depth' ),
				rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has( 'WEBGL_draw_buffers' ),
				rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has( 'EXT_shader_texture_lod' ),
				rendererExtensionParallelShaderCompile: extensions.has( 'KHR_parallel_shader_compile' ),

				customProgramCacheKey: material.customProgramCacheKey()

			};

			// the usage of getChannel() determines the active texture channels for this shader

			parameters.vertexUv1s = _activeChannels.has( 1 );
			parameters.vertexUv2s = _activeChannels.has( 2 );
			parameters.vertexUv3s = _activeChannels.has( 3 );

			_activeChannels.clear();

			return parameters;

		}

		function getProgramCacheKey( parameters ) {

			const array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( parameters.customVertexShaderID );
				array.push( parameters.customFragmentShaderID );

			}

			if ( parameters.defines !== undefined ) {

				for ( const name in parameters.defines ) {

					array.push( name );
					array.push( parameters.defines[ name ] );

				}

			}

			if ( parameters.isRawShaderMaterial === false ) {

				getProgramCacheKeyParameters( array, parameters );
				getProgramCacheKeyBooleans( array, parameters );
				array.push( renderer.outputColorSpace );

			}

			array.push( parameters.customProgramCacheKey );

			return array.join();

		}

		function getProgramCacheKeyParameters( array, parameters ) {

			array.push( parameters.precision );
			array.push( parameters.outputColorSpace );
			array.push( parameters.envMapMode );
			array.push( parameters.envMapCubeUVHeight );
			array.push( parameters.mapUv );
			array.push( parameters.alphaMapUv );
			array.push( parameters.lightMapUv );
			array.push( parameters.aoMapUv );
			array.push( parameters.bumpMapUv );
			array.push( parameters.normalMapUv );
			array.push( parameters.displacementMapUv );
			array.push( parameters.emissiveMapUv );
			array.push( parameters.metalnessMapUv );
			array.push( parameters.roughnessMapUv );
			array.push( parameters.anisotropyMapUv );
			array.push( parameters.clearcoatMapUv );
			array.push( parameters.clearcoatNormalMapUv );
			array.push( parameters.clearcoatRoughnessMapUv );
			array.push( parameters.iridescenceMapUv );
			array.push( parameters.iridescenceThicknessMapUv );
			array.push( parameters.sheenColorMapUv );
			array.push( parameters.sheenRoughnessMapUv );
			array.push( parameters.specularMapUv );
			array.push( parameters.specularColorMapUv );
			array.push( parameters.specularIntensityMapUv );
			array.push( parameters.transmissionMapUv );
			array.push( parameters.thicknessMapUv );
			array.push( parameters.combine );
			array.push( parameters.fogExp2 );
			array.push( parameters.sizeAttenuation );
			array.push( parameters.morphTargetsCount );
			array.push( parameters.morphAttributeCount );
			array.push( parameters.numDirLights );
			array.push( parameters.numPointLights );
			array.push( parameters.numSpotLights );
			array.push( parameters.numSpotLightMaps );
			array.push( parameters.numHemiLights );
			array.push( parameters.numRectAreaLights );
			array.push( parameters.numDirLightShadows );
			array.push( parameters.numPointLightShadows );
			array.push( parameters.numSpotLightShadows );
			array.push( parameters.numSpotLightShadowsWithMaps );
			array.push( parameters.numLightProbes );
			array.push( parameters.shadowMapType );
			array.push( parameters.toneMapping );
			array.push( parameters.numClippingPlanes );
			array.push( parameters.numClipIntersection );
			array.push( parameters.depthPacking );

		}

		function getProgramCacheKeyBooleans( array, parameters ) {

			_programLayers.disableAll();

			if ( parameters.isWebGL2 )
				_programLayers.enable( 0 );
			if ( parameters.supportsVertexTextures )
				_programLayers.enable( 1 );
			if ( parameters.instancing )
				_programLayers.enable( 2 );
			if ( parameters.instancingColor )
				_programLayers.enable( 3 );
			if ( parameters.instancingMorph )
				_programLayers.enable( 4 );
			if ( parameters.matcap )
				_programLayers.enable( 5 );
			if ( parameters.envMap )
				_programLayers.enable( 6 );
			if ( parameters.normalMapObjectSpace )
				_programLayers.enable( 7 );
			if ( parameters.normalMapTangentSpace )
				_programLayers.enable( 8 );
			if ( parameters.clearcoat )
				_programLayers.enable( 9 );
			if ( parameters.iridescence )
				_programLayers.enable( 10 );
			if ( parameters.alphaTest )
				_programLayers.enable( 11 );
			if ( parameters.vertexColors )
				_programLayers.enable( 12 );
			if ( parameters.vertexAlphas )
				_programLayers.enable( 13 );
			if ( parameters.vertexUv1s )
				_programLayers.enable( 14 );
			if ( parameters.vertexUv2s )
				_programLayers.enable( 15 );
			if ( parameters.vertexUv3s )
				_programLayers.enable( 16 );
			if ( parameters.vertexTangents )
				_programLayers.enable( 17 );
			if ( parameters.anisotropy )
				_programLayers.enable( 18 );
			if ( parameters.alphaHash )
				_programLayers.enable( 19 );
			if ( parameters.batching )
				_programLayers.enable( 20 );

			array.push( _programLayers.mask );
			_programLayers.disableAll();

			if ( parameters.fog )
				_programLayers.enable( 0 );
			if ( parameters.useFog )
				_programLayers.enable( 1 );
			if ( parameters.flatShading )
				_programLayers.enable( 2 );
			if ( parameters.logarithmicDepthBuffer )
				_programLayers.enable( 3 );
			if ( parameters.skinning )
				_programLayers.enable( 4 );
			if ( parameters.morphTargets )
				_programLayers.enable( 5 );
			if ( parameters.morphNormals )
				_programLayers.enable( 6 );
			if ( parameters.morphColors )
				_programLayers.enable( 7 );
			if ( parameters.premultipliedAlpha )
				_programLayers.enable( 8 );
			if ( parameters.shadowMapEnabled )
				_programLayers.enable( 9 );
			if ( parameters.useLegacyLights )
				_programLayers.enable( 10 );
			if ( parameters.doubleSided )
				_programLayers.enable( 11 );
			if ( parameters.flipSided )
				_programLayers.enable( 12 );
			if ( parameters.useDepthPacking )
				_programLayers.enable( 13 );
			if ( parameters.dithering )
				_programLayers.enable( 14 );
			if ( parameters.transmission )
				_programLayers.enable( 15 );
			if ( parameters.sheen )
				_programLayers.enable( 16 );
			if ( parameters.opaque )
				_programLayers.enable( 17 );
			if ( parameters.pointsUvs )
				_programLayers.enable( 18 );
			if ( parameters.decodeVideoTexture )
				_programLayers.enable( 19 );
			if ( parameters.alphaToCoverage )
				_programLayers.enable( 20 );

			array.push( _programLayers.mask );

		}

		function getUniforms( material ) {

			const shaderID = shaderIDs[ material.type ];
			let uniforms;

			if ( shaderID ) {

				const shader = ShaderLib[ shaderID ];
				uniforms = UniformsUtils.clone( shader.uniforms );

			} else {

				uniforms = material.uniforms;

			}

			return uniforms;

		}

		function acquireProgram( parameters, cacheKey ) {

			let program;

			// Check if code has been already compiled
			for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

				const preexistingProgram = programs[ p ];

				if ( preexistingProgram.cacheKey === cacheKey ) {

					program = preexistingProgram;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
				programs.push( program );

			}

			return program;

		}

		function releaseProgram( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				const i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		}

		function releaseShaderCache( material ) {

			_customShaders.remove( material );

		}

		function dispose() {

			_customShaders.dispose();

		}

		return {
			getParameters: getParameters,
			getProgramCacheKey: getProgramCacheKey,
			getUniforms: getUniforms,
			acquireProgram: acquireProgram,
			releaseProgram: releaseProgram,
			releaseShaderCache: releaseShaderCache,
			// Exposed for resource monitoring & error feedback via renderer.info:
			programs: programs,
			dispose: dispose
		};

	}

	function WebGLProperties() {

		let properties = new WeakMap();

		function get( object ) {

			let map = properties.get( object );

			if ( map === undefined ) {

				map = {};
				properties.set( object, map );

			}

			return map;

		}

		function remove( object ) {

			properties.delete( object );

		}

		function update( object, key, value ) {

			properties.get( object )[ key ] = value;

		}

		function dispose() {

			properties = new WeakMap();

		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};

	}

	function painterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.material.id !== b.material.id ) {

			return a.material.id - b.material.id;

		} else if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}


	function WebGLRenderList() {

		const renderItems = [];
		let renderItemsIndex = 0;

		const opaque = [];
		const transmissive = [];
		const transparent = [];

		function init() {

			renderItemsIndex = 0;

			opaque.length = 0;
			transmissive.length = 0;
			transparent.length = 0;

		}

		function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

			let renderItem = renderItems[ renderItemsIndex ];

			if ( renderItem === undefined ) {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};

				renderItems[ renderItemsIndex ] = renderItem;

			} else {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;

			}

			renderItemsIndex ++;

			return renderItem;

		}

		function push( object, geometry, material, groupOrder, z, group ) {

			const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			if ( material.transmission > 0.0 ) {

				transmissive.push( renderItem );

			} else if ( material.transparent === true ) {

				transparent.push( renderItem );

			} else {

				opaque.push( renderItem );

			}

		}

		function unshift( object, geometry, material, groupOrder, z, group ) {

			const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			if ( material.transmission > 0.0 ) {

				transmissive.unshift( renderItem );

			} else if ( material.transparent === true ) {

				transparent.unshift( renderItem );

			} else {

				opaque.unshift( renderItem );

			}

		}

		function sort( customOpaqueSort, customTransparentSort ) {

			if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
			if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
			if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

		}

		function finish() {

			// Clear references from inactive renderItems in the list

			for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

				const renderItem = renderItems[ i ];

				if ( renderItem.id === null ) break;

				renderItem.id = null;
				renderItem.object = null;
				renderItem.geometry = null;
				renderItem.material = null;
				renderItem.group = null;

			}

		}

		return {

			opaque: opaque,
			transmissive: transmissive,
			transparent: transparent,

			init: init,
			push: push,
			unshift: unshift,
			finish: finish,

			sort: sort
		};

	}

	function WebGLRenderLists() {

		let lists = new WeakMap();

		function get( scene, renderCallDepth ) {

			const listArray = lists.get( scene );
			let list;

			if ( listArray === undefined ) {

				list = new WebGLRenderList();
				lists.set( scene, [ list ] );

			} else {

				if ( renderCallDepth >= listArray.length ) {

					list = new WebGLRenderList();
					listArray.push( list );

				} else {

					list = listArray[ renderCallDepth ];

				}

			}

			return list;

		}

		function dispose() {

			lists = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	function UniformsCache() {

		const lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				let uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color$1()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color$1(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color$1(),
							distance: 0,
							decay: 0
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color$1(),
							groundColor: new Color$1()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color$1(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	function ShadowUniformsCache() {

		const lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				let uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2$1()
						};
						break;

					case 'SpotLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2$1()
						};
						break;

					case 'PointLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2$1(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;

					// TODO (abelnation): set RectAreaLight shadow uniforms

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}



	let nextVersion = 0;

	function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {

		return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );

	}

	function WebGLLights( extensions, capabilities ) {

		const cache = new UniformsCache();

		const shadowCache = ShadowUniformsCache();

		const state = {

			version: 0,

			hash: {
				directionalLength: - 1,
				pointLength: - 1,
				spotLength: - 1,
				rectAreaLength: - 1,
				hemiLength: - 1,

				numDirectionalShadows: - 1,
				numPointShadows: - 1,
				numSpotShadows: - 1,
				numSpotMaps: - 1,

				numLightProbes: - 1
			},

			ambient: [ 0, 0, 0 ],
			probe: [],
			directional: [],
			directionalShadow: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotLightMap: [],
			spotShadow: [],
			spotShadowMap: [],
			spotLightMatrix: [],
			rectArea: [],
			rectAreaLTC1: null,
			rectAreaLTC2: null,
			point: [],
			pointShadow: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],
			numSpotLightShadowsWithMaps: 0,
			numLightProbes: 0

		};

		for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

		const vector3 = new Vector3();
		const matrix4 = new Matrix4();
		const matrix42 = new Matrix4();

		function setup( lights, useLegacyLights ) {

			let r = 0, g = 0, b = 0;

			for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;

			let numDirectionalShadows = 0;
			let numPointShadows = 0;
			let numSpotShadows = 0;
			let numSpotMaps = 0;
			let numSpotShadowsWithMaps = 0;

			let numLightProbes = 0;

			// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
			lights.sort( shadowCastingAndTexturingLightsFirst );

			// artist-friendly light intensity scaling factor
			const scaleFactor = ( useLegacyLights === true ) ? Math.PI : 1;

			for ( let i = 0, l = lights.length; i < l; i ++ ) {

				const light = lights[ i ];

				const color = light.color;
				const intensity = light.intensity;
				const distance = light.distance;

				const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity * scaleFactor;
					g += color.g * intensity * scaleFactor;
					b += color.b * intensity * scaleFactor;

				} else if ( light.isLightProbe ) {

					for ( let j = 0; j < 9; j ++ ) {

						state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

					}

					numLightProbes ++;

				} else if ( light.isDirectionalLight ) {

					const uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );

					if ( light.castShadow ) {

						const shadow = light.shadow;

						const shadowUniforms = shadowCache.get( light );

						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;

						state.directionalShadow[ directionalLength ] = shadowUniforms;
						state.directionalShadowMap[ directionalLength ] = shadowMap;
						state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

						numDirectionalShadows ++;

					}

					state.directional[ directionalLength ] = uniforms;

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					const uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );

					uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
					uniforms.distance = distance;

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = light.decay;

					state.spot[ spotLength ] = uniforms;

					const shadow = light.shadow;

					if ( light.map ) {

						state.spotLightMap[ numSpotMaps ] = light.map;
						numSpotMaps ++;

						// make sure the lightMatrix is up to date
						// TODO : do it if required only
						shadow.updateMatrices( light );

						if ( light.castShadow ) numSpotShadowsWithMaps ++;

					}

					state.spotLightMatrix[ spotLength ] = shadow.matrix;

					if ( light.castShadow ) {

						const shadowUniforms = shadowCache.get( light );

						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;

						state.spotShadow[ spotLength ] = shadowUniforms;
						state.spotShadowMap[ spotLength ] = shadowMap;

						numSpotShadows ++;

					}

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					const uniforms = cache.get( light );

					uniforms.color.copy( color ).multiplyScalar( intensity );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					state.rectArea[ rectAreaLength ] = uniforms;

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					const uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;

					if ( light.castShadow ) {

						const shadow = light.shadow;

						const shadowUniforms = shadowCache.get( light );

						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						shadowUniforms.shadowCameraNear = shadow.camera.near;
						shadowUniforms.shadowCameraFar = shadow.camera.far;

						state.pointShadow[ pointLength ] = shadowUniforms;
						state.pointShadowMap[ pointLength ] = shadowMap;
						state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

						numPointShadows ++;

					}

					state.point[ pointLength ] = uniforms;

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					const uniforms = cache.get( light );

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );

					state.hemi[ hemiLength ] = uniforms;

					hemiLength ++;

				}

			}

			if ( rectAreaLength > 0 ) {

				if ( capabilities.isWebGL2 ) {

					// WebGL 2

					if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

						state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
						state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

					} else {

						state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
						state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

					}

				} else {

					// WebGL 1

					if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

						state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
						state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

					} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {

						state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
						state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

					} else {

						console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );

					}

				}

			}

			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;

			const hash = state.hash;

			if ( hash.directionalLength !== directionalLength ||
				hash.pointLength !== pointLength ||
				hash.spotLength !== spotLength ||
				hash.rectAreaLength !== rectAreaLength ||
				hash.hemiLength !== hemiLength ||
				hash.numDirectionalShadows !== numDirectionalShadows ||
				hash.numPointShadows !== numPointShadows ||
				hash.numSpotShadows !== numSpotShadows ||
				hash.numSpotMaps !== numSpotMaps ||
				hash.numLightProbes !== numLightProbes ) {

				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;

				state.directionalShadow.length = numDirectionalShadows;
				state.directionalShadowMap.length = numDirectionalShadows;
				state.pointShadow.length = numPointShadows;
				state.pointShadowMap.length = numPointShadows;
				state.spotShadow.length = numSpotShadows;
				state.spotShadowMap.length = numSpotShadows;
				state.directionalShadowMatrix.length = numDirectionalShadows;
				state.pointShadowMatrix.length = numPointShadows;
				state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
				state.spotLightMap.length = numSpotMaps;
				state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
				state.numLightProbes = numLightProbes;

				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;

				hash.numDirectionalShadows = numDirectionalShadows;
				hash.numPointShadows = numPointShadows;
				hash.numSpotShadows = numSpotShadows;
				hash.numSpotMaps = numSpotMaps;

				hash.numLightProbes = numLightProbes;

				state.version = nextVersion ++;

			}

		}

		function setupView( lights, camera ) {

			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;

			const viewMatrix = camera.matrixWorldInverse;

			for ( let i = 0, l = lights.length; i < l; i ++ ) {

				const light = lights[ i ];

				if ( light.isDirectionalLight ) {

					const uniforms = state.directional[ directionalLength ];

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					const uniforms = state.spot[ spotLength ];

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					const uniforms = state.rectArea[ rectAreaLength ];

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					// extract local rotation of light to derive width/height half vectors
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					const uniforms = state.point[ pointLength ];

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					const uniforms = state.hemi[ hemiLength ];

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );

					hemiLength ++;

				}

			}

		}

		return {
			setup: setup,
			setupView: setupView,
			state: state
		};

	}

	function WebGLRenderState( extensions, capabilities ) {

		const lights = new WebGLLights( extensions, capabilities );

		const lightsArray = [];
		const shadowsArray = [];

		function init() {

			lightsArray.length = 0;
			shadowsArray.length = 0;

		}

		function pushLight( light ) {

			lightsArray.push( light );

		}

		function pushShadow( shadowLight ) {

			shadowsArray.push( shadowLight );

		}

		function setupLights( useLegacyLights ) {

			lights.setup( lightsArray, useLegacyLights );

		}

		function setupLightsView( camera ) {

			lights.setupView( lightsArray, camera );

		}

		const state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,

			lights: lights
		};

		return {
			init: init,
			state: state,
			setupLights: setupLights,
			setupLightsView: setupLightsView,

			pushLight: pushLight,
			pushShadow: pushShadow
		};

	}

	function WebGLRenderStates( extensions, capabilities ) {

		let renderStates = new WeakMap();

		function get( scene, renderCallDepth = 0 ) {

			const renderStateArray = renderStates.get( scene );
			let renderState;

			if ( renderStateArray === undefined ) {

				renderState = new WebGLRenderState( extensions, capabilities );
				renderStates.set( scene, [ renderState ] );

			} else {

				if ( renderCallDepth >= renderStateArray.length ) {

					renderState = new WebGLRenderState( extensions, capabilities );
					renderStateArray.push( renderState );

				} else {

					renderState = renderStateArray[ renderCallDepth ];

				}

			}

			return renderState;

		}

		function dispose() {

			renderStates = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	class MeshDepthMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isMeshDepthMaterial = true;

			this.type = 'MeshDepthMaterial';

			this.depthPacking = BasicDepthPacking;

			this.map = null;

			this.alphaMap = null;

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.setValues( parameters );

		}

		copy( source ) {

			super.copy( source );

			this.depthPacking = source.depthPacking;

			this.map = source.map;

			this.alphaMap = source.alphaMap;

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			return this;

		}

	}

	class MeshDistanceMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isMeshDistanceMaterial = true;

			this.type = 'MeshDistanceMaterial';

			this.map = null;

			this.alphaMap = null;

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.setValues( parameters );

		}

		copy( source ) {

			super.copy( source );

			this.map = source.map;

			this.alphaMap = source.alphaMap;

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			return this;

		}

	}

	const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

	const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

	function WebGLShadowMap( _renderer, _objects, _capabilities ) {

		let _frustum = new Frustum();

		const _shadowMapSize = new Vector2$1(),
			_viewportSize = new Vector2$1(),

			_viewport = new Vector4(),

			_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
			_distanceMaterial = new MeshDistanceMaterial(),

			_materialCache = {},

			_maxTextureSize = _capabilities.maxTextureSize;

		const shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };

		const shadowMaterialVertical = new ShaderMaterial( {
			defines: {
				VSM_SAMPLES: 8
			},
			uniforms: {
				shadow_pass: { value: null },
				resolution: { value: new Vector2$1() },
				radius: { value: 4.0 }
			},

			vertexShader: vertex,
			fragmentShader: fragment

		} );

		const shadowMaterialHorizontal = shadowMaterialVertical.clone();
		shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

		const fullScreenTri = new BufferGeometry();
		fullScreenTri.setAttribute(
			'position',
			new BufferAttribute(
				new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
				3
			)
		);

		const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

		const scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;
		let _previousType = this.type;

		this.render = function ( lights, scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( lights.length === 0 ) return;

			const currentRenderTarget = _renderer.getRenderTarget();
			const activeCubeFace = _renderer.getActiveCubeFace();
			const activeMipmapLevel = _renderer.getActiveMipmapLevel();

			const _state = _renderer.state;

			// Set GL state for depth map.
			_state.setBlending( NoBlending );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );

			// check for shadow map type changes

			const toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );
			const fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );

			// render depth map

			for ( let i = 0, il = lights.length; i < il; i ++ ) {

				const light = lights[ i ];
				const shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

				_shadowMapSize.copy( shadow.mapSize );

				const shadowFrameExtents = shadow.getFrameExtents();

				_shadowMapSize.multiply( shadowFrameExtents );

				_viewportSize.copy( shadow.mapSize );

				if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

					if ( _shadowMapSize.x > _maxTextureSize ) {

						_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
						shadow.mapSize.x = _viewportSize.x;

					}

					if ( _shadowMapSize.y > _maxTextureSize ) {

						_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
						shadow.mapSize.y = _viewportSize.y;

					}

				}

				if ( shadow.map === null || toVSM === true || fromVSM === true ) {

					const pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};

					if ( shadow.map !== null ) {

						shadow.map.dispose();

					}

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + '.shadowMap';

					shadow.camera.updateProjectionMatrix();

				}

				_renderer.setRenderTarget( shadow.map );
				_renderer.clear();

				const viewportCount = shadow.getViewportCount();

				for ( let vp = 0; vp < viewportCount; vp ++ ) {

					const viewport = shadow.getViewport( vp );

					_viewport.set(
						_viewportSize.x * viewport.x,
						_viewportSize.y * viewport.y,
						_viewportSize.x * viewport.z,
						_viewportSize.y * viewport.w
					);

					_state.viewport( _viewport );

					shadow.updateMatrices( light, vp );

					_frustum = shadow.getFrustum();

					renderObject( scene, camera, shadow.camera, light, this.type );

				}

				// do blur pass for VSM

				if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {

					VSMPass( shadow, camera );

				}

				shadow.needsUpdate = false;

			}

			_previousType = this.type;

			scope.needsUpdate = false;

			_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

		};

		function VSMPass( shadow, camera ) {

			const geometry = _objects.update( fullScreenMesh );

			if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

				shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
				shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

				shadowMaterialVertical.needsUpdate = true;
				shadowMaterialHorizontal.needsUpdate = true;

			}

			if ( shadow.mapPass === null ) {

				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );

			}

			// vertical pass

			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialVertical.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.mapPass );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

			// horizontal pass

			shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
			shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.map );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

		}

		function getDepthMaterial( object, material, light, type ) {

			let result = null;

			const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

			if ( customMaterial !== undefined ) {

				result = customMaterial;

			} else {

				result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

				if ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
					( material.displacementMap && material.displacementScale !== 0 ) ||
					( material.alphaMap && material.alphaTest > 0 ) ||
					( material.map && material.alphaTest > 0 ) ) {

					// in this case we need a unique material instance reflecting the
					// appropriate state

					const keyA = result.uuid, keyB = material.uuid;

					let materialsForVariant = _materialCache[ keyA ];

					if ( materialsForVariant === undefined ) {

						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;

					}

					let cachedMaterial = materialsForVariant[ keyB ];

					if ( cachedMaterial === undefined ) {

						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;
						material.addEventListener( 'dispose', onMaterialDispose );

					}

					result = cachedMaterial;

				}

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			if ( type === VSMShadowMap ) {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

			} else {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

			}

			result.alphaMap = material.alphaMap;
			result.alphaTest = material.alphaTest;
			result.map = material.map;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;

			result.displacementMap = material.displacementMap;
			result.displacementScale = material.displacementScale;
			result.displacementBias = material.displacementBias;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

				const materialProperties = _renderer.properties.get( result );
				materialProperties.light = light;

			}

			return result;

		}

		function renderObject( object, camera, shadowCamera, light, type ) {

			if ( object.visible === false ) return;

			const visible = object.layers.test( camera.layers );

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					const geometry = _objects.update( object );
					const material = object.material;

					if ( Array.isArray( material ) ) {

						const groups = geometry.groups;

						for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

							const group = groups[ k ];
							const groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								const depthMaterial = getDepthMaterial( object, groupMaterial, light, type );

								object.onBeforeShadow( _renderer, object, camera, shadowCamera, geometry, depthMaterial, group );

								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

								object.onAfterShadow( _renderer, object, camera, shadowCamera, geometry, depthMaterial, group );

							}

						}

					} else if ( material.visible ) {

						const depthMaterial = getDepthMaterial( object, material, light, type );

						object.onBeforeShadow( _renderer, object, camera, shadowCamera, geometry, depthMaterial, null );

						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

						object.onAfterShadow( _renderer, object, camera, shadowCamera, geometry, depthMaterial, null );

					}

				}

			}

			const children = object.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				renderObject( children[ i ], camera, shadowCamera, light, type );

			}

		}

		function onMaterialDispose( event ) {

			const material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			// make sure to remove the unique distance/depth materials used for shadow map rendering

			for ( const id in _materialCache ) {

				const cache = _materialCache[ id ];

				const uuid = event.target.uuid;

				if ( uuid in cache ) {

					const shadowMaterial = cache[ uuid ];
					shadowMaterial.dispose();
					delete cache[ uuid ];

				}

			}

		}

	}

	function WebGLState( gl, extensions, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		function ColorBuffer() {

			let locked = false;

			const color = new Vector4();
			let currentColorMask = null;
			const currentColorClear = new Vector4( 0, 0, 0, 0 );

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a, premultipliedAlpha ) {

					if ( premultipliedAlpha === true ) {

						r *= a; g *= a; b *= a;

					}

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

				}

			};

		}

		function DepthBuffer() {

			let locked = false;

			let currentDepthMask = null;
			let currentDepthFunc = null;
			let currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			let locked = false;

			let currentStencilMask = null;
			let currentStencilFunc = null;
			let currentStencilRef = null;
			let currentStencilFuncMask = null;
			let currentStencilFail = null;
			let currentStencilZFail = null;
			let currentStencilZPass = null;
			let currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( ! locked ) {

						if ( stencilTest ) {

							enable( gl.STENCIL_TEST );

						} else {

							disable( gl.STENCIL_TEST );

						}

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef !== stencilRef ||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail !== stencilFail ||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		const colorBuffer = new ColorBuffer();
		const depthBuffer = new DepthBuffer();
		const stencilBuffer = new StencilBuffer();

		const uboBindings = new WeakMap();
		const uboProgramMap = new WeakMap();

		let enabledCapabilities = {};

		let currentBoundFramebuffers = {};
		let currentDrawbuffers = new WeakMap();
		let defaultDrawbuffers = [];

		let currentProgram = null;

		let currentBlendingEnabled = false;
		let currentBlending = null;
		let currentBlendEquation = null;
		let currentBlendSrc = null;
		let currentBlendDst = null;
		let currentBlendEquationAlpha = null;
		let currentBlendSrcAlpha = null;
		let currentBlendDstAlpha = null;
		let currentBlendColor = new Color$1( 0, 0, 0 );
		let currentBlendAlpha = 0;
		let currentPremultipledAlpha = false;

		let currentFlipSided = null;
		let currentCullFace = null;

		let currentLineWidth = null;

		let currentPolygonOffsetFactor = null;
		let currentPolygonOffsetUnits = null;

		const maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

		let lineWidthAvailable = false;
		let version = 0;
		const glVersion = gl.getParameter( gl.VERSION );

		if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

			version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 1.0 );

		} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

			version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 2.0 );

		}

		let currentTextureSlot = null;
		let currentBoundTextures = {};

		const scissorParam = gl.getParameter( gl.SCISSOR_BOX );
		const viewportParam = gl.getParameter( gl.VIEWPORT );

		const currentScissor = new Vector4().fromArray( scissorParam );
		const currentViewport = new Vector4().fromArray( viewportParam );

		function createTexture( type, target, count, dimensions ) {

			const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			const texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( let i = 0; i < count; i ++ ) {

				if ( isWebGL2 && ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) ) {

					gl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

				} else {

					gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

				}

			}

			return texture;

		}

		const emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		if ( isWebGL2 ) {

			emptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );
			emptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );

		}

		// init

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( gl.DEPTH_TEST );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( gl.CULL_FACE );

		setBlending( NoBlending );

		//

		function enable( id ) {

			if ( enabledCapabilities[ id ] !== true ) {

				gl.enable( id );
				enabledCapabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( enabledCapabilities[ id ] !== false ) {

				gl.disable( id );
				enabledCapabilities[ id ] = false;

			}

		}

		function bindFramebuffer( target, framebuffer ) {

			if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

				gl.bindFramebuffer( target, framebuffer );

				currentBoundFramebuffers[ target ] = framebuffer;

				if ( isWebGL2 ) {

					// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER

					if ( target === gl.DRAW_FRAMEBUFFER ) {

						currentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;

					}

					if ( target === gl.FRAMEBUFFER ) {

						currentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;

					}

				}

				return true;

			}

			return false;

		}

		function drawBuffers( renderTarget, framebuffer ) {

			let drawBuffers = defaultDrawbuffers;

			let needsUpdate = false;

			if ( renderTarget ) {

				drawBuffers = currentDrawbuffers.get( framebuffer );

				if ( drawBuffers === undefined ) {

					drawBuffers = [];
					currentDrawbuffers.set( framebuffer, drawBuffers );

				}

				const textures = renderTarget.textures;

				if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

					for ( let i = 0, il = textures.length; i < il; i ++ ) {

						drawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;

					}

					drawBuffers.length = textures.length;

					needsUpdate = true;

				}

			} else {

				if ( drawBuffers[ 0 ] !== gl.BACK ) {

					drawBuffers[ 0 ] = gl.BACK;

					needsUpdate = true;

				}

			}

			if ( needsUpdate ) {

				if ( capabilities.isWebGL2 ) {

					gl.drawBuffers( drawBuffers );

				} else if ( extensions.has( 'WEBGL_draw_buffers' ) === true ) {

					extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );

				} else {

					throw new Error( 'THREE.WebGLState: Usage of gl.drawBuffers() require WebGL2 or WEBGL_draw_buffers extension' );

				}

			}


		}

		function useProgram( program ) {

			if ( currentProgram !== program ) {

				gl.useProgram( program );

				currentProgram = program;

				return true;

			}

			return false;

		}

		const equationToGL = {
			[ AddEquation ]: gl.FUNC_ADD,
			[ SubtractEquation ]: gl.FUNC_SUBTRACT,
			[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT
		};

		if ( isWebGL2 ) {

			equationToGL[ MinEquation ] = gl.MIN;
			equationToGL[ MaxEquation ] = gl.MAX;

		} else {

			const extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				equationToGL[ MinEquation ] = extension.MIN_EXT;
				equationToGL[ MaxEquation ] = extension.MAX_EXT;

			}

		}

		const factorToGL = {
			[ ZeroFactor ]: gl.ZERO,
			[ OneFactor ]: gl.ONE,
			[ SrcColorFactor ]: gl.SRC_COLOR,
			[ SrcAlphaFactor ]: gl.SRC_ALPHA,
			[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,
			[ DstColorFactor ]: gl.DST_COLOR,
			[ DstAlphaFactor ]: gl.DST_ALPHA,
			[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,
			[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,
			[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,
			[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA,
			[ ConstantColorFactor ]: gl.CONSTANT_COLOR,
			[ OneMinusConstantColorFactor ]: gl.ONE_MINUS_CONSTANT_COLOR,
			[ ConstantAlphaFactor ]: gl.CONSTANT_ALPHA,
			[ OneMinusConstantAlphaFactor ]: gl.ONE_MINUS_CONSTANT_ALPHA
		};

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha ) {

			if ( blending === NoBlending ) {

				if ( currentBlendingEnabled === true ) {

					disable( gl.BLEND );
					currentBlendingEnabled = false;

				}

				return;

			}

			if ( currentBlendingEnabled === false ) {

				enable( gl.BLEND );
				currentBlendingEnabled = true;

			}

			if ( blending !== CustomBlending ) {

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

						gl.blendEquation( gl.FUNC_ADD );

						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;

					}

					if ( premultipliedAlpha ) {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
								break;

							case AdditiveBlending:
								gl.blendFunc( gl.ONE, gl.ONE );
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
								break;

							case MultiplyBlending:
								gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					} else {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
								break;

							case AdditiveBlending:
								gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
								break;

							case MultiplyBlending:
								gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					}

					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;
					currentBlendColor.set( 0, 0, 0 );
					currentBlendAlpha = 0;

					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;

				}

				return;

			}

			// custom blending

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

			if ( blendColor.equals( currentBlendColor ) === false || blendAlpha !== currentBlendAlpha ) {

				gl.blendColor( blendColor.r, blendColor.g, blendColor.b, blendAlpha );

				currentBlendColor.copy( blendColor );
				currentBlendAlpha = blendAlpha;

			}

			currentBlending = blending;
			currentPremultipledAlpha = false;

		}

		function setMaterial( material, frontFaceCW ) {

			material.side === DoubleSide
				? disable( gl.CULL_FACE )
				: enable( gl.CULL_FACE );

			let flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) flipSided = ! flipSided;

			setFlipSided( flipSided );

			( material.blending === NormalBlending && material.transparent === false )
				? setBlending( NoBlending )
				: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha );

			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );

			const stencilWrite = material.stencilWrite;
			stencilBuffer.setTest( stencilWrite );
			if ( stencilWrite ) {

				stencilBuffer.setMask( material.stencilWriteMask );
				stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
				stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

			}

			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			material.alphaToCoverage === true
				? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )
				: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				if ( lineWidthAvailable ) gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function setScissorTest( scissorTest ) {

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture, webglSlot ) {

			if ( webglSlot === undefined ) {

				if ( currentTextureSlot === null ) {

					webglSlot = gl.TEXTURE0 + maxTextures - 1;

				} else {

					webglSlot = currentTextureSlot;

				}

			}

			let boundTexture = currentBoundTextures[ webglSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ webglSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				if ( currentTextureSlot !== webglSlot ) {

					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;

				}

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function unbindTexture() {

			const boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

				gl.bindTexture( boundTexture.type, null );

				boundTexture.type = undefined;
				boundTexture.texture = undefined;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function compressedTexImage3D() {

			try {

				gl.compressedTexImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texSubImage2D() {

			try {

				gl.texSubImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texSubImage3D() {

			try {

				gl.texSubImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function compressedTexSubImage2D() {

			try {

				gl.compressedTexSubImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function compressedTexSubImage3D() {

			try {

				gl.compressedTexSubImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texStorage2D() {

			try {

				gl.texStorage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texStorage3D() {

			try {

				gl.texStorage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage3D() {

			try {

				gl.texImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		function updateUBOMapping( uniformsGroup, program ) {

			let mapping = uboProgramMap.get( program );

			if ( mapping === undefined ) {

				mapping = new WeakMap();

				uboProgramMap.set( program, mapping );

			}

			let blockIndex = mapping.get( uniformsGroup );

			if ( blockIndex === undefined ) {

				blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );

				mapping.set( uniformsGroup, blockIndex );

			}

		}

		function uniformBlockBinding( uniformsGroup, program ) {

			const mapping = uboProgramMap.get( program );
			const blockIndex = mapping.get( uniformsGroup );

			if ( uboBindings.get( program ) !== blockIndex ) {

				// bind shader specific block index to global block point
				gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );

				uboBindings.set( program, blockIndex );

			}

		}

		//

		function reset() {

			// reset state

			gl.disable( gl.BLEND );
			gl.disable( gl.CULL_FACE );
			gl.disable( gl.DEPTH_TEST );
			gl.disable( gl.POLYGON_OFFSET_FILL );
			gl.disable( gl.SCISSOR_TEST );
			gl.disable( gl.STENCIL_TEST );
			gl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

			gl.blendEquation( gl.FUNC_ADD );
			gl.blendFunc( gl.ONE, gl.ZERO );
			gl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );
			gl.blendColor( 0, 0, 0, 0 );

			gl.colorMask( true, true, true, true );
			gl.clearColor( 0, 0, 0, 0 );

			gl.depthMask( true );
			gl.depthFunc( gl.LESS );
			gl.clearDepth( 1 );

			gl.stencilMask( 0xffffffff );
			gl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );
			gl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );
			gl.clearStencil( 0 );

			gl.cullFace( gl.BACK );
			gl.frontFace( gl.CCW );

			gl.polygonOffset( 0, 0 );

			gl.activeTexture( gl.TEXTURE0 );

			gl.bindFramebuffer( gl.FRAMEBUFFER, null );

			if ( isWebGL2 === true ) {

				gl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );
				gl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );

			}

			gl.useProgram( null );

			gl.lineWidth( 1 );

			gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
			gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

			// reset internals

			enabledCapabilities = {};

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentBoundFramebuffers = {};
			currentDrawbuffers = new WeakMap();
			defaultDrawbuffers = [];

			currentProgram = null;

			currentBlendingEnabled = false;
			currentBlending = null;
			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;
			currentBlendColor = new Color$1( 0, 0, 0 );
			currentBlendAlpha = 0;
			currentPremultipledAlpha = false;

			currentFlipSided = null;
			currentCullFace = null;

			currentLineWidth = null;

			currentPolygonOffsetFactor = null;
			currentPolygonOffsetUnits = null;

			currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
			currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			enable: enable,
			disable: disable,

			bindFramebuffer: bindFramebuffer,
			drawBuffers: drawBuffers,

			useProgram: useProgram,

			setBlending: setBlending,
			setMaterial: setMaterial,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			unbindTexture: unbindTexture,
			compressedTexImage2D: compressedTexImage2D,
			compressedTexImage3D: compressedTexImage3D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,

			updateUBOMapping: updateUBOMapping,
			uniformBlockBinding: uniformBlockBinding,

			texStorage2D: texStorage2D,
			texStorage3D: texStorage3D,
			texSubImage2D: texSubImage2D,
			texSubImage3D: texSubImage3D,
			compressedTexSubImage2D: compressedTexSubImage2D,
			compressedTexSubImage3D: compressedTexSubImage3D,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

		const isWebGL2 = capabilities.isWebGL2;
		const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
		const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );

		const _imageDimensions = new Vector2$1();
		const _videoTextures = new WeakMap();
		let _canvas;

		const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

		// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
		// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

		let useOffscreenCanvas = false;

		try {

			useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
				// eslint-disable-next-line compat/compat
				&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

		} catch ( err ) {

			// Ignore any errors

		}

		function createCanvas( width, height ) {

			// Use OffscreenCanvas when available. Specially needed in web workers

			return useOffscreenCanvas ?
				// eslint-disable-next-line compat/compat
				new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );

		}

		function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

			let scale = 1;

			const dimensions = getDimensions( image );

			// handle case if texture exceeds max size

			if ( dimensions.width > maxSize || dimensions.height > maxSize ) {

				scale = maxSize / Math.max( dimensions.width, dimensions.height );

			}

			// only perform resize if necessary

			if ( scale < 1 || needsPowerOfTwo === true ) {

				// only perform resize for certain image types

				if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
					( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
					( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ||
					( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) ) {

					const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;

					const width = floor( scale * dimensions.width );
					const height = floor( scale * dimensions.height );

					if ( _canvas === undefined ) _canvas = createCanvas( width, height );

					// cube textures can't reuse the same canvas

					const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

					canvas.width = width;
					canvas.height = height;

					const context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, width, height );

					console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + dimensions.width + 'x' + dimensions.height + ') to (' + width + 'x' + height + ').' );

					return canvas;

				} else {

					if ( 'data' in image ) {

						console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + dimensions.width + 'x' + dimensions.height + ').' );

					}

					return image;

				}

			}

			return image;

		}

		function isPowerOfTwo$1( image ) {

			const dimensions = getDimensions( image );

			return isPowerOfTwo( dimensions.width ) && isPowerOfTwo( dimensions.height );

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( isWebGL2 ) return false;

			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

		}

		function textureNeedsGenerateMipmaps( texture, supportsMips ) {

			return texture.generateMipmaps && supportsMips &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

		}

		function generateMipmap( target ) {

			_gl.generateMipmap( target );

		}

		function getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {

			if ( isWebGL2 === false ) return glFormat;

			if ( internalFormatName !== null ) {

				if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

				console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

			}

			let internalFormat = glFormat;

			if ( glFormat === _gl.RED ) {

				if ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;
				if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;
				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;

			}

			if ( glFormat === _gl.RED_INTEGER ) {

				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;
				if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;
				if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;
				if ( glType === _gl.BYTE ) internalFormat = _gl.R8I;
				if ( glType === _gl.SHORT ) internalFormat = _gl.R16I;
				if ( glType === _gl.INT ) internalFormat = _gl.R32I;

			}

			if ( glFormat === _gl.RG ) {

				if ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;
				if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;
				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;

			}

			if ( glFormat === _gl.RG_INTEGER ) {

				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8UI;
				if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.RG16UI;
				if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.RG32UI;
				if ( glType === _gl.BYTE ) internalFormat = _gl.RG8I;
				if ( glType === _gl.SHORT ) internalFormat = _gl.RG16I;
				if ( glType === _gl.INT ) internalFormat = _gl.RG32I;

			}

			if ( glFormat === _gl.RGBA ) {

				const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );

				if ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;
				if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;
				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
				if ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;
				if ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;

			}

			if ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||
				internalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||
				internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {

				extensions.get( 'EXT_color_buffer_float' );

			}

			return internalFormat;

		}

		function getMipLevels( texture, image, supportsMips ) {

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {

				return Math.log2( Math.max( image.width, image.height ) ) + 1;

			} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {

				// user-defined mipmaps

				return texture.mipmaps.length;

			} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {

				return image.mipmaps.length;

			} else {

				// texture without mipmaps (only base level)

				return 1;

			}

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			const texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			if ( texture.isVideoTexture ) {

				_videoTextures.delete( texture );

			}

		}

		function onRenderTargetDispose( event ) {

			const renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

		}

		//

		function deallocateTexture( texture ) {

			const textureProperties = properties.get( texture );

			if ( textureProperties.__webglInit === undefined ) return;

			// check if it's necessary to remove the WebGLTexture object

			const source = texture.source;
			const webglTextures = _sources.get( source );

			if ( webglTextures ) {

				const webglTexture = webglTextures[ textureProperties.__cacheKey ];
				webglTexture.usedTimes --;

				// the WebGLTexture object is not used anymore, remove it

				if ( webglTexture.usedTimes === 0 ) {

					deleteTexture( texture );

				}

				// remove the weak map entry if no WebGLTexture uses the source anymore

				if ( Object.keys( webglTextures ).length === 0 ) {

					_sources.delete( source );

				}

			}

			properties.remove( texture );

		}

		function deleteTexture( texture ) {

			const textureProperties = properties.get( texture );
			_gl.deleteTexture( textureProperties.__webglTexture );

			const source = texture.source;
			const webglTextures = _sources.get( source );
			delete webglTextures[ textureProperties.__cacheKey ];

			info.memory.textures --;

		}

		function deallocateRenderTarget( renderTarget ) {

			const renderTargetProperties = properties.get( renderTarget );

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget.isWebGLCubeRenderTarget ) {

				for ( let i = 0; i < 6; i ++ ) {

					if ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {

						for ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );

					} else {

						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );

					}

					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				if ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {

					for ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );

				} else {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );

				}

				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
				if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );

				if ( renderTargetProperties.__webglColorRenderbuffer ) {

					for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {

						if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );

					}

				}

				if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

			}

			const textures = renderTarget.textures;

			for ( let i = 0, il = textures.length; i < il; i ++ ) {

				const attachmentProperties = properties.get( textures[ i ] );

				if ( attachmentProperties.__webglTexture ) {

					_gl.deleteTexture( attachmentProperties.__webglTexture );

					info.memory.textures --;

				}

				properties.remove( textures[ i ] );

			}

			properties.remove( renderTarget );

		}

		//

		let textureUnits = 0;

		function resetTextureUnits() {

			textureUnits = 0;

		}

		function allocateTextureUnit() {

			const textureUnit = textureUnits;

			if ( textureUnit >= capabilities.maxTextures ) {

				console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

			}

			textureUnits += 1;

			return textureUnit;

		}

		function getTextureCacheKey( texture ) {

			const array = [];

			array.push( texture.wrapS );
			array.push( texture.wrapT );
			array.push( texture.wrapR || 0 );
			array.push( texture.magFilter );
			array.push( texture.minFilter );
			array.push( texture.anisotropy );
			array.push( texture.internalFormat );
			array.push( texture.format );
			array.push( texture.type );
			array.push( texture.generateMipmaps );
			array.push( texture.premultiplyAlpha );
			array.push( texture.flipY );
			array.push( texture.unpackAlignment );
			array.push( texture.colorSpace );

			return array.join();

		}

		//

		function setTexture2D( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.isVideoTexture ) updateVideoTexture( texture );

			if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {

				const image = texture.image;

				if ( image === null ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		function setTexture2DArray( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		function setTexture3D( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		function setTextureCube( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadCubeTexture( textureProperties, texture, slot );
				return;

			}

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		const wrappingToGL = {
			[ RepeatWrapping ]: _gl.REPEAT,
			[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,
			[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT
		};

		const filterToGL = {
			[ NearestFilter ]: _gl.NEAREST,
			[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,
			[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,

			[ LinearFilter ]: _gl.LINEAR,
			[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,
			[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR
		};

		const compareToGL = {
			[ NeverCompare ]: _gl.NEVER,
			[ AlwaysCompare ]: _gl.ALWAYS,
			[ LessCompare ]: _gl.LESS,
			[ LessEqualCompare ]: _gl.LEQUAL,
			[ EqualCompare ]: _gl.EQUAL,
			[ GreaterEqualCompare ]: _gl.GEQUAL,
			[ GreaterCompare ]: _gl.GREATER,
			[ NotEqualCompare ]: _gl.NOTEQUAL
		};

		function setTextureParameters( textureType, texture, supportsMips ) {

			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false &&
				( texture.magFilter === LinearFilter || texture.magFilter === LinearMipmapNearestFilter || texture.magFilter === NearestMipmapLinearFilter || texture.magFilter === LinearMipmapLinearFilter ||
				texture.minFilter === LinearFilter || texture.minFilter === LinearMipmapNearestFilter || texture.minFilter === NearestMipmapLinearFilter || texture.minFilter === LinearMipmapLinearFilter ) ) {

				console.warn( 'THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.' );

			}

			if ( supportsMips ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

				if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );

				}

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

				}

			}

			if ( texture.compareFunction ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );
				_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );

			}

			if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

				if ( texture.magFilter === NearestFilter ) return;
				if ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;
				if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
				if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					const extension = extensions.get( 'EXT_texture_filter_anisotropic' );
					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function initTexture( textureProperties, texture ) {

			let forceUpload = false;

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

			}

			// create Source <-> WebGLTextures mapping if necessary

			const source = texture.source;
			let webglTextures = _sources.get( source );

			if ( webglTextures === undefined ) {

				webglTextures = {};
				_sources.set( source, webglTextures );

			}

			// check if there is already a WebGLTexture object for the given texture parameters

			const textureCacheKey = getTextureCacheKey( texture );

			if ( textureCacheKey !== textureProperties.__cacheKey ) {

				// if not, create a new instance of WebGLTexture

				if ( webglTextures[ textureCacheKey ] === undefined ) {

					// create new entry

					webglTextures[ textureCacheKey ] = {
						texture: _gl.createTexture(),
						usedTimes: 0
					};

					info.memory.textures ++;

					// when a new instance of WebGLTexture was created, a texture upload is required
					// even if the image contents are identical

					forceUpload = true;

				}

				webglTextures[ textureCacheKey ].usedTimes ++;

				// every time the texture cache key changes, it's necessary to check if an instance of
				// WebGLTexture can be deleted in order to avoid a memory leak.

				const webglTexture = webglTextures[ textureProperties.__cacheKey ];

				if ( webglTexture !== undefined ) {

					webglTextures[ textureProperties.__cacheKey ].usedTimes --;

					if ( webglTexture.usedTimes === 0 ) {

						deleteTexture( texture );

					}

				}

				// store references to cache key and WebGLTexture object

				textureProperties.__cacheKey = textureCacheKey;
				textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;

			}

			return forceUpload;

		}

		function uploadTexture( textureProperties, texture, slot ) {

			let textureType = _gl.TEXTURE_2D;

			if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;
			if ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;

			const forceUpload = initTexture( textureProperties, texture );
			const source = texture.source;

			state.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

			const sourceProperties = properties.get( source );

			if ( source.version !== sourceProperties.__version || forceUpload === true ) {

				state.activeTexture( _gl.TEXTURE0 + slot );

				const workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );
				const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );
				const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
				_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );

				const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
				let image = resizeImage( texture.image, needsPowerOfTwo, false, capabilities.maxTextureSize );
				image = verifyColorSpace( texture, image );

				const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
					glFormat = utils.convert( texture.format, texture.colorSpace );

				let glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );

				setTextureParameters( textureType, texture, supportsMips );

				let mipmap;
				const mipmaps = texture.mipmaps;

				const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true && glInternalFormat !== RGB_ETC1_Format );
				const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
				const dataReady = source.dataReady;
				const levels = getMipLevels( texture, image, supportsMips );

				if ( texture.isDepthTexture ) {

					// populate depth texture with dummy data

					glInternalFormat = _gl.DEPTH_COMPONENT;

					if ( isWebGL2 ) {

						if ( texture.type === FloatType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT32F;

						} else if ( texture.type === UnsignedIntType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT24;

						} else if ( texture.type === UnsignedInt248Type ) {

							glInternalFormat = _gl.DEPTH24_STENCIL8;

						} else {

							glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D

						}

					} else {

						if ( texture.type === FloatType ) {

							console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

						}

					}

					// validation checks for WebGL 1

					if ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

							console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

							texture.type = UnsignedIntType;
							glType = utils.convert( texture.type );

						}

					}

					if ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

						// Depth stencil textures need the DEPTH_STENCIL internal format
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						glInternalFormat = _gl.DEPTH_STENCIL;

						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedInt248Type ) {

							console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

							texture.type = UnsignedInt248Type;
							glType = utils.convert( texture.type );

						}

					}

					//

					if ( allocateMemory ) {

						if ( useTexStorage ) {

							state.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );

						} else {

							state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

						}

					}

				} else if ( texture.isDataTexture ) {

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && supportsMips ) {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( useTexStorage ) {

								if ( dataReady ) {

									state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

						texture.generateMipmaps = false;

					} else {

						if ( useTexStorage ) {

							if ( allocateMemory ) {

								state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

							}

							if ( dataReady ) {

								state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );

							}

						} else {

							state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );

						}

					}

				} else if ( texture.isCompressedTexture ) {

					if ( texture.isCompressedArrayTexture ) {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( texture.format !== RGBAFormat ) {

								if ( glFormat !== null ) {

									if ( useTexStorage ) {

										if ( dataReady ) {

											state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );

										}

									} else {

										state.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );

									}

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

								}

							} else {

								if ( useTexStorage ) {

									if ( dataReady ) {

										state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );

									}

								} else {

									state.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					} else {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( texture.format !== RGBAFormat ) {

								if ( glFormat !== null ) {

									if ( useTexStorage ) {

										if ( dataReady ) {

											state.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

										}

									} else {

										state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									}

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

								}

							} else {

								if ( useTexStorage ) {

									if ( dataReady ) {

										state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

				} else if ( texture.isDataArrayTexture ) {

					if ( useTexStorage ) {

						if ( allocateMemory ) {

							state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );

						}

						if ( dataReady ) {

							state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

						}

					} else {

						state.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

					}

				} else if ( texture.isData3DTexture ) {

					if ( useTexStorage ) {

						if ( allocateMemory ) {

							state.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );

						}

						if ( dataReady ) {

							state.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

						}

					} else {

						state.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

					}

				} else if ( texture.isFramebufferTexture ) {

					if ( allocateMemory ) {

						if ( useTexStorage ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

						} else {

							let width = image.width, height = image.height;

							for ( let i = 0; i < levels; i ++ ) {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );

								width >>= 1;
								height >>= 1;

							}

						}

					}

				} else {

					// regular Texture (image, video, canvas)

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && supportsMips ) {

						if ( useTexStorage && allocateMemory ) {

							const dimensions = getDimensions( mipmaps[ 0 ] );

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( useTexStorage ) {

								if ( dataReady ) {

									state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

							}

						}

						texture.generateMipmaps = false;

					} else {

						if ( useTexStorage ) {

							if ( allocateMemory ) {

								const dimensions = getDimensions( image );

								state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height );

							}

							if ( dataReady ) {

								state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );

							}

						} else {

							state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					generateMipmap( textureType );

				}

				sourceProperties.__version = source.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			}

			textureProperties.__version = texture.version;

		}

		function uploadCubeTexture( textureProperties, texture, slot ) {

			if ( texture.image.length !== 6 ) return;

			const forceUpload = initTexture( textureProperties, texture );
			const source = texture.source;

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

			const sourceProperties = properties.get( source );

			if ( source.version !== sourceProperties.__version || forceUpload === true ) {

				state.activeTexture( _gl.TEXTURE0 + slot );

				const workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );
				const texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );
				const unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
				_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );

				const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
				const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				const cubeImage = [];

				for ( let i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, capabilities.maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

					cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );

				}

				const image = cubeImage[ 0 ],
					supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
					glFormat = utils.convert( texture.format, texture.colorSpace ),
					glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );

				const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
				const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
				const dataReady = source.dataReady;
				let levels = getMipLevels( texture, image, supportsMips );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

				let mipmaps;

				if ( isCompressed ) {

					if ( useTexStorage && allocateMemory ) {

						state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );

					}

					for ( let i = 0; i < 6; i ++ ) {

						mipmaps = cubeImage[ i ].mipmaps;

						for ( let j = 0; j < mipmaps.length; j ++ ) {

							const mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat ) {

								if ( glFormat !== null ) {

									if ( useTexStorage ) {

										if ( dataReady ) {

											state.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

										}

									} else {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									}

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								if ( useTexStorage ) {

									if ( dataReady ) {

										state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

				} else {

					mipmaps = texture.mipmaps;

					if ( useTexStorage && allocateMemory ) {

						// TODO: Uniformly handle mipmap definitions
						// Normal textures and compressed cube textures define base level + mips with their mipmap array
						// Uncompressed cube textures use their mipmap array only for mips (no base level)

						if ( mipmaps.length > 0 ) levels ++;

						const dimensions = getDimensions( cubeImage[ 0 ] );

						state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height );

					}

					for ( let i = 0; i < 6; i ++ ) {

						if ( isDataTexture ) {

							if ( useTexStorage ) {

								if ( dataReady ) {

									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							}

							for ( let j = 0; j < mipmaps.length; j ++ ) {

								const mipmap = mipmaps[ j ];
								const mipmapImage = mipmap.image[ i ].image;

								if ( useTexStorage ) {

									if ( dataReady ) {

										state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

								}

							}

						} else {

							if ( useTexStorage ) {

								if ( dataReady ) {

									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

							}

							for ( let j = 0; j < mipmaps.length; j ++ ) {

								const mipmap = mipmaps[ j ];

								if ( useTexStorage ) {

									if ( dataReady ) {

										state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );

									}

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

								}

							}

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					// We assume images for cube map have the same size.
					generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				sourceProperties.__version = source.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			}

			textureProperties.__version = texture.version;

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {

			const glFormat = utils.convert( texture.format, texture.colorSpace );
			const glType = utils.convert( texture.type );
			const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
			const renderTargetProperties = properties.get( renderTarget );

			if ( ! renderTargetProperties.__hasExternalTextures ) {

				const width = Math.max( 1, renderTarget.width >> level );
				const height = Math.max( 1, renderTarget.height >> level );

				if ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {

					state.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );

				} else {

					state.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );

				}

			}

			state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( useMultisampledRTT( renderTarget ) ) {

				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );

			} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, level );

			}

			state.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}


		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				let glInternalFormat = ( isWebGL2 === true ) ? _gl.DEPTH_COMPONENT24 : _gl.DEPTH_COMPONENT16;

				if ( isMultisample || useMultisampledRTT( renderTarget ) ) {

					const depthTexture = renderTarget.depthTexture;

					if ( depthTexture && depthTexture.isDepthTexture ) {

						if ( depthTexture.type === FloatType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT32F;

						} else if ( depthTexture.type === UnsignedIntType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT24;

						}

					}

					const samples = getRenderTargetSamples( renderTarget );

					if ( useMultisampledRTT( renderTarget ) ) {

						multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					} else {

						_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					}

				} else {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

				}

				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				const samples = getRenderTargetSamples( renderTarget );

				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

				} else if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );

				}


				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				const textures = renderTarget.textures;

				for ( let i = 0; i < textures.length; i ++ ) {

					const texture = textures[ i ];

					const glFormat = utils.convert( texture.format, texture.colorSpace );
					const glType = utils.convert( texture.type );
					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
					const samples = getRenderTargetSamples( renderTarget );

					if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

						_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					} else if ( useMultisampledRTT( renderTarget ) ) {

						multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					} else {

						_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

					}

				}

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
			if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

			state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

			}

			// upload an empty depth texture with framebuffer size
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {

				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;

			}

			setTexture2D( renderTarget.depthTexture, 0 );

			const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
			const samples = getRenderTargetSamples( renderTarget );

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

				} else {

					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

				}

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

				} else {

					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

				}

			} else {

				throw new Error( 'Unknown depthTexture format' );

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			const renderTargetProperties = properties.get( renderTarget );
			const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

			if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {

				if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( let i = 0; i < 6; i ++ ) {

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

					}

				} else {

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

				}

			}

			state.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// rebind framebuffer with external textures
		function rebindTextures( renderTarget, colorTexture, depthTexture ) {

			const renderTargetProperties = properties.get( renderTarget );

			if ( colorTexture !== undefined ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );

			}

			if ( depthTexture !== undefined ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			const texture = renderTarget.texture;

			const renderTargetProperties = properties.get( renderTarget );
			const textureProperties = properties.get( texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			const textures = renderTarget.textures;

			const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
			const isMultipleRenderTargets = ( textures.length > 1 );
			const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

			if ( ! isMultipleRenderTargets ) {

				if ( textureProperties.__webglTexture === undefined ) {

					textureProperties.__webglTexture = _gl.createTexture();

				}

				textureProperties.__version = texture.version;
				info.memory.textures ++;

			}

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( let i = 0; i < 6; i ++ ) {

					if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

						renderTargetProperties.__webglFramebuffer[ i ] = [];

						for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

							renderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();

						}

					} else {

						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

					}

				}

			} else {

				if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

					renderTargetProperties.__webglFramebuffer = [];

					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

						renderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();

					}

				} else {

					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				}

				if ( isMultipleRenderTargets ) {

					if ( capabilities.drawBuffers ) {

						for ( let i = 0, il = textures.length; i < il; i ++ ) {

							const attachmentProperties = properties.get( textures[ i ] );

							if ( attachmentProperties.__webglTexture === undefined ) {

								attachmentProperties.__webglTexture = _gl.createTexture();

								info.memory.textures ++;

							}

						}

					} else {

						console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );

					}

				}

				if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
					renderTargetProperties.__webglColorRenderbuffer = [];

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

					for ( let i = 0; i < textures.length; i ++ ) {

						const texture = textures[ i ];
						renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();

						_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

						const glFormat = utils.convert( texture.format, texture.colorSpace );
						const glType = utils.convert( texture.type );
						const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );
						const samples = getRenderTargetSamples( renderTarget );
						_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

					}

					_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

					if ( renderTarget.depthBuffer ) {

						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

					}

					state.bindFramebuffer( _gl.FRAMEBUFFER, null );

				}

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

				for ( let i = 0; i < 6; i ++ ) {

					if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

						for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

							setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );

						}

					} else {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				state.unbindTexture();

			} else if ( isMultipleRenderTargets ) {

				for ( let i = 0, il = textures.length; i < il; i ++ ) {

					const attachment = textures[ i ];
					const attachmentProperties = properties.get( attachment );

					state.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );

					if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {

						generateMipmap( _gl.TEXTURE_2D );

					}

				}

				state.unbindTexture();

			} else {

				let glTextureType = _gl.TEXTURE_2D;

				if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {

					if ( isWebGL2 ) {

						glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;

					} else {

						console.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );

					}

				}

				state.bindTexture( glTextureType, textureProperties.__webglTexture );
				setTextureParameters( glTextureType, texture, supportsMips );

				if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );

					}

				} else {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					generateMipmap( glTextureType );

				}

				state.unbindTexture();

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

			const textures = renderTarget.textures;

			for ( let i = 0, il = textures.length; i < il; i ++ ) {

				const texture = textures[ i ];

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
					const webglTexture = properties.get( texture ).__webglTexture;

					state.bindTexture( target, webglTexture );
					generateMipmap( target );
					state.unbindTexture();

				}

			}

		}

		function updateMultisampleRenderTarget( renderTarget ) {

			if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

				const textures = renderTarget.textures;
				const width = renderTarget.width;
				const height = renderTarget.height;
				let mask = _gl.COLOR_BUFFER_BIT;
				const invalidationArray = [];
				const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
				const renderTargetProperties = properties.get( renderTarget );
				const isMultipleRenderTargets = ( textures.length > 1 );

				// If MRT we need to remove FBO attachments
				if ( isMultipleRenderTargets ) {

					for ( let i = 0; i < textures.length; i ++ ) {

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );

					}

				}

				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

				for ( let i = 0; i < textures.length; i ++ ) {

					invalidationArray.push( _gl.COLOR_ATTACHMENT0 + i );

					if ( renderTarget.depthBuffer ) {

						invalidationArray.push( depthStyle );

					}

					const ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;

					if ( ignoreDepthValues === false ) {

						if ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;
						if ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;

					}

					if ( isMultipleRenderTargets ) {

						_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

					}

					if ( ignoreDepthValues === true ) {

						_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );
						_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );

					}

					if ( isMultipleRenderTargets ) {

						const webglTexture = properties.get( textures[ i ] ).__webglTexture;
						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );

					}

					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );

					if ( supportsInvalidateFramebuffer ) {

						_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );

					}


				}

				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

				// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
				if ( isMultipleRenderTargets ) {

					for ( let i = 0; i < textures.length; i ++ ) {

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

						const webglTexture = properties.get( textures[ i ] ).__webglTexture;

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );

					}

				}

				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

			}

		}

		function getRenderTargetSamples( renderTarget ) {

			return Math.min( capabilities.maxSamples, renderTarget.samples );

		}

		function useMultisampledRTT( renderTarget ) {

			const renderTargetProperties = properties.get( renderTarget );

			return isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;

		}

		function updateVideoTexture( texture ) {

			const frame = info.render.frame;

			// Check the last frame we updated the VideoTexture

			if ( _videoTextures.get( texture ) !== frame ) {

				_videoTextures.set( texture, frame );
				texture.update();

			}

		}

		function verifyColorSpace( texture, image ) {

			const colorSpace = texture.colorSpace;
			const format = texture.format;
			const type = texture.type;

			if ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;

			if ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {

				// sRGB

				if ( ColorManagement.getTransfer( colorSpace ) === SRGBTransfer ) {

					if ( isWebGL2 === false ) {

						// in WebGL 1, try to use EXT_sRGB extension and unsized formats

						if ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {

							texture.format = _SRGBAFormat;

							// it's not possible to generate mips in WebGL 1 with this extension

							texture.minFilter = LinearFilter;
							texture.generateMipmaps = false;

						} else {

							// slow fallback (CPU decode)

							image = ImageUtils.sRGBToLinear( image );

						}

					} else {

						// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

						if ( format !== RGBAFormat || type !== UnsignedByteType ) {

							console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );

						}

					}

				} else {

					console.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );

				}

			}

			return image;

		}

		function getDimensions( image ) {

			if ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) {

				// if intrinsic data are not available, fallback to width/height

				_imageDimensions.width = image.naturalWidth || image.width;
				_imageDimensions.height = image.naturalHeight || image.height;

			} else if ( typeof VideoFrame !== 'undefined' && image instanceof VideoFrame ) {

				_imageDimensions.width = image.displayWidth;
				_imageDimensions.height = image.displayHeight;

			} else {

				_imageDimensions.width = image.width;
				_imageDimensions.height = image.height;

			}

			return _imageDimensions;

		}

		//

		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;

		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.rebindTextures = rebindTextures;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
		this.setupDepthRenderbuffer = setupDepthRenderbuffer;
		this.setupFrameBufferTexture = setupFrameBufferTexture;
		this.useMultisampledRTT = useMultisampledRTT;

	}

	function WebGLUtils( gl, extensions, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		function convert( p, colorSpace = NoColorSpace ) {

			let extension;

			const transfer = ColorManagement.getTransfer( colorSpace );

			if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;

			if ( p === ByteType ) return gl.BYTE;
			if ( p === ShortType ) return gl.SHORT;
			if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
			if ( p === IntType ) return gl.INT;
			if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
			if ( p === FloatType ) return gl.FLOAT;

			if ( p === HalfFloatType ) {

				if ( isWebGL2 ) return gl.HALF_FLOAT;

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) {

					return extension.HALF_FLOAT_OES;

				} else {

					return null;

				}

			}

			if ( p === AlphaFormat ) return gl.ALPHA;
			if ( p === RGBAFormat ) return gl.RGBA;
			if ( p === LuminanceFormat ) return gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

			// WebGL 1 sRGB fallback

			if ( p === _SRGBAFormat ) {

				extension = extensions.get( 'EXT_sRGB' );

				if ( extension !== null ) {

					return extension.SRGB_ALPHA_EXT;

				} else {

					return null;

				}

			}

			// WebGL2 formats.

			if ( p === RedFormat ) return gl.RED;
			if ( p === RedIntegerFormat ) return gl.RED_INTEGER;
			if ( p === RGFormat ) return gl.RG;
			if ( p === RGIntegerFormat ) return gl.RG_INTEGER;
			if ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;

			// S3TC

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				if ( transfer === SRGBTransfer ) {

					extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

					if ( extension !== null ) {

						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

					} else {

						return null;

					}

				} else {

					extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

					if ( extension !== null ) {

						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

					} else {

						return null;

					}

				}

			}

			// PVRTC

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				} else {

					return null;

				}

			}

			// ETC1

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) {

					return extension.COMPRESSED_RGB_ETC1_WEBGL;

				} else {

					return null;

				}

			}

			// ETC2

			if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc' );

				if ( extension !== null ) {

					if ( p === RGB_ETC2_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
					if ( p === RGBA_ETC2_EAC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

				} else {

					return null;

				}

			}

			// ASTC

			if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
				p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
				p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
				p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
				p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_astc' );

				if ( extension !== null ) {

					if ( p === RGBA_ASTC_4x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
					if ( p === RGBA_ASTC_5x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
					if ( p === RGBA_ASTC_5x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
					if ( p === RGBA_ASTC_6x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
					if ( p === RGBA_ASTC_6x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
					if ( p === RGBA_ASTC_8x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
					if ( p === RGBA_ASTC_8x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
					if ( p === RGBA_ASTC_8x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
					if ( p === RGBA_ASTC_10x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
					if ( p === RGBA_ASTC_10x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
					if ( p === RGBA_ASTC_10x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
					if ( p === RGBA_ASTC_10x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
					if ( p === RGBA_ASTC_12x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
					if ( p === RGBA_ASTC_12x12_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

				} else {

					return null;

				}

			}

			// BPTC

			if ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {

				extension = extensions.get( 'EXT_texture_compression_bptc' );

				if ( extension !== null ) {

					if ( p === RGBA_BPTC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
					if ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
					if ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;

				} else {

					return null;

				}

			}

			// RGTC

			if ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {

				extension = extensions.get( 'EXT_texture_compression_rgtc' );

				if ( extension !== null ) {

					if ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;
					if ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
					if ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
					if ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;

				} else {

					return null;

				}

			}

			//

			if ( p === UnsignedInt248Type ) {

				if ( isWebGL2 ) return gl.UNSIGNED_INT_24_8;

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) {

					return extension.UNSIGNED_INT_24_8_WEBGL;

				} else {

					return null;

				}

			}

			// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

			return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

		}

		return { convert: convert };

	}

	class ArrayCamera extends PerspectiveCamera {

		constructor( array = [] ) {

			super();

			this.isArrayCamera = true;

			this.cameras = array;

		}

	}

	class Group extends Object3D {

		constructor() {

			super();

			this.isGroup = true;

			this.type = 'Group';

		}

	}

	const _moveEvent = { type: 'move' };

	class WebXRController {

		constructor() {

			this._targetRay = null;
			this._grip = null;
			this._hand = null;

		}

		getHandSpace() {

			if ( this._hand === null ) {

				this._hand = new Group();
				this._hand.matrixAutoUpdate = false;
				this._hand.visible = false;

				this._hand.joints = {};
				this._hand.inputState = { pinching: false };

			}

			return this._hand;

		}

		getTargetRaySpace() {

			if ( this._targetRay === null ) {

				this._targetRay = new Group();
				this._targetRay.matrixAutoUpdate = false;
				this._targetRay.visible = false;
				this._targetRay.hasLinearVelocity = false;
				this._targetRay.linearVelocity = new Vector3();
				this._targetRay.hasAngularVelocity = false;
				this._targetRay.angularVelocity = new Vector3();

			}

			return this._targetRay;

		}

		getGripSpace() {

			if ( this._grip === null ) {

				this._grip = new Group();
				this._grip.matrixAutoUpdate = false;
				this._grip.visible = false;
				this._grip.hasLinearVelocity = false;
				this._grip.linearVelocity = new Vector3();
				this._grip.hasAngularVelocity = false;
				this._grip.angularVelocity = new Vector3();

			}

			return this._grip;

		}

		dispatchEvent( event ) {

			if ( this._targetRay !== null ) {

				this._targetRay.dispatchEvent( event );

			}

			if ( this._grip !== null ) {

				this._grip.dispatchEvent( event );

			}

			if ( this._hand !== null ) {

				this._hand.dispatchEvent( event );

			}

			return this;

		}

		connect( inputSource ) {

			if ( inputSource && inputSource.hand ) {

				const hand = this._hand;

				if ( hand ) {

					for ( const inputjoint of inputSource.hand.values() ) {

						// Initialize hand with joints when connected
						this._getHandJoint( hand, inputjoint );

					}

				}

			}

			this.dispatchEvent( { type: 'connected', data: inputSource } );

			return this;

		}

		disconnect( inputSource ) {

			this.dispatchEvent( { type: 'disconnected', data: inputSource } );

			if ( this._targetRay !== null ) {

				this._targetRay.visible = false;

			}

			if ( this._grip !== null ) {

				this._grip.visible = false;

			}

			if ( this._hand !== null ) {

				this._hand.visible = false;

			}

			return this;

		}

		update( inputSource, frame, referenceSpace ) {

			let inputPose = null;
			let gripPose = null;
			let handPose = null;

			const targetRay = this._targetRay;
			const grip = this._grip;
			const hand = this._hand;

			if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

				if ( hand && inputSource.hand ) {

					handPose = true;

					for ( const inputjoint of inputSource.hand.values() ) {

						// Update the joints groups with the XRJoint poses
						const jointPose = frame.getJointPose( inputjoint, referenceSpace );

						// The transform of this joint will be updated with the joint pose on each frame
						const joint = this._getHandJoint( hand, inputjoint );

						if ( jointPose !== null ) {

							joint.matrix.fromArray( jointPose.transform.matrix );
							joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
							joint.matrixWorldNeedsUpdate = true;
							joint.jointRadius = jointPose.radius;

						}

						joint.visible = jointPose !== null;

					}

					// Custom events

					// Check pinchz
					const indexTip = hand.joints[ 'index-finger-tip' ];
					const thumbTip = hand.joints[ 'thumb-tip' ];
					const distance = indexTip.position.distanceTo( thumbTip.position );

					const distanceToPinch = 0.02;
					const threshold = 0.005;

					if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

						hand.inputState.pinching = false;
						this.dispatchEvent( {
							type: 'pinchend',
							handedness: inputSource.handedness,
							target: this
						} );

					} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

						hand.inputState.pinching = true;
						this.dispatchEvent( {
							type: 'pinchstart',
							handedness: inputSource.handedness,
							target: this
						} );

					}

				} else {

					if ( grip !== null && inputSource.gripSpace ) {

						gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

						if ( gripPose !== null ) {

							grip.matrix.fromArray( gripPose.transform.matrix );
							grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
							grip.matrixWorldNeedsUpdate = true;

							if ( gripPose.linearVelocity ) {

								grip.hasLinearVelocity = true;
								grip.linearVelocity.copy( gripPose.linearVelocity );

							} else {

								grip.hasLinearVelocity = false;

							}

							if ( gripPose.angularVelocity ) {

								grip.hasAngularVelocity = true;
								grip.angularVelocity.copy( gripPose.angularVelocity );

							} else {

								grip.hasAngularVelocity = false;

							}

						}

					}

				}

				if ( targetRay !== null ) {

					inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

					// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
					if ( inputPose === null && gripPose !== null ) {

						inputPose = gripPose;

					}

					if ( inputPose !== null ) {

						targetRay.matrix.fromArray( inputPose.transform.matrix );
						targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
						targetRay.matrixWorldNeedsUpdate = true;

						if ( inputPose.linearVelocity ) {

							targetRay.hasLinearVelocity = true;
							targetRay.linearVelocity.copy( inputPose.linearVelocity );

						} else {

							targetRay.hasLinearVelocity = false;

						}

						if ( inputPose.angularVelocity ) {

							targetRay.hasAngularVelocity = true;
							targetRay.angularVelocity.copy( inputPose.angularVelocity );

						} else {

							targetRay.hasAngularVelocity = false;

						}

						this.dispatchEvent( _moveEvent );

					}

				}


			}

			if ( targetRay !== null ) {

				targetRay.visible = ( inputPose !== null );

			}

			if ( grip !== null ) {

				grip.visible = ( gripPose !== null );

			}

			if ( hand !== null ) {

				hand.visible = ( handPose !== null );

			}

			return this;

		}

		// private method

		_getHandJoint( hand, inputjoint ) {

			if ( hand.joints[ inputjoint.jointName ] === undefined ) {

				const joint = new Group();
				joint.matrixAutoUpdate = false;
				joint.visible = false;
				hand.joints[ inputjoint.jointName ] = joint;

				hand.add( joint );

			}

			return hand.joints[ inputjoint.jointName ];

		}

	}

	const _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;

	const _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;

	class WebXRDepthSensing {

		constructor() {

			this.texture = null;
			this.mesh = null;

			this.depthNear = 0;
			this.depthFar = 0;

		}

		init( renderer, depthData, renderState ) {

			if ( this.texture === null ) {

				const texture = new Texture$1();

				const texProps = renderer.properties.get( texture );
				texProps.__webglTexture = depthData.texture;

				if ( ( depthData.depthNear != renderState.depthNear ) || ( depthData.depthFar != renderState.depthFar ) ) {

					this.depthNear = depthData.depthNear;
					this.depthFar = depthData.depthFar;

				}

				this.texture = texture;

			}

		}

		render( renderer, cameraXR ) {

			if ( this.texture !== null ) {

				if ( this.mesh === null ) {

					const viewport = cameraXR.cameras[ 0 ].viewport;
					const material = new ShaderMaterial( {
						extensions: { fragDepth: true },
						vertexShader: _occlusion_vertex,
						fragmentShader: _occlusion_fragment,
						uniforms: {
							depthColor: { value: this.texture },
							depthWidth: { value: viewport.z },
							depthHeight: { value: viewport.w }
						}
					} );

					this.mesh = new Mesh( new PlaneGeometry( 20, 20 ), material );

				}

				renderer.render( this.mesh, cameraXR );

			}

		}

		reset() {

			this.texture = null;
			this.mesh = null;

		}

	}

	class WebXRManager extends EventDispatcher {

		constructor( renderer, gl ) {

			super();

			const scope = this;

			let session = null;

			let framebufferScaleFactor = 1.0;

			let referenceSpace = null;
			let referenceSpaceType = 'local-floor';
			// Set default foveation to maximum.
			let foveation = 1.0;
			let customReferenceSpace = null;

			let pose = null;
			let glBinding = null;
			let glProjLayer = null;
			let glBaseLayer = null;
			let xrFrame = null;

			const depthSensing = new WebXRDepthSensing();
			const attributes = gl.getContextAttributes();

			let initialRenderTarget = null;
			let newRenderTarget = null;

			const controllers = [];
			const controllerInputSources = [];

			const currentSize = new Vector2$1();
			let currentPixelRatio = null;

			//

			const cameraL = new PerspectiveCamera();
			cameraL.layers.enable( 1 );
			cameraL.viewport = new Vector4();

			const cameraR = new PerspectiveCamera();
			cameraR.layers.enable( 2 );
			cameraR.viewport = new Vector4();

			const cameras = [ cameraL, cameraR ];

			const cameraXR = new ArrayCamera();
			cameraXR.layers.enable( 1 );
			cameraXR.layers.enable( 2 );

			let _currentDepthNear = null;
			let _currentDepthFar = null;

			//

			this.cameraAutoUpdate = true;
			this.enabled = false;

			this.isPresenting = false;

			this.getController = function ( index ) {

				let controller = controllers[ index ];

				if ( controller === undefined ) {

					controller = new WebXRController();
					controllers[ index ] = controller;

				}

				return controller.getTargetRaySpace();

			};

			this.getControllerGrip = function ( index ) {

				let controller = controllers[ index ];

				if ( controller === undefined ) {

					controller = new WebXRController();
					controllers[ index ] = controller;

				}

				return controller.getGripSpace();

			};

			this.getHand = function ( index ) {

				let controller = controllers[ index ];

				if ( controller === undefined ) {

					controller = new WebXRController();
					controllers[ index ] = controller;

				}

				return controller.getHandSpace();

			};

			//

			function onSessionEvent( event ) {

				const controllerIndex = controllerInputSources.indexOf( event.inputSource );

				if ( controllerIndex === - 1 ) {

					return;

				}

				const controller = controllers[ controllerIndex ];

				if ( controller !== undefined ) {

					controller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );
					controller.dispatchEvent( { type: event.type, data: event.inputSource } );

				}

			}

			function onSessionEnd() {

				session.removeEventListener( 'select', onSessionEvent );
				session.removeEventListener( 'selectstart', onSessionEvent );
				session.removeEventListener( 'selectend', onSessionEvent );
				session.removeEventListener( 'squeeze', onSessionEvent );
				session.removeEventListener( 'squeezestart', onSessionEvent );
				session.removeEventListener( 'squeezeend', onSessionEvent );
				session.removeEventListener( 'end', onSessionEnd );
				session.removeEventListener( 'inputsourceschange', onInputSourcesChange );

				for ( let i = 0; i < controllers.length; i ++ ) {

					const inputSource = controllerInputSources[ i ];

					if ( inputSource === null ) continue;

					controllerInputSources[ i ] = null;

					controllers[ i ].disconnect( inputSource );

				}

				_currentDepthNear = null;
				_currentDepthFar = null;

				depthSensing.reset();

				// restore framebuffer/rendering state

				renderer.setRenderTarget( initialRenderTarget );

				glBaseLayer = null;
				glProjLayer = null;
				glBinding = null;
				session = null;
				newRenderTarget = null;

				//

				animation.stop();

				scope.isPresenting = false;

				renderer.setPixelRatio( currentPixelRatio );
				renderer.setSize( currentSize.width, currentSize.height, false );

				scope.dispatchEvent( { type: 'sessionend' } );

			}

			this.setFramebufferScaleFactor = function ( value ) {

				framebufferScaleFactor = value;

				if ( scope.isPresenting === true ) {

					console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

				}

			};

			this.setReferenceSpaceType = function ( value ) {

				referenceSpaceType = value;

				if ( scope.isPresenting === true ) {

					console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

				}

			};

			this.getReferenceSpace = function () {

				return customReferenceSpace || referenceSpace;

			};

			this.setReferenceSpace = function ( space ) {

				customReferenceSpace = space;

			};

			this.getBaseLayer = function () {

				return glProjLayer !== null ? glProjLayer : glBaseLayer;

			};

			this.getBinding = function () {

				return glBinding;

			};

			this.getFrame = function () {

				return xrFrame;

			};

			this.getSession = function () {

				return session;

			};

			this.setSession = async function ( value ) {

				session = value;

				if ( session !== null ) {

					initialRenderTarget = renderer.getRenderTarget();

					session.addEventListener( 'select', onSessionEvent );
					session.addEventListener( 'selectstart', onSessionEvent );
					session.addEventListener( 'selectend', onSessionEvent );
					session.addEventListener( 'squeeze', onSessionEvent );
					session.addEventListener( 'squeezestart', onSessionEvent );
					session.addEventListener( 'squeezeend', onSessionEvent );
					session.addEventListener( 'end', onSessionEnd );
					session.addEventListener( 'inputsourceschange', onInputSourcesChange );

					if ( attributes.xrCompatible !== true ) {

						await gl.makeXRCompatible();

					}

					currentPixelRatio = renderer.getPixelRatio();
					renderer.getSize( currentSize );

					if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {

						const layerInit = {
							antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,
							alpha: true,
							depth: attributes.depth,
							stencil: attributes.stencil,
							framebufferScaleFactor: framebufferScaleFactor
						};

						glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

						session.updateRenderState( { baseLayer: glBaseLayer } );

						renderer.setPixelRatio( 1 );
						renderer.setSize( glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false );

						newRenderTarget = new WebGLRenderTarget(
							glBaseLayer.framebufferWidth,
							glBaseLayer.framebufferHeight,
							{
								format: RGBAFormat,
								type: UnsignedByteType,
								colorSpace: renderer.outputColorSpace,
								stencilBuffer: attributes.stencil
							}
						);

					} else {

						let depthFormat = null;
						let depthType = null;
						let glDepthFormat = null;

						if ( attributes.depth ) {

							glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
							depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
							depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;

						}

						const projectionlayerInit = {
							colorFormat: gl.RGBA8,
							depthFormat: glDepthFormat,
							scaleFactor: framebufferScaleFactor
						};

						glBinding = new XRWebGLBinding( session, gl );

						glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

						session.updateRenderState( { layers: [ glProjLayer ] } );

						renderer.setPixelRatio( 1 );
						renderer.setSize( glProjLayer.textureWidth, glProjLayer.textureHeight, false );

						newRenderTarget = new WebGLRenderTarget(
							glProjLayer.textureWidth,
							glProjLayer.textureHeight,
							{
								format: RGBAFormat,
								type: UnsignedByteType,
								depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
								stencilBuffer: attributes.stencil,
								colorSpace: renderer.outputColorSpace,
								samples: attributes.antialias ? 4 : 0
							} );

						const renderTargetProperties = renderer.properties.get( newRenderTarget );
						renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;

					}

					newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

					this.setFoveation( foveation );

					customReferenceSpace = null;
					referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

					animation.setContext( session );
					animation.start();

					scope.isPresenting = true;

					scope.dispatchEvent( { type: 'sessionstart' } );

				}

			};

			this.getEnvironmentBlendMode = function () {

				if ( session !== null ) {

					return session.environmentBlendMode;

				}

			};

			function onInputSourcesChange( event ) {

				// Notify disconnected

				for ( let i = 0; i < event.removed.length; i ++ ) {

					const inputSource = event.removed[ i ];
					const index = controllerInputSources.indexOf( inputSource );

					if ( index >= 0 ) {

						controllerInputSources[ index ] = null;
						controllers[ index ].disconnect( inputSource );

					}

				}

				// Notify connected

				for ( let i = 0; i < event.added.length; i ++ ) {

					const inputSource = event.added[ i ];

					let controllerIndex = controllerInputSources.indexOf( inputSource );

					if ( controllerIndex === - 1 ) {

						// Assign input source a controller that currently has no input source

						for ( let i = 0; i < controllers.length; i ++ ) {

							if ( i >= controllerInputSources.length ) {

								controllerInputSources.push( inputSource );
								controllerIndex = i;
								break;

							} else if ( controllerInputSources[ i ] === null ) {

								controllerInputSources[ i ] = inputSource;
								controllerIndex = i;
								break;

							}

						}

						// If all controllers do currently receive input we ignore new ones

						if ( controllerIndex === - 1 ) break;

					}

					const controller = controllers[ controllerIndex ];

					if ( controller ) {

						controller.connect( inputSource );

					}

				}

			}

			//

			const cameraLPos = new Vector3();
			const cameraRPos = new Vector3();

			/**
			 * Assumes 2 cameras that are parallel and share an X-axis, and that
			 * the cameras' projection and world matrices have already been set.
			 * And that near and far planes are identical for both cameras.
			 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
			 */
			function setProjectionFromUnion( camera, cameraL, cameraR ) {

				cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
				cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

				const ipd = cameraLPos.distanceTo( cameraRPos );

				const projL = cameraL.projectionMatrix.elements;
				const projR = cameraR.projectionMatrix.elements;

				// VR systems will have identical far and near planes, and
				// most likely identical top and bottom frustum extents.
				// Use the left camera for these values.
				const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
				const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
				const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
				const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

				const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
				const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
				const left = near * leftFov;
				const right = near * rightFov;

				// Calculate the new camera's position offset from the
				// left camera. xOffset should be roughly half `ipd`.
				const zOffset = ipd / ( - leftFov + rightFov );
				const xOffset = zOffset * - leftFov;

				// TODO: Better way to apply this offset?
				cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
				camera.translateX( xOffset );
				camera.translateZ( zOffset );
				camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
				camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

				// Find the union of the frustum values of the cameras and scale
				// the values so that the near plane's position does not change in world space,
				// although must now be relative to the new union camera.
				const near2 = near + zOffset;
				const far2 = far + zOffset;
				const left2 = left - xOffset;
				const right2 = right + ( ipd - xOffset );
				const top2 = topFov * far / far2 * near2;
				const bottom2 = bottomFov * far / far2 * near2;

				camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
				camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();

			}

			function updateCamera( camera, parent ) {

				if ( parent === null ) {

					camera.matrixWorld.copy( camera.matrix );

				} else {

					camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

				}

				camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

			}

			this.updateCamera = function ( camera ) {

				if ( session === null ) return;

				if ( depthSensing.texture !== null ) {

					camera.near = depthSensing.depthNear;
					camera.far = depthSensing.depthFar;

				}

				cameraXR.near = cameraR.near = cameraL.near = camera.near;
				cameraXR.far = cameraR.far = cameraL.far = camera.far;

				if ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {

					// Note that the new renderState won't apply until the next frame. See #18320

					session.updateRenderState( {
						depthNear: cameraXR.near,
						depthFar: cameraXR.far
					} );

					_currentDepthNear = cameraXR.near;
					_currentDepthFar = cameraXR.far;

					cameraL.near = _currentDepthNear;
					cameraL.far = _currentDepthFar;
					cameraR.near = _currentDepthNear;
					cameraR.far = _currentDepthFar;

					cameraL.updateProjectionMatrix();
					cameraR.updateProjectionMatrix();
					camera.updateProjectionMatrix();

				}

				const parent = camera.parent;
				const cameras = cameraXR.cameras;

				updateCamera( cameraXR, parent );

				for ( let i = 0; i < cameras.length; i ++ ) {

					updateCamera( cameras[ i ], parent );

				}

				// update projection matrix for proper view frustum culling

				if ( cameras.length === 2 ) {

					setProjectionFromUnion( cameraXR, cameraL, cameraR );

				} else {

					// assume single camera setup (AR)

					cameraXR.projectionMatrix.copy( cameraL.projectionMatrix );

				}

				// update user camera and its children

				updateUserCamera( camera, cameraXR, parent );

			};

			function updateUserCamera( camera, cameraXR, parent ) {

				if ( parent === null ) {

					camera.matrix.copy( cameraXR.matrixWorld );

				} else {

					camera.matrix.copy( parent.matrixWorld );
					camera.matrix.invert();
					camera.matrix.multiply( cameraXR.matrixWorld );

				}

				camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
				camera.updateMatrixWorld( true );

				camera.projectionMatrix.copy( cameraXR.projectionMatrix );
				camera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );

				if ( camera.isPerspectiveCamera ) {

					camera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );
					camera.zoom = 1;

				}

			}

			this.getCamera = function () {

				return cameraXR;

			};

			this.getFoveation = function () {

				if ( glProjLayer === null && glBaseLayer === null ) {

					return undefined;

				}

				return foveation;

			};

			this.setFoveation = function ( value ) {

				// 0 = no foveation = full resolution
				// 1 = maximum foveation = the edges render at lower resolution

				foveation = value;

				if ( glProjLayer !== null ) {

					glProjLayer.fixedFoveation = value;

				}

				if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

					glBaseLayer.fixedFoveation = value;

				}

			};

			this.hasDepthSensing = function () {

				return depthSensing.texture !== null;

			};

			// Animation Loop

			let onAnimationFrameCallback = null;

			function onAnimationFrame( time, frame ) {

				pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
				xrFrame = frame;

				if ( pose !== null ) {

					const views = pose.views;

					if ( glBaseLayer !== null ) {

						renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
						renderer.setRenderTarget( newRenderTarget );

					}

					let cameraXRNeedsUpdate = false;

					// check if it's necessary to rebuild cameraXR's camera list

					if ( views.length !== cameraXR.cameras.length ) {

						cameraXR.cameras.length = 0;
						cameraXRNeedsUpdate = true;

					}

					for ( let i = 0; i < views.length; i ++ ) {

						const view = views[ i ];

						let viewport = null;

						if ( glBaseLayer !== null ) {

							viewport = glBaseLayer.getViewport( view );

						} else {

							const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
							viewport = glSubImage.viewport;

							// For side-by-side projection, we only produce a single texture for both eyes.
							if ( i === 0 ) {

								renderer.setRenderTargetTextures(
									newRenderTarget,
									glSubImage.colorTexture,
									glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );

								renderer.setRenderTarget( newRenderTarget );

							}

						}

						let camera = cameras[ i ];

						if ( camera === undefined ) {

							camera = new PerspectiveCamera();
							camera.layers.enable( i );
							camera.viewport = new Vector4();
							cameras[ i ] = camera;

						}

						camera.matrix.fromArray( view.transform.matrix );
						camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
						camera.projectionMatrix.fromArray( view.projectionMatrix );
						camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();
						camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

						if ( i === 0 ) {

							cameraXR.matrix.copy( camera.matrix );
							cameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );

						}

						if ( cameraXRNeedsUpdate === true ) {

							cameraXR.cameras.push( camera );

						}

					}

					//

					const enabledFeatures = session.enabledFeatures;

					if ( enabledFeatures && enabledFeatures.includes( 'depth-sensing' ) ) {

						const depthData = glBinding.getDepthInformation( views[ 0 ] );

						if ( depthData && depthData.isValid && depthData.texture ) {

							depthSensing.init( renderer, depthData, session.renderState );

						}

					}

				}

				//

				for ( let i = 0; i < controllers.length; i ++ ) {

					const inputSource = controllerInputSources[ i ];
					const controller = controllers[ i ];

					if ( inputSource !== null && controller !== undefined ) {

						controller.update( inputSource, frame, customReferenceSpace || referenceSpace );

					}

				}

				depthSensing.render( renderer, cameraXR );

				if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

				if ( frame.detectedPlanes ) {

					scope.dispatchEvent( { type: 'planesdetected', data: frame } );

				}

				xrFrame = null;

			}

			const animation = new WebGLAnimation();

			animation.setAnimationLoop( onAnimationFrame );

			this.setAnimationLoop = function ( callback ) {

				onAnimationFrameCallback = callback;

			};

			this.dispose = function () {};

		}

	}

	const _e1 = /*@__PURE__*/ new Euler();
	const _m1 = /*@__PURE__*/ new Matrix4();

	function WebGLMaterials( renderer, properties ) {

		function refreshTransformUniform( map, uniform ) {

			if ( map.matrixAutoUpdate === true ) {

				map.updateMatrix();

			}

			uniform.value.copy( map.matrix );

		}

		function refreshFogUniforms( uniforms, fog ) {

			fog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

			if ( material.isMeshBasicMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isMeshLambertMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isMeshToonMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsToon( uniforms, material );

			} else if ( material.isMeshPhongMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsPhong( uniforms, material );

			} else if ( material.isMeshStandardMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsStandard( uniforms, material );

				if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

				}

			} else if ( material.isMeshMatcapMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsMatcap( uniforms, material );

			} else if ( material.isMeshDepthMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isMeshDistanceMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsDistance( uniforms, material );

			} else if ( material.isMeshNormalMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isLineBasicMaterial ) {

				refreshUniformsLine( uniforms, material );

				if ( material.isLineDashedMaterial ) {

					refreshUniformsDash( uniforms, material );

				}

			} else if ( material.isPointsMaterial ) {

				refreshUniformsPoints( uniforms, material, pixelRatio, height );

			} else if ( material.isSpriteMaterial ) {

				refreshUniformsSprites( uniforms, material );

			} else if ( material.isShadowMaterial ) {

				uniforms.color.value.copy( material.color );
				uniforms.opacity.value = material.opacity;

			} else if ( material.isShaderMaterial ) {

				material.uniformsNeedUpdate = false; // #15581

			}

		}

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			if ( material.color ) {

				uniforms.diffuse.value.copy( material.color );

			}

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.mapTransform );

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

				refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;

				refreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );

				uniforms.bumpScale.value = material.bumpScale;

				if ( material.side === BackSide ) {

					uniforms.bumpScale.value *= - 1;

				}

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;

				refreshTransformUniform( material.normalMap, uniforms.normalMapTransform );

				uniforms.normalScale.value.copy( material.normalScale );

				if ( material.side === BackSide ) {

					uniforms.normalScale.value.negate();

				}

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;

				refreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );

				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

				refreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );

			}

			if ( material.specularMap ) {

				uniforms.specularMap.value = material.specularMap;

				refreshTransformUniform( material.specularMap, uniforms.specularMapTransform );

			}

			if ( material.alphaTest > 0 ) {

				uniforms.alphaTest.value = material.alphaTest;

			}

			const materialProperties = properties.get( material );

			const envMap = materialProperties.envMap;
			const envMapRotation = materialProperties.envMapRotation;

			if ( envMap ) {

				uniforms.envMap.value = envMap;

				_e1.copy( envMapRotation );

				// accommodate left-handed frame
				_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;

				if ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) {

					// environment maps which are not cube render targets or PMREMs follow a different convention
					_e1.y *= - 1;
					_e1.z *= - 1;

				}

				uniforms.envMapRotation.value.setFromMatrix4( _m1.makeRotationFromEuler( _e1 ) );

				uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.ior.value = material.ior;
				uniforms.refractionRatio.value = material.refractionRatio;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;

				// artist-friendly light intensity scaling factor
				const scaleFactor = ( renderer._useLegacyLights === true ) ? Math.PI : 1;

				uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;

				refreshTransformUniform( material.lightMap, uniforms.lightMapTransform );

			}

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

				refreshTransformUniform( material.aoMap, uniforms.aoMapTransform );

			}

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.mapTransform );

			}

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * pixelRatio;
			uniforms.scale.value = height * 0.5;

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.uvTransform );

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

				refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

			}

			if ( material.alphaTest > 0 ) {

				uniforms.alphaTest.value = material.alphaTest;

			}

		}

		function refreshUniformsSprites( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.mapTransform );

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

				refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

			}

			if ( material.alphaTest > 0 ) {

				uniforms.alphaTest.value = material.alphaTest;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value.copy( material.specular );
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		}

		function refreshUniformsToon( uniforms, material ) {

			if ( material.gradientMap ) {

				uniforms.gradientMap.value = material.gradientMap;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.metalness.value = material.metalness;

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

				refreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );

			}

			uniforms.roughness.value = material.roughness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

				refreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );

			}

			const envMap = properties.get( material ).envMap;

			if ( envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

			uniforms.ior.value = material.ior; // also part of uniforms common

			if ( material.sheen > 0 ) {

				uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

				uniforms.sheenRoughness.value = material.sheenRoughness;

				if ( material.sheenColorMap ) {

					uniforms.sheenColorMap.value = material.sheenColorMap;

					refreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );

				}

				if ( material.sheenRoughnessMap ) {

					uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

					refreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );

				}

			}

			if ( material.clearcoat > 0 ) {

				uniforms.clearcoat.value = material.clearcoat;
				uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

				if ( material.clearcoatMap ) {

					uniforms.clearcoatMap.value = material.clearcoatMap;

					refreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );

				}

				if ( material.clearcoatRoughnessMap ) {

					uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

					refreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );

				}

				if ( material.clearcoatNormalMap ) {

					uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

					refreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );

					uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );

					if ( material.side === BackSide ) {

						uniforms.clearcoatNormalScale.value.negate();

					}

				}

			}

			if ( material.iridescence > 0 ) {

				uniforms.iridescence.value = material.iridescence;
				uniforms.iridescenceIOR.value = material.iridescenceIOR;
				uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
				uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];

				if ( material.iridescenceMap ) {

					uniforms.iridescenceMap.value = material.iridescenceMap;

					refreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );

				}

				if ( material.iridescenceThicknessMap ) {

					uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

					refreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );

				}

			}

			if ( material.transmission > 0 ) {

				uniforms.transmission.value = material.transmission;
				uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
				uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

				if ( material.transmissionMap ) {

					uniforms.transmissionMap.value = material.transmissionMap;

					refreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );

				}

				uniforms.thickness.value = material.thickness;

				if ( material.thicknessMap ) {

					uniforms.thicknessMap.value = material.thicknessMap;

					refreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );

				}

				uniforms.attenuationDistance.value = material.attenuationDistance;
				uniforms.attenuationColor.value.copy( material.attenuationColor );

			}

			if ( material.anisotropy > 0 ) {

				uniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );

				if ( material.anisotropyMap ) {

					uniforms.anisotropyMap.value = material.anisotropyMap;

					refreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );

				}

			}

			uniforms.specularIntensity.value = material.specularIntensity;
			uniforms.specularColor.value.copy( material.specularColor );

			if ( material.specularColorMap ) {

				uniforms.specularColorMap.value = material.specularColorMap;

				refreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );

			}

			if ( material.specularIntensityMap ) {

				uniforms.specularIntensityMap.value = material.specularIntensityMap;

				refreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );

			}

		}

		function refreshUniformsMatcap( uniforms, material ) {

			if ( material.matcap ) {

				uniforms.matcap.value = material.matcap;

			}

		}

		function refreshUniformsDistance( uniforms, material ) {

			const light = properties.get( material ).light;

			uniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );
			uniforms.nearDistance.value = light.shadow.camera.near;
			uniforms.farDistance.value = light.shadow.camera.far;

		}

		return {
			refreshFogUniforms: refreshFogUniforms,
			refreshMaterialUniforms: refreshMaterialUniforms
		};

	}

	function WebGLUniformsGroups( gl, info, capabilities, state ) {

		let buffers = {};
		let updateList = {};
		let allocatedBindingPoints = [];

		const maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ) : 0; // binding points are global whereas block indices are per shader program

		function bind( uniformsGroup, program ) {

			const webglProgram = program.program;
			state.uniformBlockBinding( uniformsGroup, webglProgram );

		}

		function update( uniformsGroup, program ) {

			let buffer = buffers[ uniformsGroup.id ];

			if ( buffer === undefined ) {

				prepareUniformsGroup( uniformsGroup );

				buffer = createBuffer( uniformsGroup );
				buffers[ uniformsGroup.id ] = buffer;

				uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );

			}

			// ensure to update the binding points/block indices mapping for this program

			const webglProgram = program.program;
			state.updateUBOMapping( uniformsGroup, webglProgram );

			// update UBO once per frame

			const frame = info.render.frame;

			if ( updateList[ uniformsGroup.id ] !== frame ) {

				updateBufferData( uniformsGroup );

				updateList[ uniformsGroup.id ] = frame;

			}

		}

		function createBuffer( uniformsGroup ) {

			// the setup of an UBO is independent of a particular shader program but global

			const bindingPointIndex = allocateBindingPointIndex();
			uniformsGroup.__bindingPointIndex = bindingPointIndex;

			const buffer = gl.createBuffer();
			const size = uniformsGroup.__size;
			const usage = uniformsGroup.usage;

			gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );
			gl.bufferData( gl.UNIFORM_BUFFER, size, usage );
			gl.bindBuffer( gl.UNIFORM_BUFFER, null );
			gl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );

			return buffer;

		}

		function allocateBindingPointIndex() {

			for ( let i = 0; i < maxBindingPoints; i ++ ) {

				if ( allocatedBindingPoints.indexOf( i ) === - 1 ) {

					allocatedBindingPoints.push( i );
					return i;

				}

			}

			console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );

			return 0;

		}

		function updateBufferData( uniformsGroup ) {

			const buffer = buffers[ uniformsGroup.id ];
			const uniforms = uniformsGroup.uniforms;
			const cache = uniformsGroup.__cache;

			gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );

			for ( let i = 0, il = uniforms.length; i < il; i ++ ) {

				const uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];

				for ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {

					const uniform = uniformArray[ j ];

					if ( hasUniformChanged( uniform, i, j, cache ) === true ) {

						const offset = uniform.__offset;

						const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

						let arrayOffset = 0;

						for ( let k = 0; k < values.length; k ++ ) {

							const value = values[ k ];

							const info = getUniformSize( value );

							// TODO add integer and struct support
							if ( typeof value === 'number' || typeof value === 'boolean' ) {

								uniform.__data[ 0 ] = value;
								gl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );

							} else if ( value.isMatrix3 ) {

								// manually converting 3x3 to 3x4

								uniform.__data[ 0 ] = value.elements[ 0 ];
								uniform.__data[ 1 ] = value.elements[ 1 ];
								uniform.__data[ 2 ] = value.elements[ 2 ];
								uniform.__data[ 3 ] = 0;
								uniform.__data[ 4 ] = value.elements[ 3 ];
								uniform.__data[ 5 ] = value.elements[ 4 ];
								uniform.__data[ 6 ] = value.elements[ 5 ];
								uniform.__data[ 7 ] = 0;
								uniform.__data[ 8 ] = value.elements[ 6 ];
								uniform.__data[ 9 ] = value.elements[ 7 ];
								uniform.__data[ 10 ] = value.elements[ 8 ];
								uniform.__data[ 11 ] = 0;

							} else {

								value.toArray( uniform.__data, arrayOffset );

								arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;

							}

						}

						gl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );

					}

				}

			}

			gl.bindBuffer( gl.UNIFORM_BUFFER, null );

		}

		function hasUniformChanged( uniform, index, indexArray, cache ) {

			const value = uniform.value;
			const indexString = index + '_' + indexArray;

			if ( cache[ indexString ] === undefined ) {

				// cache entry does not exist so far

				if ( typeof value === 'number' || typeof value === 'boolean' ) {

					cache[ indexString ] = value;

				} else {

					cache[ indexString ] = value.clone();

				}

				return true;

			} else {

				const cachedObject = cache[ indexString ];

				// compare current value with cached entry

				if ( typeof value === 'number' || typeof value === 'boolean' ) {

					if ( cachedObject !== value ) {

						cache[ indexString ] = value;
						return true;

					}

				} else {

					if ( cachedObject.equals( value ) === false ) {

						cachedObject.copy( value );
						return true;

					}

				}

			}

			return false;

		}

		function prepareUniformsGroup( uniformsGroup ) {

			// determine total buffer size according to the STD140 layout
			// Hint: STD140 is the only supported layout in WebGL 2

			const uniforms = uniformsGroup.uniforms;

			let offset = 0; // global buffer offset in bytes
			const chunkSize = 16; // size of a chunk in bytes

			for ( let i = 0, l = uniforms.length; i < l; i ++ ) {

				const uniformArray = Array.isArray( uniforms[ i ] ) ? uniforms[ i ] : [ uniforms[ i ] ];

				for ( let j = 0, jl = uniformArray.length; j < jl; j ++ ) {

					const uniform = uniformArray[ j ];

					const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

					for ( let k = 0, kl = values.length; k < kl; k ++ ) {

						const value = values[ k ];

						const info = getUniformSize( value );

						// Calculate the chunk offset
						const chunkOffsetUniform = offset % chunkSize;

						// Check for chunk overflow
						if ( chunkOffsetUniform !== 0 && ( chunkSize - chunkOffsetUniform ) < info.boundary ) {

							// Add padding and adjust offset
							offset += ( chunkSize - chunkOffsetUniform );

						}

						// the following two properties will be used for partial buffer updates

						uniform.__data = new Float32Array( info.storage / Float32Array.BYTES_PER_ELEMENT );
						uniform.__offset = offset;


						// Update the global offset
						offset += info.storage;


					}

				}

			}

			// ensure correct final padding

			const chunkOffset = offset % chunkSize;

			if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );

			//

			uniformsGroup.__size = offset;
			uniformsGroup.__cache = {};

			return this;

		}

		function getUniformSize( value ) {

			const info = {
				boundary: 0, // bytes
				storage: 0 // bytes
			};

			// determine sizes according to STD140

			if ( typeof value === 'number' || typeof value === 'boolean' ) {

				// float/int/bool

				info.boundary = 4;
				info.storage = 4;

			} else if ( value.isVector2 ) {

				// vec2

				info.boundary = 8;
				info.storage = 8;

			} else if ( value.isVector3 || value.isColor ) {

				// vec3

				info.boundary = 16;
				info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes

			} else if ( value.isVector4 ) {

				// vec4

				info.boundary = 16;
				info.storage = 16;

			} else if ( value.isMatrix3 ) {

				// mat3 (in STD140 a 3x3 matrix is represented as 3x4)

				info.boundary = 48;
				info.storage = 48;

			} else if ( value.isMatrix4 ) {

				// mat4

				info.boundary = 64;
				info.storage = 64;

			} else if ( value.isTexture ) {

				console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );

			} else {

				console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );

			}

			return info;

		}

		function onUniformsGroupsDispose( event ) {

			const uniformsGroup = event.target;

			uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );

			const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
			allocatedBindingPoints.splice( index, 1 );

			gl.deleteBuffer( buffers[ uniformsGroup.id ] );

			delete buffers[ uniformsGroup.id ];
			delete updateList[ uniformsGroup.id ];

		}

		function dispose() {

			for ( const id in buffers ) {

				gl.deleteBuffer( buffers[ id ] );

			}

			allocatedBindingPoints = [];
			buffers = {};
			updateList = {};

		}

		return {

			bind: bind,
			update: update,

			dispose: dispose

		};

	}

	class WebGLRenderer {

		constructor( parameters = {} ) {

			const {
				canvas = createCanvasElement(),
				context = null,
				depth = true,
				stencil = true,
				alpha = false,
				antialias = false,
				premultipliedAlpha = true,
				preserveDrawingBuffer = false,
				powerPreference = 'default',
				failIfMajorPerformanceCaveat = false,
			} = parameters;

			this.isWebGLRenderer = true;

			let _alpha;

			if ( context !== null ) {

				_alpha = context.getContextAttributes().alpha;

			} else {

				_alpha = alpha;

			}

			const uintClearColor = new Uint32Array( 4 );
			const intClearColor = new Int32Array( 4 );

			let currentRenderList = null;
			let currentRenderState = null;

			// render() can be called from within a callback triggered by another render.
			// We track this so that the nested render call gets its list and state isolated from the parent render call.

			const renderListStack = [];
			const renderStateStack = [];

			// public properties

			this.domElement = canvas;

			// Debug configuration container
			this.debug = {

				/**
				 * Enables error checking and reporting when shader programs are being compiled
				 * @type {boolean}
				 */
				checkShaderErrors: true,
				/**
				 * Callback for custom error reporting.
				 * @type {?Function}
				 */
				onShaderError: null
			};

			// clearing

			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;

			// scene graph

			this.sortObjects = true;

			// user-defined clipping

			this.clippingPlanes = [];
			this.localClippingEnabled = false;

			// physically based shading

			this._outputColorSpace = SRGBColorSpace;

			// physical lights

			this._useLegacyLights = false;

			// tone mapping

			this.toneMapping = NoToneMapping;
			this.toneMappingExposure = 1.0;

			// internal properties

			const _this = this;

			let _isContextLost = false;

			// internal state cache

			let _currentActiveCubeFace = 0;
			let _currentActiveMipmapLevel = 0;
			let _currentRenderTarget = null;
			let _currentMaterialId = - 1;

			let _currentCamera = null;

			const _currentViewport = new Vector4();
			const _currentScissor = new Vector4();
			let _currentScissorTest = null;

			const _currentClearColor = new Color$1( 0x000000 );
			let _currentClearAlpha = 0;

			//

			let _width = canvas.width;
			let _height = canvas.height;

			let _pixelRatio = 1;
			let _opaqueSort = null;
			let _transparentSort = null;

			const _viewport = new Vector4( 0, 0, _width, _height );
			const _scissor = new Vector4( 0, 0, _width, _height );
			let _scissorTest = false;

			// frustum

			const _frustum = new Frustum();

			// clipping

			let _clippingEnabled = false;
			let _localClippingEnabled = false;

			// transmission

			let _transmissionRenderTarget = null;

			// camera matrices cache

			const _projScreenMatrix = new Matrix4();

			const _vector2 = new Vector2$1();
			const _vector3 = new Vector3();

			const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

			function getTargetPixelRatio() {

				return _currentRenderTarget === null ? _pixelRatio : 1;

			}

			// initialize

			let _gl = context;

			function getContext( contextNames, contextAttributes ) {

				for ( let i = 0; i < contextNames.length; i ++ ) {

					const contextName = contextNames[ i ];
					const context = canvas.getContext( contextName, contextAttributes );
					if ( context !== null ) return context;

				}

				return null;

			}

			try {

				const contextAttributes = {
					alpha: true,
					depth,
					stencil,
					antialias,
					premultipliedAlpha,
					preserveDrawingBuffer,
					powerPreference,
					failIfMajorPerformanceCaveat,
				};

				// OffscreenCanvas does not have setAttribute, see #22811
				if ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );

				// event listeners must be registered before WebGL context is created, see #12753
				canvas.addEventListener( 'webglcontextlost', onContextLost, false );
				canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
				canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );

				if ( _gl === null ) {

					const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

					if ( _this.isWebGL1Renderer === true ) {

						contextNames.shift();

					}

					_gl = getContext( contextNames, contextAttributes );

					if ( _gl === null ) {

						if ( getContext( contextNames ) ) {

							throw new Error( 'Error creating WebGL context with your selected attributes.' );

						} else {

							throw new Error( 'Error creating WebGL context.' );

						}

					}

				}

				if ( typeof WebGLRenderingContext !== 'undefined' && _gl instanceof WebGLRenderingContext ) { // @deprecated, r153

					console.warn( 'THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.' );

				}

				// Some experimental-webgl implementations do not have getShaderPrecisionFormat

				if ( _gl.getShaderPrecisionFormat === undefined ) {

					_gl.getShaderPrecisionFormat = function () {

						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

					};

				}

			} catch ( error ) {

				console.error( 'THREE.WebGLRenderer: ' + error.message );
				throw error;

			}

			let extensions, capabilities, state, info;
			let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
			let programCache, materials, renderLists, renderStates, clipping, shadowMap;

			let background, morphtargets, bufferRenderer, indexedBufferRenderer;

			let utils, bindingStates, uniformsGroups;

			function initGLContext() {

				extensions = new WebGLExtensions( _gl );

				capabilities = new WebGLCapabilities( _gl, extensions, parameters );

				extensions.init( capabilities );

				utils = new WebGLUtils( _gl, extensions, capabilities );

				state = new WebGLState( _gl, extensions, capabilities );

				info = new WebGLInfo( _gl );
				properties = new WebGLProperties();
				textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
				cubemaps = new WebGLCubeMaps( _this );
				cubeuvmaps = new WebGLCubeUVMaps( _this );
				attributes = new WebGLAttributes( _gl, capabilities );
				bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
				geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
				objects = new WebGLObjects( _gl, geometries, attributes, info );
				morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
				clipping = new WebGLClipping( properties );
				programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
				materials = new WebGLMaterials( _this, properties );
				renderLists = new WebGLRenderLists();
				renderStates = new WebGLRenderStates( extensions, capabilities );
				background = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );
				shadowMap = new WebGLShadowMap( _this, objects, capabilities );
				uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );

				bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
				indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

				info.programs = programCache.programs;

				_this.capabilities = capabilities;
				_this.extensions = extensions;
				_this.properties = properties;
				_this.renderLists = renderLists;
				_this.shadowMap = shadowMap;
				_this.state = state;
				_this.info = info;

			}

			initGLContext();

			// xr

			const xr = new WebXRManager( _this, _gl );

			this.xr = xr;

			// API

			this.getContext = function () {

				return _gl;

			};

			this.getContextAttributes = function () {

				return _gl.getContextAttributes();

			};

			this.forceContextLoss = function () {

				const extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.loseContext();

			};

			this.forceContextRestore = function () {

				const extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.restoreContext();

			};

			this.getPixelRatio = function () {

				return _pixelRatio;

			};

			this.setPixelRatio = function ( value ) {

				if ( value === undefined ) return;

				_pixelRatio = value;

				this.setSize( _width, _height, false );

			};

			this.getSize = function ( target ) {

				return target.set( _width, _height );

			};

			this.setSize = function ( width, height, updateStyle = true ) {

				if ( xr.isPresenting ) {

					console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
					return;

				}

				_width = width;
				_height = height;

				canvas.width = Math.floor( width * _pixelRatio );
				canvas.height = Math.floor( height * _pixelRatio );

				if ( updateStyle === true ) {

					canvas.style.width = width + 'px';
					canvas.style.height = height + 'px';

				}

				this.setViewport( 0, 0, width, height );

			};

			this.getDrawingBufferSize = function ( target ) {

				return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

			};

			this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

				_width = width;
				_height = height;

				_pixelRatio = pixelRatio;

				canvas.width = Math.floor( width * pixelRatio );
				canvas.height = Math.floor( height * pixelRatio );

				this.setViewport( 0, 0, width, height );

			};

			this.getCurrentViewport = function ( target ) {

				return target.copy( _currentViewport );

			};

			this.getViewport = function ( target ) {

				return target.copy( _viewport );

			};

			this.setViewport = function ( x, y, width, height ) {

				if ( x.isVector4 ) {

					_viewport.set( x.x, x.y, x.z, x.w );

				} else {

					_viewport.set( x, y, width, height );

				}

				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).round() );

			};

			this.getScissor = function ( target ) {

				return target.copy( _scissor );

			};

			this.setScissor = function ( x, y, width, height ) {

				if ( x.isVector4 ) {

					_scissor.set( x.x, x.y, x.z, x.w );

				} else {

					_scissor.set( x, y, width, height );

				}

				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).round() );

			};

			this.getScissorTest = function () {

				return _scissorTest;

			};

			this.setScissorTest = function ( boolean ) {

				state.setScissorTest( _scissorTest = boolean );

			};

			this.setOpaqueSort = function ( method ) {

				_opaqueSort = method;

			};

			this.setTransparentSort = function ( method ) {

				_transparentSort = method;

			};

			// Clearing

			this.getClearColor = function ( target ) {

				return target.copy( background.getClearColor() );

			};

			this.setClearColor = function () {

				background.setClearColor.apply( background, arguments );

			};

			this.getClearAlpha = function () {

				return background.getClearAlpha();

			};

			this.setClearAlpha = function () {

				background.setClearAlpha.apply( background, arguments );

			};

			this.clear = function ( color = true, depth = true, stencil = true ) {

				let bits = 0;

				if ( color ) {

					// check if we're trying to clear an integer target
					let isIntegerFormat = false;
					if ( _currentRenderTarget !== null ) {

						const targetFormat = _currentRenderTarget.texture.format;
						isIntegerFormat = targetFormat === RGBAIntegerFormat ||
							targetFormat === RGIntegerFormat ||
							targetFormat === RedIntegerFormat;

					}

					// use the appropriate clear functions to clear the target if it's a signed
					// or unsigned integer target
					if ( isIntegerFormat ) {

						const targetType = _currentRenderTarget.texture.type;
						const isUnsignedType = targetType === UnsignedByteType ||
							targetType === UnsignedIntType ||
							targetType === UnsignedShortType ||
							targetType === UnsignedInt248Type ||
							targetType === UnsignedShort4444Type ||
							targetType === UnsignedShort5551Type;

						const clearColor = background.getClearColor();
						const a = background.getClearAlpha();
						const r = clearColor.r;
						const g = clearColor.g;
						const b = clearColor.b;

						if ( isUnsignedType ) {

							uintClearColor[ 0 ] = r;
							uintClearColor[ 1 ] = g;
							uintClearColor[ 2 ] = b;
							uintClearColor[ 3 ] = a;
							_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );

						} else {

							intClearColor[ 0 ] = r;
							intClearColor[ 1 ] = g;
							intClearColor[ 2 ] = b;
							intClearColor[ 3 ] = a;
							_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );

						}

					} else {

						bits |= _gl.COLOR_BUFFER_BIT;

					}

				}

				if ( depth ) bits |= _gl.DEPTH_BUFFER_BIT;
				if ( stencil ) {

					bits |= _gl.STENCIL_BUFFER_BIT;
					this.state.buffers.stencil.setMask( 0xffffffff );

				}

				_gl.clear( bits );

			};

			this.clearColor = function () {

				this.clear( true, false, false );

			};

			this.clearDepth = function () {

				this.clear( false, true, false );

			};

			this.clearStencil = function () {

				this.clear( false, false, true );

			};

			//

			this.dispose = function () {

				canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
				canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
				canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );

				renderLists.dispose();
				renderStates.dispose();
				properties.dispose();
				cubemaps.dispose();
				cubeuvmaps.dispose();
				objects.dispose();
				bindingStates.dispose();
				uniformsGroups.dispose();
				programCache.dispose();

				xr.dispose();

				xr.removeEventListener( 'sessionstart', onXRSessionStart );
				xr.removeEventListener( 'sessionend', onXRSessionEnd );

				if ( _transmissionRenderTarget ) {

					_transmissionRenderTarget.dispose();
					_transmissionRenderTarget = null;

				}

				animation.stop();

			};

			// Events

			function onContextLost( event ) {

				event.preventDefault();

				console.log( 'THREE.WebGLRenderer: Context Lost.' );

				_isContextLost = true;

			}

			function onContextRestore( /* event */ ) {

				console.log( 'THREE.WebGLRenderer: Context Restored.' );

				_isContextLost = false;

				const infoAutoReset = info.autoReset;
				const shadowMapEnabled = shadowMap.enabled;
				const shadowMapAutoUpdate = shadowMap.autoUpdate;
				const shadowMapNeedsUpdate = shadowMap.needsUpdate;
				const shadowMapType = shadowMap.type;

				initGLContext();

				info.autoReset = infoAutoReset;
				shadowMap.enabled = shadowMapEnabled;
				shadowMap.autoUpdate = shadowMapAutoUpdate;
				shadowMap.needsUpdate = shadowMapNeedsUpdate;
				shadowMap.type = shadowMapType;

			}

			function onContextCreationError( event ) {

				console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );

			}

			function onMaterialDispose( event ) {

				const material = event.target;

				material.removeEventListener( 'dispose', onMaterialDispose );

				deallocateMaterial( material );

			}

			// Buffer deallocation

			function deallocateMaterial( material ) {

				releaseMaterialProgramReferences( material );

				properties.remove( material );

			}


			function releaseMaterialProgramReferences( material ) {

				const programs = properties.get( material ).programs;

				if ( programs !== undefined ) {

					programs.forEach( function ( program ) {

						programCache.releaseProgram( program );

					} );

					if ( material.isShaderMaterial ) {

						programCache.releaseShaderCache( material );

					}

				}

			}

			// Buffer rendering

			this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

				if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

				const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

				const program = setProgram( camera, scene, geometry, material, object );

				state.setMaterial( material, frontFaceCW );

				//

				let index = geometry.index;
				let rangeFactor = 1;

				if ( material.wireframe === true ) {

					index = geometries.getWireframeAttribute( geometry );

					if ( index === undefined ) return;

					rangeFactor = 2;

				}

				//

				const drawRange = geometry.drawRange;
				const position = geometry.attributes.position;

				let drawStart = drawRange.start * rangeFactor;
				let drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;

				if ( group !== null ) {

					drawStart = Math.max( drawStart, group.start * rangeFactor );
					drawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );

				}

				if ( index !== null ) {

					drawStart = Math.max( drawStart, 0 );
					drawEnd = Math.min( drawEnd, index.count );

				} else if ( position !== undefined && position !== null ) {

					drawStart = Math.max( drawStart, 0 );
					drawEnd = Math.min( drawEnd, position.count );

				}

				const drawCount = drawEnd - drawStart;

				if ( drawCount < 0 || drawCount === Infinity ) return;

				//

				bindingStates.setup( object, material, program, geometry, index );

				let attribute;
				let renderer = bufferRenderer;

				if ( index !== null ) {

					attribute = attributes.get( index );

					renderer = indexedBufferRenderer;
					renderer.setIndex( attribute );

				}

				//

				if ( object.isMesh ) {

					if ( material.wireframe === true ) {

						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( _gl.LINES );

					} else {

						renderer.setMode( _gl.TRIANGLES );

					}

				} else if ( object.isLine ) {

					let lineWidth = material.linewidth;

					if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

					state.setLineWidth( lineWidth * getTargetPixelRatio() );

					if ( object.isLineSegments ) {

						renderer.setMode( _gl.LINES );

					} else if ( object.isLineLoop ) {

						renderer.setMode( _gl.LINE_LOOP );

					} else {

						renderer.setMode( _gl.LINE_STRIP );

					}

				} else if ( object.isPoints ) {

					renderer.setMode( _gl.POINTS );

				} else if ( object.isSprite ) {

					renderer.setMode( _gl.TRIANGLES );

				}

				if ( object.isBatchedMesh ) {

					renderer.renderMultiDraw( object._multiDrawStarts, object._multiDrawCounts, object._multiDrawCount );

				} else if ( object.isInstancedMesh ) {

					renderer.renderInstances( drawStart, drawCount, object.count );

				} else if ( geometry.isInstancedBufferGeometry ) {

					const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
					const instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );

					renderer.renderInstances( drawStart, drawCount, instanceCount );

				} else {

					renderer.render( drawStart, drawCount );

				}

			};

			// Compile

			function prepareMaterial( material, scene, object ) {

				if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

					material.side = BackSide;
					material.needsUpdate = true;
					getProgram( material, scene, object );

					material.side = FrontSide;
					material.needsUpdate = true;
					getProgram( material, scene, object );

					material.side = DoubleSide;

				} else {

					getProgram( material, scene, object );

				}

			}

			this.compile = function ( scene, camera, targetScene = null ) {

				if ( targetScene === null ) targetScene = scene;

				currentRenderState = renderStates.get( targetScene );
				currentRenderState.init();

				renderStateStack.push( currentRenderState );

				// gather lights from both the target scene and the new object that will be added to the scene.

				targetScene.traverseVisible( function ( object ) {

					if ( object.isLight && object.layers.test( camera.layers ) ) {

						currentRenderState.pushLight( object );

						if ( object.castShadow ) {

							currentRenderState.pushShadow( object );

						}

					}

				} );

				if ( scene !== targetScene ) {

					scene.traverseVisible( function ( object ) {

						if ( object.isLight && object.layers.test( camera.layers ) ) {

							currentRenderState.pushLight( object );

							if ( object.castShadow ) {

								currentRenderState.pushShadow( object );

							}

						}

					} );

				}

				currentRenderState.setupLights( _this._useLegacyLights );

				// Only initialize materials in the new scene, not the targetScene.

				const materials = new Set();

				scene.traverse( function ( object ) {

					const material = object.material;

					if ( material ) {

						if ( Array.isArray( material ) ) {

							for ( let i = 0; i < material.length; i ++ ) {

								const material2 = material[ i ];

								prepareMaterial( material2, targetScene, object );
								materials.add( material2 );

							}

						} else {

							prepareMaterial( material, targetScene, object );
							materials.add( material );

						}

					}

				} );

				renderStateStack.pop();
				currentRenderState = null;

				return materials;

			};

			// compileAsync

			this.compileAsync = function ( scene, camera, targetScene = null ) {

				const materials = this.compile( scene, camera, targetScene );

				// Wait for all the materials in the new object to indicate that they're
				// ready to be used before resolving the promise.

				return new Promise( ( resolve ) => {

					function checkMaterialsReady() {

						materials.forEach( function ( material ) {

							const materialProperties = properties.get( material );
							const program = materialProperties.currentProgram;

							if ( program.isReady() ) {

								// remove any programs that report they're ready to use from the list
								materials.delete( material );

							}

						} );

						// once the list of compiling materials is empty, call the callback

						if ( materials.size === 0 ) {

							resolve( scene );
							return;

						}

						// if some materials are still not ready, wait a bit and check again

						setTimeout( checkMaterialsReady, 10 );

					}

					if ( extensions.get( 'KHR_parallel_shader_compile' ) !== null ) {

						// If we can check the compilation status of the materials without
						// blocking then do so right away.

						checkMaterialsReady();

					} else {

						// Otherwise start by waiting a bit to give the materials we just
						// initialized a chance to finish.

						setTimeout( checkMaterialsReady, 10 );

					}

				} );

			};

			// Animation Loop

			let onAnimationFrameCallback = null;

			function onAnimationFrame( time ) {

				if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

			}

			function onXRSessionStart() {

				animation.stop();

			}

			function onXRSessionEnd() {

				animation.start();

			}

			const animation = new WebGLAnimation();
			animation.setAnimationLoop( onAnimationFrame );

			if ( typeof self !== 'undefined' ) animation.setContext( self );

			this.setAnimationLoop = function ( callback ) {

				onAnimationFrameCallback = callback;
				xr.setAnimationLoop( callback );

				( callback === null ) ? animation.stop() : animation.start();

			};

			xr.addEventListener( 'sessionstart', onXRSessionStart );
			xr.addEventListener( 'sessionend', onXRSessionEnd );

			// Rendering

			this.render = function ( scene, camera ) {

				if ( camera !== undefined && camera.isCamera !== true ) {

					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;

				}

				if ( _isContextLost === true ) return;

				// update scene graph

				if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();

				// update camera matrices and frustum

				if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

				if ( xr.enabled === true && xr.isPresenting === true ) {

					if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

					camera = xr.getCamera(); // use XR camera for rendering

				}

				//
				if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

				currentRenderState = renderStates.get( scene, renderStateStack.length );
				currentRenderState.init();

				renderStateStack.push( currentRenderState );

				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromProjectionMatrix( _projScreenMatrix );

				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );

				currentRenderList = renderLists.get( scene, renderListStack.length );
				currentRenderList.init();

				renderListStack.push( currentRenderList );

				projectObject( scene, camera, 0, _this.sortObjects );

				currentRenderList.finish();

				if ( _this.sortObjects === true ) {

					currentRenderList.sort( _opaqueSort, _transparentSort );

				}

				//

				this.info.render.frame ++;

				if ( _clippingEnabled === true ) clipping.beginShadows();

				const shadowsArray = currentRenderState.state.shadowsArray;

				shadowMap.render( shadowsArray, scene, camera );

				if ( _clippingEnabled === true ) clipping.endShadows();

				//

				if ( this.info.autoReset === true ) this.info.reset();


				//

				if ( xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false ) {

					background.render( currentRenderList, scene );

				}

				// render scene

				currentRenderState.setupLights( _this._useLegacyLights );

				if ( camera.isArrayCamera ) {

					const cameras = camera.cameras;

					for ( let i = 0, l = cameras.length; i < l; i ++ ) {

						const camera2 = cameras[ i ];

						renderScene( currentRenderList, scene, camera2, camera2.viewport );

					}

				} else {

					renderScene( currentRenderList, scene, camera );

				}

				//

				if ( _currentRenderTarget !== null ) {

					// resolve multisample renderbuffers to a single-sample texture if necessary

					textures.updateMultisampleRenderTarget( _currentRenderTarget );

					// Generate mipmap if we're using any kind of mipmap filtering

					textures.updateRenderTargetMipmap( _currentRenderTarget );

				}

				//

				if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

				// _gl.finish();

				bindingStates.resetDefaultState();
				_currentMaterialId = - 1;
				_currentCamera = null;

				renderStateStack.pop();

				if ( renderStateStack.length > 0 ) {

					currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

				} else {

					currentRenderState = null;

				}

				renderListStack.pop();

				if ( renderListStack.length > 0 ) {

					currentRenderList = renderListStack[ renderListStack.length - 1 ];

				} else {

					currentRenderList = null;

				}

			};

			function projectObject( object, camera, groupOrder, sortObjects ) {

				if ( object.visible === false ) return;

				const visible = object.layers.test( camera.layers );

				if ( visible ) {

					if ( object.isGroup ) {

						groupOrder = object.renderOrder;

					} else if ( object.isLOD ) {

						if ( object.autoUpdate === true ) object.update( camera );

					} else if ( object.isLight ) {

						currentRenderState.pushLight( object );

						if ( object.castShadow ) {

							currentRenderState.pushShadow( object );

						}

					} else if ( object.isSprite ) {

						if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

							if ( sortObjects ) {

								_vector3.setFromMatrixPosition( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );

							}

							const geometry = objects.update( object );
							const material = object.material;

							if ( material.visible ) {

								currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

							}

						}

					} else if ( object.isMesh || object.isLine || object.isPoints ) {

						if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

							const geometry = objects.update( object );
							const material = object.material;

							if ( sortObjects ) {

								if ( object.boundingSphere !== undefined ) {

									if ( object.boundingSphere === null ) object.computeBoundingSphere();
									_vector3.copy( object.boundingSphere.center );

								} else {

									if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
									_vector3.copy( geometry.boundingSphere.center );

								}

								_vector3
									.applyMatrix4( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );

							}

							if ( Array.isArray( material ) ) {

								const groups = geometry.groups;

								for ( let i = 0, l = groups.length; i < l; i ++ ) {

									const group = groups[ i ];
									const groupMaterial = material[ group.materialIndex ];

									if ( groupMaterial && groupMaterial.visible ) {

										currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

									}

								}

							} else if ( material.visible ) {

								currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

							}

						}

					}

				}

				const children = object.children;

				for ( let i = 0, l = children.length; i < l; i ++ ) {

					projectObject( children[ i ], camera, groupOrder, sortObjects );

				}

			}

			function renderScene( currentRenderList, scene, camera, viewport ) {

				const opaqueObjects = currentRenderList.opaque;
				const transmissiveObjects = currentRenderList.transmissive;
				const transparentObjects = currentRenderList.transparent;

				currentRenderState.setupLightsView( camera );

				if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

				if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );

				if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

				if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
				if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
				if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

				// Ensure depth buffer writing is enabled so it can be cleared on next render

				state.buffers.depth.setTest( true );
				state.buffers.depth.setMask( true );
				state.buffers.color.setMask( true );

				state.setPolygonOffset( false );

			}

			function renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {

				const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

				if ( overrideMaterial !== null ) {

					return;

				}

				const isWebGL2 = capabilities.isWebGL2;

				if ( _transmissionRenderTarget === null ) {

					_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {
						generateMipmaps: true,
						type: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,
						minFilter: LinearMipmapLinearFilter,
						samples: ( isWebGL2 ) ? 4 : 0
					} );

					// debug

					/*
					const geometry = new PlaneGeometry();
					const material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );

					const mesh = new Mesh( geometry, material );
					scene.add( mesh );
					*/

				}

				_this.getDrawingBufferSize( _vector2 );

				if ( isWebGL2 ) {

					_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );

				} else {

					_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );

				}

				//

				const currentRenderTarget = _this.getRenderTarget();
				_this.setRenderTarget( _transmissionRenderTarget );

				_this.getClearColor( _currentClearColor );
				_currentClearAlpha = _this.getClearAlpha();
				if ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );

				_this.clear();

				// Turn off the features which can affect the frag color for opaque objects pass.
				// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
				const currentToneMapping = _this.toneMapping;
				_this.toneMapping = NoToneMapping;

				renderObjects( opaqueObjects, scene, camera );

				textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
				textures.updateRenderTargetMipmap( _transmissionRenderTarget );

				let renderTargetNeedsUpdate = false;

				for ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {

					const renderItem = transmissiveObjects[ i ];

					const object = renderItem.object;
					const geometry = renderItem.geometry;
					const material = renderItem.material;
					const group = renderItem.group;

					if ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {

						const currentSide = material.side;

						material.side = BackSide;
						material.needsUpdate = true;

						renderObject( object, scene, camera, geometry, material, group );

						material.side = currentSide;
						material.needsUpdate = true;

						renderTargetNeedsUpdate = true;

					}

				}

				if ( renderTargetNeedsUpdate === true ) {

					textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
					textures.updateRenderTargetMipmap( _transmissionRenderTarget );

				}

				_this.setRenderTarget( currentRenderTarget );

				_this.setClearColor( _currentClearColor, _currentClearAlpha );

				_this.toneMapping = currentToneMapping;

			}

			function renderObjects( renderList, scene, camera ) {

				const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

				for ( let i = 0, l = renderList.length; i < l; i ++ ) {

					const renderItem = renderList[ i ];

					const object = renderItem.object;
					const geometry = renderItem.geometry;
					const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
					const group = renderItem.group;

					if ( object.layers.test( camera.layers ) ) {

						renderObject( object, scene, camera, geometry, material, group );

					}

				}

			}

			function renderObject( object, scene, camera, geometry, material, group ) {

				object.onBeforeRender( _this, scene, camera, geometry, material, group );

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				material.onBeforeRender( _this, scene, camera, geometry, object, group );

				if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

					material.side = BackSide;
					material.needsUpdate = true;
					_this.renderBufferDirect( camera, scene, geometry, material, object, group );

					material.side = FrontSide;
					material.needsUpdate = true;
					_this.renderBufferDirect( camera, scene, geometry, material, object, group );

					material.side = DoubleSide;

				} else {

					_this.renderBufferDirect( camera, scene, geometry, material, object, group );

				}

				object.onAfterRender( _this, scene, camera, geometry, material, group );

			}

			function getProgram( material, scene, object ) {

				if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

				const materialProperties = properties.get( material );

				const lights = currentRenderState.state.lights;
				const shadowsArray = currentRenderState.state.shadowsArray;

				const lightsStateVersion = lights.state.version;

				const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
				const programCacheKey = programCache.getProgramCacheKey( parameters );

				let programs = materialProperties.programs;

				// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

				materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
				materialProperties.fog = scene.fog;
				materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );
				materialProperties.envMapRotation = ( materialProperties.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;

				if ( programs === undefined ) {

					// new material

					material.addEventListener( 'dispose', onMaterialDispose );

					programs = new Map();
					materialProperties.programs = programs;

				}

				let program = programs.get( programCacheKey );

				if ( program !== undefined ) {

					// early out if program and light state is identical

					if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

						updateCommonMaterialProperties( material, parameters );

						return program;

					}

				} else {

					parameters.uniforms = programCache.getUniforms( material );

					material.onBuild( object, parameters, _this );

					material.onBeforeCompile( parameters, _this );

					program = programCache.acquireProgram( parameters, programCacheKey );
					programs.set( programCacheKey, program );

					materialProperties.uniforms = parameters.uniforms;

				}

				const uniforms = materialProperties.uniforms;

				if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

					uniforms.clippingPlanes = clipping.uniform;

				}

				updateCommonMaterialProperties( material, parameters );

				// store the light setup it was created for

				materialProperties.needsLights = materialNeedsLights( material );
				materialProperties.lightsStateVersion = lightsStateVersion;

				if ( materialProperties.needsLights ) {

					// wire up the material to this renderer's lighting state

					uniforms.ambientLightColor.value = lights.state.ambient;
					uniforms.lightProbe.value = lights.state.probe;
					uniforms.directionalLights.value = lights.state.directional;
					uniforms.directionalLightShadows.value = lights.state.directionalShadow;
					uniforms.spotLights.value = lights.state.spot;
					uniforms.spotLightShadows.value = lights.state.spotShadow;
					uniforms.rectAreaLights.value = lights.state.rectArea;
					uniforms.ltc_1.value = lights.state.rectAreaLTC1;
					uniforms.ltc_2.value = lights.state.rectAreaLTC2;
					uniforms.pointLights.value = lights.state.point;
					uniforms.pointLightShadows.value = lights.state.pointShadow;
					uniforms.hemisphereLights.value = lights.state.hemi;

					uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
					uniforms.spotShadowMap.value = lights.state.spotShadowMap;
					uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
					uniforms.spotLightMap.value = lights.state.spotLightMap;
					uniforms.pointShadowMap.value = lights.state.pointShadowMap;
					uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
					// TODO (abelnation): add area lights shadow info to uniforms

				}

				materialProperties.currentProgram = program;
				materialProperties.uniformsList = null;

				return program;

			}

			function getUniformList( materialProperties ) {

				if ( materialProperties.uniformsList === null ) {

					const progUniforms = materialProperties.currentProgram.getUniforms();
					materialProperties.uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, materialProperties.uniforms );

				}

				return materialProperties.uniformsList;

			}

			function updateCommonMaterialProperties( material, parameters ) {

				const materialProperties = properties.get( material );

				materialProperties.outputColorSpace = parameters.outputColorSpace;
				materialProperties.batching = parameters.batching;
				materialProperties.instancing = parameters.instancing;
				materialProperties.instancingColor = parameters.instancingColor;
				materialProperties.instancingMorph = parameters.instancingMorph;
				materialProperties.skinning = parameters.skinning;
				materialProperties.morphTargets = parameters.morphTargets;
				materialProperties.morphNormals = parameters.morphNormals;
				materialProperties.morphColors = parameters.morphColors;
				materialProperties.morphTargetsCount = parameters.morphTargetsCount;
				materialProperties.numClippingPlanes = parameters.numClippingPlanes;
				materialProperties.numIntersection = parameters.numClipIntersection;
				materialProperties.vertexAlphas = parameters.vertexAlphas;
				materialProperties.vertexTangents = parameters.vertexTangents;
				materialProperties.toneMapping = parameters.toneMapping;

			}

			function setProgram( camera, scene, geometry, material, object ) {

				if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

				textures.resetTextureUnits();

				const fog = scene.fog;
				const environment = material.isMeshStandardMaterial ? scene.environment : null;
				const colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );
				const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
				const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
				const vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );
				const morphTargets = !! geometry.morphAttributes.position;
				const morphNormals = !! geometry.morphAttributes.normal;
				const morphColors = !! geometry.morphAttributes.color;

				let toneMapping = NoToneMapping;

				if ( material.toneMapped ) {

					if ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {

						toneMapping = _this.toneMapping;

					}

				}

				const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
				const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

				const materialProperties = properties.get( material );
				const lights = currentRenderState.state.lights;

				if ( _clippingEnabled === true ) {

					if ( _localClippingEnabled === true || camera !== _currentCamera ) {

						const useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						clipping.setState( material, camera, useCache );

					}

				}

				//

				let needsProgramChange = false;

				if ( material.version === materialProperties.__version ) {

					if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

						needsProgramChange = true;

					} else if ( materialProperties.outputColorSpace !== colorSpace ) {

						needsProgramChange = true;

					} else if ( object.isBatchedMesh && materialProperties.batching === false ) {

						needsProgramChange = true;

					} else if ( ! object.isBatchedMesh && materialProperties.batching === true ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

						needsProgramChange = true;

					} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

						needsProgramChange = true;

					} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

						needsProgramChange = true;

					} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancingMorph === true && object.morphTexture === null ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancingMorph === false && object.morphTexture !== null ) {

						needsProgramChange = true;

					} else if ( materialProperties.envMap !== envMap ) {

						needsProgramChange = true;

					} else if ( material.fog === true && materialProperties.fog !== fog ) {

						needsProgramChange = true;

					} else if ( materialProperties.numClippingPlanes !== undefined &&
						( materialProperties.numClippingPlanes !== clipping.numPlanes ||
						materialProperties.numIntersection !== clipping.numIntersection ) ) {

						needsProgramChange = true;

					} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

						needsProgramChange = true;

					} else if ( materialProperties.vertexTangents !== vertexTangents ) {

						needsProgramChange = true;

					} else if ( materialProperties.morphTargets !== morphTargets ) {

						needsProgramChange = true;

					} else if ( materialProperties.morphNormals !== morphNormals ) {

						needsProgramChange = true;

					} else if ( materialProperties.morphColors !== morphColors ) {

						needsProgramChange = true;

					} else if ( materialProperties.toneMapping !== toneMapping ) {

						needsProgramChange = true;

					} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {

						needsProgramChange = true;

					}

				} else {

					needsProgramChange = true;
					materialProperties.__version = material.version;

				}

				//

				let program = materialProperties.currentProgram;

				if ( needsProgramChange === true ) {

					program = getProgram( material, scene, object );

				}

				let refreshProgram = false;
				let refreshMaterial = false;
				let refreshLights = false;

				const p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.uniforms;

				if ( state.useProgram( program.program ) ) {

					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;

				}

				if ( material.id !== _currentMaterialId ) {

					_currentMaterialId = material.id;

					refreshMaterial = true;

				}

				if ( refreshProgram || _currentCamera !== camera ) {

					// common camera uniforms

					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

					const uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

					if ( capabilities.logarithmicDepthBuffer ) {

						p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

					}

					// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067

					if ( material.isMeshPhongMaterial ||
						material.isMeshToonMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshBasicMaterial ||
						material.isMeshStandardMaterial ||
						material.isShaderMaterial ) {

						p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

					}

					if ( _currentCamera !== camera ) {

						_currentCamera = camera;

						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:

						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done

					}

				}

				// skinning and morph target uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone and morph texture must go before other textures
				// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

				if ( object.isSkinnedMesh ) {

					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

					const skeleton = object.skeleton;

					if ( skeleton ) {

						if ( capabilities.floatVertexTextures ) {

							if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

							p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );

						} else {

							console.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );

						}

					}

				}

				if ( object.isBatchedMesh ) {

					p_uniforms.setOptional( _gl, object, 'batchingTexture' );
					p_uniforms.setValue( _gl, 'batchingTexture', object._matricesTexture, textures );

				}

				const morphAttributes = geometry.morphAttributes;

				if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {

					morphtargets.update( object, geometry, program );

				}

				if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

					materialProperties.receiveShadow = object.receiveShadow;
					p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

				}

				// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512

				if ( material.isMeshGouraudMaterial && material.envMap !== null ) {

					m_uniforms.envMap.value = envMap;

					m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

				}

				if ( refreshMaterial ) {

					p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

					if ( materialProperties.needsLights ) {

						// the current material requires lighting info

						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required

						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

					}

					// refresh uniforms common to several materials

					if ( fog && material.fog === true ) {

						materials.refreshFogUniforms( m_uniforms, fog );

					}

					materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );

					WebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );

				}

				if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

					WebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );
					material.uniformsNeedUpdate = false;

				}

				if ( material.isSpriteMaterial ) {

					p_uniforms.setValue( _gl, 'center', object.center );

				}

				// common matrices

				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

				// UBOs

				if ( material.isShaderMaterial || material.isRawShaderMaterial ) {

					const groups = material.uniformsGroups;

					for ( let i = 0, l = groups.length; i < l; i ++ ) {

						if ( capabilities.isWebGL2 ) {

							const group = groups[ i ];

							uniformsGroups.update( group, program );
							uniformsGroups.bind( group, program );

						} else {

							console.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );

						}

					}

				}

				return program;

			}

			// If uniforms are marked as clean, they don't need to be loaded to the GPU.

			function markUniformsLightsNeedsUpdate( uniforms, value ) {

				uniforms.ambientLightColor.needsUpdate = value;
				uniforms.lightProbe.needsUpdate = value;

				uniforms.directionalLights.needsUpdate = value;
				uniforms.directionalLightShadows.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.pointLightShadows.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.spotLightShadows.needsUpdate = value;
				uniforms.rectAreaLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;

			}

			function materialNeedsLights( material ) {

				return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial || material.isShadowMaterial ||
					( material.isShaderMaterial && material.lights === true );

			}

			this.getActiveCubeFace = function () {

				return _currentActiveCubeFace;

			};

			this.getActiveMipmapLevel = function () {

				return _currentActiveMipmapLevel;

			};

			this.getRenderTarget = function () {

				return _currentRenderTarget;

			};

			this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {

				properties.get( renderTarget.texture ).__webglTexture = colorTexture;
				properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;

				const renderTargetProperties = properties.get( renderTarget );
				renderTargetProperties.__hasExternalTextures = true;

				renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

				if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {

					// The multisample_render_to_texture extension doesn't work properly if there
					// are midframe flushes and an external depth buffer. Disable use of the extension.
					if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {

						console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
						renderTargetProperties.__useRenderToTexture = false;

					}

				}

			};

			this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {

				const renderTargetProperties = properties.get( renderTarget );
				renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
				renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

			};

			this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

				_currentRenderTarget = renderTarget;
				_currentActiveCubeFace = activeCubeFace;
				_currentActiveMipmapLevel = activeMipmapLevel;

				let useDefaultFramebuffer = true;
				let framebuffer = null;
				let isCube = false;
				let isRenderTarget3D = false;

				if ( renderTarget ) {

					const renderTargetProperties = properties.get( renderTarget );

					if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {

						// We need to make sure to rebind the framebuffer.
						state.bindFramebuffer( _gl.FRAMEBUFFER, null );
						useDefaultFramebuffer = false;

					} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {

						textures.setupRenderTarget( renderTarget );

					} else if ( renderTargetProperties.__hasExternalTextures ) {

						// Color and depth texture must be rebound in order for the swapchain to update.
						textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );

					}

					const texture = renderTarget.texture;

					if ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

						isRenderTarget3D = true;

					}

					const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

					if ( renderTarget.isWebGLCubeRenderTarget ) {

						if ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {

							framebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];

						} else {

							framebuffer = __webglFramebuffer[ activeCubeFace ];

						}

						isCube = true;

					} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {

						framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

					} else {

						if ( Array.isArray( __webglFramebuffer ) ) {

							framebuffer = __webglFramebuffer[ activeMipmapLevel ];

						} else {

							framebuffer = __webglFramebuffer;

						}

					}

					_currentViewport.copy( renderTarget.viewport );
					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;

				} else {

					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
					_currentScissorTest = _scissorTest;

				}

				const framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {

					state.drawBuffers( renderTarget, framebuffer );

				}

				state.viewport( _currentViewport );
				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );

				if ( isCube ) {

					const textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

				} else if ( isRenderTarget3D ) {

					const textureProperties = properties.get( renderTarget.texture );
					const layer = activeCubeFace || 0;
					_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );

				}

				_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

			};

			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

				if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;

				}

				let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

					framebuffer = framebuffer[ activeCubeFaceIndex ];

				}

				if ( framebuffer ) {

					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					try {

						const texture = renderTarget.texture;
						const textureFormat = texture.format;
						const textureType = texture.type;

						if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;

						}

						const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );

						if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)
							! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
							! halfFloatSupportedByExt ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;

						}

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

						}

					} finally {

						// restore framebuffer of current render target if necessary

						const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
						state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					}

				}

			};

			this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {

				const levelScale = Math.pow( 2, - level );
				const width = Math.floor( texture.image.width * levelScale );
				const height = Math.floor( texture.image.height * levelScale );

				textures.setTexture2D( texture, 0 );

				_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height );

				state.unbindTexture();

			};

			this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {

				const width = srcTexture.image.width;
				const height = srcTexture.image.height;
				const glFormat = utils.convert( dstTexture.format );
				const glType = utils.convert( dstTexture.type );

				textures.setTexture2D( dstTexture, 0 );

				// As another texture upload may have changed pixelStorei
				// parameters, make sure they are correct for the dstTexture
				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

				if ( srcTexture.isDataTexture ) {

					_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

				} else {

					if ( srcTexture.isCompressedTexture ) {

						_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

					} else {

						_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );

					}

				}

				// Generate mipmaps only when copying level 0
				if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );

				state.unbindTexture();

			};

			this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {

				if ( _this.isWebGL1Renderer ) {

					console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
					return;

				}

				const width = Math.round( sourceBox.max.x - sourceBox.min.x );
				const height = Math.round( sourceBox.max.y - sourceBox.min.y );
				const depth = sourceBox.max.z - sourceBox.min.z + 1;
				const glFormat = utils.convert( dstTexture.format );
				const glType = utils.convert( dstTexture.type );
				let glTarget;

				if ( dstTexture.isData3DTexture ) {

					textures.setTexture3D( dstTexture, 0 );
					glTarget = _gl.TEXTURE_3D;

				} else if ( dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture ) {

					textures.setTexture2DArray( dstTexture, 0 );
					glTarget = _gl.TEXTURE_2D_ARRAY;

				} else {

					console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
					return;

				}

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

				const unpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );
				const unpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );
				const unpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );
				const unpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );
				const unpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );

				const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ level ] : srcTexture.image;

				_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );
				_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );
				_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, sourceBox.min.x );
				_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, sourceBox.min.y );
				_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, sourceBox.min.z );

				if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {

					_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );

				} else {

					if ( dstTexture.isCompressedArrayTexture ) {

						_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );

					} else {

						_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );

					}

				}

				_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, unpackRowLen );
				_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight );
				_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, unpackSkipPixels );
				_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, unpackSkipRows );
				_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, unpackSkipImages );

				// Generate mipmaps only when copying level 0
				if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );

				state.unbindTexture();

			};

			this.initTexture = function ( texture ) {

				if ( texture.isCubeTexture ) {

					textures.setTextureCube( texture, 0 );

				} else if ( texture.isData3DTexture ) {

					textures.setTexture3D( texture, 0 );

				} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

					textures.setTexture2DArray( texture, 0 );

				} else {

					textures.setTexture2D( texture, 0 );

				}

				state.unbindTexture();

			};

			this.resetState = function () {

				_currentActiveCubeFace = 0;
				_currentActiveMipmapLevel = 0;
				_currentRenderTarget = null;

				state.reset();
				bindingStates.reset();

			};

			if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

				__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

			}

		}

		get coordinateSystem() {

			return WebGLCoordinateSystem;

		}

		get outputColorSpace() {

			return this._outputColorSpace;

		}

		set outputColorSpace( colorSpace ) {

			this._outputColorSpace = colorSpace;

			const gl = this.getContext();
			gl.drawingBufferColorSpace = colorSpace === DisplayP3ColorSpace ? 'display-p3' : 'srgb';
			gl.unpackColorSpace = ColorManagement.workingColorSpace === LinearDisplayP3ColorSpace ? 'display-p3' : 'srgb';

		}

		get useLegacyLights() { // @deprecated, r155

			console.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );
			return this._useLegacyLights;

		}

		set useLegacyLights( value ) { // @deprecated, r155

			console.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );
			this._useLegacyLights = value;

		}

	}

	class WebGL1Renderer extends WebGLRenderer {}

	WebGL1Renderer.prototype.isWebGL1Renderer = true;

	class Scene extends Object3D {

		constructor() {

			super();

			this.isScene = true;

			this.type = 'Scene';

			this.background = null;
			this.environment = null;
			this.fog = null;

			this.backgroundBlurriness = 0;
			this.backgroundIntensity = 1;
			this.backgroundRotation = new Euler();
			this.environmentRotation = new Euler();

			this.overrideMaterial = null;

			if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

				__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

			}

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.environment !== null ) this.environment = source.environment.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();

			this.backgroundBlurriness = source.backgroundBlurriness;
			this.backgroundIntensity = source.backgroundIntensity;
			this.backgroundRotation.copy( source.backgroundRotation );
			this.environmentRotation.copy( source.environmentRotation );

			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
			if ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;
			if ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;

			data.object.backgroundRotation = this.backgroundRotation.toArray();
			data.object.environmentRotation = this.environmentRotation.toArray();

			return data;

		}

	}

	class InterleavedBuffer {

		constructor( array, stride ) {

			this.isInterleavedBuffer = true;

			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;

			this.usage = StaticDrawUsage;
			this._updateRange = { offset: 0, count: - 1 };
			this.updateRanges = [];

			this.version = 0;

			this.uuid = generateUUID();

		}

		onUploadCallback() {}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

		get updateRange() {

			warnOnce( 'THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.' ); // @deprecated, r159
			return this._updateRange;

		}

		setUsage( value ) {

			this.usage = value;

			return this;

		}

		addUpdateRange( start, count ) {

			this.updateRanges.push( { start, count } );

		}

		clearUpdateRanges() {

			this.updateRanges.length = 0;

		}

		copy( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.usage = source.usage;

			return this;

		}

		copyAt( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( let i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		}

		set( value, offset = 0 ) {

			this.array.set( value, offset );

			return this;

		}

		clone( data ) {

			if ( data.arrayBuffers === undefined ) {

				data.arrayBuffers = {};

			}

			if ( this.array.buffer._uuid === undefined ) {

				this.array.buffer._uuid = generateUUID();

			}

			if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

				data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;

			}

			const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );

			const ib = new this.constructor( array, this.stride );
			ib.setUsage( this.usage );

			return ib;

		}

		onUpload( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

		toJSON( data ) {

			if ( data.arrayBuffers === undefined ) {

				data.arrayBuffers = {};

			}

			// generate UUID for array buffer if necessary

			if ( this.array.buffer._uuid === undefined ) {

				this.array.buffer._uuid = generateUUID();

			}

			if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

				data.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );

			}

			//

			return {
				uuid: this.uuid,
				buffer: this.array.buffer._uuid,
				type: this.array.constructor.name,
				stride: this.stride
			};

		}

	}

	const _vector$6 = /*@__PURE__*/ new Vector3();

	class InterleavedBufferAttribute {

		constructor( interleavedBuffer, itemSize, offset, normalized = false ) {

			this.isInterleavedBufferAttribute = true;

			this.name = '';

			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;

			this.normalized = normalized;

		}

		get count() {

			return this.data.count;

		}

		get array() {

			return this.data.array;

		}

		set needsUpdate( value ) {

			this.data.needsUpdate = value;

		}

		applyMatrix4( m ) {

			for ( let i = 0, l = this.data.count; i < l; i ++ ) {

				_vector$6.fromBufferAttribute( this, i );

				_vector$6.applyMatrix4( m );

				this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

			}

			return this;

		}

		applyNormalMatrix( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$6.fromBufferAttribute( this, i );

				_vector$6.applyNormalMatrix( m );

				this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

			}

			return this;

		}

		transformDirection( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$6.fromBufferAttribute( this, i );

				_vector$6.transformDirection( m );

				this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );

			}

			return this;

		}

		getComponent( index, component ) {

			let value = this.array[ index * this.data.stride + this.offset + component ];

			if ( this.normalized ) value = denormalize( value, this.array );

			return value;

		}

		setComponent( index, component, value ) {

			if ( this.normalized ) value = normalize$1( value, this.array );

			this.data.array[ index * this.data.stride + this.offset + component ] = value;

			return this;

		}

		setX( index, x ) {

			if ( this.normalized ) x = normalize$1( x, this.array );

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		}

		setY( index, y ) {

			if ( this.normalized ) y = normalize$1( y, this.array );

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		}

		setZ( index, z ) {

			if ( this.normalized ) z = normalize$1( z, this.array );

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		}

		setW( index, w ) {

			if ( this.normalized ) w = normalize$1( w, this.array );

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		}

		getX( index ) {

			let x = this.data.array[ index * this.data.stride + this.offset ];

			if ( this.normalized ) x = denormalize( x, this.array );

			return x;

		}

		getY( index ) {

			let y = this.data.array[ index * this.data.stride + this.offset + 1 ];

			if ( this.normalized ) y = denormalize( y, this.array );

			return y;

		}

		getZ( index ) {

			let z = this.data.array[ index * this.data.stride + this.offset + 2 ];

			if ( this.normalized ) z = denormalize( z, this.array );

			return z;

		}

		getW( index ) {

			let w = this.data.array[ index * this.data.stride + this.offset + 3 ];

			if ( this.normalized ) w = denormalize( w, this.array );

			return w;

		}

		setXY( index, x, y ) {

			index = index * this.data.stride + this.offset;

			if ( this.normalized ) {

				x = normalize$1( x, this.array );
				y = normalize$1( y, this.array );

			}

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		}

		setXYZ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			if ( this.normalized ) {

				x = normalize$1( x, this.array );
				y = normalize$1( y, this.array );
				z = normalize$1( z, this.array );

			}

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		}

		setXYZW( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			if ( this.normalized ) {

				x = normalize$1( x, this.array );
				y = normalize$1( y, this.array );
				z = normalize$1( z, this.array );
				w = normalize$1( w, this.array );

			}

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

		clone( data ) {

			if ( data === undefined ) {

				console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );

				const array = [];

				for ( let i = 0; i < this.count; i ++ ) {

					const index = i * this.data.stride + this.offset;

					for ( let j = 0; j < this.itemSize; j ++ ) {

						array.push( this.data.array[ index + j ] );

					}

				}

				return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );

			} else {

				if ( data.interleavedBuffers === undefined ) {

					data.interleavedBuffers = {};

				}

				if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

					data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );

				}

				return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );

			}

		}

		toJSON( data ) {

			if ( data === undefined ) {

				console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );

				const array = [];

				for ( let i = 0; i < this.count; i ++ ) {

					const index = i * this.data.stride + this.offset;

					for ( let j = 0; j < this.itemSize; j ++ ) {

						array.push( this.data.array[ index + j ] );

					}

				}

				// de-interleave data and save it as an ordinary buffer attribute for now

				return {
					itemSize: this.itemSize,
					type: this.array.constructor.name,
					array: array,
					normalized: this.normalized
				};

			} else {

				// save as true interleaved attribute

				if ( data.interleavedBuffers === undefined ) {

					data.interleavedBuffers = {};

				}

				if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

					data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );

				}

				return {
					isInterleavedBufferAttribute: true,
					itemSize: this.itemSize,
					data: this.data.uuid,
					offset: this.offset,
					normalized: this.normalized
				};

			}

		}

	}

	class CanvasTexture extends Texture$1 {

		constructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

			super( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.isCanvasTexture = true;

			this.needsUpdate = true;

		}

	}

	const _matrix = /*@__PURE__*/ new Matrix4();

	class Raycaster {

		constructor( origin, direction, near = 0, far = Infinity ) {

			this.ray = new Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)

			this.near = near;
			this.far = far;
			this.camera = null;
			this.layers = new Layers();

			this.params = {
				Mesh: {},
				Line: { threshold: 1 },
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};

		}

		set( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		}

		setFromCamera( coords, camera ) {

			if ( camera.isPerspectiveCamera ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
				this.camera = camera;

			} else if ( camera.isOrthographicCamera ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
				this.camera = camera;

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );

			}

		}

		setFromXRController( controller ) {

			_matrix.identity().extractRotation( controller.matrixWorld );

			this.ray.origin.setFromMatrixPosition( controller.matrixWorld );
			this.ray.direction.set( 0, 0, - 1 ).applyMatrix4( _matrix );

			return this;

		}

		intersectObject( object, recursive = true, intersects = [] ) {

			intersect( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		}

		intersectObjects( objects, recursive = true, intersects = [] ) {

			for ( let i = 0, l = objects.length; i < l; i ++ ) {

				intersect( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersect( object, raycaster, intersects, recursive ) {

		if ( object.layers.test( raycaster.layers ) ) {

			object.raycast( raycaster, intersects );

		}

		if ( recursive === true ) {

			const children = object.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				intersect( children[ i ], raycaster, intersects, true );

			}

		}

	}

	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
			revision: REVISION,
		} } ) );

	}

	if ( typeof window !== 'undefined' ) {

		if ( window.__THREE__ ) {

			console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

		} else {

			window.__THREE__ = REVISION;

		}

	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	if (typeof window !== 'undefined' && window.THREE) {
	    let prevRequire = window.require;
	    window.require = (x) => {
	        if (prevRequire)
	            return prevRequire(x);
	        else if (x === "three")
	            return window.THREE;
	    };
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class StringSet {
	    entries = {};
	    size = 0;
	    add(value) {
	        let contains = this.entries[value];
	        this.entries[value] = true;
	        if (!contains) {
	            this.size++;
	            return true;
	        }
	        return false;
	    }
	    addAll(values) {
	        let oldSize = this.size;
	        for (var i = 0, n = values.length; i < n; i++)
	            this.add(values[i]);
	        return oldSize != this.size;
	    }
	    contains(value) {
	        return this.entries[value];
	    }
	    clear() {
	        this.entries = {};
	        this.size = 0;
	    }
	}
	class Color {
	    r;
	    g;
	    b;
	    a;
	    static WHITE = new Color(1, 1, 1, 1);
	    static RED = new Color(1, 0, 0, 1);
	    static GREEN = new Color(0, 1, 0, 1);
	    static BLUE = new Color(0, 0, 1, 1);
	    static MAGENTA = new Color(1, 0, 1, 1);
	    constructor(r = 0, g = 0, b = 0, a = 0) {
	        this.r = r;
	        this.g = g;
	        this.b = b;
	        this.a = a;
	    }
	    set(r, g, b, a) {
	        this.r = r;
	        this.g = g;
	        this.b = b;
	        this.a = a;
	        return this.clamp();
	    }
	    setFromColor(c) {
	        this.r = c.r;
	        this.g = c.g;
	        this.b = c.b;
	        this.a = c.a;
	        return this;
	    }
	    setFromString(hex) {
	        hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;
	        this.r = parseInt(hex.substr(0, 2), 16) / 255;
	        this.g = parseInt(hex.substr(2, 2), 16) / 255;
	        this.b = parseInt(hex.substr(4, 2), 16) / 255;
	        this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;
	        return this;
	    }
	    add(r, g, b, a) {
	        this.r += r;
	        this.g += g;
	        this.b += b;
	        this.a += a;
	        return this.clamp();
	    }
	    clamp() {
	        if (this.r < 0)
	            this.r = 0;
	        else if (this.r > 1)
	            this.r = 1;
	        if (this.g < 0)
	            this.g = 0;
	        else if (this.g > 1)
	            this.g = 1;
	        if (this.b < 0)
	            this.b = 0;
	        else if (this.b > 1)
	            this.b = 1;
	        if (this.a < 0)
	            this.a = 0;
	        else if (this.a > 1)
	            this.a = 1;
	        return this;
	    }
	    static rgba8888ToColor(color, value) {
	        color.r = ((value & 0xff000000) >>> 24) / 255;
	        color.g = ((value & 0x00ff0000) >>> 16) / 255;
	        color.b = ((value & 0x0000ff00) >>> 8) / 255;
	        color.a = ((value & 0x000000ff)) / 255;
	    }
	    static rgb888ToColor(color, value) {
	        color.r = ((value & 0x00ff0000) >>> 16) / 255;
	        color.g = ((value & 0x0000ff00) >>> 8) / 255;
	        color.b = ((value & 0x000000ff)) / 255;
	    }
	    toRgb888() {
	        const hex = (x) => ("0" + (x * 255).toString(16)).slice(-2);
	        return Number("0x" + hex(this.r) + hex(this.g) + hex(this.b));
	    }
	    static fromString(hex) {
	        return new Color().setFromString(hex);
	    }
	}
	class MathUtils {
	    static PI = 3.1415927;
	    static PI2 = MathUtils.PI * 2;
	    static invPI2 = 1 / MathUtils.PI2;
	    static radiansToDegrees = 180 / MathUtils.PI;
	    static radDeg = MathUtils.radiansToDegrees;
	    static degreesToRadians = MathUtils.PI / 180;
	    static degRad = MathUtils.degreesToRadians;
	    static clamp(value, min, max) {
	        if (value < min)
	            return min;
	        if (value > max)
	            return max;
	        return value;
	    }
	    static cosDeg(degrees) {
	        return Math.cos(degrees * MathUtils.degRad);
	    }
	    static sinDeg(degrees) {
	        return Math.sin(degrees * MathUtils.degRad);
	    }
	    static atan2Deg(y, x) {
	        return Math.atan2(y, x) * MathUtils.degRad;
	    }
	    static signum(value) {
	        return value > 0 ? 1 : value < 0 ? -1 : 0;
	    }
	    static toInt(x) {
	        return x > 0 ? Math.floor(x) : Math.ceil(x);
	    }
	    static cbrt(x) {
	        let y = Math.pow(Math.abs(x), 1 / 3);
	        return x < 0 ? -y : y;
	    }
	    static randomTriangular(min, max) {
	        return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);
	    }
	    static randomTriangularWith(min, max, mode) {
	        let u = Math.random();
	        let d = max - min;
	        if (u <= (mode - min) / d)
	            return min + Math.sqrt(u * d * (mode - min));
	        return max - Math.sqrt((1 - u) * d * (max - mode));
	    }
	    static isPowerOfTwo(value) {
	        return value && (value & (value - 1)) === 0;
	    }
	}
	class Utils {
	    static SUPPORTS_TYPED_ARRAYS = typeof (Float32Array) !== "undefined";
	    static arrayCopy(source, sourceStart, dest, destStart, numElements) {
	        for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {
	            dest[j] = source[i];
	        }
	    }
	    static arrayFill(array, fromIndex, toIndex, value) {
	        for (let i = fromIndex; i < toIndex; i++)
	            array[i] = value;
	    }
	    static setArraySize(array, size, value = 0) {
	        let oldSize = array.length;
	        if (oldSize == size)
	            return array;
	        array.length = size;
	        if (oldSize < size) {
	            for (let i = oldSize; i < size; i++)
	                array[i] = value;
	        }
	        return array;
	    }
	    static ensureArrayCapacity(array, size, value = 0) {
	        if (array.length >= size)
	            return array;
	        return Utils.setArraySize(array, size, value);
	    }
	    static newArray(size, defaultValue) {
	        let array = new Array(size);
	        for (let i = 0; i < size; i++)
	            array[i] = defaultValue;
	        return array;
	    }
	    static newFloatArray(size) {
	        if (Utils.SUPPORTS_TYPED_ARRAYS)
	            return new Float32Array(size);
	        else {
	            let array = new Array(size);
	            for (let i = 0; i < array.length; i++)
	                array[i] = 0;
	            return array;
	        }
	    }
	    static newShortArray(size) {
	        if (Utils.SUPPORTS_TYPED_ARRAYS)
	            return new Int16Array(size);
	        else {
	            let array = new Array(size);
	            for (let i = 0; i < array.length; i++)
	                array[i] = 0;
	            return array;
	        }
	    }
	    static toFloatArray(array) {
	        return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;
	    }
	    static toSinglePrecision(value) {
	        return Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;
	    }
	    // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109
	    static webkit602BugfixHelper(alpha, blend) {
	    }
	    static contains(array, element, identity = true) {
	        for (var i = 0; i < array.length; i++)
	            if (array[i] == element)
	                return true;
	        return false;
	    }
	    static enumValue(type, name) {
	        return type[name[0].toUpperCase() + name.slice(1)];
	    }
	}
	class Pool {
	    items = new Array();
	    instantiator;
	    constructor(instantiator) {
	        this.instantiator = instantiator;
	    }
	    obtain() {
	        return this.items.length > 0 ? this.items.pop() : this.instantiator();
	    }
	    free(item) {
	        if (item.reset)
	            item.reset();
	        this.items.push(item);
	    }
	    freeAll(items) {
	        for (let i = 0; i < items.length; i++)
	            this.free(items[i]);
	    }
	    clear() {
	        this.items.length = 0;
	    }
	}
	class Vector2 {
	    x;
	    y;
	    constructor(x = 0, y = 0) {
	        this.x = x;
	        this.y = y;
	    }
	    set(x, y) {
	        this.x = x;
	        this.y = y;
	        return this;
	    }
	    length() {
	        let x = this.x;
	        let y = this.y;
	        return Math.sqrt(x * x + y * y);
	    }
	    normalize() {
	        let len = this.length();
	        if (len != 0) {
	            this.x /= len;
	            this.y /= len;
	        }
	        return this;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** The base class for all attachments. */
	class Attachment {
	    name;
	    constructor(name) {
	        if (!name)
	            throw new Error("name cannot be null.");
	        this.name = name;
	    }
	}
	/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's
	 * {@link Slot#deform}. */
	class VertexAttachment extends Attachment {
	    static nextID = 0;
	    /** The unique ID for this attachment. */
	    id = VertexAttachment.nextID++;
	    /** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting
	     * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null
	     * if this attachment has no weights. */
	    bones = null;
	    /** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`
	     * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting
	     * each vertex. */
	    vertices = [];
	    /** The maximum number of world vertex values that can be output by
	     * {@link #computeWorldVertices()} using the `count` parameter. */
	    worldVerticesLength = 0;
	    /** Timelines for the timeline attachment are also applied to this attachment.
	     * May be null if no attachment-specific timelines should be applied. */
	    timelineAttachment = this;
	    constructor(name) {
	        super(name);
	    }
	    /** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is
	     * not empty, it is used to deform the vertices.
	     *
	     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine
	     * Runtimes Guide.
	     * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.
	     * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.
	     * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *
	     *           `stride` / 2.
	     * @param offset The `worldVertices` index to begin writing values.
	     * @param stride The number of `worldVertices` entries between the value pairs written. */
	    computeWorldVertices(slot, start, count, worldVertices, offset, stride) {
	        count = offset + (count >> 1) * stride;
	        let skeleton = slot.bone.skeleton;
	        let deformArray = slot.deform;
	        let vertices = this.vertices;
	        let bones = this.bones;
	        if (!bones) {
	            if (deformArray.length > 0)
	                vertices = deformArray;
	            let bone = slot.bone;
	            let x = bone.worldX;
	            let y = bone.worldY;
	            let a = bone.a, b = bone.b, c = bone.c, d = bone.d;
	            for (let v = start, w = offset; w < count; v += 2, w += stride) {
	                let vx = vertices[v], vy = vertices[v + 1];
	                worldVertices[w] = vx * a + vy * b + x;
	                worldVertices[w + 1] = vx * c + vy * d + y;
	            }
	            return;
	        }
	        let v = 0, skip = 0;
	        for (let i = 0; i < start; i += 2) {
	            let n = bones[v];
	            v += n + 1;
	            skip += n;
	        }
	        let skeletonBones = skeleton.bones;
	        if (deformArray.length == 0) {
	            for (let w = offset, b = skip * 3; w < count; w += stride) {
	                let wx = 0, wy = 0;
	                let n = bones[v++];
	                n += v;
	                for (; v < n; v++, b += 3) {
	                    let bone = skeletonBones[bones[v]];
	                    let vx = vertices[b], vy = vertices[b + 1], weight = vertices[b + 2];
	                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
	                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
	                }
	                worldVertices[w] = wx;
	                worldVertices[w + 1] = wy;
	            }
	        }
	        else {
	            let deform = deformArray;
	            for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {
	                let wx = 0, wy = 0;
	                let n = bones[v++];
	                n += v;
	                for (; v < n; v++, b += 3, f += 2) {
	                    let bone = skeletonBones[bones[v]];
	                    let vx = vertices[b] + deform[f], vy = vertices[b + 1] + deform[f + 1], weight = vertices[b + 2];
	                    wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
	                    wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
	                }
	                worldVertices[w] = wx;
	                worldVertices[w + 1] = wy;
	            }
	        }
	    }
	    /** Does not copy id (generated) or name (set on construction). **/
	    copyTo(attachment) {
	        if (this.bones) {
	            attachment.bones = new Array(this.bones.length);
	            Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);
	        }
	        else
	            attachment.bones = null;
	        if (this.vertices) {
	            attachment.vertices = Utils.newFloatArray(this.vertices.length);
	            Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);
	        }
	        attachment.worldVerticesLength = this.worldVerticesLength;
	        attachment.timelineAttachment = this.timelineAttachment;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class Sequence {
	    static _nextID = 0;
	    id = Sequence.nextID();
	    regions;
	    start = 0;
	    digits = 0;
	    /** The index of the region to show for the setup pose. */
	    setupIndex = 0;
	    constructor(count) {
	        this.regions = new Array(count);
	    }
	    copy() {
	        let copy = new Sequence(this.regions.length);
	        Utils.arrayCopy(this.regions, 0, copy.regions, 0, this.regions.length);
	        copy.start = this.start;
	        copy.digits = this.digits;
	        copy.setupIndex = this.setupIndex;
	        return copy;
	    }
	    apply(slot, attachment) {
	        let index = slot.sequenceIndex;
	        if (index == -1)
	            index = this.setupIndex;
	        if (index >= this.regions.length)
	            index = this.regions.length - 1;
	        let region = this.regions[index];
	        if (attachment.region != region) {
	            attachment.region = region;
	            attachment.updateRegion();
	        }
	    }
	    getPath(basePath, index) {
	        let result = basePath;
	        let frame = (this.start + index).toString();
	        for (let i = this.digits - frame.length; i > 0; i--)
	            result += "0";
	        result += frame;
	        return result;
	    }
	    static nextID() {
	        return Sequence._nextID++;
	    }
	}
	var SequenceMode;
	(function (SequenceMode) {
	    SequenceMode[SequenceMode["hold"] = 0] = "hold";
	    SequenceMode[SequenceMode["once"] = 1] = "once";
	    SequenceMode[SequenceMode["loop"] = 2] = "loop";
	    SequenceMode[SequenceMode["pingpong"] = 3] = "pingpong";
	    SequenceMode[SequenceMode["onceReverse"] = 4] = "onceReverse";
	    SequenceMode[SequenceMode["loopReverse"] = 5] = "loopReverse";
	    SequenceMode[SequenceMode["pingpongReverse"] = 6] = "pingpongReverse";
	})(SequenceMode || (SequenceMode = {}));
	const SequenceModeValues = [
	    SequenceMode.hold,
	    SequenceMode.once,
	    SequenceMode.loop,
	    SequenceMode.pingpong,
	    SequenceMode.onceReverse,
	    SequenceMode.loopReverse,
	    SequenceMode.pingpongReverse
	];

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** A simple container for a list of timelines and a name. */
	let Animation$1 = class Animation {
	    /** The animation's name, which is unique across all animations in the skeleton. */
	    name;
	    timelines = [];
	    timelineIds = new StringSet();
	    /** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */
	    duration;
	    constructor(name, timelines, duration) {
	        if (!name)
	            throw new Error("name cannot be null.");
	        this.name = name;
	        this.setTimelines(timelines);
	        this.duration = duration;
	    }
	    setTimelines(timelines) {
	        if (!timelines)
	            throw new Error("timelines cannot be null.");
	        this.timelines = timelines;
	        this.timelineIds.clear();
	        for (var i = 0; i < timelines.length; i++)
	            this.timelineIds.addAll(timelines[i].getPropertyIds());
	    }
	    hasTimeline(ids) {
	        for (let i = 0; i < ids.length; i++)
	            if (this.timelineIds.contains(ids[i]))
	                return true;
	        return false;
	    }
	    /** Applies all the animation's timelines to the specified skeleton.
	     *
	     * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.
	     * @param loop If true, the animation repeats after {@link #getDuration()}.
	     * @param events May be null to ignore fired events. */
	    apply(skeleton, lastTime, time, loop, events, alpha, blend, direction) {
	        if (!skeleton)
	            throw new Error("skeleton cannot be null.");
	        if (loop && this.duration != 0) {
	            time %= this.duration;
	            if (lastTime > 0)
	                lastTime %= this.duration;
	        }
	        let timelines = this.timelines;
	        for (let i = 0, n = timelines.length; i < n; i++)
	            timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);
	    }
	};
	/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`
	 * < 1.
	 *
	 * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */
	var MixBlend;
	(function (MixBlend) {
	    /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup
	     * value is set. */
	    MixBlend[MixBlend["setup"] = 0] = "setup";
	    /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to
	     * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or
	     * {@link AttachmentTimeline}, use the setup value before the first key.
	     *
	     * `first` is intended for the first animations applied, not for animations layered on top of those. */
	    MixBlend[MixBlend["first"] = 1] = "first";
	    /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is
	     * kept until the first key).
	     *
	     * `replace` is intended for animations layered on top of others, not for the first animations applied. */
	    MixBlend[MixBlend["replace"] = 2] = "replace";
	    /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key
	     * (the current value is kept until the first key).
	     *
	     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties
	     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else
	     * the property values will increase continually. */
	    MixBlend[MixBlend["add"] = 3] = "add";
	})(MixBlend || (MixBlend = {}));
	/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or
	 * mixing in toward 1 (the timeline's value).
	 *
	 * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */
	var MixDirection;
	(function (MixDirection) {
	    MixDirection[MixDirection["mixIn"] = 0] = "mixIn";
	    MixDirection[MixDirection["mixOut"] = 1] = "mixOut";
	})(MixDirection || (MixDirection = {}));
	const Property = {
	    rotate: 0,
	    x: 1,
	    y: 2,
	    scaleX: 3,
	    scaleY: 4,
	    shearX: 5,
	    shearY: 6,
	    inherit: 7,
	    rgb: 8,
	    alpha: 9,
	    rgb2: 10,
	    attachment: 11,
	    deform: 12,
	    event: 13,
	    drawOrder: 14,
	    ikConstraint: 15,
	    transformConstraint: 16,
	    pathConstraintPosition: 17,
	    pathConstraintSpacing: 18,
	    pathConstraintMix: 19,
	    physicsConstraintInertia: 20,
	    physicsConstraintStrength: 21,
	    physicsConstraintDamping: 22,
	    physicsConstraintMass: 23,
	    physicsConstraintWind: 24,
	    physicsConstraintGravity: 25,
	    physicsConstraintMix: 26,
	    physicsConstraintReset: 27,
	    sequence: 28,
	};
	/** The interface for all timelines. */
	let Timeline$1 = class Timeline {
	    propertyIds;
	    frames;
	    constructor(frameCount, propertyIds) {
	        this.propertyIds = propertyIds;
	        this.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());
	    }
	    getPropertyIds() {
	        return this.propertyIds;
	    }
	    getFrameEntries() {
	        return 1;
	    }
	    getFrameCount() {
	        return this.frames.length / this.getFrameEntries();
	    }
	    getDuration() {
	        return this.frames[this.frames.length - this.getFrameEntries()];
	    }
	    static search1(frames, time) {
	        let n = frames.length;
	        for (let i = 1; i < n; i++)
	            if (frames[i] > time)
	                return i - 1;
	        return n - 1;
	    }
	    static search(frames, time, step) {
	        let n = frames.length;
	        for (let i = step; i < n; i += step)
	            if (frames[i] > time)
	                return i - step;
	        return n - step;
	    }
	};
	/** The base class for timelines that use interpolation between key frame values. */
	class CurveTimeline extends Timeline$1 {
	    curves; // type, x, y, ...
	    constructor(frameCount, bezierCount, propertyIds) {
	        super(frameCount, propertyIds);
	        this.curves = Utils.newFloatArray(frameCount + bezierCount * 18 /*BEZIER_SIZE*/);
	        this.curves[frameCount - 1] = 1 /*STEPPED*/;
	    }
	    /** Sets the specified key frame to linear interpolation. */
	    setLinear(frame) {
	        this.curves[frame] = 0 /*LINEAR*/;
	    }
	    /** Sets the specified key frame to stepped interpolation. */
	    setStepped(frame) {
	        this.curves[frame] = 1 /*STEPPED*/;
	    }
	    /** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger
	     * than the actual number of Bezier curves. */
	    shrink(bezierCount) {
	        let size = this.getFrameCount() + bezierCount * 18 /*BEZIER_SIZE*/;
	        if (this.curves.length > size) {
	            let newCurves = Utils.newFloatArray(size);
	            Utils.arrayCopy(this.curves, 0, newCurves, 0, size);
	            this.curves = newCurves;
	        }
	    }
	    /** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than
	     * one curve per frame.
	     * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified
	     *           in the constructor), inclusive.
	     * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.
	     * @param value The index of the value for this frame that this curve is used for.
	     * @param time1 The time for the first key.
	     * @param value1 The value for the first key.
	     * @param cx1 The time for the first Bezier handle.
	     * @param cy1 The value for the first Bezier handle.
	     * @param cx2 The time of the second Bezier handle.
	     * @param cy2 The value for the second Bezier handle.
	     * @param time2 The time for the second key.
	     * @param value2 The value for the second key. */
	    setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {
	        let curves = this.curves;
	        let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;
	        if (value == 0)
	            curves[frame] = 2 /*BEZIER*/ + i;
	        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = (value1 - cy1 * 2 + cy2) * 0.03;
	        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;
	        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;
	        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;
	        let x = time1 + dx, y = value1 + dy;
	        for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {
	            curves[i] = x;
	            curves[i + 1] = y;
	            dx += ddx;
	            dy += ddy;
	            ddx += dddx;
	            ddy += dddy;
	            x += dx;
	            y += dy;
	        }
	    }
	    /** Returns the Bezier interpolated value for the specified time.
	     * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.
	     * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.
	     * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */
	    getBezierValue(time, frameIndex, valueOffset, i) {
	        let curves = this.curves;
	        if (curves[i] > time) {
	            let x = this.frames[frameIndex], y = this.frames[frameIndex + valueOffset];
	            return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);
	        }
	        let n = i + 18 /*BEZIER_SIZE*/;
	        for (i += 2; i < n; i += 2) {
	            if (curves[i] >= time) {
	                let x = curves[i - 2], y = curves[i - 1];
	                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);
	            }
	        }
	        frameIndex += this.getFrameEntries();
	        let x = curves[n - 2], y = curves[n - 1];
	        return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);
	    }
	}
	class CurveTimeline1 extends CurveTimeline {
	    constructor(frameCount, bezierCount, propertyId) {
	        super(frameCount, bezierCount, [propertyId]);
	    }
	    getFrameEntries() {
	        return 2 /*ENTRIES*/;
	    }
	    /** Sets the time and value for the specified frame.
	     * @param frame Between 0 and <code>frameCount</code>, inclusive.
	     * @param time The frame time in seconds. */
	    setFrame(frame, time, value) {
	        frame <<= 1;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*VALUE*/] = value;
	    }
	    /** Returns the interpolated value for the specified time. */
	    getCurveValue(time) {
	        let frames = this.frames;
	        let i = frames.length - 2;
	        for (let ii = 2; ii <= i; ii += 2) {
	            if (frames[ii] > time) {
	                i = ii - 2;
	                break;
	            }
	        }
	        let curveType = this.curves[i >> 1];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i], value = frames[i + 1 /*VALUE*/];
	                return value + (time - before) / (frames[i + 2 /*ENTRIES*/] - before) * (frames[i + 2 /*ENTRIES*/ + 1 /*VALUE*/] - value);
	            case 1 /*STEPPED*/:
	                return frames[i + 1 /*VALUE*/];
	        }
	        return this.getBezierValue(time, i, 1 /*VALUE*/, curveType - 2 /*BEZIER*/);
	    }
	    getRelativeValue(time, alpha, blend, current, setup) {
	        if (time < this.frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    return setup;
	                case MixBlend.first:
	                    return current + (setup - current) * alpha;
	            }
	            return current;
	        }
	        let value = this.getCurveValue(time);
	        switch (blend) {
	            case MixBlend.setup:
	                return setup + value * alpha;
	            case MixBlend.first:
	            case MixBlend.replace:
	                value += setup - current;
	        }
	        return current + value * alpha;
	    }
	    getAbsoluteValue(time, alpha, blend, current, setup) {
	        if (time < this.frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    return setup;
	                case MixBlend.first:
	                    return current + (setup - current) * alpha;
	            }
	            return current;
	        }
	        let value = this.getCurveValue(time);
	        if (blend == MixBlend.setup)
	            return setup + (value - setup) * alpha;
	        return current + (value - current) * alpha;
	    }
	    getAbsoluteValue2(time, alpha, blend, current, setup, value) {
	        if (time < this.frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    return setup;
	                case MixBlend.first:
	                    return current + (setup - current) * alpha;
	            }
	            return current;
	        }
	        if (blend == MixBlend.setup)
	            return setup + (value - setup) * alpha;
	        return current + (value - current) * alpha;
	    }
	    getScaleValue(time, alpha, blend, direction, current, setup) {
	        const frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    return setup;
	                case MixBlend.first:
	                    return current + (setup - current) * alpha;
	            }
	            return current;
	        }
	        let value = this.getCurveValue(time) * setup;
	        if (alpha == 1) {
	            if (blend == MixBlend.add)
	                return current + value - setup;
	            return value;
	        }
	        // Mixing out uses sign of setup or current pose, else use sign of key.
	        if (direction == MixDirection.mixOut) {
	            switch (blend) {
	                case MixBlend.setup:
	                    return setup + (Math.abs(value) * MathUtils.signum(setup) - setup) * alpha;
	                case MixBlend.first:
	                case MixBlend.replace:
	                    return current + (Math.abs(value) * MathUtils.signum(current) - current) * alpha;
	            }
	        }
	        else {
	            let s = 0;
	            switch (blend) {
	                case MixBlend.setup:
	                    s = Math.abs(setup) * MathUtils.signum(value);
	                    return s + (value - s) * alpha;
	                case MixBlend.first:
	                case MixBlend.replace:
	                    s = Math.abs(current) * MathUtils.signum(value);
	                    return s + (value - s) * alpha;
	            }
	        }
	        return current + (value - setup) * alpha;
	    }
	}
	/** The base class for a {@link CurveTimeline} which sets two properties. */
	class CurveTimeline2 extends CurveTimeline {
	    /** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.
	     * @param propertyIds Unique identifiers for the properties the timeline modifies. */
	    constructor(frameCount, bezierCount, propertyId1, propertyId2) {
	        super(frameCount, bezierCount, [propertyId1, propertyId2]);
	    }
	    getFrameEntries() {
	        return 3 /*ENTRIES*/;
	    }
	    /** Sets the time and values for the specified frame.
	     * @param frame Between 0 and <code>frameCount</code>, inclusive.
	     * @param time The frame time in seconds. */
	    setFrame(frame, time, value1, value2) {
	        frame *= 3 /*ENTRIES*/;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*VALUE1*/] = value1;
	        this.frames[frame + 2 /*VALUE2*/] = value2;
	    }
	}
	/** Changes a bone's local {@link Bone#rotation}. */
	class RotateTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.rotate + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.rotation = this.getRelativeValue(time, alpha, blend, bone.rotation, bone.data.rotation);
	    }
	}
	/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */
	class TranslateTimeline extends CurveTimeline2 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.x + "|" + boneIndex, Property.y + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (!bone.active)
	            return;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    bone.x = bone.data.x;
	                    bone.y = bone.data.y;
	                    return;
	                case MixBlend.first:
	                    bone.x += (bone.data.x - bone.x) * alpha;
	                    bone.y += (bone.data.y - bone.y) * alpha;
	            }
	            return;
	        }
	        let x = 0, y = 0;
	        let i = Timeline$1.search(frames, time, 3 /*ENTRIES*/);
	        let curveType = this.curves[i / 3 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                x = frames[i + 1 /*VALUE1*/];
	                y = frames[i + 2 /*VALUE2*/];
	                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);
	                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;
	                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;
	                break;
	            case 1 /*STEPPED*/:
	                x = frames[i + 1 /*VALUE1*/];
	                y = frames[i + 2 /*VALUE2*/];
	                break;
	            default:
	                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);
	                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	        }
	        switch (blend) {
	            case MixBlend.setup:
	                bone.x = bone.data.x + x * alpha;
	                bone.y = bone.data.y + y * alpha;
	                break;
	            case MixBlend.first:
	            case MixBlend.replace:
	                bone.x += (bone.data.x + x - bone.x) * alpha;
	                bone.y += (bone.data.y + y - bone.y) * alpha;
	                break;
	            case MixBlend.add:
	                bone.x += x * alpha;
	                bone.y += y * alpha;
	        }
	    }
	}
	/** Changes a bone's local {@link Bone#x}. */
	class TranslateXTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.x + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.x = this.getRelativeValue(time, alpha, blend, bone.x, bone.data.x);
	    }
	}
	/** Changes a bone's local {@link Bone#x}. */
	class TranslateYTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.y + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.y = this.getRelativeValue(time, alpha, blend, bone.y, bone.data.y);
	    }
	}
	/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */
	class ScaleTimeline extends CurveTimeline2 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.scaleX + "|" + boneIndex, Property.scaleY + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (!bone.active)
	            return;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    bone.scaleX = bone.data.scaleX;
	                    bone.scaleY = bone.data.scaleY;
	                    return;
	                case MixBlend.first:
	                    bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;
	                    bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;
	            }
	            return;
	        }
	        let x, y;
	        let i = Timeline$1.search(frames, time, 3 /*ENTRIES*/);
	        let curveType = this.curves[i / 3 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                x = frames[i + 1 /*VALUE1*/];
	                y = frames[i + 2 /*VALUE2*/];
	                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);
	                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;
	                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;
	                break;
	            case 1 /*STEPPED*/:
	                x = frames[i + 1 /*VALUE1*/];
	                y = frames[i + 2 /*VALUE2*/];
	                break;
	            default:
	                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);
	                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	        }
	        x *= bone.data.scaleX;
	        y *= bone.data.scaleY;
	        if (alpha == 1) {
	            if (blend == MixBlend.add) {
	                bone.scaleX += x - bone.data.scaleX;
	                bone.scaleY += y - bone.data.scaleY;
	            }
	            else {
	                bone.scaleX = x;
	                bone.scaleY = y;
	            }
	        }
	        else {
	            let bx = 0, by = 0;
	            if (direction == MixDirection.mixOut) {
	                switch (blend) {
	                    case MixBlend.setup:
	                        bx = bone.data.scaleX;
	                        by = bone.data.scaleY;
	                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;
	                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;
	                        break;
	                    case MixBlend.first:
	                    case MixBlend.replace:
	                        bx = bone.scaleX;
	                        by = bone.scaleY;
	                        bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;
	                        bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;
	                        break;
	                    case MixBlend.add:
	                        bone.scaleX += (x - bone.data.scaleX) * alpha;
	                        bone.scaleY += (y - bone.data.scaleY) * alpha;
	                }
	            }
	            else {
	                switch (blend) {
	                    case MixBlend.setup:
	                        bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);
	                        by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);
	                        bone.scaleX = bx + (x - bx) * alpha;
	                        bone.scaleY = by + (y - by) * alpha;
	                        break;
	                    case MixBlend.first:
	                    case MixBlend.replace:
	                        bx = Math.abs(bone.scaleX) * MathUtils.signum(x);
	                        by = Math.abs(bone.scaleY) * MathUtils.signum(y);
	                        bone.scaleX = bx + (x - bx) * alpha;
	                        bone.scaleY = by + (y - by) * alpha;
	                        break;
	                    case MixBlend.add:
	                        bone.scaleX += (x - bone.data.scaleX) * alpha;
	                        bone.scaleY += (y - bone.data.scaleY) * alpha;
	                }
	            }
	        }
	    }
	}
	/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */
	class ScaleXTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.scaleX + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.scaleX = this.getScaleValue(time, alpha, blend, direction, bone.scaleX, bone.data.scaleX);
	    }
	}
	/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */
	class ScaleYTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.scaleY + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.scaleY = this.getScaleValue(time, alpha, blend, direction, bone.scaleY, bone.data.scaleY);
	    }
	}
	/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */
	class ShearTimeline extends CurveTimeline2 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.shearX + "|" + boneIndex, Property.shearY + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (!bone.active)
	            return;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    bone.shearX = bone.data.shearX;
	                    bone.shearY = bone.data.shearY;
	                    return;
	                case MixBlend.first:
	                    bone.shearX += (bone.data.shearX - bone.shearX) * alpha;
	                    bone.shearY += (bone.data.shearY - bone.shearY) * alpha;
	            }
	            return;
	        }
	        let x = 0, y = 0;
	        let i = Timeline$1.search(frames, time, 3 /*ENTRIES*/);
	        let curveType = this.curves[i / 3 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                x = frames[i + 1 /*VALUE1*/];
	                y = frames[i + 2 /*VALUE2*/];
	                let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);
	                x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;
	                y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;
	                break;
	            case 1 /*STEPPED*/:
	                x = frames[i + 1 /*VALUE1*/];
	                y = frames[i + 2 /*VALUE2*/];
	                break;
	            default:
	                x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);
	                y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	        }
	        switch (blend) {
	            case MixBlend.setup:
	                bone.shearX = bone.data.shearX + x * alpha;
	                bone.shearY = bone.data.shearY + y * alpha;
	                break;
	            case MixBlend.first:
	            case MixBlend.replace:
	                bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;
	                bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;
	                break;
	            case MixBlend.add:
	                bone.shearX += x * alpha;
	                bone.shearY += y * alpha;
	        }
	    }
	}
	/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */
	class ShearXTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.shearX + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.shearX = this.getRelativeValue(time, alpha, blend, bone.shearX, bone.data.shearX);
	    }
	}
	/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */
	class ShearYTimeline extends CurveTimeline1 {
	    boneIndex = 0;
	    constructor(frameCount, bezierCount, boneIndex) {
	        super(frameCount, bezierCount, Property.shearY + "|" + boneIndex);
	        this.boneIndex = boneIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (bone.active)
	            bone.shearY = this.getRelativeValue(time, alpha, blend, bone.shearY, bone.data.shearY);
	    }
	}
	class InheritTimeline extends Timeline$1 {
	    boneIndex = 0;
	    constructor(frameCount, boneIndex) {
	        super(frameCount, [Property.inherit + "|" + boneIndex]);
	        this.boneIndex = boneIndex;
	    }
	    getFrameEntries() {
	        return 2 /*ENTRIES*/;
	    }
	    /** Sets the transform mode for the specified frame.
	     * @param frame Between 0 and <code>frameCount</code>, inclusive.
	     * @param time The frame time in seconds. */
	    setFrame(frame, time, inherit) {
	        frame *= 2 /*ENTRIES*/;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*INHERIT*/] = inherit;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let bone = skeleton.bones[this.boneIndex];
	        if (!bone.active)
	            return;
	        if (direction == MixDirection.mixOut) {
	            if (blend == MixBlend.setup)
	                bone.inherit = bone.data.inherit;
	            return;
	        }
	        let frames = this.frames;
	        if (time < frames[0]) {
	            if (blend == MixBlend.setup || blend == MixBlend.first)
	                bone.inherit = bone.data.inherit;
	            return;
	        }
	        bone.inherit = this.frames[Timeline$1.search(frames, time, 2 /*ENTRIES*/) + 1 /*INHERIT*/];
	    }
	}
	/** Changes a slot's {@link Slot#color}. */
	class RGBATimeline extends CurveTimeline {
	    slotIndex = 0;
	    constructor(frameCount, bezierCount, slotIndex) {
	        super(frameCount, bezierCount, [
	            Property.rgb + "|" + slotIndex,
	            Property.alpha + "|" + slotIndex
	        ]);
	        this.slotIndex = slotIndex;
	    }
	    getFrameEntries() {
	        return 5 /*ENTRIES*/;
	    }
	    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */
	    setFrame(frame, time, r, g, b, a) {
	        frame *= 5 /*ENTRIES*/;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*R*/] = r;
	        this.frames[frame + 2 /*G*/] = g;
	        this.frames[frame + 3 /*B*/] = b;
	        this.frames[frame + 4 /*A*/] = a;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let frames = this.frames;
	        let color = slot.color;
	        if (time < frames[0]) {
	            let setup = slot.data.color;
	            switch (blend) {
	                case MixBlend.setup:
	                    color.setFromColor(setup);
	                    return;
	                case MixBlend.first:
	                    color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);
	            }
	            return;
	        }
	        let r = 0, g = 0, b = 0, a = 0;
	        let i = Timeline$1.search(frames, time, 5 /*ENTRIES*/);
	        let curveType = this.curves[i / 5 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                a = frames[i + 4 /*A*/];
	                let t = (time - before) / (frames[i + 5 /*ENTRIES*/] - before);
	                r += (frames[i + 5 /*ENTRIES*/ + 1 /*R*/] - r) * t;
	                g += (frames[i + 5 /*ENTRIES*/ + 2 /*G*/] - g) * t;
	                b += (frames[i + 5 /*ENTRIES*/ + 3 /*B*/] - b) * t;
	                a += (frames[i + 5 /*ENTRIES*/ + 4 /*A*/] - a) * t;
	                break;
	            case 1 /*STEPPED*/:
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                a = frames[i + 4 /*A*/];
	                break;
	            default:
	                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);
	                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);
	                a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);
	        }
	        if (alpha == 1)
	            color.set(r, g, b, a);
	        else {
	            if (blend == MixBlend.setup)
	                color.setFromColor(slot.data.color);
	            color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);
	        }
	    }
	}
	/** Changes a slot's {@link Slot#color}. */
	class RGBTimeline extends CurveTimeline {
	    slotIndex = 0;
	    constructor(frameCount, bezierCount, slotIndex) {
	        super(frameCount, bezierCount, [
	            Property.rgb + "|" + slotIndex
	        ]);
	        this.slotIndex = slotIndex;
	    }
	    getFrameEntries() {
	        return 4 /*ENTRIES*/;
	    }
	    /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */
	    setFrame(frame, time, r, g, b) {
	        frame <<= 2;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*R*/] = r;
	        this.frames[frame + 2 /*G*/] = g;
	        this.frames[frame + 3 /*B*/] = b;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let frames = this.frames;
	        let color = slot.color;
	        if (time < frames[0]) {
	            let setup = slot.data.color;
	            switch (blend) {
	                case MixBlend.setup:
	                    color.r = setup.r;
	                    color.g = setup.g;
	                    color.b = setup.b;
	                    return;
	                case MixBlend.first:
	                    color.r += (setup.r - color.r) * alpha;
	                    color.g += (setup.g - color.g) * alpha;
	                    color.b += (setup.b - color.b) * alpha;
	            }
	            return;
	        }
	        let r = 0, g = 0, b = 0;
	        let i = Timeline$1.search(frames, time, 4 /*ENTRIES*/);
	        let curveType = this.curves[i >> 2];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);
	                r += (frames[i + 4 /*ENTRIES*/ + 1 /*R*/] - r) * t;
	                g += (frames[i + 4 /*ENTRIES*/ + 2 /*G*/] - g) * t;
	                b += (frames[i + 4 /*ENTRIES*/ + 3 /*B*/] - b) * t;
	                break;
	            case 1 /*STEPPED*/:
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                break;
	            default:
	                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);
	                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);
	        }
	        if (alpha == 1) {
	            color.r = r;
	            color.g = g;
	            color.b = b;
	        }
	        else {
	            if (blend == MixBlend.setup) {
	                let setup = slot.data.color;
	                color.r = setup.r;
	                color.g = setup.g;
	                color.b = setup.b;
	            }
	            color.r += (r - color.r) * alpha;
	            color.g += (g - color.g) * alpha;
	            color.b += (b - color.b) * alpha;
	        }
	    }
	}
	/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */
	class AlphaTimeline extends CurveTimeline1 {
	    slotIndex = 0;
	    constructor(frameCount, bezierCount, slotIndex) {
	        super(frameCount, bezierCount, Property.alpha + "|" + slotIndex);
	        this.slotIndex = slotIndex;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let color = slot.color;
	        if (time < this.frames[0]) {
	            let setup = slot.data.color;
	            switch (blend) {
	                case MixBlend.setup:
	                    color.a = setup.a;
	                    return;
	                case MixBlend.first:
	                    color.a += (setup.a - color.a) * alpha;
	            }
	            return;
	        }
	        let a = this.getCurveValue(time);
	        if (alpha == 1)
	            color.a = a;
	        else {
	            if (blend == MixBlend.setup)
	                color.a = slot.data.color.a;
	            color.a += (a - color.a) * alpha;
	        }
	    }
	}
	/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */
	class RGBA2Timeline extends CurveTimeline {
	    slotIndex = 0;
	    constructor(frameCount, bezierCount, slotIndex) {
	        super(frameCount, bezierCount, [
	            Property.rgb + "|" + slotIndex,
	            Property.alpha + "|" + slotIndex,
	            Property.rgb2 + "|" + slotIndex
	        ]);
	        this.slotIndex = slotIndex;
	    }
	    getFrameEntries() {
	        return 8 /*ENTRIES*/;
	    }
	    /** Sets the time in seconds, light, and dark colors for the specified key frame. */
	    setFrame(frame, time, r, g, b, a, r2, g2, b2) {
	        frame <<= 3;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*R*/] = r;
	        this.frames[frame + 2 /*G*/] = g;
	        this.frames[frame + 3 /*B*/] = b;
	        this.frames[frame + 4 /*A*/] = a;
	        this.frames[frame + 5 /*R2*/] = r2;
	        this.frames[frame + 6 /*G2*/] = g2;
	        this.frames[frame + 7 /*B2*/] = b2;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let frames = this.frames;
	        let light = slot.color, dark = slot.darkColor;
	        if (time < frames[0]) {
	            let setupLight = slot.data.color, setupDark = slot.data.darkColor;
	            switch (blend) {
	                case MixBlend.setup:
	                    light.setFromColor(setupLight);
	                    dark.r = setupDark.r;
	                    dark.g = setupDark.g;
	                    dark.b = setupDark.b;
	                    return;
	                case MixBlend.first:
	                    light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);
	                    dark.r += (setupDark.r - dark.r) * alpha;
	                    dark.g += (setupDark.g - dark.g) * alpha;
	                    dark.b += (setupDark.b - dark.b) * alpha;
	            }
	            return;
	        }
	        let r = 0, g = 0, b = 0, a = 0, r2 = 0, g2 = 0, b2 = 0;
	        let i = Timeline$1.search(frames, time, 8 /*ENTRIES*/);
	        let curveType = this.curves[i >> 3];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                a = frames[i + 4 /*A*/];
	                r2 = frames[i + 5 /*R2*/];
	                g2 = frames[i + 6 /*G2*/];
	                b2 = frames[i + 7 /*B2*/];
	                let t = (time - before) / (frames[i + 8 /*ENTRIES*/] - before);
	                r += (frames[i + 8 /*ENTRIES*/ + 1 /*R*/] - r) * t;
	                g += (frames[i + 8 /*ENTRIES*/ + 2 /*G*/] - g) * t;
	                b += (frames[i + 8 /*ENTRIES*/ + 3 /*B*/] - b) * t;
	                a += (frames[i + 8 /*ENTRIES*/ + 4 /*A*/] - a) * t;
	                r2 += (frames[i + 8 /*ENTRIES*/ + 5 /*R2*/] - r2) * t;
	                g2 += (frames[i + 8 /*ENTRIES*/ + 6 /*G2*/] - g2) * t;
	                b2 += (frames[i + 8 /*ENTRIES*/ + 7 /*B2*/] - b2) * t;
	                break;
	            case 1 /*STEPPED*/:
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                a = frames[i + 4 /*A*/];
	                r2 = frames[i + 5 /*R2*/];
	                g2 = frames[i + 6 /*G2*/];
	                b2 = frames[i + 7 /*B2*/];
	                break;
	            default:
	                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);
	                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);
	                a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);
	                r2 = this.getBezierValue(time, i, 5 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);
	                g2 = this.getBezierValue(time, i, 6 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);
	                b2 = this.getBezierValue(time, i, 7 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 6 - 2 /*BEZIER*/);
	        }
	        if (alpha == 1) {
	            light.set(r, g, b, a);
	            dark.r = r2;
	            dark.g = g2;
	            dark.b = b2;
	        }
	        else {
	            if (blend == MixBlend.setup) {
	                light.setFromColor(slot.data.color);
	                let setupDark = slot.data.darkColor;
	                dark.r = setupDark.r;
	                dark.g = setupDark.g;
	                dark.b = setupDark.b;
	            }
	            light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);
	            dark.r += (r2 - dark.r) * alpha;
	            dark.g += (g2 - dark.g) * alpha;
	            dark.b += (b2 - dark.b) * alpha;
	        }
	    }
	}
	/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */
	class RGB2Timeline extends CurveTimeline {
	    slotIndex = 0;
	    constructor(frameCount, bezierCount, slotIndex) {
	        super(frameCount, bezierCount, [
	            Property.rgb + "|" + slotIndex,
	            Property.rgb2 + "|" + slotIndex
	        ]);
	        this.slotIndex = slotIndex;
	    }
	    getFrameEntries() {
	        return 7 /*ENTRIES*/;
	    }
	    /** Sets the time in seconds, light, and dark colors for the specified key frame. */
	    setFrame(frame, time, r, g, b, r2, g2, b2) {
	        frame *= 7 /*ENTRIES*/;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*R*/] = r;
	        this.frames[frame + 2 /*G*/] = g;
	        this.frames[frame + 3 /*B*/] = b;
	        this.frames[frame + 4 /*R2*/] = r2;
	        this.frames[frame + 5 /*G2*/] = g2;
	        this.frames[frame + 6 /*B2*/] = b2;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let frames = this.frames;
	        let light = slot.color, dark = slot.darkColor;
	        if (time < frames[0]) {
	            let setupLight = slot.data.color, setupDark = slot.data.darkColor;
	            switch (blend) {
	                case MixBlend.setup:
	                    light.r = setupLight.r;
	                    light.g = setupLight.g;
	                    light.b = setupLight.b;
	                    dark.r = setupDark.r;
	                    dark.g = setupDark.g;
	                    dark.b = setupDark.b;
	                    return;
	                case MixBlend.first:
	                    light.r += (setupLight.r - light.r) * alpha;
	                    light.g += (setupLight.g - light.g) * alpha;
	                    light.b += (setupLight.b - light.b) * alpha;
	                    dark.r += (setupDark.r - dark.r) * alpha;
	                    dark.g += (setupDark.g - dark.g) * alpha;
	                    dark.b += (setupDark.b - dark.b) * alpha;
	            }
	            return;
	        }
	        let r = 0, g = 0, b = 0, r2 = 0, g2 = 0, b2 = 0;
	        let i = Timeline$1.search(frames, time, 7 /*ENTRIES*/);
	        let curveType = this.curves[i / 7 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                r2 = frames[i + 4 /*R2*/];
	                g2 = frames[i + 5 /*G2*/];
	                b2 = frames[i + 6 /*B2*/];
	                let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);
	                r += (frames[i + 7 /*ENTRIES*/ + 1 /*R*/] - r) * t;
	                g += (frames[i + 7 /*ENTRIES*/ + 2 /*G*/] - g) * t;
	                b += (frames[i + 7 /*ENTRIES*/ + 3 /*B*/] - b) * t;
	                r2 += (frames[i + 7 /*ENTRIES*/ + 4 /*R2*/] - r2) * t;
	                g2 += (frames[i + 7 /*ENTRIES*/ + 5 /*G2*/] - g2) * t;
	                b2 += (frames[i + 7 /*ENTRIES*/ + 6 /*B2*/] - b2) * t;
	                break;
	            case 1 /*STEPPED*/:
	                r = frames[i + 1 /*R*/];
	                g = frames[i + 2 /*G*/];
	                b = frames[i + 3 /*B*/];
	                r2 = frames[i + 4 /*R2*/];
	                g2 = frames[i + 5 /*G2*/];
	                b2 = frames[i + 6 /*B2*/];
	                break;
	            default:
	                r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);
	                g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	                b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);
	                r2 = this.getBezierValue(time, i, 4 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);
	                g2 = this.getBezierValue(time, i, 5 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);
	                b2 = this.getBezierValue(time, i, 6 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);
	        }
	        if (alpha == 1) {
	            light.r = r;
	            light.g = g;
	            light.b = b;
	            dark.r = r2;
	            dark.g = g2;
	            dark.b = b2;
	        }
	        else {
	            if (blend == MixBlend.setup) {
	                let setupLight = slot.data.color, setupDark = slot.data.darkColor;
	                light.r = setupLight.r;
	                light.g = setupLight.g;
	                light.b = setupLight.b;
	                dark.r = setupDark.r;
	                dark.g = setupDark.g;
	                dark.b = setupDark.b;
	            }
	            light.r += (r - light.r) * alpha;
	            light.g += (g - light.g) * alpha;
	            light.b += (b - light.b) * alpha;
	            dark.r += (r2 - dark.r) * alpha;
	            dark.g += (g2 - dark.g) * alpha;
	            dark.b += (b2 - dark.b) * alpha;
	        }
	    }
	}
	/** Changes a slot's {@link Slot#attachment}. */
	class AttachmentTimeline extends Timeline$1 {
	    slotIndex = 0;
	    /** The attachment name for each key frame. May contain null values to clear the attachment. */
	    attachmentNames;
	    constructor(frameCount, slotIndex) {
	        super(frameCount, [
	            Property.attachment + "|" + slotIndex
	        ]);
	        this.slotIndex = slotIndex;
	        this.attachmentNames = new Array(frameCount);
	    }
	    getFrameCount() {
	        return this.frames.length;
	    }
	    /** Sets the time in seconds and the attachment name for the specified key frame. */
	    setFrame(frame, time, attachmentName) {
	        this.frames[frame] = time;
	        this.attachmentNames[frame] = attachmentName;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        if (direction == MixDirection.mixOut) {
	            if (blend == MixBlend.setup)
	                this.setAttachment(skeleton, slot, slot.data.attachmentName);
	            return;
	        }
	        if (time < this.frames[0]) {
	            if (blend == MixBlend.setup || blend == MixBlend.first)
	                this.setAttachment(skeleton, slot, slot.data.attachmentName);
	            return;
	        }
	        this.setAttachment(skeleton, slot, this.attachmentNames[Timeline$1.search1(this.frames, time)]);
	    }
	    setAttachment(skeleton, slot, attachmentName) {
	        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));
	    }
	}
	/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */
	class DeformTimeline extends CurveTimeline {
	    slotIndex = 0;
	    /** The attachment that will be deformed. */
	    attachment;
	    /** The vertices for each key frame. */
	    vertices;
	    constructor(frameCount, bezierCount, slotIndex, attachment) {
	        super(frameCount, bezierCount, [
	            Property.deform + "|" + slotIndex + "|" + attachment.id
	        ]);
	        this.slotIndex = slotIndex;
	        this.attachment = attachment;
	        this.vertices = new Array(frameCount);
	    }
	    getFrameCount() {
	        return this.frames.length;
	    }
	    /** Sets the time in seconds and the vertices for the specified key frame.
	     * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */
	    setFrame(frame, time, vertices) {
	        this.frames[frame] = time;
	        this.vertices[frame] = vertices;
	    }
	    /** @param value1 Ignored (0 is used for a deform timeline).
	     * @param value2 Ignored (1 is used for a deform timeline). */
	    setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {
	        let curves = this.curves;
	        let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;
	        if (value == 0)
	            curves[frame] = 2 /*BEZIER*/ + i;
	        let tmpx = (time1 - cx1 * 2 + cx2) * 0.03, tmpy = cy2 * 0.03 - cy1 * 0.06;
	        let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006, dddy = (cy1 - cy2 + 0.33333333) * 0.018;
	        let ddx = tmpx * 2 + dddx, ddy = tmpy * 2 + dddy;
	        let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667, dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;
	        let x = time1 + dx, y = dy;
	        for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {
	            curves[i] = x;
	            curves[i + 1] = y;
	            dx += ddx;
	            dy += ddy;
	            ddx += dddx;
	            ddy += dddy;
	            x += dx;
	            y += dy;
	        }
	    }
	    getCurvePercent(time, frame) {
	        let curves = this.curves;
	        let i = curves[frame];
	        switch (i) {
	            case 0 /*LINEAR*/:
	                let x = this.frames[frame];
	                return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);
	            case 1 /*STEPPED*/:
	                return 0;
	        }
	        i -= 2 /*BEZIER*/;
	        if (curves[i] > time) {
	            let x = this.frames[frame];
	            return curves[i + 1] * (time - x) / (curves[i] - x);
	        }
	        let n = i + 18 /*BEZIER_SIZE*/;
	        for (i += 2; i < n; i += 2) {
	            if (curves[i] >= time) {
	                let x = curves[i - 2], y = curves[i - 1];
	                return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);
	            }
	        }
	        let x = curves[n - 2], y = curves[n - 1];
	        return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let slotAttachment = slot.getAttachment();
	        if (!slotAttachment)
	            return;
	        if (!(slotAttachment instanceof VertexAttachment) || slotAttachment.timelineAttachment != this.attachment)
	            return;
	        let deform = slot.deform;
	        if (deform.length == 0)
	            blend = MixBlend.setup;
	        let vertices = this.vertices;
	        let vertexCount = vertices[0].length;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    deform.length = 0;
	                    return;
	                case MixBlend.first:
	                    if (alpha == 1) {
	                        deform.length = 0;
	                        return;
	                    }
	                    deform.length = vertexCount;
	                    let vertexAttachment = slotAttachment;
	                    if (!vertexAttachment.bones) {
	                        // Unweighted vertex positions.
	                        let setupVertices = vertexAttachment.vertices;
	                        for (var i = 0; i < vertexCount; i++)
	                            deform[i] += (setupVertices[i] - deform[i]) * alpha;
	                    }
	                    else {
	                        // Weighted deform offsets.
	                        alpha = 1 - alpha;
	                        for (var i = 0; i < vertexCount; i++)
	                            deform[i] *= alpha;
	                    }
	            }
	            return;
	        }
	        deform.length = vertexCount;
	        if (time >= frames[frames.length - 1]) {
	            let lastVertices = vertices[frames.length - 1];
	            if (alpha == 1) {
	                if (blend == MixBlend.add) {
	                    let vertexAttachment = slotAttachment;
	                    if (!vertexAttachment.bones) {
	                        // Unweighted vertex positions, with alpha.
	                        let setupVertices = vertexAttachment.vertices;
	                        for (let i = 0; i < vertexCount; i++)
	                            deform[i] += lastVertices[i] - setupVertices[i];
	                    }
	                    else {
	                        // Weighted deform offsets, with alpha.
	                        for (let i = 0; i < vertexCount; i++)
	                            deform[i] += lastVertices[i];
	                    }
	                }
	                else
	                    Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);
	            }
	            else {
	                switch (blend) {
	                    case MixBlend.setup: {
	                        let vertexAttachment = slotAttachment;
	                        if (!vertexAttachment.bones) {
	                            // Unweighted vertex positions, with alpha.
	                            let setupVertices = vertexAttachment.vertices;
	                            for (let i = 0; i < vertexCount; i++) {
	                                let setup = setupVertices[i];
	                                deform[i] = setup + (lastVertices[i] - setup) * alpha;
	                            }
	                        }
	                        else {
	                            // Weighted deform offsets, with alpha.
	                            for (let i = 0; i < vertexCount; i++)
	                                deform[i] = lastVertices[i] * alpha;
	                        }
	                        break;
	                    }
	                    case MixBlend.first:
	                    case MixBlend.replace:
	                        for (let i = 0; i < vertexCount; i++)
	                            deform[i] += (lastVertices[i] - deform[i]) * alpha;
	                        break;
	                    case MixBlend.add:
	                        let vertexAttachment = slotAttachment;
	                        if (!vertexAttachment.bones) {
	                            // Unweighted vertex positions, with alpha.
	                            let setupVertices = vertexAttachment.vertices;
	                            for (let i = 0; i < vertexCount; i++)
	                                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;
	                        }
	                        else {
	                            // Weighted deform offsets, with alpha.
	                            for (let i = 0; i < vertexCount; i++)
	                                deform[i] += lastVertices[i] * alpha;
	                        }
	                }
	            }
	            return;
	        }
	        // Interpolate between the previous frame and the current frame.
	        let frame = Timeline$1.search1(frames, time);
	        let percent = this.getCurvePercent(time, frame);
	        let prevVertices = vertices[frame];
	        let nextVertices = vertices[frame + 1];
	        if (alpha == 1) {
	            if (blend == MixBlend.add) {
	                let vertexAttachment = slotAttachment;
	                if (!vertexAttachment.bones) {
	                    // Unweighted vertex positions, with alpha.
	                    let setupVertices = vertexAttachment.vertices;
	                    for (let i = 0; i < vertexCount; i++) {
	                        let prev = prevVertices[i];
	                        deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];
	                    }
	                }
	                else {
	                    // Weighted deform offsets, with alpha.
	                    for (let i = 0; i < vertexCount; i++) {
	                        let prev = prevVertices[i];
	                        deform[i] += prev + (nextVertices[i] - prev) * percent;
	                    }
	                }
	            }
	            else {
	                for (let i = 0; i < vertexCount; i++) {
	                    let prev = prevVertices[i];
	                    deform[i] = prev + (nextVertices[i] - prev) * percent;
	                }
	            }
	        }
	        else {
	            switch (blend) {
	                case MixBlend.setup: {
	                    let vertexAttachment = slotAttachment;
	                    if (!vertexAttachment.bones) {
	                        // Unweighted vertex positions, with alpha.
	                        let setupVertices = vertexAttachment.vertices;
	                        for (let i = 0; i < vertexCount; i++) {
	                            let prev = prevVertices[i], setup = setupVertices[i];
	                            deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;
	                        }
	                    }
	                    else {
	                        // Weighted deform offsets, with alpha.
	                        for (let i = 0; i < vertexCount; i++) {
	                            let prev = prevVertices[i];
	                            deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;
	                        }
	                    }
	                    break;
	                }
	                case MixBlend.first:
	                case MixBlend.replace:
	                    for (let i = 0; i < vertexCount; i++) {
	                        let prev = prevVertices[i];
	                        deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;
	                    }
	                    break;
	                case MixBlend.add:
	                    let vertexAttachment = slotAttachment;
	                    if (!vertexAttachment.bones) {
	                        // Unweighted vertex positions, with alpha.
	                        let setupVertices = vertexAttachment.vertices;
	                        for (let i = 0; i < vertexCount; i++) {
	                            let prev = prevVertices[i];
	                            deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;
	                        }
	                    }
	                    else {
	                        // Weighted deform offsets, with alpha.
	                        for (let i = 0; i < vertexCount; i++) {
	                            let prev = prevVertices[i];
	                            deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;
	                        }
	                    }
	            }
	        }
	    }
	}
	/** Fires an {@link Event} when specific animation times are reached. */
	class EventTimeline extends Timeline$1 {
	    static propertyIds = ["" + Property.event];
	    /** The event for each key frame. */
	    events;
	    constructor(frameCount) {
	        super(frameCount, EventTimeline.propertyIds);
	        this.events = new Array(frameCount);
	    }
	    getFrameCount() {
	        return this.frames.length;
	    }
	    /** Sets the time in seconds and the event for the specified key frame. */
	    setFrame(frame, event) {
	        this.frames[frame] = event.time;
	        this.events[frame] = event;
	    }
	    /** Fires events for frames > `lastTime` and <= `time`. */
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        if (!firedEvents)
	            return;
	        let frames = this.frames;
	        let frameCount = this.frames.length;
	        if (lastTime > time) { // Apply after lastTime for looped animations.
	            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);
	            lastTime = -1;
	        }
	        else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.
	            return;
	        if (time < frames[0])
	            return;
	        let i = 0;
	        if (lastTime < frames[0])
	            i = 0;
	        else {
	            i = Timeline$1.search1(frames, lastTime) + 1;
	            let frameTime = frames[i];
	            while (i > 0) { // Fire multiple events with the same frame.
	                if (frames[i - 1] != frameTime)
	                    break;
	                i--;
	            }
	        }
	        for (; i < frameCount && time >= frames[i]; i++)
	            firedEvents.push(this.events[i]);
	    }
	}
	/** Changes a skeleton's {@link Skeleton#drawOrder}. */
	class DrawOrderTimeline extends Timeline$1 {
	    static propertyIds = ["" + Property.drawOrder];
	    /** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */
	    drawOrders;
	    constructor(frameCount) {
	        super(frameCount, DrawOrderTimeline.propertyIds);
	        this.drawOrders = new Array(frameCount);
	    }
	    getFrameCount() {
	        return this.frames.length;
	    }
	    /** Sets the time in seconds and the draw order for the specified key frame.
	     * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose
	     *           draw order. */
	    setFrame(frame, time, drawOrder) {
	        this.frames[frame] = time;
	        this.drawOrders[frame] = drawOrder;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        if (direction == MixDirection.mixOut) {
	            if (blend == MixBlend.setup)
	                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);
	            return;
	        }
	        if (time < this.frames[0]) {
	            if (blend == MixBlend.setup || blend == MixBlend.first)
	                Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);
	            return;
	        }
	        let idx = Timeline$1.search1(this.frames, time);
	        let drawOrderToSetupIndex = this.drawOrders[idx];
	        if (!drawOrderToSetupIndex)
	            Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);
	        else {
	            let drawOrder = skeleton.drawOrder;
	            let slots = skeleton.slots;
	            for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)
	                drawOrder[i] = slots[drawOrderToSetupIndex[i]];
	        }
	    }
	}
	/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},
	 * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */
	class IkConstraintTimeline extends CurveTimeline {
	    /** The index of the IK constraint in {@link Skeleton#getIkConstraints()} that will be changed when this timeline is applied */
	    constraintIndex = 0;
	    constructor(frameCount, bezierCount, ikConstraintIndex) {
	        super(frameCount, bezierCount, [
	            Property.ikConstraint + "|" + ikConstraintIndex
	        ]);
	        this.constraintIndex = ikConstraintIndex;
	    }
	    getFrameEntries() {
	        return 6 /*ENTRIES*/;
	    }
	    /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */
	    setFrame(frame, time, mix, softness, bendDirection, compress, stretch) {
	        frame *= 6 /*ENTRIES*/;
	        this.frames[frame] = time;
	        this.frames[frame + 1 /*MIX*/] = mix;
	        this.frames[frame + 2 /*SOFTNESS*/] = softness;
	        this.frames[frame + 3 /*BEND_DIRECTION*/] = bendDirection;
	        this.frames[frame + 4 /*COMPRESS*/] = compress ? 1 : 0;
	        this.frames[frame + 5 /*STRETCH*/] = stretch ? 1 : 0;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint = skeleton.ikConstraints[this.constraintIndex];
	        if (!constraint.active)
	            return;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    constraint.mix = constraint.data.mix;
	                    constraint.softness = constraint.data.softness;
	                    constraint.bendDirection = constraint.data.bendDirection;
	                    constraint.compress = constraint.data.compress;
	                    constraint.stretch = constraint.data.stretch;
	                    return;
	                case MixBlend.first:
	                    constraint.mix += (constraint.data.mix - constraint.mix) * alpha;
	                    constraint.softness += (constraint.data.softness - constraint.softness) * alpha;
	                    constraint.bendDirection = constraint.data.bendDirection;
	                    constraint.compress = constraint.data.compress;
	                    constraint.stretch = constraint.data.stretch;
	            }
	            return;
	        }
	        let mix = 0, softness = 0;
	        let i = Timeline$1.search(frames, time, 6 /*ENTRIES*/);
	        let curveType = this.curves[i / 6 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                mix = frames[i + 1 /*MIX*/];
	                softness = frames[i + 2 /*SOFTNESS*/];
	                let t = (time - before) / (frames[i + 6 /*ENTRIES*/] - before);
	                mix += (frames[i + 6 /*ENTRIES*/ + 1 /*MIX*/] - mix) * t;
	                softness += (frames[i + 6 /*ENTRIES*/ + 2 /*SOFTNESS*/] - softness) * t;
	                break;
	            case 1 /*STEPPED*/:
	                mix = frames[i + 1 /*MIX*/];
	                softness = frames[i + 2 /*SOFTNESS*/];
	                break;
	            default:
	                mix = this.getBezierValue(time, i, 1 /*MIX*/, curveType - 2 /*BEZIER*/);
	                softness = this.getBezierValue(time, i, 2 /*SOFTNESS*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	        }
	        if (blend == MixBlend.setup) {
	            constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;
	            constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;
	            if (direction == MixDirection.mixOut) {
	                constraint.bendDirection = constraint.data.bendDirection;
	                constraint.compress = constraint.data.compress;
	                constraint.stretch = constraint.data.stretch;
	            }
	            else {
	                constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];
	                constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;
	                constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;
	            }
	        }
	        else {
	            constraint.mix += (mix - constraint.mix) * alpha;
	            constraint.softness += (softness - constraint.softness) * alpha;
	            if (direction == MixDirection.mixIn) {
	                constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];
	                constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;
	                constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;
	            }
	        }
	    }
	}
	/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},
	 * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */
	class TransformConstraintTimeline extends CurveTimeline {
	    /** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */
	    constraintIndex = 0;
	    constructor(frameCount, bezierCount, transformConstraintIndex) {
	        super(frameCount, bezierCount, [
	            Property.transformConstraint + "|" + transformConstraintIndex
	        ]);
	        this.constraintIndex = transformConstraintIndex;
	    }
	    getFrameEntries() {
	        return 7 /*ENTRIES*/;
	    }
	    /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */
	    setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY) {
	        let frames = this.frames;
	        frame *= 7 /*ENTRIES*/;
	        frames[frame] = time;
	        frames[frame + 1 /*ROTATE*/] = mixRotate;
	        frames[frame + 2 /*X*/] = mixX;
	        frames[frame + 3 /*Y*/] = mixY;
	        frames[frame + 4 /*SCALEX*/] = mixScaleX;
	        frames[frame + 5 /*SCALEY*/] = mixScaleY;
	        frames[frame + 6 /*SHEARY*/] = mixShearY;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint = skeleton.transformConstraints[this.constraintIndex];
	        if (!constraint.active)
	            return;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            let data = constraint.data;
	            switch (blend) {
	                case MixBlend.setup:
	                    constraint.mixRotate = data.mixRotate;
	                    constraint.mixX = data.mixX;
	                    constraint.mixY = data.mixY;
	                    constraint.mixScaleX = data.mixScaleX;
	                    constraint.mixScaleY = data.mixScaleY;
	                    constraint.mixShearY = data.mixShearY;
	                    return;
	                case MixBlend.first:
	                    constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;
	                    constraint.mixX += (data.mixX - constraint.mixX) * alpha;
	                    constraint.mixY += (data.mixY - constraint.mixY) * alpha;
	                    constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;
	                    constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;
	                    constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;
	            }
	            return;
	        }
	        let rotate, x, y, scaleX, scaleY, shearY;
	        let i = Timeline$1.search(frames, time, 7 /*ENTRIES*/);
	        let curveType = this.curves[i / 7 /*ENTRIES*/];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                rotate = frames[i + 1 /*ROTATE*/];
	                x = frames[i + 2 /*X*/];
	                y = frames[i + 3 /*Y*/];
	                scaleX = frames[i + 4 /*SCALEX*/];
	                scaleY = frames[i + 5 /*SCALEY*/];
	                shearY = frames[i + 6 /*SHEARY*/];
	                let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);
	                rotate += (frames[i + 7 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;
	                x += (frames[i + 7 /*ENTRIES*/ + 2 /*X*/] - x) * t;
	                y += (frames[i + 7 /*ENTRIES*/ + 3 /*Y*/] - y) * t;
	                scaleX += (frames[i + 7 /*ENTRIES*/ + 4 /*SCALEX*/] - scaleX) * t;
	                scaleY += (frames[i + 7 /*ENTRIES*/ + 5 /*SCALEY*/] - scaleY) * t;
	                shearY += (frames[i + 7 /*ENTRIES*/ + 6 /*SHEARY*/] - shearY) * t;
	                break;
	            case 1 /*STEPPED*/:
	                rotate = frames[i + 1 /*ROTATE*/];
	                x = frames[i + 2 /*X*/];
	                y = frames[i + 3 /*Y*/];
	                scaleX = frames[i + 4 /*SCALEX*/];
	                scaleY = frames[i + 5 /*SCALEY*/];
	                shearY = frames[i + 6 /*SHEARY*/];
	                break;
	            default:
	                rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);
	                x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	                y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);
	                scaleX = this.getBezierValue(time, i, 4 /*SCALEX*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);
	                scaleY = this.getBezierValue(time, i, 5 /*SCALEY*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);
	                shearY = this.getBezierValue(time, i, 6 /*SHEARY*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);
	        }
	        if (blend == MixBlend.setup) {
	            let data = constraint.data;
	            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;
	            constraint.mixX = data.mixX + (x - data.mixX) * alpha;
	            constraint.mixY = data.mixY + (y - data.mixY) * alpha;
	            constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;
	            constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;
	            constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;
	        }
	        else {
	            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;
	            constraint.mixX += (x - constraint.mixX) * alpha;
	            constraint.mixY += (y - constraint.mixY) * alpha;
	            constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;
	            constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;
	            constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;
	        }
	    }
	}
	/** Changes a path constraint's {@link PathConstraint#position}. */
	class PathConstraintPositionTimeline extends CurveTimeline1 {
	    /** The index of the path constraint in {@link Skeleton#getPathConstraints()} that will be changed when this timeline is
	     * applied. */
	    constraintIndex = 0;
	    constructor(frameCount, bezierCount, pathConstraintIndex) {
	        super(frameCount, bezierCount, Property.pathConstraintPosition + "|" + pathConstraintIndex);
	        this.constraintIndex = pathConstraintIndex;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint = skeleton.pathConstraints[this.constraintIndex];
	        if (constraint.active)
	            constraint.position = this.getAbsoluteValue(time, alpha, blend, constraint.position, constraint.data.position);
	    }
	}
	/** Changes a path constraint's {@link PathConstraint#spacing}. */
	class PathConstraintSpacingTimeline extends CurveTimeline1 {
	    /** The index of the path constraint in {@link Skeleton#getPathConstraints()} that will be changed when this timeline is
	     * applied. */
	    constraintIndex = 0;
	    constructor(frameCount, bezierCount, pathConstraintIndex) {
	        super(frameCount, bezierCount, Property.pathConstraintSpacing + "|" + pathConstraintIndex);
	        this.constraintIndex = pathConstraintIndex;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint = skeleton.pathConstraints[this.constraintIndex];
	        if (constraint.active)
	            constraint.spacing = this.getAbsoluteValue(time, alpha, blend, constraint.spacing, constraint.data.spacing);
	    }
	}
	/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and
	 * {@link PathConstraint#getMixY()}. */
	class PathConstraintMixTimeline extends CurveTimeline {
	    /** The index of the path constraint in {@link Skeleton#getPathConstraints()} that will be changed when this timeline is
	     * applied. */
	    constraintIndex = 0;
	    constructor(frameCount, bezierCount, pathConstraintIndex) {
	        super(frameCount, bezierCount, [
	            Property.pathConstraintMix + "|" + pathConstraintIndex
	        ]);
	        this.constraintIndex = pathConstraintIndex;
	    }
	    getFrameEntries() {
	        return 4 /*ENTRIES*/;
	    }
	    setFrame(frame, time, mixRotate, mixX, mixY) {
	        let frames = this.frames;
	        frame <<= 2;
	        frames[frame] = time;
	        frames[frame + 1 /*ROTATE*/] = mixRotate;
	        frames[frame + 2 /*X*/] = mixX;
	        frames[frame + 3 /*Y*/] = mixY;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint = skeleton.pathConstraints[this.constraintIndex];
	        if (!constraint.active)
	            return;
	        let frames = this.frames;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    constraint.mixRotate = constraint.data.mixRotate;
	                    constraint.mixX = constraint.data.mixX;
	                    constraint.mixY = constraint.data.mixY;
	                    return;
	                case MixBlend.first:
	                    constraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;
	                    constraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;
	                    constraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;
	            }
	            return;
	        }
	        let rotate, x, y;
	        let i = Timeline$1.search(frames, time, 4 /*ENTRIES*/);
	        let curveType = this.curves[i >> 2];
	        switch (curveType) {
	            case 0 /*LINEAR*/:
	                let before = frames[i];
	                rotate = frames[i + 1 /*ROTATE*/];
	                x = frames[i + 2 /*X*/];
	                y = frames[i + 3 /*Y*/];
	                let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);
	                rotate += (frames[i + 4 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;
	                x += (frames[i + 4 /*ENTRIES*/ + 2 /*X*/] - x) * t;
	                y += (frames[i + 4 /*ENTRIES*/ + 3 /*Y*/] - y) * t;
	                break;
	            case 1 /*STEPPED*/:
	                rotate = frames[i + 1 /*ROTATE*/];
	                x = frames[i + 2 /*X*/];
	                y = frames[i + 3 /*Y*/];
	                break;
	            default:
	                rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);
	                x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);
	                y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);
	        }
	        if (blend == MixBlend.setup) {
	            let data = constraint.data;
	            constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;
	            constraint.mixX = data.mixX + (x - data.mixX) * alpha;
	            constraint.mixY = data.mixY + (y - data.mixY) * alpha;
	        }
	        else {
	            constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;
	            constraint.mixX += (x - constraint.mixX) * alpha;
	            constraint.mixY += (y - constraint.mixY) * alpha;
	        }
	    }
	}
	/** The base class for most {@link PhysicsConstraint} timelines. */
	class PhysicsConstraintTimeline extends CurveTimeline1 {
	    /** The index of the physics constraint in {@link Skeleton#getPhysicsConstraints()} that will be changed when this timeline
	     * is applied, or -1 if all physics constraints in the skeleton will be changed. */
	    constraintIndex = 0;
	    /** @param physicsConstraintIndex -1 for all physics constraints in the skeleton. */
	    constructor(frameCount, bezierCount, physicsConstraintIndex, property) {
	        super(frameCount, bezierCount, property + "|" + physicsConstraintIndex);
	        this.constraintIndex = physicsConstraintIndex;
	    }
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint;
	        if (this.constraintIndex == -1) {
	            const value = time >= this.frames[0] ? this.getCurveValue(time) : 0;
	            for (const constraint of skeleton.physicsConstraints) {
	                if (constraint.active && this.global(constraint.data))
	                    this.set(constraint, this.getAbsoluteValue2(time, alpha, blend, this.get(constraint), this.setup(constraint), value));
	            }
	        }
	        else {
	            constraint = skeleton.physicsConstraints[this.constraintIndex];
	            if (constraint.active)
	                this.set(constraint, this.getAbsoluteValue(time, alpha, blend, this.get(constraint), this.setup(constraint)));
	        }
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getInertia()}. */
	class PhysicsConstraintInertiaTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintInertia);
	    }
	    setup(constraint) {
	        return constraint.data.inertia;
	    }
	    get(constraint) {
	        return constraint.inertia;
	    }
	    set(constraint, value) {
	        constraint.inertia = value;
	    }
	    global(constraint) {
	        return constraint.inertiaGlobal;
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getStrength()}. */
	class PhysicsConstraintStrengthTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintStrength);
	    }
	    setup(constraint) {
	        return constraint.data.strength;
	    }
	    get(constraint) {
	        return constraint.strength;
	    }
	    set(constraint, value) {
	        constraint.strength = value;
	    }
	    global(constraint) {
	        return constraint.strengthGlobal;
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getDamping()}. */
	class PhysicsConstraintDampingTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintDamping);
	    }
	    setup(constraint) {
	        return constraint.data.damping;
	    }
	    get(constraint) {
	        return constraint.damping;
	    }
	    set(constraint, value) {
	        constraint.damping = value;
	    }
	    global(constraint) {
	        return constraint.dampingGlobal;
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getMassInverse()}. The timeline values are not inverted. */
	class PhysicsConstraintMassTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintMass);
	    }
	    setup(constraint) {
	        return 1 / constraint.data.massInverse;
	    }
	    get(constraint) {
	        return 1 / constraint.massInverse;
	    }
	    set(constraint, value) {
	        constraint.massInverse = 1 / value;
	    }
	    global(constraint) {
	        return constraint.massGlobal;
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getWind()}. */
	class PhysicsConstraintWindTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintWind);
	    }
	    setup(constraint) {
	        return constraint.data.wind;
	    }
	    get(constraint) {
	        return constraint.wind;
	    }
	    set(constraint, value) {
	        constraint.wind = value;
	    }
	    global(constraint) {
	        return constraint.windGlobal;
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getGravity()}. */
	class PhysicsConstraintGravityTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintGravity);
	    }
	    setup(constraint) {
	        return constraint.data.gravity;
	    }
	    get(constraint) {
	        return constraint.gravity;
	    }
	    set(constraint, value) {
	        constraint.gravity = value;
	    }
	    global(constraint) {
	        return constraint.gravityGlobal;
	    }
	}
	/** Changes a physics constraint's {@link PhysicsConstraint#getMix()}. */
	class PhysicsConstraintMixTimeline extends PhysicsConstraintTimeline {
	    constructor(frameCount, bezierCount, physicsConstraintIndex) {
	        super(frameCount, bezierCount, physicsConstraintIndex, Property.physicsConstraintMix);
	    }
	    setup(constraint) {
	        return constraint.data.mix;
	    }
	    get(constraint) {
	        return constraint.mix;
	    }
	    set(constraint, value) {
	        constraint.mix = value;
	    }
	    global(constraint) {
	        return constraint.mixGlobal;
	    }
	}
	/** Resets a physics constraint when specific animation times are reached. */
	class PhysicsConstraintResetTimeline extends Timeline$1 {
	    static propertyIds = [Property.physicsConstraintReset.toString()];
	    /** The index of the physics constraint in {@link Skeleton#getPhysicsConstraints()} that will be reset when this timeline is
	    * applied, or -1 if all physics constraints in the skeleton will be reset. */
	    constraintIndex;
	    /** @param physicsConstraintIndex -1 for all physics constraints in the skeleton. */
	    constructor(frameCount, physicsConstraintIndex) {
	        super(frameCount, PhysicsConstraintResetTimeline.propertyIds);
	        this.constraintIndex = physicsConstraintIndex;
	    }
	    getFrameCount() {
	        return this.frames.length;
	    }
	    /** Sets the time for the specified frame.
	     * @param frame Between 0 and <code>frameCount</code>, inclusive. */
	    setFrame(frame, time) {
	        this.frames[frame] = time;
	    }
	    /** Resets the physics constraint when frames > <code>lastTime</code> and <= <code>time</code>. */
	    apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {
	        let constraint;
	        if (this.constraintIndex != -1) {
	            constraint = skeleton.physicsConstraints[this.constraintIndex];
	            if (!constraint.active)
	                return;
	        }
	        const frames = this.frames;
	        if (lastTime > time) { // Apply after lastTime for looped animations.
	            this.apply(skeleton, lastTime, Number.MAX_VALUE, [], alpha, blend, direction);
	            lastTime = -1;
	        }
	        else if (lastTime >= frames[frames.length - 1]) // Last time is after last frame.
	            return;
	        if (time < frames[0])
	            return;
	        if (lastTime < frames[0] || time >= frames[Timeline$1.search1(frames, lastTime) + 1]) {
	            if (constraint != null)
	                constraint.reset();
	            else {
	                for (const constraint of skeleton.physicsConstraints) {
	                    if (constraint.active)
	                        constraint.reset();
	                }
	            }
	        }
	    }
	}
	/** Changes a slot's {@link Slot#getSequenceIndex()} for an attachment's {@link Sequence}. */
	class SequenceTimeline extends Timeline$1 {
	    static ENTRIES = 3;
	    static MODE = 1;
	    static DELAY = 2;
	    slotIndex;
	    attachment;
	    constructor(frameCount, slotIndex, attachment) {
	        super(frameCount, [
	            Property.sequence + "|" + slotIndex + "|" + attachment.sequence.id
	        ]);
	        this.slotIndex = slotIndex;
	        this.attachment = attachment;
	    }
	    getFrameEntries() {
	        return SequenceTimeline.ENTRIES;
	    }
	    getSlotIndex() {
	        return this.slotIndex;
	    }
	    getAttachment() {
	        return this.attachment;
	    }
	    /** Sets the time, mode, index, and frame time for the specified frame.
	     * @param frame Between 0 and <code>frameCount</code>, inclusive.
	     * @param time Seconds between frames. */
	    setFrame(frame, time, mode, index, delay) {
	        let frames = this.frames;
	        frame *= SequenceTimeline.ENTRIES;
	        frames[frame] = time;
	        frames[frame + SequenceTimeline.MODE] = mode | (index << 4);
	        frames[frame + SequenceTimeline.DELAY] = delay;
	    }
	    apply(skeleton, lastTime, time, events, alpha, blend, direction) {
	        let slot = skeleton.slots[this.slotIndex];
	        if (!slot.bone.active)
	            return;
	        let slotAttachment = slot.attachment;
	        let attachment = this.attachment;
	        if (slotAttachment != attachment) {
	            if (!(slotAttachment instanceof VertexAttachment)
	                || slotAttachment.timelineAttachment != attachment)
	                return;
	        }
	        if (direction == MixDirection.mixOut) {
	            if (blend == MixBlend.setup)
	                slot.sequenceIndex = -1;
	            return;
	        }
	        let frames = this.frames;
	        if (time < frames[0]) {
	            if (blend == MixBlend.setup || blend == MixBlend.first)
	                slot.sequenceIndex = -1;
	            return;
	        }
	        let i = Timeline$1.search(frames, time, SequenceTimeline.ENTRIES);
	        let before = frames[i];
	        let modeAndIndex = frames[i + SequenceTimeline.MODE];
	        let delay = frames[i + SequenceTimeline.DELAY];
	        if (!this.attachment.sequence)
	            return;
	        let index = modeAndIndex >> 4, count = this.attachment.sequence.regions.length;
	        let mode = SequenceModeValues[modeAndIndex & 0xf];
	        if (mode != SequenceMode.hold) {
	            index += (((time - before) / delay + 0.00001) | 0);
	            switch (mode) {
	                case SequenceMode.once:
	                    index = Math.min(count - 1, index);
	                    break;
	                case SequenceMode.loop:
	                    index %= count;
	                    break;
	                case SequenceMode.pingpong: {
	                    let n = (count << 1) - 2;
	                    index = n == 0 ? 0 : index % n;
	                    if (index >= count)
	                        index = n - index;
	                    break;
	                }
	                case SequenceMode.onceReverse:
	                    index = Math.max(count - 1 - index, 0);
	                    break;
	                case SequenceMode.loopReverse:
	                    index = count - 1 - (index % count);
	                    break;
	                case SequenceMode.pingpongReverse: {
	                    let n = (count << 1) - 2;
	                    index = n == 0 ? 0 : (index + count - 1) % n;
	                    if (index >= count)
	                        index = n - index;
	                }
	            }
	        }
	        slot.sequenceIndex = index;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies
	 * multiple animations on top of each other (layering).
	 *
	 * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */
	class AnimationState {
	    static _emptyAnimation = new Animation$1("<empty>", [], 0);
	    static emptyAnimation() {
	        return AnimationState._emptyAnimation;
	    }
	    /** The AnimationStateData to look up mix durations. */
	    data;
	    /** The list of tracks that currently have animations, which may contain null entries. */
	    tracks = new Array();
	    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower
	     * or faster. Defaults to 1.
	     *
	     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */
	    timeScale = 1;
	    unkeyedState = 0;
	    events = new Array();
	    listeners = new Array();
	    queue = new EventQueue(this);
	    propertyIDs = new StringSet();
	    animationsChanged = false;
	    trackEntryPool = new Pool(() => new TrackEntry());
	    constructor(data) {
	        this.data = data;
	    }
	    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */
	    update(delta) {
	        delta *= this.timeScale;
	        let tracks = this.tracks;
	        for (let i = 0, n = tracks.length; i < n; i++) {
	            let current = tracks[i];
	            if (!current)
	                continue;
	            current.animationLast = current.nextAnimationLast;
	            current.trackLast = current.nextTrackLast;
	            let currentDelta = delta * current.timeScale;
	            if (current.delay > 0) {
	                current.delay -= currentDelta;
	                if (current.delay > 0)
	                    continue;
	                currentDelta = -current.delay;
	                current.delay = 0;
	            }
	            let next = current.next;
	            if (next) {
	                // When the next entry's delay is passed, change to the next entry, preserving leftover time.
	                let nextTime = current.trackLast - next.delay;
	                if (nextTime >= 0) {
	                    next.delay = 0;
	                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;
	                    current.trackTime += currentDelta;
	                    this.setCurrent(i, next, true);
	                    while (next.mixingFrom) {
	                        next.mixTime += delta;
	                        next = next.mixingFrom;
	                    }
	                    continue;
	                }
	            }
	            else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {
	                tracks[i] = null;
	                this.queue.end(current);
	                this.clearNext(current);
	                continue;
	            }
	            if (current.mixingFrom && this.updateMixingFrom(current, delta)) {
	                // End mixing from entries once all have completed.
	                let from = current.mixingFrom;
	                current.mixingFrom = null;
	                if (from)
	                    from.mixingTo = null;
	                while (from) {
	                    this.queue.end(from);
	                    from = from.mixingFrom;
	                }
	            }
	            current.trackTime += currentDelta;
	        }
	        this.queue.drain();
	    }
	    /** Returns true when all mixing from entries are complete. */
	    updateMixingFrom(to, delta) {
	        let from = to.mixingFrom;
	        if (!from)
	            return true;
	        let finished = this.updateMixingFrom(from, delta);
	        from.animationLast = from.nextAnimationLast;
	        from.trackLast = from.nextTrackLast;
	        if (to.nextTrackLast != -1) { // The from entry was applied at least once.
	            const discard = to.mixTime == 0 && from.mixTime == 0; // Discard the from entry when neither have advanced yet.
	            if (to.mixTime >= to.mixDuration || discard) {
	                // Require totalAlpha == 0 to ensure mixing is complete or the transition is a single frame or discarded.
	                if (from.totalAlpha == 0 || to.mixDuration == 0 || discard) {
	                    to.mixingFrom = from.mixingFrom;
	                    if (from.mixingFrom != null)
	                        from.mixingFrom.mixingTo = to;
	                    to.interruptAlpha = from.interruptAlpha;
	                    this.queue.end(from);
	                }
	                return finished;
	            }
	        }
	        from.trackTime += delta * from.timeScale;
	        to.mixTime += delta;
	        return false;
	    }
	    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the
	     * animation state can be applied to multiple skeletons to pose them identically.
	     * @returns True if any animations were applied. */
	    apply(skeleton) {
	        if (!skeleton)
	            throw new Error("skeleton cannot be null.");
	        if (this.animationsChanged)
	            this._animationsChanged();
	        let events = this.events;
	        let tracks = this.tracks;
	        let applied = false;
	        for (let i = 0, n = tracks.length; i < n; i++) {
	            let current = tracks[i];
	            if (!current || current.delay > 0)
	                continue;
	            applied = true;
	            let blend = i == 0 ? MixBlend.first : current.mixBlend;
	            // Apply mixing from entries first.
	            let alpha = current.alpha;
	            if (current.mixingFrom)
	                alpha *= this.applyMixingFrom(current, skeleton, blend);
	            else if (current.trackTime >= current.trackEnd && !current.next)
	                alpha = 0;
	            let attachments = alpha >= current.alphaAttachmentThreshold;
	            // Apply current entry.
	            let animationLast = current.animationLast, animationTime = current.getAnimationTime(), applyTime = animationTime;
	            let applyEvents = events;
	            if (current.reverse) {
	                applyTime = current.animation.duration - applyTime;
	                applyEvents = null;
	            }
	            let timelines = current.animation.timelines;
	            let timelineCount = timelines.length;
	            if ((i == 0 && alpha == 1) || blend == MixBlend.add) {
	                if (i == 0)
	                    attachments = true;
	                for (let ii = 0; ii < timelineCount; ii++) {
	                    var timeline = timelines[ii];
	                    if (timeline instanceof AttachmentTimeline)
	                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, attachments);
	                    else
	                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, alpha, blend, MixDirection.mixIn);
	                }
	            }
	            else {
	                let timelineMode = current.timelineMode;
	                let shortestRotation = current.shortestRotation;
	                let firstFrame = !shortestRotation && current.timelinesRotation.length != timelineCount << 1;
	                if (firstFrame)
	                    current.timelinesRotation.length = timelineCount << 1;
	                for (let ii = 0; ii < timelineCount; ii++) {
	                    let timeline = timelines[ii];
	                    let timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;
	                    if (!shortestRotation && timeline instanceof RotateTimeline) {
	                        this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);
	                    }
	                    else if (timeline instanceof AttachmentTimeline) {
	                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, attachments);
	                    }
	                    else {
	                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, alpha, timelineBlend, MixDirection.mixIn);
	                    }
	                }
	            }
	            this.queueEvents(current, animationTime);
	            events.length = 0;
	            current.nextAnimationLast = animationTime;
	            current.nextTrackLast = current.trackTime;
	        }
	        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so
	        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or
	        // the time is before the first key).
	        var setupState = this.unkeyedState + SETUP;
	        var slots = skeleton.slots;
	        for (var i = 0, n = skeleton.slots.length; i < n; i++) {
	            var slot = slots[i];
	            if (slot.attachmentState == setupState) {
	                var attachmentName = slot.data.attachmentName;
	                slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));
	            }
	        }
	        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.
	        this.queue.drain();
	        return applied;
	    }
	    applyMixingFrom(to, skeleton, blend) {
	        let from = to.mixingFrom;
	        if (from.mixingFrom)
	            this.applyMixingFrom(from, skeleton, blend);
	        let mix = 0;
	        if (to.mixDuration == 0) { // Single frame mix to undo mixingFrom changes.
	            mix = 1;
	            if (blend == MixBlend.first)
	                blend = MixBlend.setup;
	        }
	        else {
	            mix = to.mixTime / to.mixDuration;
	            if (mix > 1)
	                mix = 1;
	            if (blend != MixBlend.first)
	                blend = from.mixBlend;
	        }
	        let attachments = mix < from.mixAttachmentThreshold, drawOrder = mix < from.mixDrawOrderThreshold;
	        let timelines = from.animation.timelines;
	        let timelineCount = timelines.length;
	        let alphaHold = from.alpha * to.interruptAlpha, alphaMix = alphaHold * (1 - mix);
	        let animationLast = from.animationLast, animationTime = from.getAnimationTime(), applyTime = animationTime;
	        let events = null;
	        if (from.reverse)
	            applyTime = from.animation.duration - applyTime;
	        else if (mix < from.eventThreshold)
	            events = this.events;
	        if (blend == MixBlend.add) {
	            for (let i = 0; i < timelineCount; i++)
	                timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);
	        }
	        else {
	            let timelineMode = from.timelineMode;
	            let timelineHoldMix = from.timelineHoldMix;
	            let shortestRotation = from.shortestRotation;
	            let firstFrame = !shortestRotation && from.timelinesRotation.length != timelineCount << 1;
	            if (firstFrame)
	                from.timelinesRotation.length = timelineCount << 1;
	            from.totalAlpha = 0;
	            for (let i = 0; i < timelineCount; i++) {
	                let timeline = timelines[i];
	                let direction = MixDirection.mixOut;
	                let timelineBlend;
	                let alpha = 0;
	                switch (timelineMode[i]) {
	                    case SUBSEQUENT:
	                        if (!drawOrder && timeline instanceof DrawOrderTimeline)
	                            continue;
	                        timelineBlend = blend;
	                        alpha = alphaMix;
	                        break;
	                    case FIRST:
	                        timelineBlend = MixBlend.setup;
	                        alpha = alphaMix;
	                        break;
	                    case HOLD_SUBSEQUENT:
	                        timelineBlend = blend;
	                        alpha = alphaHold;
	                        break;
	                    case HOLD_FIRST:
	                        timelineBlend = MixBlend.setup;
	                        alpha = alphaHold;
	                        break;
	                    default:
	                        timelineBlend = MixBlend.setup;
	                        let holdMix = timelineHoldMix[i];
	                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);
	                        break;
	                }
	                from.totalAlpha += alpha;
	                if (!shortestRotation && timeline instanceof RotateTimeline)
	                    this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);
	                else if (timeline instanceof AttachmentTimeline)
	                    this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments && alpha >= from.alphaAttachmentThreshold);
	                else {
	                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)
	                        direction = MixDirection.mixIn;
	                    timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);
	                }
	            }
	        }
	        if (to.mixDuration > 0)
	            this.queueEvents(from, animationTime);
	        this.events.length = 0;
	        from.nextAnimationLast = animationTime;
	        from.nextTrackLast = from.trackTime;
	        return mix;
	    }
	    applyAttachmentTimeline(timeline, skeleton, time, blend, attachments) {
	        var slot = skeleton.slots[timeline.slotIndex];
	        if (!slot.bone.active)
	            return;
	        if (time < timeline.frames[0]) { // Time is before first frame.
	            if (blend == MixBlend.setup || blend == MixBlend.first)
	                this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);
	        }
	        else
	            this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline$1.search1(timeline.frames, time)], attachments);
	        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.
	        if (slot.attachmentState <= this.unkeyedState)
	            slot.attachmentState = this.unkeyedState + SETUP;
	    }
	    setAttachment(skeleton, slot, attachmentName, attachments) {
	        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));
	        if (attachments)
	            slot.attachmentState = this.unkeyedState + CURRENT;
	    }
	    applyRotateTimeline(timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {
	        if (firstFrame)
	            timelinesRotation[i] = 0;
	        if (alpha == 1) {
	            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);
	            return;
	        }
	        let bone = skeleton.bones[timeline.boneIndex];
	        if (!bone.active)
	            return;
	        let frames = timeline.frames;
	        let r1 = 0, r2 = 0;
	        if (time < frames[0]) {
	            switch (blend) {
	                case MixBlend.setup:
	                    bone.rotation = bone.data.rotation;
	                default:
	                    return;
	                case MixBlend.first:
	                    r1 = bone.rotation;
	                    r2 = bone.data.rotation;
	            }
	        }
	        else {
	            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;
	            r2 = bone.data.rotation + timeline.getCurveValue(time);
	        }
	        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.
	        let total = 0, diff = r2 - r1;
	        diff -= Math.ceil(diff / 360 - 0.5) * 360;
	        if (diff == 0) {
	            total = timelinesRotation[i];
	        }
	        else {
	            let lastTotal = 0, lastDiff = 0;
	            if (firstFrame) {
	                lastTotal = 0;
	                lastDiff = diff;
	            }
	            else {
	                lastTotal = timelinesRotation[i];
	                lastDiff = timelinesRotation[i + 1];
	            }
	            let loops = lastTotal - lastTotal % 360;
	            total = diff + loops;
	            let current = diff >= 0, dir = lastTotal >= 0;
	            if (Math.abs(lastDiff) <= 90 && MathUtils.signum(lastDiff) != MathUtils.signum(diff)) {
	                if (Math.abs(lastTotal - loops) > 180) {
	                    total += 360 * MathUtils.signum(lastTotal);
	                    dir = current;
	                }
	                else if (loops != 0)
	                    total -= 360 * MathUtils.signum(lastTotal);
	                else
	                    dir = current;
	            }
	            if (dir != current)
	                total += 360 * MathUtils.signum(lastTotal);
	            timelinesRotation[i] = total;
	        }
	        timelinesRotation[i + 1] = diff;
	        bone.rotation = r1 + total * alpha;
	    }
	    queueEvents(entry, animationTime) {
	        let animationStart = entry.animationStart, animationEnd = entry.animationEnd;
	        let duration = animationEnd - animationStart;
	        let trackLastWrapped = entry.trackLast % duration;
	        // Queue events before complete.
	        let events = this.events;
	        let i = 0, n = events.length;
	        for (; i < n; i++) {
	            let event = events[i];
	            if (event.time < trackLastWrapped)
	                break;
	            if (event.time > animationEnd)
	                continue; // Discard events outside animation start/end.
	            this.queue.event(entry, event);
	        }
	        // Queue complete if completed a loop iteration or the animation.
	        let complete = false;
	        if (entry.loop) {
	            if (duration == 0)
	                complete = true;
	            else {
	                const cycles = Math.floor(entry.trackTime / duration);
	                complete = cycles > 0 && cycles > Math.floor(entry.trackLast / duration);
	            }
	        }
	        else
	            complete = animationTime >= animationEnd && entry.animationLast < animationEnd;
	        if (complete)
	            this.queue.complete(entry);
	        // Queue events after complete.
	        for (; i < n; i++) {
	            let event = events[i];
	            if (event.time < animationStart)
	                continue; // Discard events outside animation start/end.
	            this.queue.event(entry, event);
	        }
	    }
	    /** Removes all animations from all tracks, leaving skeletons in their current pose.
	     *
	     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,
	     * rather than leaving them in their current pose. */
	    clearTracks() {
	        let oldDrainDisabled = this.queue.drainDisabled;
	        this.queue.drainDisabled = true;
	        for (let i = 0, n = this.tracks.length; i < n; i++)
	            this.clearTrack(i);
	        this.tracks.length = 0;
	        this.queue.drainDisabled = oldDrainDisabled;
	        this.queue.drain();
	    }
	    /** Removes all animations from the track, leaving skeletons in their current pose.
	     *
	     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,
	     * rather than leaving them in their current pose. */
	    clearTrack(trackIndex) {
	        if (trackIndex >= this.tracks.length)
	            return;
	        let current = this.tracks[trackIndex];
	        if (!current)
	            return;
	        this.queue.end(current);
	        this.clearNext(current);
	        let entry = current;
	        while (true) {
	            let from = entry.mixingFrom;
	            if (!from)
	                break;
	            this.queue.end(from);
	            entry.mixingFrom = null;
	            entry.mixingTo = null;
	            entry = from;
	        }
	        this.tracks[current.trackIndex] = null;
	        this.queue.drain();
	    }
	    setCurrent(index, current, interrupt) {
	        let from = this.expandToIndex(index);
	        this.tracks[index] = current;
	        current.previous = null;
	        if (from) {
	            if (interrupt)
	                this.queue.interrupt(from);
	            current.mixingFrom = from;
	            from.mixingTo = current;
	            current.mixTime = 0;
	            // Store the interrupted mix percentage.
	            if (from.mixingFrom && from.mixDuration > 0)
	                current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);
	            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.
	        }
	        this.queue.start(current);
	    }
	    /** Sets an animation by name.
	      *
	      * See {@link #setAnimationWith()}. */
	    setAnimation(trackIndex, animationName, loop = false) {
	        let animation = this.data.skeletonData.findAnimation(animationName);
	        if (!animation)
	            throw new Error("Animation not found: " + animationName);
	        return this.setAnimationWith(trackIndex, animation, loop);
	    }
	    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never
	     * applied to a skeleton, it is replaced (not mixed from).
	     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its
	     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.
	     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept
	     *         after the {@link AnimationStateListener#dispose()} event occurs. */
	    setAnimationWith(trackIndex, animation, loop = false) {
	        if (!animation)
	            throw new Error("animation cannot be null.");
	        let interrupt = true;
	        let current = this.expandToIndex(trackIndex);
	        if (current) {
	            if (current.nextTrackLast == -1) {
	                // Don't mix from an entry that was never applied.
	                this.tracks[trackIndex] = current.mixingFrom;
	                this.queue.interrupt(current);
	                this.queue.end(current);
	                this.clearNext(current);
	                current = current.mixingFrom;
	                interrupt = false;
	            }
	            else
	                this.clearNext(current);
	        }
	        let entry = this.trackEntry(trackIndex, animation, loop, current);
	        this.setCurrent(trackIndex, entry, interrupt);
	        this.queue.drain();
	        return entry;
	    }
	    /** Queues an animation by name.
	     *
	     * See {@link #addAnimationWith()}. */
	    addAnimation(trackIndex, animationName, loop = false, delay = 0) {
	        let animation = this.data.skeletonData.findAnimation(animationName);
	        if (!animation)
	            throw new Error("Animation not found: " + animationName);
	        return this.addAnimationWith(trackIndex, animation, loop, delay);
	    }
	    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is
	     * equivalent to calling {@link #setAnimationWith()}.
	     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry
	     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix
	     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the
	     *           previous entry is looping, its next loop completion is used instead of its duration.
	     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept
	     *         after the {@link AnimationStateListener#dispose()} event occurs. */
	    addAnimationWith(trackIndex, animation, loop = false, delay = 0) {
	        if (!animation)
	            throw new Error("animation cannot be null.");
	        let last = this.expandToIndex(trackIndex);
	        if (last) {
	            while (last.next)
	                last = last.next;
	        }
	        let entry = this.trackEntry(trackIndex, animation, loop, last);
	        if (!last) {
	            this.setCurrent(trackIndex, entry, true);
	            this.queue.drain();
	        }
	        else {
	            last.next = entry;
	            entry.previous = last;
	            if (delay <= 0)
	                delay += last.getTrackComplete() - entry.mixDuration;
	        }
	        entry.delay = delay;
	        return entry;
	    }
	    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's
	     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.
	     *
	     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},
	     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes
	     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation
	     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of
	     * 0 still mixes out over one frame.
	     *
	     * Mixing in is done by first setting an empty animation, then adding an animation using
	     * {@link #addAnimation()} and on the returned track entry, set the
	     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and
	     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the
	     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */
	    setEmptyAnimation(trackIndex, mixDuration = 0) {
	        let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);
	        entry.mixDuration = mixDuration;
	        entry.trackEnd = mixDuration;
	        return entry;
	    }
	    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's
	     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling
	     * {@link #setEmptyAnimation()}.
	     *
	     * See {@link #setEmptyAnimation()}.
	     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry
	     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or
	     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next
	     *           loop completion is used instead of its duration.
	     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept
	     *         after the {@link AnimationStateListener#dispose()} event occurs. */
	    addEmptyAnimation(trackIndex, mixDuration = 0, delay = 0) {
	        let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);
	        if (delay <= 0)
	            entry.delay += entry.mixDuration - mixDuration;
	        entry.mixDuration = mixDuration;
	        entry.trackEnd = mixDuration;
	        return entry;
	    }
	    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix
	      * duration. */
	    setEmptyAnimations(mixDuration = 0) {
	        let oldDrainDisabled = this.queue.drainDisabled;
	        this.queue.drainDisabled = true;
	        for (let i = 0, n = this.tracks.length; i < n; i++) {
	            let current = this.tracks[i];
	            if (current)
	                this.setEmptyAnimation(current.trackIndex, mixDuration);
	        }
	        this.queue.drainDisabled = oldDrainDisabled;
	        this.queue.drain();
	    }
	    expandToIndex(index) {
	        if (index < this.tracks.length)
	            return this.tracks[index];
	        Utils.ensureArrayCapacity(this.tracks, index + 1, null);
	        this.tracks.length = index + 1;
	        return null;
	    }
	    /** @param last May be null. */
	    trackEntry(trackIndex, animation, loop, last) {
	        let entry = this.trackEntryPool.obtain();
	        entry.reset();
	        entry.trackIndex = trackIndex;
	        entry.animation = animation;
	        entry.loop = loop;
	        entry.holdPrevious = false;
	        entry.reverse = false;
	        entry.shortestRotation = false;
	        entry.eventThreshold = 0;
	        entry.alphaAttachmentThreshold = 0;
	        entry.mixAttachmentThreshold = 0;
	        entry.mixDrawOrderThreshold = 0;
	        entry.animationStart = 0;
	        entry.animationEnd = animation.duration;
	        entry.animationLast = -1;
	        entry.nextAnimationLast = -1;
	        entry.delay = 0;
	        entry.trackTime = 0;
	        entry.trackLast = -1;
	        entry.nextTrackLast = -1;
	        entry.trackEnd = Number.MAX_VALUE;
	        entry.timeScale = 1;
	        entry.alpha = 1;
	        entry.mixTime = 0;
	        entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);
	        entry.interruptAlpha = 1;
	        entry.totalAlpha = 0;
	        entry.mixBlend = MixBlend.replace;
	        return entry;
	    }
	    /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */
	    clearNext(entry) {
	        let next = entry.next;
	        while (next) {
	            this.queue.dispose(next);
	            next = next.next;
	        }
	        entry.next = null;
	    }
	    _animationsChanged() {
	        this.animationsChanged = false;
	        this.propertyIDs.clear();
	        let tracks = this.tracks;
	        for (let i = 0, n = tracks.length; i < n; i++) {
	            let entry = tracks[i];
	            if (!entry)
	                continue;
	            while (entry.mixingFrom)
	                entry = entry.mixingFrom;
	            do {
	                if (!entry.mixingTo || entry.mixBlend != MixBlend.add)
	                    this.computeHold(entry);
	                entry = entry.mixingTo;
	            } while (entry);
	        }
	    }
	    computeHold(entry) {
	        let to = entry.mixingTo;
	        let timelines = entry.animation.timelines;
	        let timelinesCount = entry.animation.timelines.length;
	        let timelineMode = entry.timelineMode;
	        timelineMode.length = timelinesCount;
	        let timelineHoldMix = entry.timelineHoldMix;
	        timelineHoldMix.length = 0;
	        let propertyIDs = this.propertyIDs;
	        if (to && to.holdPrevious) {
	            for (let i = 0; i < timelinesCount; i++)
	                timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;
	            return;
	        }
	        outer: for (let i = 0; i < timelinesCount; i++) {
	            let timeline = timelines[i];
	            let ids = timeline.getPropertyIds();
	            if (!propertyIDs.addAll(ids))
	                timelineMode[i] = SUBSEQUENT;
	            else if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline
	                || timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {
	                timelineMode[i] = FIRST;
	            }
	            else {
	                for (let next = to.mixingTo; next; next = next.mixingTo) {
	                    if (next.animation.hasTimeline(ids))
	                        continue;
	                    if (entry.mixDuration > 0) {
	                        timelineMode[i] = HOLD_MIX;
	                        timelineHoldMix[i] = next;
	                        continue outer;
	                    }
	                    break;
	                }
	                timelineMode[i] = HOLD_FIRST;
	            }
	        }
	    }
	    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */
	    getCurrent(trackIndex) {
	        if (trackIndex >= this.tracks.length)
	            return null;
	        return this.tracks[trackIndex];
	    }
	    /** Adds a listener to receive events for all track entries. */
	    addListener(listener) {
	        if (!listener)
	            throw new Error("listener cannot be null.");
	        this.listeners.push(listener);
	    }
	    /** Removes the listener added with {@link #addListener()}. */
	    removeListener(listener) {
	        let index = this.listeners.indexOf(listener);
	        if (index >= 0)
	            this.listeners.splice(index, 1);
	    }
	    /** Removes all listeners added with {@link #addListener()}. */
	    clearListeners() {
	        this.listeners.length = 0;
	    }
	    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an
	     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery
	     * are not wanted because new animations are being set. */
	    clearListenerNotifications() {
	        this.queue.clear();
	    }
	}
	/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.
	 *
	 * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */
	class TrackEntry {
	    /** The animation to apply for this track entry. */
	    animation = null;
	    previous = null;
	    /** The animation queued to start after this animation, or null. `next` makes up a linked list. */
	    next = null;
	    /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no
	     * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */
	    mixingFrom = null;
	    /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is
	     * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */
	    mixingTo = null;
	    /** The listener for events generated by this track entry, or null.
	     *
	     * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation
	     * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */
	    listener = null;
	    /** The index of the track where this track entry is either current or queued.
	     *
	     * See {@link AnimationState#getCurrent()}. */
	    trackIndex = 0;
	    /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its
	     * duration. */
	    loop = false;
	    /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead
	     * of being mixed out.
	     *
	     * When mixing between animations that key the same property, if a lower track also keys that property then the value will
	     * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%
	     * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation
	     * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which
	     * keys the property, only when a higher track also keys the property.
	     *
	     * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the
	     * previous animation. */
	    holdPrevious = false;
	    reverse = false;
	    shortestRotation = false;
	    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the
	     * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event
	     * timelines are not applied while this animation is being mixed out. */
	    eventThreshold = 0;
	    /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the
	     * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to
	     * 0, so attachment timelines are not applied while this animation is being mixed out. */
	    mixAttachmentThreshold = 0;
	    /** When {@link #getAlpha()} is greater than <code>alphaAttachmentThreshold</code>, attachment timelines are applied.
	     * Defaults to 0, so attachment timelines are always applied. */
	    alphaAttachmentThreshold = 0;
	    /** When the mix percentage ({@link #getMixTime()} / {@link #getMixDuration()}) is less than the
	     * <code>mixDrawOrderThreshold</code>, draw order timelines are applied while this animation is being mixed out. Defaults to
	     * 0, so draw order timelines are not applied while this animation is being mixed out. */
	    mixDrawOrderThreshold = 0;
	    /** Seconds when this animation starts, both initially and after looping. Defaults to 0.
	     *
	     * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same
	     * value to prevent timeline keys before the start time from triggering. */
	    animationStart = 0;
	    /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will
	     * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */
	    animationEnd = 0;
	    /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this
	     * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and
	     * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation
	     * is applied. */
	    animationLast = 0;
	    nextAnimationLast = 0;
	    /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`
	     * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from
	     * the start of the previous animation to when this track entry will become the current track entry (ie when the previous
	     * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).
	     *
	     * {@link #timeScale} affects the delay. */
	    delay = 0;
	    /** Current time in seconds this track entry has been the current track entry. The track time determines
	     * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting
	     * looping. */
	    trackTime = 0;
	    trackLast = 0;
	    nextTrackLast = 0;
	    /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float
	     * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time
	     * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the
	     * properties keyed by the animation are set to the setup pose and the track is cleared.
	     *
	     * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation
	     * abruptly cease being applied. */
	    trackEnd = 0;
	    /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or
	     * faster. Defaults to 1.
	     *
	     * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to
	     * match the animation speed.
	     *
	     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the
	     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If
	     * the time scale is not 1, the delay may need to be adjusted.
	     *
	     * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */
	    timeScale = 0;
	    /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults
	     * to 1, which overwrites the skeleton's current pose with this animation.
	     *
	     * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to
	     * use alpha on track 0 if the skeleton pose is from the last frame render. */
	    alpha = 0;
	    /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be
	     * slightly more than `mixDuration` when the mix is complete. */
	    mixTime = 0;
	    /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData
	     * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).
	     *
	     * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the
	     * properties it was animating.
	     *
	     * The `mixDuration` can be set manually rather than use the value from
	     * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new
	     * track entry only before {@link AnimationState#update(float)} is first called.
	     *
	     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the
	     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set
	     * afterward. */
	    _mixDuration = 0;
	    interruptAlpha = 0;
	    totalAlpha = 0;
	    get mixDuration() {
	        return this._mixDuration;
	    }
	    set mixDuration(mixDuration) {
	        this._mixDuration = mixDuration;
	    }
	    setMixDurationWithDelay(mixDuration, delay) {
	        this._mixDuration = mixDuration;
	        if (this.previous != null && delay <= 0)
	            delay += this.previous.getTrackComplete() - mixDuration;
	        this.delay = delay;
	    }
	    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which
	     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to
	     * the values from the lower tracks.
	     *
	     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first
	     * called. */
	    mixBlend = MixBlend.replace;
	    timelineMode = new Array();
	    timelineHoldMix = new Array();
	    timelinesRotation = new Array();
	    reset() {
	        this.next = null;
	        this.previous = null;
	        this.mixingFrom = null;
	        this.mixingTo = null;
	        this.animation = null;
	        this.listener = null;
	        this.timelineMode.length = 0;
	        this.timelineHoldMix.length = 0;
	        this.timelinesRotation.length = 0;
	    }
	    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}
	     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the
	     * `animationStart` time. */
	    getAnimationTime() {
	        if (this.loop) {
	            let duration = this.animationEnd - this.animationStart;
	            if (duration == 0)
	                return this.animationStart;
	            return (this.trackTime % duration) + this.animationStart;
	        }
	        return Math.min(this.trackTime + this.animationStart, this.animationEnd);
	    }
	    setAnimationLast(animationLast) {
	        this.animationLast = animationLast;
	        this.nextAnimationLast = animationLast;
	    }
	    /** Returns true if at least one loop has been completed.
	     *
	     * See {@link AnimationStateListener#complete()}. */
	    isComplete() {
	        return this.trackTime >= this.animationEnd - this.animationStart;
	    }
	    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the
	     * long way around when using {@link #alpha} and starting animations on other tracks.
	     *
	     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:
	     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long
	     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the
	     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */
	    resetRotationDirections() {
	        this.timelinesRotation.length = 0;
	    }
	    getTrackComplete() {
	        let duration = this.animationEnd - this.animationStart;
	        if (duration != 0) {
	            if (this.loop)
	                return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.
	            if (this.trackTime < duration)
	                return duration; // Before duration.
	        }
	        return this.trackTime; // Next update.
	    }
	    /** Returns true if this track entry has been applied at least once.
	     * <p>
	     * See {@link AnimationState#apply(Skeleton)}. */
	    wasApplied() {
	        return this.nextTrackLast != -1;
	    }
	    /** Returns true if there is a {@link #getNext()} track entry and it will become the current track entry during the next
	     * {@link AnimationState#update(float)}. */
	    isNextReady() {
	        return this.next != null && this.nextTrackLast - this.next.delay >= 0;
	    }
	}
	class EventQueue {
	    objects = [];
	    drainDisabled = false;
	    animState;
	    constructor(animState) {
	        this.animState = animState;
	    }
	    start(entry) {
	        this.objects.push(EventType$1.start);
	        this.objects.push(entry);
	        this.animState.animationsChanged = true;
	    }
	    interrupt(entry) {
	        this.objects.push(EventType$1.interrupt);
	        this.objects.push(entry);
	    }
	    end(entry) {
	        this.objects.push(EventType$1.end);
	        this.objects.push(entry);
	        this.animState.animationsChanged = true;
	    }
	    dispose(entry) {
	        this.objects.push(EventType$1.dispose);
	        this.objects.push(entry);
	    }
	    complete(entry) {
	        this.objects.push(EventType$1.complete);
	        this.objects.push(entry);
	    }
	    event(entry, event) {
	        this.objects.push(EventType$1.event);
	        this.objects.push(entry);
	        this.objects.push(event);
	    }
	    drain() {
	        if (this.drainDisabled)
	            return;
	        this.drainDisabled = true;
	        let objects = this.objects;
	        let listeners = this.animState.listeners;
	        for (let i = 0; i < objects.length; i += 2) {
	            let type = objects[i];
	            let entry = objects[i + 1];
	            switch (type) {
	                case EventType$1.start:
	                    if (entry.listener && entry.listener.start)
	                        entry.listener.start(entry);
	                    for (let ii = 0; ii < listeners.length; ii++) {
	                        let listener = listeners[ii];
	                        if (listener.start)
	                            listener.start(entry);
	                    }
	                    break;
	                case EventType$1.interrupt:
	                    if (entry.listener && entry.listener.interrupt)
	                        entry.listener.interrupt(entry);
	                    for (let ii = 0; ii < listeners.length; ii++) {
	                        let listener = listeners[ii];
	                        if (listener.interrupt)
	                            listener.interrupt(entry);
	                    }
	                    break;
	                case EventType$1.end:
	                    if (entry.listener && entry.listener.end)
	                        entry.listener.end(entry);
	                    for (let ii = 0; ii < listeners.length; ii++) {
	                        let listener = listeners[ii];
	                        if (listener.end)
	                            listener.end(entry);
	                    }
	                // Fall through.
	                case EventType$1.dispose:
	                    if (entry.listener && entry.listener.dispose)
	                        entry.listener.dispose(entry);
	                    for (let ii = 0; ii < listeners.length; ii++) {
	                        let listener = listeners[ii];
	                        if (listener.dispose)
	                            listener.dispose(entry);
	                    }
	                    this.animState.trackEntryPool.free(entry);
	                    break;
	                case EventType$1.complete:
	                    if (entry.listener && entry.listener.complete)
	                        entry.listener.complete(entry);
	                    for (let ii = 0; ii < listeners.length; ii++) {
	                        let listener = listeners[ii];
	                        if (listener.complete)
	                            listener.complete(entry);
	                    }
	                    break;
	                case EventType$1.event:
	                    let event = objects[i++ + 2];
	                    if (entry.listener && entry.listener.event)
	                        entry.listener.event(entry, event);
	                    for (let ii = 0; ii < listeners.length; ii++) {
	                        let listener = listeners[ii];
	                        if (listener.event)
	                            listener.event(entry, event);
	                    }
	                    break;
	            }
	        }
	        this.clear();
	        this.drainDisabled = false;
	    }
	    clear() {
	        this.objects.length = 0;
	    }
	}
	var EventType$1;
	(function (EventType) {
	    EventType[EventType["start"] = 0] = "start";
	    EventType[EventType["interrupt"] = 1] = "interrupt";
	    EventType[EventType["end"] = 2] = "end";
	    EventType[EventType["dispose"] = 3] = "dispose";
	    EventType[EventType["complete"] = 4] = "complete";
	    EventType[EventType["event"] = 5] = "event";
	})(EventType$1 || (EventType$1 = {}));
	/** 1. A previously applied timeline has set this property.
	 *
	 * Result: Mix from the current pose to the timeline pose. */
	const SUBSEQUENT = 0;
	/** 1. This is the first timeline to set this property.
	 * 2. The next track entry applied after this one does not have a timeline to set this property.
	 *
	 * Result: Mix from the setup pose to the timeline pose. */
	const FIRST = 1;
	/** 1) A previously applied timeline has set this property.<br>
	 * 2) The next track entry to be applied does have a timeline to set this property.<br>
	 * 3) The next track entry after that one does not have a timeline to set this property.<br>
	 * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids "dipping" when crossfading
	 * animations that key the same property. A subsequent timeline will set this property using a mix. */
	const HOLD_SUBSEQUENT = 2;
	/** 1) This is the first timeline to set this property.<br>
	 * 2) The next track entry to be applied does have a timeline to set this property.<br>
	 * 3) The next track entry after that one does not have a timeline to set this property.<br>
	 * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids "dipping" when crossfading animations
	 * that key the same property. A subsequent timeline will set this property using a mix. */
	const HOLD_FIRST = 3;
	/** 1. This is the first timeline to set this property.
	 * 2. The next track entry to be applied does have a timeline to set this property.
	 * 3. The next track entry after that one does have a timeline to set this property.
	 * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.
	 *
	 * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than
	 * 2 track entries in a row have a timeline that sets the same property.
	 *
	 * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid
	 * "dipping" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A
	 * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into
	 * place. */
	const HOLD_MIX = 4;
	const SETUP = 1;
	const CURRENT = 2;

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed. */
	class AnimationStateData {
	    /** The SkeletonData to look up animations when they are specified by name. */
	    skeletonData;
	    animationToMixTime = {};
	    /** The mix duration to use when no mix duration has been defined between two animations. */
	    defaultMix = 0;
	    constructor(skeletonData) {
	        if (!skeletonData)
	            throw new Error("skeletonData cannot be null.");
	        this.skeletonData = skeletonData;
	    }
	    /** Sets a mix duration by animation name.
	     *
	     * See {@link #setMixWith()}. */
	    setMix(fromName, toName, duration) {
	        let from = this.skeletonData.findAnimation(fromName);
	        if (!from)
	            throw new Error("Animation not found: " + fromName);
	        let to = this.skeletonData.findAnimation(toName);
	        if (!to)
	            throw new Error("Animation not found: " + toName);
	        this.setMixWith(from, to, duration);
	    }
	    /** Sets the mix duration when changing from the specified animation to the other.
	     *
	     * See {@link TrackEntry#mixDuration}. */
	    setMixWith(from, to, duration) {
	        if (!from)
	            throw new Error("from cannot be null.");
	        if (!to)
	            throw new Error("to cannot be null.");
	        let key = from.name + "." + to.name;
	        this.animationToMixTime[key] = duration;
	    }
	    /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if
	      * no mix duration has been set. */
	    getMix(from, to) {
	        let key = from.name + "." + to.name;
	        let value = this.animationToMixTime[key];
	        return value === undefined ? this.defaultMix : value;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle
	 * effects, and more.
	 *
	 * See {@link SkeletonBounds} and [Bounding Boxes](http://esotericsoftware.com/spine-bounding-boxes) in the Spine User
	 * Guide. */
	class BoundingBoxAttachment extends VertexAttachment {
	    color = new Color(1, 1, 1, 1);
	    constructor(name) {
	        super(name);
	    }
	    copy() {
	        let copy = new BoundingBoxAttachment(this.name);
	        this.copyTo(copy);
	        copy.color.setFromColor(this.color);
	        return copy;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An attachment with vertices that make up a polygon used for clipping the rendering of other attachments. */
	class ClippingAttachment extends VertexAttachment {
	    /** Clipping is performed between the clipping polygon's slot and the end slot. Returns null if clipping is done until the end of
	     * the skeleton's rendering. */
	    endSlot = null;
	    // Nonessential.
	    /** The color of the clipping polygon as it was in Spine. Available only when nonessential data was exported. Clipping polygons
	     * are not usually rendered at runtime. */
	    color = new Color(0.2275, 0.2275, 0.8078, 1); // ce3a3aff
	    constructor(name) {
	        super(name);
	    }
	    copy() {
	        let copy = new ClippingAttachment(this.name);
	        this.copyTo(copy);
	        copy.endSlot = this.endSlot;
	        copy.color.setFromColor(this.color);
	        return copy;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class Texture {
	    _image;
	    constructor(image) {
	        this._image = image;
	    }
	    getImage() {
	        return this._image;
	    }
	}
	var TextureFilter;
	(function (TextureFilter) {
	    TextureFilter[TextureFilter["Nearest"] = 9728] = "Nearest";
	    TextureFilter[TextureFilter["Linear"] = 9729] = "Linear";
	    TextureFilter[TextureFilter["MipMap"] = 9987] = "MipMap";
	    TextureFilter[TextureFilter["MipMapNearestNearest"] = 9984] = "MipMapNearestNearest";
	    TextureFilter[TextureFilter["MipMapLinearNearest"] = 9985] = "MipMapLinearNearest";
	    TextureFilter[TextureFilter["MipMapNearestLinear"] = 9986] = "MipMapNearestLinear";
	    TextureFilter[TextureFilter["MipMapLinearLinear"] = 9987] = "MipMapLinearLinear"; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR
	})(TextureFilter || (TextureFilter = {}));
	var TextureWrap;
	(function (TextureWrap) {
	    TextureWrap[TextureWrap["MirroredRepeat"] = 33648] = "MirroredRepeat";
	    TextureWrap[TextureWrap["ClampToEdge"] = 33071] = "ClampToEdge";
	    TextureWrap[TextureWrap["Repeat"] = 10497] = "Repeat"; // WebGLRenderingContext.REPEAT
	})(TextureWrap || (TextureWrap = {}));
	class TextureRegion {
	    texture;
	    u = 0;
	    v = 0;
	    u2 = 0;
	    v2 = 0;
	    width = 0;
	    height = 0;
	    degrees = 0;
	    offsetX = 0;
	    offsetY = 0;
	    originalWidth = 0;
	    originalHeight = 0;
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class TextureAtlas {
	    pages = new Array();
	    regions = new Array();
	    constructor(atlasText) {
	        let reader = new TextureAtlasReader(atlasText);
	        let entry = new Array(4);
	        let pageFields = {};
	        pageFields["size"] = (page) => {
	            page.width = parseInt(entry[1]);
	            page.height = parseInt(entry[2]);
	        };
	        pageFields["format"] = () => {
	            // page.format = Format[tuple[0]]; we don't need format in WebGL
	        };
	        pageFields["filter"] = (page) => {
	            page.minFilter = Utils.enumValue(TextureFilter, entry[1]);
	            page.magFilter = Utils.enumValue(TextureFilter, entry[2]);
	        };
	        pageFields["repeat"] = (page) => {
	            if (entry[1].indexOf('x') != -1)
	                page.uWrap = TextureWrap.Repeat;
	            if (entry[1].indexOf('y') != -1)
	                page.vWrap = TextureWrap.Repeat;
	        };
	        pageFields["pma"] = (page) => {
	            page.pma = entry[1] == "true";
	        };
	        var regionFields = {};
	        regionFields["xy"] = (region) => {
	            region.x = parseInt(entry[1]);
	            region.y = parseInt(entry[2]);
	        };
	        regionFields["size"] = (region) => {
	            region.width = parseInt(entry[1]);
	            region.height = parseInt(entry[2]);
	        };
	        regionFields["bounds"] = (region) => {
	            region.x = parseInt(entry[1]);
	            region.y = parseInt(entry[2]);
	            region.width = parseInt(entry[3]);
	            region.height = parseInt(entry[4]);
	        };
	        regionFields["offset"] = (region) => {
	            region.offsetX = parseInt(entry[1]);
	            region.offsetY = parseInt(entry[2]);
	        };
	        regionFields["orig"] = (region) => {
	            region.originalWidth = parseInt(entry[1]);
	            region.originalHeight = parseInt(entry[2]);
	        };
	        regionFields["offsets"] = (region) => {
	            region.offsetX = parseInt(entry[1]);
	            region.offsetY = parseInt(entry[2]);
	            region.originalWidth = parseInt(entry[3]);
	            region.originalHeight = parseInt(entry[4]);
	        };
	        regionFields["rotate"] = (region) => {
	            let value = entry[1];
	            if (value == "true")
	                region.degrees = 90;
	            else if (value != "false")
	                region.degrees = parseInt(value);
	        };
	        regionFields["index"] = (region) => {
	            region.index = parseInt(entry[1]);
	        };
	        let line = reader.readLine();
	        // Ignore empty lines before first entry.
	        while (line && line.trim().length == 0)
	            line = reader.readLine();
	        // Header entries.
	        while (true) {
	            if (!line || line.trim().length == 0)
	                break;
	            if (reader.readEntry(entry, line) == 0)
	                break; // Silently ignore all header fields.
	            line = reader.readLine();
	        }
	        // Page and region entries.
	        let page = null;
	        let names = null;
	        let values = null;
	        while (true) {
	            if (line === null)
	                break;
	            if (line.trim().length == 0) {
	                page = null;
	                line = reader.readLine();
	            }
	            else if (!page) {
	                page = new TextureAtlasPage(line.trim());
	                while (true) {
	                    if (reader.readEntry(entry, line = reader.readLine()) == 0)
	                        break;
	                    let field = pageFields[entry[0]];
	                    if (field)
	                        field(page);
	                }
	                this.pages.push(page);
	            }
	            else {
	                let region = new TextureAtlasRegion(page, line);
	                while (true) {
	                    let count = reader.readEntry(entry, line = reader.readLine());
	                    if (count == 0)
	                        break;
	                    let field = regionFields[entry[0]];
	                    if (field)
	                        field(region);
	                    else {
	                        if (!names)
	                            names = [];
	                        if (!values)
	                            values = [];
	                        names.push(entry[0]);
	                        let entryValues = [];
	                        for (let i = 0; i < count; i++)
	                            entryValues.push(parseInt(entry[i + 1]));
	                        values.push(entryValues);
	                    }
	                }
	                if (region.originalWidth == 0 && region.originalHeight == 0) {
	                    region.originalWidth = region.width;
	                    region.originalHeight = region.height;
	                }
	                if (names && names.length > 0 && values && values.length > 0) {
	                    region.names = names;
	                    region.values = values;
	                    names = null;
	                    values = null;
	                }
	                region.u = region.x / page.width;
	                region.v = region.y / page.height;
	                if (region.degrees == 90) {
	                    region.u2 = (region.x + region.height) / page.width;
	                    region.v2 = (region.y + region.width) / page.height;
	                }
	                else {
	                    region.u2 = (region.x + region.width) / page.width;
	                    region.v2 = (region.y + region.height) / page.height;
	                }
	                this.regions.push(region);
	            }
	        }
	    }
	    findRegion(name) {
	        for (let i = 0; i < this.regions.length; i++) {
	            if (this.regions[i].name == name) {
	                return this.regions[i];
	            }
	        }
	        return null;
	    }
	    setTextures(assetManager, pathPrefix = "") {
	        for (let page of this.pages)
	            page.setTexture(assetManager.get(pathPrefix + page.name));
	    }
	    dispose() {
	        for (let i = 0; i < this.pages.length; i++) {
	            this.pages[i].texture?.dispose();
	        }
	    }
	}
	class TextureAtlasReader {
	    lines;
	    index = 0;
	    constructor(text) {
	        this.lines = text.split(/\r\n|\r|\n/);
	    }
	    readLine() {
	        if (this.index >= this.lines.length)
	            return null;
	        return this.lines[this.index++];
	    }
	    readEntry(entry, line) {
	        if (!line)
	            return 0;
	        line = line.trim();
	        if (line.length == 0)
	            return 0;
	        let colon = line.indexOf(':');
	        if (colon == -1)
	            return 0;
	        entry[0] = line.substr(0, colon).trim();
	        for (let i = 1, lastMatch = colon + 1;; i++) {
	            let comma = line.indexOf(',', lastMatch);
	            if (comma == -1) {
	                entry[i] = line.substr(lastMatch).trim();
	                return i;
	            }
	            entry[i] = line.substr(lastMatch, comma - lastMatch).trim();
	            lastMatch = comma + 1;
	            if (i == 4)
	                return 4;
	        }
	    }
	}
	class TextureAtlasPage {
	    name;
	    minFilter = TextureFilter.Nearest;
	    magFilter = TextureFilter.Nearest;
	    uWrap = TextureWrap.ClampToEdge;
	    vWrap = TextureWrap.ClampToEdge;
	    texture = null;
	    width = 0;
	    height = 0;
	    pma = false;
	    regions = new Array();
	    constructor(name) {
	        this.name = name;
	    }
	    setTexture(texture) {
	        this.texture = texture;
	        texture.setFilters(this.minFilter, this.magFilter);
	        texture.setWraps(this.uWrap, this.vWrap);
	        for (let region of this.regions)
	            region.texture = texture;
	    }
	}
	class TextureAtlasRegion extends TextureRegion {
	    page;
	    name;
	    x = 0;
	    y = 0;
	    offsetX = 0;
	    offsetY = 0;
	    originalWidth = 0;
	    originalHeight = 0;
	    index = 0;
	    degrees = 0;
	    names = null;
	    values = null;
	    constructor(page, name) {
	        super();
	        this.page = page;
	        this.name = name;
	        page.regions.push(this);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not
	 * supported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.
	 *
	 * See [Mesh attachments](http://esotericsoftware.com/spine-meshes) in the Spine User Guide. */
	class MeshAttachment extends VertexAttachment {
	    region = null;
	    /** The name of the texture region for this attachment. */
	    path;
	    /** The UV pair for each vertex, normalized within the texture region. */
	    regionUVs = [];
	    /** The UV pair for each vertex, normalized within the entire texture.
	     *
	     * See {@link #updateUVs}. */
	    uvs = [];
	    /** Triplets of vertex indices which describe the mesh's triangulation. */
	    triangles = [];
	    /** The color to tint the mesh. */
	    color = new Color(1, 1, 1, 1);
	    /** The width of the mesh's image. Available only when nonessential data was exported. */
	    width = 0;
	    /** The height of the mesh's image. Available only when nonessential data was exported. */
	    height = 0;
	    /** The number of entries at the beginning of {@link #vertices} that make up the mesh hull. */
	    hullLength = 0;
	    /** Vertex index pairs describing edges for controling triangulation. Mesh triangles will never cross edges. Only available if
	     * nonessential data was exported. Triangulation is not performed at runtime. */
	    edges = [];
	    parentMesh = null;
	    sequence = null;
	    tempColor = new Color(0, 0, 0, 0);
	    constructor(name, path) {
	        super(name);
	        this.path = path;
	    }
	    /** Calculates {@link #uvs} using the {@link #regionUVs} and region. Must be called if the region, the region's properties, or
	     * the {@link #regionUVs} are changed. */
	    updateRegion() {
	        if (!this.region)
	            throw new Error("Region not set.");
	        let regionUVs = this.regionUVs;
	        if (!this.uvs || this.uvs.length != regionUVs.length)
	            this.uvs = Utils.newFloatArray(regionUVs.length);
	        let uvs = this.uvs;
	        let n = this.uvs.length;
	        let u = this.region.u, v = this.region.v, width = 0, height = 0;
	        if (this.region instanceof TextureAtlasRegion) {
	            let region = this.region, page = region.page;
	            let textureWidth = page.width, textureHeight = page.height;
	            switch (region.degrees) {
	                case 90:
	                    u -= (region.originalHeight - region.offsetY - region.height) / textureWidth;
	                    v -= (region.originalWidth - region.offsetX - region.width) / textureHeight;
	                    width = region.originalHeight / textureWidth;
	                    height = region.originalWidth / textureHeight;
	                    for (let i = 0; i < n; i += 2) {
	                        uvs[i] = u + regionUVs[i + 1] * width;
	                        uvs[i + 1] = v + (1 - regionUVs[i]) * height;
	                    }
	                    return;
	                case 180:
	                    u -= (region.originalWidth - region.offsetX - region.width) / textureWidth;
	                    v -= region.offsetY / textureHeight;
	                    width = region.originalWidth / textureWidth;
	                    height = region.originalHeight / textureHeight;
	                    for (let i = 0; i < n; i += 2) {
	                        uvs[i] = u + (1 - regionUVs[i]) * width;
	                        uvs[i + 1] = v + (1 - regionUVs[i + 1]) * height;
	                    }
	                    return;
	                case 270:
	                    u -= region.offsetY / textureWidth;
	                    v -= region.offsetX / textureHeight;
	                    width = region.originalHeight / textureWidth;
	                    height = region.originalWidth / textureHeight;
	                    for (let i = 0; i < n; i += 2) {
	                        uvs[i] = u + (1 - regionUVs[i + 1]) * width;
	                        uvs[i + 1] = v + regionUVs[i] * height;
	                    }
	                    return;
	            }
	            u -= region.offsetX / textureWidth;
	            v -= (region.originalHeight - region.offsetY - region.height) / textureHeight;
	            width = region.originalWidth / textureWidth;
	            height = region.originalHeight / textureHeight;
	        }
	        else if (!this.region) {
	            u = v = 0;
	            width = height = 1;
	        }
	        else {
	            width = this.region.u2 - u;
	            height = this.region.v2 - v;
	        }
	        for (let i = 0; i < n; i += 2) {
	            uvs[i] = u + regionUVs[i] * width;
	            uvs[i + 1] = v + regionUVs[i + 1] * height;
	        }
	    }
	    /** The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},
	     * {@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the
	     * parent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture). */
	    getParentMesh() {
	        return this.parentMesh;
	    }
	    /** @param parentMesh May be null. */
	    setParentMesh(parentMesh) {
	        this.parentMesh = parentMesh;
	        if (parentMesh) {
	            this.bones = parentMesh.bones;
	            this.vertices = parentMesh.vertices;
	            this.worldVerticesLength = parentMesh.worldVerticesLength;
	            this.regionUVs = parentMesh.regionUVs;
	            this.triangles = parentMesh.triangles;
	            this.hullLength = parentMesh.hullLength;
	            this.worldVerticesLength = parentMesh.worldVerticesLength;
	        }
	    }
	    copy() {
	        if (this.parentMesh)
	            return this.newLinkedMesh();
	        let copy = new MeshAttachment(this.name, this.path);
	        copy.region = this.region;
	        copy.color.setFromColor(this.color);
	        this.copyTo(copy);
	        copy.regionUVs = new Array(this.regionUVs.length);
	        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);
	        copy.uvs = new Array(this.uvs.length);
	        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, this.uvs.length);
	        copy.triangles = new Array(this.triangles.length);
	        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);
	        copy.hullLength = this.hullLength;
	        copy.sequence = this.sequence != null ? this.sequence.copy() : null;
	        // Nonessential.
	        if (this.edges) {
	            copy.edges = new Array(this.edges.length);
	            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);
	        }
	        copy.width = this.width;
	        copy.height = this.height;
	        return copy;
	    }
	    computeWorldVertices(slot, start, count, worldVertices, offset, stride) {
	        if (this.sequence != null)
	            this.sequence.apply(slot, this);
	        super.computeWorldVertices(slot, start, count, worldVertices, offset, stride);
	    }
	    /** Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh. **/
	    newLinkedMesh() {
	        let copy = new MeshAttachment(this.name, this.path);
	        copy.region = this.region;
	        copy.color.setFromColor(this.color);
	        copy.timelineAttachment = this.timelineAttachment;
	        copy.setParentMesh(this.parentMesh ? this.parentMesh : this);
	        if (copy.region != null)
	            copy.updateRegion();
	        return copy;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An attachment whose vertices make up a composite Bezier curve.
	 *
	 * See {@link PathConstraint} and [Paths](http://esotericsoftware.com/spine-paths) in the Spine User Guide. */
	class PathAttachment extends VertexAttachment {
	    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */
	    lengths = [];
	    /** If true, the start and end knots are connected. */
	    closed = false;
	    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer
	     * calculations are performed but calculating positions along the path is less accurate. */
	    constantSpeed = false;
	    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually
	     * rendered at runtime. */
	    color = new Color(1, 1, 1, 1);
	    constructor(name) {
	        super(name);
	    }
	    copy() {
	        let copy = new PathAttachment(this.name);
	        this.copyTo(copy);
	        copy.lengths = new Array(this.lengths.length);
	        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);
	        copy.closed = closed;
	        copy.constantSpeed = this.constantSpeed;
	        copy.color.setFromColor(this.color);
	        return copy;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be
	 * used in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a
	 * skin.
	 *
	 * See [Point Attachments](http://esotericsoftware.com/spine-point-attachments) in the Spine User Guide. */
	class PointAttachment extends VertexAttachment {
	    x = 0;
	    y = 0;
	    rotation = 0;
	    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments
	     * are not usually rendered at runtime. */
	    color = new Color(0.38, 0.94, 0, 1);
	    constructor(name) {
	        super(name);
	    }
	    computeWorldPosition(bone, point) {
	        point.x = this.x * bone.a + this.y * bone.b + bone.worldX;
	        point.y = this.x * bone.c + this.y * bone.d + bone.worldY;
	        return point;
	    }
	    computeWorldRotation(bone) {
	        const r = this.rotation * MathUtils.degRad, cos = Math.cos(r), sin = Math.sin(r);
	        const x = cos * bone.a + sin * bone.b;
	        const y = cos * bone.c + sin * bone.d;
	        return MathUtils.atan2Deg(y, x);
	    }
	    copy() {
	        let copy = new PointAttachment(this.name);
	        copy.x = this.x;
	        copy.y = this.y;
	        copy.rotation = this.rotation;
	        copy.color.setFromColor(this.color);
	        return copy;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An attachment that displays a textured quadrilateral.
	 *
	 * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */
	class RegionAttachment extends Attachment {
	    /** The local x translation. */
	    x = 0;
	    /** The local y translation. */
	    y = 0;
	    /** The local scaleX. */
	    scaleX = 1;
	    /** The local scaleY. */
	    scaleY = 1;
	    /** The local rotation. */
	    rotation = 0;
	    /** The width of the region attachment in Spine. */
	    width = 0;
	    /** The height of the region attachment in Spine. */
	    height = 0;
	    /** The color to tint the region attachment. */
	    color = new Color(1, 1, 1, 1);
	    /** The name of the texture region for this attachment. */
	    path;
	    region = null;
	    sequence = null;
	    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.
	     *
	     * See {@link #updateOffset()}. */
	    offset = Utils.newFloatArray(8);
	    uvs = Utils.newFloatArray(8);
	    tempColor = new Color(1, 1, 1, 1);
	    constructor(name, path) {
	        super(name);
	        this.path = path;
	    }
	    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */
	    updateRegion() {
	        if (!this.region)
	            throw new Error("Region not set.");
	        let region = this.region;
	        let uvs = this.uvs;
	        if (region == null) {
	            uvs[0] = 0;
	            uvs[1] = 0;
	            uvs[2] = 0;
	            uvs[3] = 1;
	            uvs[4] = 1;
	            uvs[5] = 1;
	            uvs[6] = 1;
	            uvs[7] = 0;
	            return;
	        }
	        let regionScaleX = this.width / this.region.originalWidth * this.scaleX;
	        let regionScaleY = this.height / this.region.originalHeight * this.scaleY;
	        let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;
	        let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;
	        let localX2 = localX + this.region.width * regionScaleX;
	        let localY2 = localY + this.region.height * regionScaleY;
	        let radians = this.rotation * MathUtils.degRad;
	        let cos = Math.cos(radians);
	        let sin = Math.sin(radians);
	        let x = this.x, y = this.y;
	        let localXCos = localX * cos + x;
	        let localXSin = localX * sin;
	        let localYCos = localY * cos + y;
	        let localYSin = localY * sin;
	        let localX2Cos = localX2 * cos + x;
	        let localX2Sin = localX2 * sin;
	        let localY2Cos = localY2 * cos + y;
	        let localY2Sin = localY2 * sin;
	        let offset = this.offset;
	        offset[0] = localXCos - localYSin;
	        offset[1] = localYCos + localXSin;
	        offset[2] = localXCos - localY2Sin;
	        offset[3] = localY2Cos + localXSin;
	        offset[4] = localX2Cos - localY2Sin;
	        offset[5] = localY2Cos + localX2Sin;
	        offset[6] = localX2Cos - localYSin;
	        offset[7] = localYCos + localX2Sin;
	        if (region.degrees == 90) {
	            uvs[0] = region.u2;
	            uvs[1] = region.v2;
	            uvs[2] = region.u;
	            uvs[3] = region.v2;
	            uvs[4] = region.u;
	            uvs[5] = region.v;
	            uvs[6] = region.u2;
	            uvs[7] = region.v;
	        }
	        else {
	            uvs[0] = region.u;
	            uvs[1] = region.v2;
	            uvs[2] = region.u;
	            uvs[3] = region.v;
	            uvs[4] = region.u2;
	            uvs[5] = region.v;
	            uvs[6] = region.u2;
	            uvs[7] = region.v2;
	        }
	    }
	    /** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may
	     * be changed.
	     * <p>
	     * See <a href="http://esotericsoftware.com/spine-runtime-skeletons#World-transforms">World transforms</a> in the Spine
	     * Runtimes Guide.
	     * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.
	     * @param offset The <code>worldVertices</code> index to begin writing values.
	     * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */
	    computeWorldVertices(slot, worldVertices, offset, stride) {
	        if (this.sequence != null)
	            this.sequence.apply(slot, this);
	        let bone = slot.bone;
	        let vertexOffset = this.offset;
	        let x = bone.worldX, y = bone.worldY;
	        let a = bone.a, b = bone.b, c = bone.c, d = bone.d;
	        let offsetX = 0, offsetY = 0;
	        offsetX = vertexOffset[0];
	        offsetY = vertexOffset[1];
	        worldVertices[offset] = offsetX * a + offsetY * b + x; // br
	        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	        offset += stride;
	        offsetX = vertexOffset[2];
	        offsetY = vertexOffset[3];
	        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl
	        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	        offset += stride;
	        offsetX = vertexOffset[4];
	        offsetY = vertexOffset[5];
	        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul
	        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	        offset += stride;
	        offsetX = vertexOffset[6];
	        offsetY = vertexOffset[7];
	        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur
	        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	    }
	    copy() {
	        let copy = new RegionAttachment(this.name, this.path);
	        copy.region = this.region;
	        copy.x = this.x;
	        copy.y = this.y;
	        copy.scaleX = this.scaleX;
	        copy.scaleY = this.scaleY;
	        copy.rotation = this.rotation;
	        copy.width = this.width;
	        copy.height = this.height;
	        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);
	        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);
	        copy.color.setFromColor(this.color);
	        copy.sequence = this.sequence != null ? this.sequence.copy() : null;
	        return copy;
	    }
	    static X1 = 0;
	    static Y1 = 1;
	    static C1R = 2;
	    static C1G = 3;
	    static C1B = 4;
	    static C1A = 5;
	    static U1 = 6;
	    static V1 = 7;
	    static X2 = 8;
	    static Y2 = 9;
	    static C2R = 10;
	    static C2G = 11;
	    static C2B = 12;
	    static C2A = 13;
	    static U2 = 14;
	    static V2 = 15;
	    static X3 = 16;
	    static Y3 = 17;
	    static C3R = 18;
	    static C3G = 19;
	    static C3B = 20;
	    static C3A = 21;
	    static U3 = 22;
	    static V3 = 23;
	    static X4 = 24;
	    static Y4 = 25;
	    static C4R = 26;
	    static C4G = 27;
	    static C4B = 28;
	    static C4A = 29;
	    static U4 = 30;
	    static V4 = 31;
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** An {@link AttachmentLoader} that configures attachments using texture regions from an {@link TextureAtlas}.
	 *
	 * See [Loading skeleton data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the
	 * Spine Runtimes Guide. */
	class AtlasAttachmentLoader {
	    atlas;
	    constructor(atlas) {
	        this.atlas = atlas;
	    }
	    loadSequence(name, basePath, sequence) {
	        let regions = sequence.regions;
	        for (let i = 0, n = regions.length; i < n; i++) {
	            let path = sequence.getPath(basePath, i);
	            let region = this.atlas.findRegion(path);
	            if (region == null)
	                throw new Error("Region not found in atlas: " + path + " (sequence: " + name + ")");
	            regions[i] = region;
	        }
	    }
	    newRegionAttachment(skin, name, path, sequence) {
	        let attachment = new RegionAttachment(name, path);
	        if (sequence != null) {
	            this.loadSequence(name, path, sequence);
	        }
	        else {
	            let region = this.atlas.findRegion(path);
	            if (!region)
	                throw new Error("Region not found in atlas: " + path + " (region attachment: " + name + ")");
	            attachment.region = region;
	        }
	        return attachment;
	    }
	    newMeshAttachment(skin, name, path, sequence) {
	        let attachment = new MeshAttachment(name, path);
	        if (sequence != null) {
	            this.loadSequence(name, path, sequence);
	        }
	        else {
	            let region = this.atlas.findRegion(path);
	            if (!region)
	                throw new Error("Region not found in atlas: " + path + " (mesh attachment: " + name + ")");
	            attachment.region = region;
	        }
	        return attachment;
	    }
	    newBoundingBoxAttachment(skin, name) {
	        return new BoundingBoxAttachment(name);
	    }
	    newPathAttachment(skin, name) {
	        return new PathAttachment(name);
	    }
	    newPointAttachment(skin, name) {
	        return new PointAttachment(name);
	    }
	    newClippingAttachment(skin, name) {
	        return new ClippingAttachment(name);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose for a {@link Bone}. */
	class BoneData {
	    /** The index of the bone in {@link Skeleton#getBones()}. */
	    index = 0;
	    /** The name of the bone, which is unique across all bones in the skeleton. */
	    name;
	    /** @returns May be null. */
	    parent = null;
	    /** The bone's length. */
	    length = 0;
	    /** The local x translation. */
	    x = 0;
	    /** The local y translation. */
	    y = 0;
	    /** The local rotation in degrees, counter clockwise. */
	    rotation = 0;
	    /** The local scaleX. */
	    scaleX = 1;
	    /** The local scaleY. */
	    scaleY = 1;
	    /** The local shearX. */
	    shearX = 0;
	    /** The local shearX. */
	    shearY = 0;
	    /** The transform mode for how parent world transforms affect this bone. */
	    inherit = Inherit.Normal;
	    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this
	      * bone.
	      * @see Skin#bones */
	    skinRequired = false;
	    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually
	     * rendered at runtime. */
	    color = new Color();
	    /** The bone icon as it was in Spine, or null if nonessential data was not exported. */
	    icon;
	    /** False if the bone was hidden in Spine and nonessential data was exported. Does not affect runtime rendering. */
	    visible = false;
	    constructor(index, name, parent) {
	        if (index < 0)
	            throw new Error("index must be >= 0.");
	        if (!name)
	            throw new Error("name cannot be null.");
	        this.index = index;
	        this.name = name;
	        this.parent = parent;
	    }
	}
	/** Determines how a bone inherits world transforms from parent bones. */
	var Inherit;
	(function (Inherit) {
	    Inherit[Inherit["Normal"] = 0] = "Normal";
	    Inherit[Inherit["OnlyTranslation"] = 1] = "OnlyTranslation";
	    Inherit[Inherit["NoRotationOrReflection"] = 2] = "NoRotationOrReflection";
	    Inherit[Inherit["NoScale"] = 3] = "NoScale";
	    Inherit[Inherit["NoScaleOrReflection"] = 4] = "NoScaleOrReflection";
	})(Inherit || (Inherit = {}));

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores a bone's current pose.
	 *
	 * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a
	 * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a
	 * constraint or application code modifies the world transform after it was computed from the local transform. */
	class Bone {
	    /** The bone's setup pose data. */
	    data;
	    /** The skeleton this bone belongs to. */
	    skeleton;
	    /** The parent bone, or null if this is the root bone. */
	    parent = null;
	    /** The immediate children of this bone. */
	    children = new Array();
	    /** The local x translation. */
	    x = 0;
	    /** The local y translation. */
	    y = 0;
	    /** The local rotation in degrees, counter clockwise. */
	    rotation = 0;
	    /** The local scaleX. */
	    scaleX = 0;
	    /** The local scaleY. */
	    scaleY = 0;
	    /** The local shearX. */
	    shearX = 0;
	    /** The local shearY. */
	    shearY = 0;
	    /** The applied local x translation. */
	    ax = 0;
	    /** The applied local y translation. */
	    ay = 0;
	    /** The applied local rotation in degrees, counter clockwise. */
	    arotation = 0;
	    /** The applied local scaleX. */
	    ascaleX = 0;
	    /** The applied local scaleY. */
	    ascaleY = 0;
	    /** The applied local shearX. */
	    ashearX = 0;
	    /** The applied local shearY. */
	    ashearY = 0;
	    /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */
	    a = 0;
	    /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */
	    b = 0;
	    /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */
	    c = 0;
	    /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */
	    d = 0;
	    /** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */
	    worldY = 0;
	    /** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */
	    worldX = 0;
	    inherit = Inherit.Normal;
	    sorted = false;
	    active = false;
	    /** @param parent May be null. */
	    constructor(data, skeleton, parent) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        if (!skeleton)
	            throw new Error("skeleton cannot be null.");
	        this.data = data;
	        this.skeleton = skeleton;
	        this.parent = parent;
	        this.setToSetupPose();
	    }
	    /** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the
	      * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */
	    isActive() {
	        return this.active;
	    }
	    /** Computes the world transform using the parent bone and this bone's local applied transform. */
	    update(physics) {
	        this.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);
	    }
	    /** Computes the world transform using the parent bone and this bone's local transform.
	     *
	     * See {@link #updateWorldTransformWith()}. */
	    updateWorldTransform() {
	        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
	    }
	    /** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the
	     * specified local transform. Child bones are not updated.
	     *
	     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine
	     * Runtimes Guide. */
	    updateWorldTransformWith(x, y, rotation, scaleX, scaleY, shearX, shearY) {
	        this.ax = x;
	        this.ay = y;
	        this.arotation = rotation;
	        this.ascaleX = scaleX;
	        this.ascaleY = scaleY;
	        this.ashearX = shearX;
	        this.ashearY = shearY;
	        let parent = this.parent;
	        if (!parent) { // Root bone.
	            let skeleton = this.skeleton;
	            const sx = skeleton.scaleX, sy = skeleton.scaleY;
	            const rx = (rotation + shearX) * MathUtils.degRad;
	            const ry = (rotation + 90 + shearY) * MathUtils.degRad;
	            this.a = Math.cos(rx) * scaleX * sx;
	            this.b = Math.cos(ry) * scaleY * sx;
	            this.c = Math.sin(rx) * scaleX * sy;
	            this.d = Math.sin(ry) * scaleY * sy;
	            this.worldX = x * sx + skeleton.x;
	            this.worldY = y * sy + skeleton.y;
	            return;
	        }
	        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;
	        this.worldX = pa * x + pb * y + parent.worldX;
	        this.worldY = pc * x + pd * y + parent.worldY;
	        switch (this.inherit) {
	            case Inherit.Normal: {
	                const rx = (rotation + shearX) * MathUtils.degRad;
	                const ry = (rotation + 90 + shearY) * MathUtils.degRad;
	                const la = Math.cos(rx) * scaleX;
	                const lb = Math.cos(ry) * scaleY;
	                const lc = Math.sin(rx) * scaleX;
	                const ld = Math.sin(ry) * scaleY;
	                this.a = pa * la + pb * lc;
	                this.b = pa * lb + pb * ld;
	                this.c = pc * la + pd * lc;
	                this.d = pc * lb + pd * ld;
	                return;
	            }
	            case Inherit.OnlyTranslation: {
	                const rx = (rotation + shearX) * MathUtils.degRad;
	                const ry = (rotation + 90 + shearY) * MathUtils.degRad;
	                this.a = Math.cos(rx) * scaleX;
	                this.b = Math.cos(ry) * scaleY;
	                this.c = Math.sin(rx) * scaleX;
	                this.d = Math.sin(ry) * scaleY;
	                break;
	            }
	            case Inherit.NoRotationOrReflection: {
	                let sx = 1 / this.skeleton.scaleX, sy = 1 / this.skeleton.scaleY;
	                pa *= sx;
	                pc *= sy;
	                let s = pa * pa + pc * pc;
	                let prx = 0;
	                if (s > 0.0001) {
	                    s = Math.abs(pa * pd * sy - pb * sx * pc) / s;
	                    pb = pc * s;
	                    pd = pa * s;
	                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;
	                }
	                else {
	                    pa = 0;
	                    pc = 0;
	                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;
	                }
	                const rx = (rotation + shearX - prx) * MathUtils.degRad;
	                const ry = (rotation + shearY - prx + 90) * MathUtils.degRad;
	                const la = Math.cos(rx) * scaleX;
	                const lb = Math.cos(ry) * scaleY;
	                const lc = Math.sin(rx) * scaleX;
	                const ld = Math.sin(ry) * scaleY;
	                this.a = pa * la - pb * lc;
	                this.b = pa * lb - pb * ld;
	                this.c = pc * la + pd * lc;
	                this.d = pc * lb + pd * ld;
	                break;
	            }
	            case Inherit.NoScale:
	            case Inherit.NoScaleOrReflection: {
	                rotation *= MathUtils.degRad;
	                const cos = Math.cos(rotation), sin = Math.sin(rotation);
	                let za = (pa * cos + pb * sin) / this.skeleton.scaleX;
	                let zc = (pc * cos + pd * sin) / this.skeleton.scaleY;
	                let s = Math.sqrt(za * za + zc * zc);
	                if (s > 0.00001)
	                    s = 1 / s;
	                za *= s;
	                zc *= s;
	                s = Math.sqrt(za * za + zc * zc);
	                if (this.inherit == Inherit.NoScale
	                    && (pa * pd - pb * pc < 0) != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))
	                    s = -s;
	                rotation = Math.PI / 2 + Math.atan2(zc, za);
	                const zb = Math.cos(rotation) * s;
	                const zd = Math.sin(rotation) * s;
	                shearX *= MathUtils.degRad;
	                shearY = (90 + shearY) * MathUtils.degRad;
	                const la = Math.cos(shearX) * scaleX;
	                const lb = Math.cos(shearY) * scaleY;
	                const lc = Math.sin(shearX) * scaleX;
	                const ld = Math.sin(shearY) * scaleY;
	                this.a = za * la + zb * lc;
	                this.b = za * lb + zb * ld;
	                this.c = zc * la + zd * lc;
	                this.d = zc * lb + zd * ld;
	                break;
	            }
	        }
	        this.a *= this.skeleton.scaleX;
	        this.b *= this.skeleton.scaleX;
	        this.c *= this.skeleton.scaleY;
	        this.d *= this.skeleton.scaleY;
	    }
	    /** Sets this bone's local transform to the setup pose. */
	    setToSetupPose() {
	        let data = this.data;
	        this.x = data.x;
	        this.y = data.y;
	        this.rotation = data.rotation;
	        this.scaleX = data.scaleX;
	        this.scaleY = data.scaleY;
	        this.shearX = data.shearX;
	        this.shearY = data.shearY;
	        this.inherit = data.inherit;
	    }
	    /** Computes the applied transform values from the world transform.
	     *
	     * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so
	     * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other
	     * constraints).
	     *
	     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after
	     * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */
	    updateAppliedTransform() {
	        let parent = this.parent;
	        if (!parent) {
	            this.ax = this.worldX - this.skeleton.x;
	            this.ay = this.worldY - this.skeleton.y;
	            this.arotation = Math.atan2(this.c, this.a) * MathUtils.radDeg;
	            this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
	            this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
	            this.ashearX = 0;
	            this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * MathUtils.radDeg;
	            return;
	        }
	        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;
	        let pid = 1 / (pa * pd - pb * pc);
	        let ia = pd * pid, ib = pb * pid, ic = pc * pid, id = pa * pid;
	        let dx = this.worldX - parent.worldX, dy = this.worldY - parent.worldY;
	        this.ax = (dx * ia - dy * ib);
	        this.ay = (dy * id - dx * ic);
	        let ra, rb, rc, rd;
	        if (this.inherit == Inherit.OnlyTranslation) {
	            ra = this.a;
	            rb = this.b;
	            rc = this.c;
	            rd = this.d;
	        }
	        else {
	            switch (this.inherit) {
	                case Inherit.NoRotationOrReflection: {
	                    let s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);
	                    pb = -pc * this.skeleton.scaleX * s / this.skeleton.scaleY;
	                    pd = pa * this.skeleton.scaleY * s / this.skeleton.scaleX;
	                    pid = 1 / (pa * pd - pb * pc);
	                    ia = pd * pid;
	                    ib = pb * pid;
	                    break;
	                }
	                case Inherit.NoScale:
	                case Inherit.NoScaleOrReflection:
	                    let cos = MathUtils.cosDeg(this.rotation), sin = MathUtils.sinDeg(this.rotation);
	                    pa = (pa * cos + pb * sin) / this.skeleton.scaleX;
	                    pc = (pc * cos + pd * sin) / this.skeleton.scaleY;
	                    let s = Math.sqrt(pa * pa + pc * pc);
	                    if (s > 0.00001)
	                        s = 1 / s;
	                    pa *= s;
	                    pc *= s;
	                    s = Math.sqrt(pa * pa + pc * pc);
	                    if (this.inherit == Inherit.NoScale && pid < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))
	                        s = -s;
	                    let r = MathUtils.PI / 2 + Math.atan2(pc, pa);
	                    pb = Math.cos(r) * s;
	                    pd = Math.sin(r) * s;
	                    pid = 1 / (pa * pd - pb * pc);
	                    ia = pd * pid;
	                    ib = pb * pid;
	                    ic = pc * pid;
	                    id = pa * pid;
	            }
	            ra = ia * this.a - ib * this.c;
	            rb = ia * this.b - ib * this.d;
	            rc = id * this.c - ic * this.a;
	            rd = id * this.d - ic * this.b;
	        }
	        this.ashearX = 0;
	        this.ascaleX = Math.sqrt(ra * ra + rc * rc);
	        if (this.ascaleX > 0.0001) {
	            let det = ra * rd - rb * rc;
	            this.ascaleY = det / this.ascaleX;
	            this.ashearY = -Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;
	            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;
	        }
	        else {
	            this.ascaleX = 0;
	            this.ascaleY = Math.sqrt(rb * rb + rd * rd);
	            this.ashearY = 0;
	            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;
	        }
	    }
	    /** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */
	    getWorldRotationX() {
	        return Math.atan2(this.c, this.a) * MathUtils.radDeg;
	    }
	    /** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */
	    getWorldRotationY() {
	        return Math.atan2(this.d, this.b) * MathUtils.radDeg;
	    }
	    /** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */
	    getWorldScaleX() {
	        return Math.sqrt(this.a * this.a + this.c * this.c);
	    }
	    /** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */
	    getWorldScaleY() {
	        return Math.sqrt(this.b * this.b + this.d * this.d);
	    }
	    /** Transforms a point from world coordinates to the bone's local coordinates. */
	    worldToLocal(world) {
	        let invDet = 1 / (this.a * this.d - this.b * this.c);
	        let x = world.x - this.worldX, y = world.y - this.worldY;
	        world.x = x * this.d * invDet - y * this.b * invDet;
	        world.y = y * this.a * invDet - x * this.c * invDet;
	        return world;
	    }
	    /** Transforms a point from the bone's local coordinates to world coordinates. */
	    localToWorld(local) {
	        let x = local.x, y = local.y;
	        local.x = x * this.a + y * this.b + this.worldX;
	        local.y = x * this.c + y * this.d + this.worldY;
	        return local;
	    }
	    /** Transforms a point from world coordinates to the parent bone's local coordinates. */
	    worldToParent(world) {
	        if (world == null)
	            throw new Error("world cannot be null.");
	        return this.parent == null ? world : this.parent.worldToLocal(world);
	    }
	    /** Transforms a point from the parent bone's coordinates to world coordinates. */
	    parentToWorld(world) {
	        if (world == null)
	            throw new Error("world cannot be null.");
	        return this.parent == null ? world : this.parent.localToWorld(world);
	    }
	    /** Transforms a world rotation to a local rotation. */
	    worldToLocalRotation(worldRotation) {
	        let sin = MathUtils.sinDeg(worldRotation), cos = MathUtils.cosDeg(worldRotation);
	        return Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * MathUtils.radDeg + this.rotation - this.shearX;
	    }
	    /** Transforms a local rotation to a world rotation. */
	    localToWorldRotation(localRotation) {
	        localRotation -= this.rotation - this.shearX;
	        let sin = MathUtils.sinDeg(localRotation), cos = MathUtils.cosDeg(localRotation);
	        return Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * MathUtils.radDeg;
	    }
	    /** Rotates the world transform the specified amount.
	     * <p>
	     * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and
	     * {@link #update(Physics)} will need to be called on any child bones, recursively. */
	    rotateWorld(degrees) {
	        degrees *= MathUtils.degRad;
	        const sin = Math.sin(degrees), cos = Math.cos(degrees);
	        const ra = this.a, rb = this.b;
	        this.a = cos * ra - sin * this.c;
	        this.b = cos * rb - sin * this.d;
	        this.c = sin * ra + cos * this.c;
	        this.d = sin * rb + cos * this.d;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** The base class for all constraint datas. */
	class ConstraintData {
	    name;
	    order;
	    skinRequired;
	    constructor(name, order, skinRequired) {
	        this.name = name;
	        this.order = order;
	        this.skinRequired = skinRequired;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class AssetManagerBase {
	    pathPrefix = "";
	    textureLoader;
	    downloader;
	    assets = {};
	    errors = {};
	    toLoad = 0;
	    loaded = 0;
	    constructor(textureLoader, pathPrefix = "", downloader = new Downloader()) {
	        this.textureLoader = textureLoader;
	        this.pathPrefix = pathPrefix;
	        this.downloader = downloader;
	    }
	    start(path) {
	        this.toLoad++;
	        return this.pathPrefix + path;
	    }
	    success(callback, path, asset) {
	        this.toLoad--;
	        this.loaded++;
	        this.assets[path] = asset;
	        if (callback)
	            callback(path, asset);
	    }
	    error(callback, path, message) {
	        this.toLoad--;
	        this.loaded++;
	        this.errors[path] = message;
	        if (callback)
	            callback(path, message);
	    }
	    loadAll() {
	        let promise = new Promise((resolve, reject) => {
	            let check = () => {
	                if (this.isLoadingComplete()) {
	                    if (this.hasErrors())
	                        reject(this.errors);
	                    else
	                        resolve(this);
	                    return;
	                }
	                requestAnimationFrame(check);
	            };
	            requestAnimationFrame(check);
	        });
	        return promise;
	    }
	    setRawDataURI(path, data) {
	        this.downloader.rawDataUris[this.pathPrefix + path] = data;
	    }
	    loadBinary(path, success = () => { }, error = () => { }) {
	        path = this.start(path);
	        this.downloader.downloadBinary(path, (data) => {
	            this.success(success, path, data);
	        }, (status, responseText) => {
	            this.error(error, path, `Couldn't load binary ${path}: status ${status}, ${responseText}`);
	        });
	    }
	    loadText(path, success = () => { }, error = () => { }) {
	        path = this.start(path);
	        this.downloader.downloadText(path, (data) => {
	            this.success(success, path, data);
	        }, (status, responseText) => {
	            this.error(error, path, `Couldn't load text ${path}: status ${status}, ${responseText}`);
	        });
	    }
	    loadJson(path, success = () => { }, error = () => { }) {
	        path = this.start(path);
	        this.downloader.downloadJson(path, (data) => {
	            this.success(success, path, data);
	        }, (status, responseText) => {
	            this.error(error, path, `Couldn't load JSON ${path}: status ${status}, ${responseText}`);
	        });
	    }
	    loadTexture(path, success = () => { }, error = () => { }) {
	        path = this.start(path);
	        let isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document);
	        let isWebWorker = !isBrowser; // && typeof importScripts !== 'undefined';
	        if (isWebWorker) {
	            fetch(path, { mode: "cors" }).then((response) => {
	                if (response.ok)
	                    return response.blob();
	                this.error(error, path, `Couldn't load image: ${path}`);
	                return null;
	            }).then((blob) => {
	                return blob ? createImageBitmap(blob, { premultiplyAlpha: "none", colorSpaceConversion: "none" }) : null;
	            }).then((bitmap) => {
	                if (bitmap)
	                    this.success(success, path, this.textureLoader(bitmap));
	            });
	        }
	        else {
	            let image = new Image();
	            image.crossOrigin = "anonymous";
	            image.onload = () => {
	                this.success(success, path, this.textureLoader(image));
	            };
	            image.onerror = () => {
	                this.error(error, path, `Couldn't load image: ${path}`);
	            };
	            if (this.downloader.rawDataUris[path])
	                path = this.downloader.rawDataUris[path];
	            image.src = path;
	        }
	    }
	    loadTextureAtlas(path, success = () => { }, error = () => { }, fileAlias) {
	        let index = path.lastIndexOf("/");
	        let parent = index >= 0 ? path.substring(0, index + 1) : "";
	        path = this.start(path);
	        this.downloader.downloadText(path, (atlasText) => {
	            try {
	                let atlas = new TextureAtlas(atlasText);
	                let toLoad = atlas.pages.length, abort = false;
	                for (let page of atlas.pages) {
	                    this.loadTexture(!fileAlias ? parent + page.name : fileAlias[page.name], (imagePath, texture) => {
	                        if (!abort) {
	                            page.setTexture(texture);
	                            if (--toLoad == 0)
	                                this.success(success, path, atlas);
	                        }
	                    }, (imagePath, message) => {
	                        if (!abort)
	                            this.error(error, path, `Couldn't load texture atlas ${path} page image: ${imagePath}`);
	                        abort = true;
	                    });
	                }
	            }
	            catch (e) {
	                this.error(error, path, `Couldn't parse texture atlas ${path}: ${e.message}`);
	            }
	        }, (status, responseText) => {
	            this.error(error, path, `Couldn't load texture atlas ${path}: status ${status}, ${responseText}`);
	        });
	    }
	    get(path) {
	        return this.assets[this.pathPrefix + path];
	    }
	    require(path) {
	        path = this.pathPrefix + path;
	        let asset = this.assets[path];
	        if (asset)
	            return asset;
	        let error = this.errors[path];
	        throw Error("Asset not found: " + path + (error ? "\n" + error : ""));
	    }
	    remove(path) {
	        path = this.pathPrefix + path;
	        let asset = this.assets[path];
	        if (asset.dispose)
	            asset.dispose();
	        delete this.assets[path];
	        return asset;
	    }
	    removeAll() {
	        for (let key in this.assets) {
	            let asset = this.assets[key];
	            if (asset.dispose)
	                asset.dispose();
	        }
	        this.assets = {};
	    }
	    isLoadingComplete() {
	        return this.toLoad == 0;
	    }
	    getToLoad() {
	        return this.toLoad;
	    }
	    getLoaded() {
	        return this.loaded;
	    }
	    dispose() {
	        this.removeAll();
	    }
	    hasErrors() {
	        return Object.keys(this.errors).length > 0;
	    }
	    getErrors() {
	        return this.errors;
	    }
	}
	class Downloader {
	    callbacks = {};
	    rawDataUris = {};
	    dataUriToString(dataUri) {
	        if (!dataUri.startsWith("data:")) {
	            throw new Error("Not a data URI.");
	        }
	        let base64Idx = dataUri.indexOf("base64,");
	        if (base64Idx != -1) {
	            base64Idx += "base64,".length;
	            return atob(dataUri.substr(base64Idx));
	        }
	        else {
	            return dataUri.substr(dataUri.indexOf(",") + 1);
	        }
	    }
	    base64ToUint8Array(base64) {
	        var binary_string = window.atob(base64);
	        var len = binary_string.length;
	        var bytes = new Uint8Array(len);
	        for (var i = 0; i < len; i++) {
	            bytes[i] = binary_string.charCodeAt(i);
	        }
	        return bytes;
	    }
	    dataUriToUint8Array(dataUri) {
	        if (!dataUri.startsWith("data:")) {
	            throw new Error("Not a data URI.");
	        }
	        let base64Idx = dataUri.indexOf("base64,");
	        if (base64Idx == -1)
	            throw new Error("Not a binary data URI.");
	        base64Idx += "base64,".length;
	        return this.base64ToUint8Array(dataUri.substr(base64Idx));
	    }
	    downloadText(url, success, error) {
	        if (this.start(url, success, error))
	            return;
	        if (this.rawDataUris[url]) {
	            try {
	                let dataUri = this.rawDataUris[url];
	                this.finish(url, 200, this.dataUriToString(dataUri));
	            }
	            catch (e) {
	                this.finish(url, 400, JSON.stringify(e));
	            }
	            return;
	        }
	        let request = new XMLHttpRequest();
	        request.overrideMimeType("text/html");
	        request.open("GET", url, true);
	        let done = () => {
	            this.finish(url, request.status, request.responseText);
	        };
	        request.onload = done;
	        request.onerror = done;
	        request.send();
	    }
	    downloadJson(url, success, error) {
	        this.downloadText(url, (data) => {
	            success(JSON.parse(data));
	        }, error);
	    }
	    downloadBinary(url, success, error) {
	        if (this.start(url, success, error))
	            return;
	        if (this.rawDataUris[url]) {
	            try {
	                let dataUri = this.rawDataUris[url];
	                this.finish(url, 200, this.dataUriToUint8Array(dataUri));
	            }
	            catch (e) {
	                this.finish(url, 400, JSON.stringify(e));
	            }
	            return;
	        }
	        let request = new XMLHttpRequest();
	        request.open("GET", url, true);
	        request.responseType = "arraybuffer";
	        let onerror = () => {
	            this.finish(url, request.status, request.response);
	        };
	        request.onload = () => {
	            if (request.status == 200 || request.status == 0)
	                this.finish(url, 200, new Uint8Array(request.response));
	            else
	                onerror();
	        };
	        request.onerror = onerror;
	        request.send();
	    }
	    start(url, success, error) {
	        let callbacks = this.callbacks[url];
	        try {
	            if (callbacks)
	                return true;
	            this.callbacks[url] = callbacks = [];
	        }
	        finally {
	            callbacks.push(success, error);
	        }
	    }
	    finish(url, status, data) {
	        let callbacks = this.callbacks[url];
	        delete this.callbacks[url];
	        let args = status == 200 || status == 0 ? [data] : [status, data];
	        for (let i = args.length - 1, n = callbacks.length; i < n; i += 2)
	            callbacks[i].apply(null, args);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the current pose values for an {@link Event}.
	 *
	 * See Timeline {@link Timeline#apply()},
	 * AnimationStateListener {@link AnimationStateListener#event()}, and
	 * [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */
	let Event$1 = class Event {
	    data;
	    intValue = 0;
	    floatValue = 0;
	    stringValue = null;
	    time = 0;
	    volume = 0;
	    balance = 0;
	    constructor(time, data) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        this.time = time;
	        this.data = data;
	    }
	};

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose values for an {@link Event}.
	 *
	 * See [Events](http://esotericsoftware.com/spine-events) in the Spine User Guide. */
	class EventData {
	    name;
	    intValue = 0;
	    floatValue = 0;
	    stringValue = null;
	    audioPath = null;
	    volume = 0;
	    balance = 0;
	    constructor(name) {
	        this.name = name;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of
	 * the last bone is as close to the target bone as possible.
	 *
	 * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */
	class IkConstraint {
	    /** The IK constraint's setup pose data. */
	    data;
	    /** The bones that will be modified by this IK constraint. */
	    bones;
	    /** The bone that is the IK target. */
	    target;
	    /** Controls the bend direction of the IK bones, either 1 or -1. */
	    bendDirection = 0;
	    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */
	    compress = false;
	    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained
	     * and the parent bone has local nonuniform scale, stretch is not applied. */
	    stretch = false;
	    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */
	    mix = 1;
	    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */
	    softness = 0;
	    active = false;
	    constructor(data, skeleton) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        if (!skeleton)
	            throw new Error("skeleton cannot be null.");
	        this.data = data;
	        this.bones = new Array();
	        for (let i = 0; i < data.bones.length; i++) {
	            let bone = skeleton.findBone(data.bones[i].name);
	            if (!bone)
	                throw new Error(`Couldn't find bone ${data.bones[i].name}`);
	            this.bones.push(bone);
	        }
	        let target = skeleton.findBone(data.target.name);
	        if (!target)
	            throw new Error(`Couldn't find bone ${data.target.name}`);
	        this.target = target;
	        this.mix = data.mix;
	        this.softness = data.softness;
	        this.bendDirection = data.bendDirection;
	        this.compress = data.compress;
	        this.stretch = data.stretch;
	    }
	    isActive() {
	        return this.active;
	    }
	    setToSetupPose() {
	        const data = this.data;
	        this.mix = data.mix;
	        this.softness = data.softness;
	        this.bendDirection = data.bendDirection;
	        this.compress = data.compress;
	        this.stretch = data.stretch;
	    }
	    update(physics) {
	        if (this.mix == 0)
	            return;
	        let target = this.target;
	        let bones = this.bones;
	        switch (bones.length) {
	            case 1:
	                this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
	                break;
	            case 2:
	                this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.data.uniform, this.softness, this.mix);
	                break;
	        }
	    }
	    /** Applies 1 bone IK. The target is specified in the world coordinate system. */
	    apply1(bone, targetX, targetY, compress, stretch, uniform, alpha) {
	        let p = bone.parent;
	        if (!p)
	            throw new Error("IK bone must have parent.");
	        let pa = p.a, pb = p.b, pc = p.c, pd = p.d;
	        let rotationIK = -bone.ashearX - bone.arotation, tx = 0, ty = 0;
	        switch (bone.inherit) {
	            case Inherit.OnlyTranslation:
	                tx = (targetX - bone.worldX) * MathUtils.signum(bone.skeleton.scaleX);
	                ty = (targetY - bone.worldY) * MathUtils.signum(bone.skeleton.scaleY);
	                break;
	            case Inherit.NoRotationOrReflection:
	                let s = Math.abs(pa * pd - pb * pc) / Math.max(0.0001, pa * pa + pc * pc);
	                let sa = pa / bone.skeleton.scaleX;
	                let sc = pc / bone.skeleton.scaleY;
	                pb = -sc * s * bone.skeleton.scaleX;
	                pd = sa * s * bone.skeleton.scaleY;
	                rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;
	            // Fall through
	            default:
	                let x = targetX - p.worldX, y = targetY - p.worldY;
	                let d = pa * pd - pb * pc;
	                if (Math.abs(d) <= 0.0001) {
	                    tx = 0;
	                    ty = 0;
	                }
	                else {
	                    tx = (x * pd - y * pb) / d - bone.ax;
	                    ty = (y * pa - x * pc) / d - bone.ay;
	                }
	        }
	        rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;
	        if (bone.ascaleX < 0)
	            rotationIK += 180;
	        if (rotationIK > 180)
	            rotationIK -= 360;
	        else if (rotationIK < -180)
	            rotationIK += 360;
	        let sx = bone.ascaleX, sy = bone.ascaleY;
	        if (compress || stretch) {
	            switch (bone.inherit) {
	                case Inherit.NoScale:
	                case Inherit.NoScaleOrReflection:
	                    tx = targetX - bone.worldX;
	                    ty = targetY - bone.worldY;
	            }
	            const b = bone.data.length * sx;
	            if (b > 0.0001) {
	                const dd = tx * tx + ty * ty;
	                if ((compress && dd < b * b) || (stretch && dd > b * b)) {
	                    const s = (Math.sqrt(dd) / b - 1) * alpha + 1;
	                    sx *= s;
	                    if (uniform)
	                        sy *= s;
	                }
	            }
	        }
	        bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX, bone.ashearY);
	    }
	    /** Applies 2 bone IK. The target is specified in the world coordinate system.
	     * @param child A direct descendant of the parent bone. */
	    apply2(parent, child, targetX, targetY, bendDir, stretch, uniform, softness, alpha) {
	        if (parent.inherit != Inherit.Normal || child.inherit != Inherit.Normal)
	            return;
	        let px = parent.ax, py = parent.ay, psx = parent.ascaleX, psy = parent.ascaleY, sx = psx, sy = psy, csx = child.ascaleX;
	        let os1 = 0, os2 = 0, s2 = 0;
	        if (psx < 0) {
	            psx = -psx;
	            os1 = 180;
	            s2 = -1;
	        }
	        else {
	            os1 = 0;
	            s2 = 1;
	        }
	        if (psy < 0) {
	            psy = -psy;
	            s2 = -s2;
	        }
	        if (csx < 0) {
	            csx = -csx;
	            os2 = 180;
	        }
	        else
	            os2 = 0;
	        let cx = child.ax, cy = 0, cwx = 0, cwy = 0, a = parent.a, b = parent.b, c = parent.c, d = parent.d;
	        let u = Math.abs(psx - psy) <= 0.0001;
	        if (!u || stretch) {
	            cy = 0;
	            cwx = a * cx + parent.worldX;
	            cwy = c * cx + parent.worldY;
	        }
	        else {
	            cy = child.ay;
	            cwx = a * cx + b * cy + parent.worldX;
	            cwy = c * cx + d * cy + parent.worldY;
	        }
	        let pp = parent.parent;
	        if (!pp)
	            throw new Error("IK parent must itself have a parent.");
	        a = pp.a;
	        b = pp.b;
	        c = pp.c;
	        d = pp.d;
	        let id = a * d - b * c, x = cwx - pp.worldX, y = cwy - pp.worldY;
	        id = Math.abs(id) <= 0.0001 ? 0 : 1 / id;
	        let dx = (x * d - y * b) * id - px, dy = (y * a - x * c) * id - py;
	        let l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;
	        if (l1 < 0.0001) {
	            this.apply1(parent, targetX, targetY, false, stretch, false, alpha);
	            child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);
	            return;
	        }
	        x = targetX - pp.worldX;
	        y = targetY - pp.worldY;
	        let tx = (x * d - y * b) * id - px, ty = (y * a - x * c) * id - py;
	        let dd = tx * tx + ty * ty;
	        if (softness != 0) {
	            softness *= psx * (csx + 1) * 0.5;
	            let td = Math.sqrt(dd), sd = td - l1 - l2 * psx + softness;
	            if (sd > 0) {
	                let p = Math.min(1, sd / (softness * 2)) - 1;
	                p = (sd - softness * (1 - p * p)) / td;
	                tx -= p * tx;
	                ty -= p * ty;
	                dd = tx * tx + ty * ty;
	            }
	        }
	        outer: if (u) {
	            l2 *= psx;
	            let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);
	            if (cos < -1) {
	                cos = -1;
	                a2 = Math.PI * bendDir;
	            }
	            else if (cos > 1) {
	                cos = 1;
	                a2 = 0;
	                if (stretch) {
	                    a = (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;
	                    sx *= a;
	                    if (uniform)
	                        sy *= a;
	                }
	            }
	            else
	                a2 = Math.acos(cos) * bendDir;
	            a = l1 + l2 * cos;
	            b = l2 * Math.sin(a2);
	            a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);
	        }
	        else {
	            a = psx * l2;
	            b = psy * l2;
	            let aa = a * a, bb = b * b, ta = Math.atan2(ty, tx);
	            c = bb * l1 * l1 + aa * dd - aa * bb;
	            let c1 = -2 * bb * l1, c2 = bb - aa;
	            d = c1 * c1 - 4 * c2 * c;
	            if (d >= 0) {
	                let q = Math.sqrt(d);
	                if (c1 < 0)
	                    q = -q;
	                q = -(c1 + q) * 0.5;
	                let r0 = q / c2, r1 = c / q;
	                let r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
	                r0 = dd - r * r;
	                if (r0 >= 0) {
	                    y = Math.sqrt(r0) * bendDir;
	                    a1 = ta - Math.atan2(y, r);
	                    a2 = Math.atan2(y / psy, (r - l1) / psx);
	                    break outer;
	                }
	            }
	            let minAngle = MathUtils.PI, minX = l1 - a, minDist = minX * minX, minY = 0;
	            let maxAngle = 0, maxX = l1 + a, maxDist = maxX * maxX, maxY = 0;
	            c = -a * l1 / (aa - bb);
	            if (c >= -1 && c <= 1) {
	                c = Math.acos(c);
	                x = a * Math.cos(c) + l1;
	                y = b * Math.sin(c);
	                d = x * x + y * y;
	                if (d < minDist) {
	                    minAngle = c;
	                    minDist = d;
	                    minX = x;
	                    minY = y;
	                }
	                if (d > maxDist) {
	                    maxAngle = c;
	                    maxDist = d;
	                    maxX = x;
	                    maxY = y;
	                }
	            }
	            if (dd <= (minDist + maxDist) * 0.5) {
	                a1 = ta - Math.atan2(minY * bendDir, minX);
	                a2 = minAngle * bendDir;
	            }
	            else {
	                a1 = ta - Math.atan2(maxY * bendDir, maxX);
	                a2 = maxAngle * bendDir;
	            }
	        }
	        let os = Math.atan2(cy, cx) * s2;
	        let rotation = parent.arotation;
	        a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;
	        if (a1 > 180)
	            a1 -= 360;
	        else if (a1 < -180) //
	            a1 += 360;
	        parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, sy, 0, 0);
	        rotation = child.arotation;
	        a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
	        if (a2 > 180)
	            a2 -= 360;
	        else if (a2 < -180) //
	            a2 += 360;
	        child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose for an {@link IkConstraint}.
	 * <p>
	 * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide. */
	class IkConstraintData extends ConstraintData {
	    /** The bones that are constrained by this IK constraint. */
	    bones = new Array();
	    /** The bone that is the IK target. */
	    _target = null;
	    set target(boneData) { this._target = boneData; }
	    get target() {
	        if (!this._target)
	            throw new Error("BoneData not set.");
	        else
	            return this._target;
	    }
	    /** Controls the bend direction of the IK bones, either 1 or -1. */
	    bendDirection = 0;
	    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */
	    compress = false;
	    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained
	     * and the parent bone has local nonuniform scale, stretch is not applied. */
	    stretch = false;
	    /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone
	     * is scaled on both the X and Y axes. */
	    uniform = false;
	    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */
	    mix = 0;
	    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */
	    softness = 0;
	    constructor(name) {
	        super(name, 0, false);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose for a {@link PathConstraint}.
	 *
	 * See [path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */
	class PathConstraintData extends ConstraintData {
	    /** The bones that will be modified by this path constraint. */
	    bones = new Array();
	    /** The slot whose path attachment will be used to constrained the bones. */
	    _target = null;
	    set target(slotData) { this._target = slotData; }
	    get target() {
	        if (!this._target)
	            throw new Error("SlotData not set.");
	        else
	            return this._target;
	    }
	    /** The mode for positioning the first bone on the path. */
	    positionMode = PositionMode.Fixed;
	    /** The mode for positioning the bones after the first bone on the path. */
	    spacingMode = SpacingMode.Fixed;
	    /** The mode for adjusting the rotation of the bones. */
	    rotateMode = RotateMode.Chain;
	    /** An offset added to the constrained bone rotation. */
	    offsetRotation = 0;
	    /** The position along the path. */
	    position = 0;
	    /** The spacing between bones. */
	    spacing = 0;
	    mixRotate = 0;
	    mixX = 0;
	    mixY = 0;
	    constructor(name) {
	        super(name, 0, false);
	    }
	}
	/** Controls how the first bone is positioned along the path.
	 *
	 * See [position](http://esotericsoftware.com/spine-path-constraints#Position) in the Spine User Guide. */
	var PositionMode;
	(function (PositionMode) {
	    PositionMode[PositionMode["Fixed"] = 0] = "Fixed";
	    PositionMode[PositionMode["Percent"] = 1] = "Percent";
	})(PositionMode || (PositionMode = {}));
	/** Controls how bones after the first bone are positioned along the path.
	 *
	 * See [spacing](http://esotericsoftware.com/spine-path-constraints#Spacing) in the Spine User Guide. */
	var SpacingMode;
	(function (SpacingMode) {
	    SpacingMode[SpacingMode["Length"] = 0] = "Length";
	    SpacingMode[SpacingMode["Fixed"] = 1] = "Fixed";
	    SpacingMode[SpacingMode["Percent"] = 2] = "Percent";
	    SpacingMode[SpacingMode["Proportional"] = 3] = "Proportional";
	})(SpacingMode || (SpacingMode = {}));
	/** Controls how bones are rotated, translated, and scaled to match the path.
	 *
	 * See [rotate mix](http://esotericsoftware.com/spine-path-constraints#Rotate-mix) in the Spine User Guide. */
	var RotateMode;
	(function (RotateMode) {
	    RotateMode[RotateMode["Tangent"] = 0] = "Tangent";
	    RotateMode[RotateMode["Chain"] = 1] = "Chain";
	    RotateMode[RotateMode["ChainScale"] = 2] = "ChainScale";
	})(RotateMode || (RotateMode = {}));

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the
	 * constrained bones so they follow a {@link PathAttachment}.
	 *
	 * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */
	class PathConstraint {
	    static NONE = -1;
	    static BEFORE = -2;
	    static AFTER = -3;
	    static epsilon = 0.00001;
	    /** The path constraint's setup pose data. */
	    data;
	    /** The bones that will be modified by this path constraint. */
	    bones;
	    /** The slot whose path attachment will be used to constrained the bones. */
	    target;
	    /** The position along the path. */
	    position = 0;
	    /** The spacing between bones. */
	    spacing = 0;
	    mixRotate = 0;
	    mixX = 0;
	    mixY = 0;
	    spaces = new Array();
	    positions = new Array();
	    world = new Array();
	    curves = new Array();
	    lengths = new Array();
	    segments = new Array();
	    active = false;
	    constructor(data, skeleton) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        if (!skeleton)
	            throw new Error("skeleton cannot be null.");
	        this.data = data;
	        this.bones = new Array();
	        for (let i = 0, n = data.bones.length; i < n; i++) {
	            let bone = skeleton.findBone(data.bones[i].name);
	            if (!bone)
	                throw new Error(`Couldn't find bone ${data.bones[i].name}.`);
	            this.bones.push(bone);
	        }
	        let target = skeleton.findSlot(data.target.name);
	        if (!target)
	            throw new Error(`Couldn't find target bone ${data.target.name}`);
	        this.target = target;
	        this.position = data.position;
	        this.spacing = data.spacing;
	        this.mixRotate = data.mixRotate;
	        this.mixX = data.mixX;
	        this.mixY = data.mixY;
	    }
	    isActive() {
	        return this.active;
	    }
	    setToSetupPose() {
	        const data = this.data;
	        this.position = data.position;
	        this.spacing = data.spacing;
	        this.mixRotate = data.mixRotate;
	        this.mixX = data.mixX;
	        this.mixY = data.mixY;
	    }
	    update(physics) {
	        let attachment = this.target.getAttachment();
	        if (!(attachment instanceof PathAttachment))
	            return;
	        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY;
	        if (mixRotate == 0 && mixX == 0 && mixY == 0)
	            return;
	        let data = this.data;
	        let tangents = data.rotateMode == RotateMode.Tangent, scale = data.rotateMode == RotateMode.ChainScale;
	        let bones = this.bones;
	        let boneCount = bones.length, spacesCount = tangents ? boneCount : boneCount + 1;
	        let spaces = Utils.setArraySize(this.spaces, spacesCount), lengths = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : [];
	        let spacing = this.spacing;
	        switch (data.spacingMode) {
	            case SpacingMode.Percent:
	                if (scale) {
	                    for (let i = 0, n = spacesCount - 1; i < n; i++) {
	                        let bone = bones[i];
	                        let setupLength = bone.data.length;
	                        let x = setupLength * bone.a, y = setupLength * bone.c;
	                        lengths[i] = Math.sqrt(x * x + y * y);
	                    }
	                }
	                Utils.arrayFill(spaces, 1, spacesCount, spacing);
	                break;
	            case SpacingMode.Proportional:
	                let sum = 0;
	                for (let i = 0, n = spacesCount - 1; i < n;) {
	                    let bone = bones[i];
	                    let setupLength = bone.data.length;
	                    if (setupLength < PathConstraint.epsilon) {
	                        if (scale)
	                            lengths[i] = 0;
	                        spaces[++i] = spacing;
	                    }
	                    else {
	                        let x = setupLength * bone.a, y = setupLength * bone.c;
	                        let length = Math.sqrt(x * x + y * y);
	                        if (scale)
	                            lengths[i] = length;
	                        spaces[++i] = length;
	                        sum += length;
	                    }
	                }
	                if (sum > 0) {
	                    sum = spacesCount / sum * spacing;
	                    for (let i = 1; i < spacesCount; i++)
	                        spaces[i] *= sum;
	                }
	                break;
	            default:
	                let lengthSpacing = data.spacingMode == SpacingMode.Length;
	                for (let i = 0, n = spacesCount - 1; i < n;) {
	                    let bone = bones[i];
	                    let setupLength = bone.data.length;
	                    if (setupLength < PathConstraint.epsilon) {
	                        if (scale)
	                            lengths[i] = 0;
	                        spaces[++i] = spacing;
	                    }
	                    else {
	                        let x = setupLength * bone.a, y = setupLength * bone.c;
	                        let length = Math.sqrt(x * x + y * y);
	                        if (scale)
	                            lengths[i] = length;
	                        spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;
	                    }
	                }
	        }
	        let positions = this.computeWorldPositions(attachment, spacesCount, tangents);
	        let boneX = positions[0], boneY = positions[1], offsetRotation = data.offsetRotation;
	        let tip = false;
	        if (offsetRotation == 0)
	            tip = data.rotateMode == RotateMode.Chain;
	        else {
	            tip = false;
	            let p = this.target.bone;
	            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;
	        }
	        for (let i = 0, p = 3; i < boneCount; i++, p += 3) {
	            let bone = bones[i];
	            bone.worldX += (boneX - bone.worldX) * mixX;
	            bone.worldY += (boneY - bone.worldY) * mixY;
	            let x = positions[p], y = positions[p + 1], dx = x - boneX, dy = y - boneY;
	            if (scale) {
	                let length = lengths[i];
	                if (length != 0) {
	                    let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;
	                    bone.a *= s;
	                    bone.c *= s;
	                }
	            }
	            boneX = x;
	            boneY = y;
	            if (mixRotate > 0) {
	                let a = bone.a, b = bone.b, c = bone.c, d = bone.d, r = 0, cos = 0, sin = 0;
	                if (tangents)
	                    r = positions[p - 1];
	                else if (spaces[i + 1] == 0)
	                    r = positions[p + 2];
	                else
	                    r = Math.atan2(dy, dx);
	                r -= Math.atan2(c, a);
	                if (tip) {
	                    cos = Math.cos(r);
	                    sin = Math.sin(r);
	                    let length = bone.data.length;
	                    boneX += (length * (cos * a - sin * c) - dx) * mixRotate;
	                    boneY += (length * (sin * a + cos * c) - dy) * mixRotate;
	                }
	                else {
	                    r += offsetRotation;
	                }
	                if (r > MathUtils.PI)
	                    r -= MathUtils.PI2;
	                else if (r < -MathUtils.PI) //
	                    r += MathUtils.PI2;
	                r *= mixRotate;
	                cos = Math.cos(r);
	                sin = Math.sin(r);
	                bone.a = cos * a - sin * c;
	                bone.b = cos * b - sin * d;
	                bone.c = sin * a + cos * c;
	                bone.d = sin * b + cos * d;
	            }
	            bone.updateAppliedTransform();
	        }
	    }
	    computeWorldPositions(path, spacesCount, tangents) {
	        let target = this.target;
	        let position = this.position;
	        let spaces = this.spaces, out = Utils.setArraySize(this.positions, spacesCount * 3 + 2), world = this.world;
	        let closed = path.closed;
	        let verticesLength = path.worldVerticesLength, curveCount = verticesLength / 6, prevCurve = PathConstraint.NONE;
	        if (!path.constantSpeed) {
	            let lengths = path.lengths;
	            curveCount -= closed ? 1 : 2;
	            let pathLength = lengths[curveCount];
	            if (this.data.positionMode == PositionMode.Percent)
	                position *= pathLength;
	            let multiplier;
	            switch (this.data.spacingMode) {
	                case SpacingMode.Percent:
	                    multiplier = pathLength;
	                    break;
	                case SpacingMode.Proportional:
	                    multiplier = pathLength / spacesCount;
	                    break;
	                default:
	                    multiplier = 1;
	            }
	            world = Utils.setArraySize(this.world, 8);
	            for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {
	                let space = spaces[i] * multiplier;
	                position += space;
	                let p = position;
	                if (closed) {
	                    p %= pathLength;
	                    if (p < 0)
	                        p += pathLength;
	                    curve = 0;
	                }
	                else if (p < 0) {
	                    if (prevCurve != PathConstraint.BEFORE) {
	                        prevCurve = PathConstraint.BEFORE;
	                        path.computeWorldVertices(target, 2, 4, world, 0, 2);
	                    }
	                    this.addBeforePosition(p, world, 0, out, o);
	                    continue;
	                }
	                else if (p > pathLength) {
	                    if (prevCurve != PathConstraint.AFTER) {
	                        prevCurve = PathConstraint.AFTER;
	                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);
	                    }
	                    this.addAfterPosition(p - pathLength, world, 0, out, o);
	                    continue;
	                }
	                // Determine curve containing position.
	                for (;; curve++) {
	                    let length = lengths[curve];
	                    if (p > length)
	                        continue;
	                    if (curve == 0)
	                        p /= length;
	                    else {
	                        let prev = lengths[curve - 1];
	                        p = (p - prev) / (length - prev);
	                    }
	                    break;
	                }
	                if (curve != prevCurve) {
	                    prevCurve = curve;
	                    if (closed && curve == curveCount) {
	                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);
	                        path.computeWorldVertices(target, 0, 4, world, 4, 2);
	                    }
	                    else
	                        path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);
	                }
	                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || (i > 0 && space == 0));
	            }
	            return out;
	        }
	        // World vertices.
	        if (closed) {
	            verticesLength += 2;
	            world = Utils.setArraySize(this.world, verticesLength);
	            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);
	            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);
	            world[verticesLength - 2] = world[0];
	            world[verticesLength - 1] = world[1];
	        }
	        else {
	            curveCount--;
	            verticesLength -= 4;
	            world = Utils.setArraySize(this.world, verticesLength);
	            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);
	        }
	        // Curve lengths.
	        let curves = Utils.setArraySize(this.curves, curveCount);
	        let pathLength = 0;
	        let x1 = world[0], y1 = world[1], cx1 = 0, cy1 = 0, cx2 = 0, cy2 = 0, x2 = 0, y2 = 0;
	        let tmpx = 0, tmpy = 0, dddfx = 0, dddfy = 0, ddfx = 0, ddfy = 0, dfx = 0, dfy = 0;
	        for (let i = 0, w = 2; i < curveCount; i++, w += 6) {
	            cx1 = world[w];
	            cy1 = world[w + 1];
	            cx2 = world[w + 2];
	            cy2 = world[w + 3];
	            x2 = world[w + 4];
	            y2 = world[w + 5];
	            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
	            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
	            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
	            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
	            ddfx = tmpx * 2 + dddfx;
	            ddfy = tmpy * 2 + dddfy;
	            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
	            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
	            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
	            dfx += ddfx;
	            dfy += ddfy;
	            ddfx += dddfx;
	            ddfy += dddfy;
	            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
	            dfx += ddfx;
	            dfy += ddfy;
	            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
	            dfx += ddfx + dddfx;
	            dfy += ddfy + dddfy;
	            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
	            curves[i] = pathLength;
	            x1 = x2;
	            y1 = y2;
	        }
	        if (this.data.positionMode == PositionMode.Percent)
	            position *= pathLength;
	        let multiplier;
	        switch (this.data.spacingMode) {
	            case SpacingMode.Percent:
	                multiplier = pathLength;
	                break;
	            case SpacingMode.Proportional:
	                multiplier = pathLength / spacesCount;
	                break;
	            default:
	                multiplier = 1;
	        }
	        let segments = this.segments;
	        let curveLength = 0;
	        for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {
	            let space = spaces[i] * multiplier;
	            position += space;
	            let p = position;
	            if (closed) {
	                p %= pathLength;
	                if (p < 0)
	                    p += pathLength;
	                curve = 0;
	            }
	            else if (p < 0) {
	                this.addBeforePosition(p, world, 0, out, o);
	                continue;
	            }
	            else if (p > pathLength) {
	                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);
	                continue;
	            }
	            // Determine curve containing position.
	            for (;; curve++) {
	                let length = curves[curve];
	                if (p > length)
	                    continue;
	                if (curve == 0)
	                    p /= length;
	                else {
	                    let prev = curves[curve - 1];
	                    p = (p - prev) / (length - prev);
	                }
	                break;
	            }
	            // Curve segment lengths.
	            if (curve != prevCurve) {
	                prevCurve = curve;
	                let ii = curve * 6;
	                x1 = world[ii];
	                y1 = world[ii + 1];
	                cx1 = world[ii + 2];
	                cy1 = world[ii + 3];
	                cx2 = world[ii + 4];
	                cy2 = world[ii + 5];
	                x2 = world[ii + 6];
	                y2 = world[ii + 7];
	                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
	                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
	                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
	                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
	                ddfx = tmpx * 2 + dddfx;
	                ddfy = tmpy * 2 + dddfy;
	                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
	                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
	                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
	                segments[0] = curveLength;
	                for (ii = 1; ii < 8; ii++) {
	                    dfx += ddfx;
	                    dfy += ddfy;
	                    ddfx += dddfx;
	                    ddfy += dddfy;
	                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
	                    segments[ii] = curveLength;
	                }
	                dfx += ddfx;
	                dfy += ddfy;
	                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
	                segments[8] = curveLength;
	                dfx += ddfx + dddfx;
	                dfy += ddfy + dddfy;
	                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
	                segments[9] = curveLength;
	                segment = 0;
	            }
	            // Weight by segment length.
	            p *= curveLength;
	            for (;; segment++) {
	                let length = segments[segment];
	                if (p > length)
	                    continue;
	                if (segment == 0)
	                    p /= length;
	                else {
	                    let prev = segments[segment - 1];
	                    p = segment + (p - prev) / (length - prev);
	                }
	                break;
	            }
	            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));
	        }
	        return out;
	    }
	    addBeforePosition(p, temp, i, out, o) {
	        let x1 = temp[i], y1 = temp[i + 1], dx = temp[i + 2] - x1, dy = temp[i + 3] - y1, r = Math.atan2(dy, dx);
	        out[o] = x1 + p * Math.cos(r);
	        out[o + 1] = y1 + p * Math.sin(r);
	        out[o + 2] = r;
	    }
	    addAfterPosition(p, temp, i, out, o) {
	        let x1 = temp[i + 2], y1 = temp[i + 3], dx = x1 - temp[i], dy = y1 - temp[i + 1], r = Math.atan2(dy, dx);
	        out[o] = x1 + p * Math.cos(r);
	        out[o + 1] = y1 + p * Math.sin(r);
	        out[o + 2] = r;
	    }
	    addCurvePosition(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {
	        if (p == 0 || isNaN(p)) {
	            out[o] = x1;
	            out[o + 1] = y1;
	            out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);
	            return;
	        }
	        let tt = p * p, ttt = tt * p, u = 1 - p, uu = u * u, uuu = uu * u;
	        let ut = u * p, ut3 = ut * 3, uut3 = u * ut3, utt3 = ut3 * p;
	        let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt, y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
	        out[o] = x;
	        out[o + 1] = y;
	        if (tangents) {
	            if (p < 0.001)
	                out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);
	            else
	                out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
	        }
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the current pose for a physics constraint. A physics constraint applies physics to bones.
	 * <p>
	 * See <a href="http://esotericsoftware.com/spine-physics-constraints">Physics constraints</a> in the Spine User Guide. */
	class PhysicsConstraint {
	    data;
	    _bone = null;
	    /** The bone constrained by this physics constraint. */
	    set bone(bone) { this._bone = bone; }
	    get bone() {
	        if (!this._bone)
	            throw new Error("Bone not set.");
	        else
	            return this._bone;
	    }
	    inertia = 0;
	    strength = 0;
	    damping = 0;
	    massInverse = 0;
	    wind = 0;
	    gravity = 0;
	    mix = 0;
	    _reset = true;
	    ux = 0;
	    uy = 0;
	    cx = 0;
	    cy = 0;
	    tx = 0;
	    ty = 0;
	    xOffset = 0;
	    xVelocity = 0;
	    yOffset = 0;
	    yVelocity = 0;
	    rotateOffset = 0;
	    rotateVelocity = 0;
	    scaleOffset = 0;
	    scaleVelocity = 0;
	    active = false;
	    skeleton;
	    remaining = 0;
	    lastTime = 0;
	    constructor(data, skeleton) {
	        this.data = data;
	        this.skeleton = skeleton;
	        this.bone = skeleton.bones[data.bone.index];
	        this.inertia = data.inertia;
	        this.strength = data.strength;
	        this.damping = data.damping;
	        this.massInverse = data.massInverse;
	        this.wind = data.wind;
	        this.gravity = data.gravity;
	        this.mix = data.mix;
	    }
	    reset() {
	        this.remaining = 0;
	        this.lastTime = this.skeleton.time;
	        this._reset = true;
	        this.xOffset = 0;
	        this.xVelocity = 0;
	        this.yOffset = 0;
	        this.yVelocity = 0;
	        this.rotateOffset = 0;
	        this.rotateVelocity = 0;
	        this.scaleOffset = 0;
	        this.scaleVelocity = 0;
	    }
	    setToSetupPose() {
	        const data = this.data;
	        this.inertia = data.inertia;
	        this.strength = data.strength;
	        this.damping = data.damping;
	        this.massInverse = data.massInverse;
	        this.wind = data.wind;
	        this.gravity = data.gravity;
	        this.mix = data.mix;
	    }
	    isActive() {
	        return this.active;
	    }
	    /** Applies the constraint to the constrained bones. */
	    update(physics) {
	        const mix = this.mix;
	        if (mix == 0)
	            return;
	        const x = this.data.x > 0, y = this.data.y > 0, rotateOrShearX = this.data.rotate > 0 || this.data.shearX > 0, scaleX = this.data.scaleX > 0;
	        const bone = this.bone;
	        const l = bone.data.length;
	        switch (physics) {
	            case Physics.none:
	                return;
	            case Physics.reset:
	                this.reset();
	            // Fall through.
	            case Physics.update:
	                const skeleton = this.skeleton;
	                const delta = Math.max(this.skeleton.time - this.lastTime, 0);
	                this.remaining += delta;
	                this.lastTime = skeleton.time;
	                const bx = bone.worldX, by = bone.worldY;
	                if (this._reset) {
	                    this._reset = false;
	                    this.ux = bx;
	                    this.uy = by;
	                }
	                else {
	                    let a = this.remaining, i = this.inertia, t = this.data.step, f = this.skeleton.data.referenceScale, d = -1;
	                    let qx = this.data.limit * delta, qy = qx * Math.abs(skeleton.scaleY);
	                    qx *= Math.abs(skeleton.scaleX);
	                    if (x || y) {
	                        if (x) {
	                            const u = (this.ux - bx) * i;
	                            this.xOffset += u > qx ? qx : u < -qx ? -qx : u;
	                            this.ux = bx;
	                        }
	                        if (y) {
	                            const u = (this.uy - by) * i;
	                            this.yOffset += u > qy ? qy : u < -qy ? -qy : u;
	                            this.uy = by;
	                        }
	                        if (a >= t) {
	                            d = Math.pow(this.damping, 60 * t);
	                            const m = this.massInverse * t, e = this.strength, w = this.wind * f * skeleton.scaleX, g = this.gravity * f * skeleton.scaleY;
	                            do {
	                                if (x) {
	                                    this.xVelocity += (w - this.xOffset * e) * m;
	                                    this.xOffset += this.xVelocity * t;
	                                    this.xVelocity *= d;
	                                }
	                                if (y) {
	                                    this.yVelocity -= (g + this.yOffset * e) * m;
	                                    this.yOffset += this.yVelocity * t;
	                                    this.yVelocity *= d;
	                                }
	                                a -= t;
	                            } while (a >= t);
	                        }
	                        if (x)
	                            bone.worldX += this.xOffset * mix * this.data.x;
	                        if (y)
	                            bone.worldY += this.yOffset * mix * this.data.y;
	                    }
	                    if (rotateOrShearX || scaleX) {
	                        let ca = Math.atan2(bone.c, bone.a), c = 0, s = 0, mr = 0;
	                        let dx = this.cx - bone.worldX, dy = this.cy - bone.worldY;
	                        if (dx > qx)
	                            dx = qx;
	                        else if (dx < -qx) //
	                            dx = -qx;
	                        if (dy > qy)
	                            dy = qy;
	                        else if (dy < -qy) //
	                            dy = -qy;
	                        if (rotateOrShearX) {
	                            mr = (this.data.rotate + this.data.shearX) * mix;
	                            let r = Math.atan2(dy + this.ty, dx + this.tx) - ca - this.rotateOffset * mr;
	                            this.rotateOffset += (r - Math.ceil(r * MathUtils.invPI2 - 0.5) * MathUtils.PI2) * i;
	                            r = this.rotateOffset * mr + ca;
	                            c = Math.cos(r);
	                            s = Math.sin(r);
	                            if (scaleX) {
	                                r = l * bone.getWorldScaleX();
	                                if (r > 0)
	                                    this.scaleOffset += (dx * c + dy * s) * i / r;
	                            }
	                        }
	                        else {
	                            c = Math.cos(ca);
	                            s = Math.sin(ca);
	                            const r = l * bone.getWorldScaleX();
	                            if (r > 0)
	                                this.scaleOffset += (dx * c + dy * s) * i / r;
	                        }
	                        a = this.remaining;
	                        if (a >= t) {
	                            if (d == -1)
	                                d = Math.pow(this.damping, 60 * t);
	                            const m = this.massInverse * t, e = this.strength, w = this.wind, g = (this.gravity), h = l / f;
	                            while (true) {
	                                a -= t;
	                                if (scaleX) {
	                                    this.scaleVelocity += (w * c - g * s - this.scaleOffset * e) * m;
	                                    this.scaleOffset += this.scaleVelocity * t;
	                                    this.scaleVelocity *= d;
	                                }
	                                if (rotateOrShearX) {
	                                    this.rotateVelocity -= ((w * s + g * c) * h + this.rotateOffset * e) * m;
	                                    this.rotateOffset += this.rotateVelocity * t;
	                                    this.rotateVelocity *= d;
	                                    if (a < t)
	                                        break;
	                                    const r = this.rotateOffset * mr + ca;
	                                    c = Math.cos(r);
	                                    s = Math.sin(r);
	                                }
	                                else if (a < t) //
	                                    break;
	                            }
	                        }
	                    }
	                    this.remaining = a;
	                }
	                this.cx = bone.worldX;
	                this.cy = bone.worldY;
	                break;
	            case Physics.pose:
	                if (x)
	                    bone.worldX += this.xOffset * mix * this.data.x;
	                if (y)
	                    bone.worldY += this.yOffset * mix * this.data.y;
	        }
	        if (rotateOrShearX) {
	            let o = this.rotateOffset * mix, s = 0, c = 0, a = 0;
	            if (this.data.shearX > 0) {
	                let r = 0;
	                if (this.data.rotate > 0) {
	                    r = o * this.data.rotate;
	                    s = Math.sin(r);
	                    c = Math.cos(r);
	                    a = bone.b;
	                    bone.b = c * a - s * bone.d;
	                    bone.d = s * a + c * bone.d;
	                }
	                r += o * this.data.shearX;
	                s = Math.sin(r);
	                c = Math.cos(r);
	                a = bone.a;
	                bone.a = c * a - s * bone.c;
	                bone.c = s * a + c * bone.c;
	            }
	            else {
	                o *= this.data.rotate;
	                s = Math.sin(o);
	                c = Math.cos(o);
	                a = bone.a;
	                bone.a = c * a - s * bone.c;
	                bone.c = s * a + c * bone.c;
	                a = bone.b;
	                bone.b = c * a - s * bone.d;
	                bone.d = s * a + c * bone.d;
	            }
	        }
	        if (scaleX) {
	            const s = 1 + this.scaleOffset * mix * this.data.scaleX;
	            bone.a *= s;
	            bone.c *= s;
	        }
	        if (physics != Physics.pose) {
	            this.tx = l * bone.a;
	            this.ty = l * bone.c;
	        }
	        bone.updateAppliedTransform();
	    }
	    /** Translates the physics constraint so next {@link #update(Physics)} forces are applied as if the bone moved an additional
	     * amount in world space. */
	    translate(x, y) {
	        this.ux -= x;
	        this.uy -= y;
	        this.cx -= x;
	        this.cy -= y;
	    }
	    /** Rotates the physics constraint so next {@link #update(Physics)} forces are applied as if the bone rotated around the
	     * specified point in world space. */
	    rotate(x, y, degrees) {
	        const r = degrees * MathUtils.degRad, cos = Math.cos(r), sin = Math.sin(r);
	        const dx = this.cx - x, dy = this.cy - y;
	        this.translate(dx * cos - dy * sin - dx, dx * sin + dy * cos - dy);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store
	 * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared
	 * across multiple skeletons. */
	class Slot {
	    /** The slot's setup pose data. */
	    data;
	    /** The bone this slot belongs to. */
	    bone;
	    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two
	     * color tinting. */
	    color;
	    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark
	     * color's alpha is not used. */
	    darkColor = null;
	    attachment = null;
	    attachmentState = 0;
	    /** The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the
	     * {@link Sequence#getSetupIndex()}. */
	    sequenceIndex = -1;
	    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a
	     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.
	     *
	     * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */
	    deform = new Array();
	    constructor(data, bone) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        if (!bone)
	            throw new Error("bone cannot be null.");
	        this.data = data;
	        this.bone = bone;
	        this.color = new Color();
	        this.darkColor = !data.darkColor ? null : new Color();
	        this.setToSetupPose();
	    }
	    /** The skeleton this slot belongs to. */
	    getSkeleton() {
	        return this.bone.skeleton;
	    }
	    /** The current attachment for the slot, or null if the slot has no attachment. */
	    getAttachment() {
	        return this.attachment;
	    }
	    /** Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.
	     * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the
	     * specified attachment. */
	    setAttachment(attachment) {
	        if (this.attachment == attachment)
	            return;
	        if (!(attachment instanceof VertexAttachment) || !(this.attachment instanceof VertexAttachment)
	            || attachment.timelineAttachment != this.attachment.timelineAttachment) {
	            this.deform.length = 0;
	        }
	        this.attachment = attachment;
	        this.sequenceIndex = -1;
	    }
	    /** Sets this slot to the setup pose. */
	    setToSetupPose() {
	        this.color.setFromColor(this.data.color);
	        if (this.darkColor)
	            this.darkColor.setFromColor(this.data.darkColor);
	        if (!this.data.attachmentName)
	            this.attachment = null;
	        else {
	            this.attachment = null;
	            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));
	        }
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained
	 * bones to match that of the target bone.
	 *
	 * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */
	class TransformConstraint {
	    /** The transform constraint's setup pose data. */
	    data;
	    /** The bones that will be modified by this transform constraint. */
	    bones;
	    /** The target bone whose world transform will be copied to the constrained bones. */
	    target;
	    mixRotate = 0;
	    mixX = 0;
	    mixY = 0;
	    mixScaleX = 0;
	    mixScaleY = 0;
	    mixShearY = 0;
	    temp = new Vector2();
	    active = false;
	    constructor(data, skeleton) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        if (!skeleton)
	            throw new Error("skeleton cannot be null.");
	        this.data = data;
	        this.bones = new Array();
	        for (let i = 0; i < data.bones.length; i++) {
	            let bone = skeleton.findBone(data.bones[i].name);
	            if (!bone)
	                throw new Error(`Couldn't find bone ${data.bones[i].name}.`);
	            this.bones.push(bone);
	        }
	        let target = skeleton.findBone(data.target.name);
	        if (!target)
	            throw new Error(`Couldn't find target bone ${data.target.name}.`);
	        this.target = target;
	        this.mixRotate = data.mixRotate;
	        this.mixX = data.mixX;
	        this.mixY = data.mixY;
	        this.mixScaleX = data.mixScaleX;
	        this.mixScaleY = data.mixScaleY;
	        this.mixShearY = data.mixShearY;
	    }
	    isActive() {
	        return this.active;
	    }
	    setToSetupPose() {
	        const data = this.data;
	        this.mixRotate = data.mixRotate;
	        this.mixX = data.mixX;
	        this.mixY = data.mixY;
	        this.mixScaleX = data.mixScaleX;
	        this.mixScaleY = data.mixScaleY;
	        this.mixShearY = data.mixShearY;
	    }
	    update(physics) {
	        if (this.mixRotate == 0 && this.mixX == 0 && this.mixY == 0 && this.mixScaleX == 0 && this.mixScaleY == 0 && this.mixShearY == 0)
	            return;
	        if (this.data.local) {
	            if (this.data.relative)
	                this.applyRelativeLocal();
	            else
	                this.applyAbsoluteLocal();
	        }
	        else {
	            if (this.data.relative)
	                this.applyRelativeWorld();
	            else
	                this.applyAbsoluteWorld();
	        }
	    }
	    applyAbsoluteWorld() {
	        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;
	        let translate = mixX != 0 || mixY != 0;
	        let target = this.target;
	        let ta = target.a, tb = target.b, tc = target.c, td = target.d;
	        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;
	        let offsetRotation = this.data.offsetRotation * degRadReflect;
	        let offsetShearY = this.data.offsetShearY * degRadReflect;
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            if (mixRotate != 0) {
	                let a = bone.a, b = bone.b, c = bone.c, d = bone.d;
	                let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;
	                if (r > MathUtils.PI)
	                    r -= MathUtils.PI2;
	                else if (r < -MathUtils.PI) //
	                    r += MathUtils.PI2;
	                r *= mixRotate;
	                let cos = Math.cos(r), sin = Math.sin(r);
	                bone.a = cos * a - sin * c;
	                bone.b = cos * b - sin * d;
	                bone.c = sin * a + cos * c;
	                bone.d = sin * b + cos * d;
	            }
	            if (translate) {
	                let temp = this.temp;
	                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));
	                bone.worldX += (temp.x - bone.worldX) * mixX;
	                bone.worldY += (temp.y - bone.worldY) * mixY;
	            }
	            if (mixScaleX != 0) {
	                let s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);
	                if (s != 0)
	                    s = (s + (Math.sqrt(ta * ta + tc * tc) - s + this.data.offsetScaleX) * mixScaleX) / s;
	                bone.a *= s;
	                bone.c *= s;
	            }
	            if (mixScaleY != 0) {
	                let s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);
	                if (s != 0)
	                    s = (s + (Math.sqrt(tb * tb + td * td) - s + this.data.offsetScaleY) * mixScaleY) / s;
	                bone.b *= s;
	                bone.d *= s;
	            }
	            if (mixShearY > 0) {
	                let b = bone.b, d = bone.d;
	                let by = Math.atan2(d, b);
	                let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(bone.c, bone.a));
	                if (r > MathUtils.PI)
	                    r -= MathUtils.PI2;
	                else if (r < -MathUtils.PI) //
	                    r += MathUtils.PI2;
	                r = by + (r + offsetShearY) * mixShearY;
	                let s = Math.sqrt(b * b + d * d);
	                bone.b = Math.cos(r) * s;
	                bone.d = Math.sin(r) * s;
	            }
	            bone.updateAppliedTransform();
	        }
	    }
	    applyRelativeWorld() {
	        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;
	        let translate = mixX != 0 || mixY != 0;
	        let target = this.target;
	        let ta = target.a, tb = target.b, tc = target.c, td = target.d;
	        let degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;
	        let offsetRotation = this.data.offsetRotation * degRadReflect, offsetShearY = this.data.offsetShearY * degRadReflect;
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            if (mixRotate != 0) {
	                let a = bone.a, b = bone.b, c = bone.c, d = bone.d;
	                let r = Math.atan2(tc, ta) + offsetRotation;
	                if (r > MathUtils.PI)
	                    r -= MathUtils.PI2;
	                else if (r < -MathUtils.PI) //
	                    r += MathUtils.PI2;
	                r *= mixRotate;
	                let cos = Math.cos(r), sin = Math.sin(r);
	                bone.a = cos * a - sin * c;
	                bone.b = cos * b - sin * d;
	                bone.c = sin * a + cos * c;
	                bone.d = sin * b + cos * d;
	            }
	            if (translate) {
	                let temp = this.temp;
	                target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));
	                bone.worldX += temp.x * mixX;
	                bone.worldY += temp.y * mixY;
	            }
	            if (mixScaleX != 0) {
	                let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * mixScaleX + 1;
	                bone.a *= s;
	                bone.c *= s;
	            }
	            if (mixScaleY != 0) {
	                let s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * mixScaleY + 1;
	                bone.b *= s;
	                bone.d *= s;
	            }
	            if (mixShearY > 0) {
	                let r = Math.atan2(td, tb) - Math.atan2(tc, ta);
	                if (r > MathUtils.PI)
	                    r -= MathUtils.PI2;
	                else if (r < -MathUtils.PI) //
	                    r += MathUtils.PI2;
	                let b = bone.b, d = bone.d;
	                r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * mixShearY;
	                let s = Math.sqrt(b * b + d * d);
	                bone.b = Math.cos(r) * s;
	                bone.d = Math.sin(r) * s;
	            }
	            bone.updateAppliedTransform();
	        }
	    }
	    applyAbsoluteLocal() {
	        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;
	        let target = this.target;
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            let rotation = bone.arotation;
	            if (mixRotate != 0)
	                rotation += (target.arotation - rotation + this.data.offsetRotation) * mixRotate;
	            let x = bone.ax, y = bone.ay;
	            x += (target.ax - x + this.data.offsetX) * mixX;
	            y += (target.ay - y + this.data.offsetY) * mixY;
	            let scaleX = bone.ascaleX, scaleY = bone.ascaleY;
	            if (mixScaleX != 0 && scaleX != 0)
	                scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * mixScaleX) / scaleX;
	            if (mixScaleY != 0 && scaleY != 0)
	                scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * mixScaleY) / scaleY;
	            let shearY = bone.ashearY;
	            if (mixShearY != 0)
	                shearY += (target.ashearY - shearY + this.data.offsetShearY) * mixShearY;
	            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);
	        }
	    }
	    applyRelativeLocal() {
	        let mixRotate = this.mixRotate, mixX = this.mixX, mixY = this.mixY, mixScaleX = this.mixScaleX, mixScaleY = this.mixScaleY, mixShearY = this.mixShearY;
	        let target = this.target;
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            let rotation = bone.arotation + (target.arotation + this.data.offsetRotation) * mixRotate;
	            let x = bone.ax + (target.ax + this.data.offsetX) * mixX;
	            let y = bone.ay + (target.ay + this.data.offsetY) * mixY;
	            let scaleX = bone.ascaleX * (((target.ascaleX - 1 + this.data.offsetScaleX) * mixScaleX) + 1);
	            let scaleY = bone.ascaleY * (((target.ascaleY - 1 + this.data.offsetScaleY) * mixScaleY) + 1);
	            let shearY = bone.ashearY + (target.ashearY + this.data.offsetShearY) * mixShearY;
	            bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);
	        }
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the current pose for a skeleton.
	 *
	 * See [Instance objects](http://esotericsoftware.com/spine-runtime-architecture#Instance-objects) in the Spine Runtimes Guide. */
	class Skeleton {
	    static quadTriangles = [0, 1, 2, 2, 3, 0];
	    static yDown = false;
	    /** The skeleton's setup pose data. */
	    data;
	    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */
	    bones;
	    /** The skeleton's slots in the setup pose draw order. */
	    slots;
	    /** The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order. */
	    drawOrder;
	    /** The skeleton's IK constraints. */
	    ikConstraints;
	    /** The skeleton's transform constraints. */
	    transformConstraints;
	    /** The skeleton's path constraints. */
	    pathConstraints;
	    /** The skeleton's physics constraints. */
	    physicsConstraints;
	    /** The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}. */
	    _updateCache = new Array();
	    /** The skeleton's current skin. May be null. */
	    skin = null;
	    /** The color to tint all the skeleton's attachments. */
	    color;
	    /** Scales the entire skeleton on the X axis. This affects all bones, even if the bone's transform mode disallows scale
	      * inheritance. */
	    scaleX = 1;
	    /** Scales the entire skeleton on the Y axis. This affects all bones, even if the bone's transform mode disallows scale
	      * inheritance. */
	    _scaleY = 1;
	    get scaleY() {
	        return Skeleton.yDown ? -this._scaleY : this._scaleY;
	    }
	    set scaleY(scaleY) {
	        this._scaleY = scaleY;
	    }
	    /** Sets the skeleton X position, which is added to the root bone worldX position. */
	    x = 0;
	    /** Sets the skeleton Y position, which is added to the root bone worldY position. */
	    y = 0;
	    /** Returns the skeleton's time. This is used for time-based manipulations, such as {@link PhysicsConstraint}.
	     * <p>
	     * See {@link #update(float)}. */
	    time = 0;
	    constructor(data) {
	        if (!data)
	            throw new Error("data cannot be null.");
	        this.data = data;
	        this.bones = new Array();
	        for (let i = 0; i < data.bones.length; i++) {
	            let boneData = data.bones[i];
	            let bone;
	            if (!boneData.parent)
	                bone = new Bone(boneData, this, null);
	            else {
	                let parent = this.bones[boneData.parent.index];
	                bone = new Bone(boneData, this, parent);
	                parent.children.push(bone);
	            }
	            this.bones.push(bone);
	        }
	        this.slots = new Array();
	        this.drawOrder = new Array();
	        for (let i = 0; i < data.slots.length; i++) {
	            let slotData = data.slots[i];
	            let bone = this.bones[slotData.boneData.index];
	            let slot = new Slot(slotData, bone);
	            this.slots.push(slot);
	            this.drawOrder.push(slot);
	        }
	        this.ikConstraints = new Array();
	        for (let i = 0; i < data.ikConstraints.length; i++) {
	            let ikConstraintData = data.ikConstraints[i];
	            this.ikConstraints.push(new IkConstraint(ikConstraintData, this));
	        }
	        this.transformConstraints = new Array();
	        for (let i = 0; i < data.transformConstraints.length; i++) {
	            let transformConstraintData = data.transformConstraints[i];
	            this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));
	        }
	        this.pathConstraints = new Array();
	        for (let i = 0; i < data.pathConstraints.length; i++) {
	            let pathConstraintData = data.pathConstraints[i];
	            this.pathConstraints.push(new PathConstraint(pathConstraintData, this));
	        }
	        this.physicsConstraints = new Array();
	        for (let i = 0; i < data.physicsConstraints.length; i++) {
	            let physicsConstraintData = data.physicsConstraints[i];
	            this.physicsConstraints.push(new PhysicsConstraint(physicsConstraintData, this));
	        }
	        this.color = new Color(1, 1, 1, 1);
	        this.updateCache();
	    }
	    /** Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,
	     * constraints, or weighted path attachments are added or removed. */
	    updateCache() {
	        let updateCache = this._updateCache;
	        updateCache.length = 0;
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            bone.sorted = bone.data.skinRequired;
	            bone.active = !bone.sorted;
	        }
	        if (this.skin) {
	            let skinBones = this.skin.bones;
	            for (let i = 0, n = this.skin.bones.length; i < n; i++) {
	                let bone = this.bones[skinBones[i].index];
	                do {
	                    bone.sorted = false;
	                    bone.active = true;
	                    bone = bone.parent;
	                } while (bone);
	            }
	        }
	        // IK first, lowest hierarchy depth first.
	        let ikConstraints = this.ikConstraints;
	        let transformConstraints = this.transformConstraints;
	        let pathConstraints = this.pathConstraints;
	        let physicsConstraints = this.physicsConstraints;
	        let ikCount = ikConstraints.length, transformCount = transformConstraints.length, pathCount = pathConstraints.length, physicsCount = this.physicsConstraints.length;
	        let constraintCount = ikCount + transformCount + pathCount + physicsCount;
	        outer: for (let i = 0; i < constraintCount; i++) {
	            for (let ii = 0; ii < ikCount; ii++) {
	                let constraint = ikConstraints[ii];
	                if (constraint.data.order == i) {
	                    this.sortIkConstraint(constraint);
	                    continue outer;
	                }
	            }
	            for (let ii = 0; ii < transformCount; ii++) {
	                let constraint = transformConstraints[ii];
	                if (constraint.data.order == i) {
	                    this.sortTransformConstraint(constraint);
	                    continue outer;
	                }
	            }
	            for (let ii = 0; ii < pathCount; ii++) {
	                let constraint = pathConstraints[ii];
	                if (constraint.data.order == i) {
	                    this.sortPathConstraint(constraint);
	                    continue outer;
	                }
	            }
	            for (let ii = 0; ii < physicsCount; ii++) {
	                const constraint = physicsConstraints[ii];
	                if (constraint.data.order == i) {
	                    this.sortPhysicsConstraint(constraint);
	                    continue outer;
	                }
	            }
	        }
	        for (let i = 0, n = bones.length; i < n; i++)
	            this.sortBone(bones[i]);
	    }
	    sortIkConstraint(constraint) {
	        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));
	        if (!constraint.active)
	            return;
	        let target = constraint.target;
	        this.sortBone(target);
	        let constrained = constraint.bones;
	        let parent = constrained[0];
	        this.sortBone(parent);
	        if (constrained.length == 1) {
	            this._updateCache.push(constraint);
	            this.sortReset(parent.children);
	        }
	        else {
	            let child = constrained[constrained.length - 1];
	            this.sortBone(child);
	            this._updateCache.push(constraint);
	            this.sortReset(parent.children);
	            child.sorted = true;
	        }
	    }
	    sortPathConstraint(constraint) {
	        constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));
	        if (!constraint.active)
	            return;
	        let slot = constraint.target;
	        let slotIndex = slot.data.index;
	        let slotBone = slot.bone;
	        if (this.skin)
	            this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);
	        if (this.data.defaultSkin && this.data.defaultSkin != this.skin)
	            this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);
	        for (let i = 0, n = this.data.skins.length; i < n; i++)
	            this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);
	        let attachment = slot.getAttachment();
	        if (attachment instanceof PathAttachment)
	            this.sortPathConstraintAttachmentWith(attachment, slotBone);
	        let constrained = constraint.bones;
	        let boneCount = constrained.length;
	        for (let i = 0; i < boneCount; i++)
	            this.sortBone(constrained[i]);
	        this._updateCache.push(constraint);
	        for (let i = 0; i < boneCount; i++)
	            this.sortReset(constrained[i].children);
	        for (let i = 0; i < boneCount; i++)
	            constrained[i].sorted = true;
	    }
	    sortTransformConstraint(constraint) {
	        constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || (this.skin && Utils.contains(this.skin.constraints, constraint.data, true)));
	        if (!constraint.active)
	            return;
	        this.sortBone(constraint.target);
	        let constrained = constraint.bones;
	        let boneCount = constrained.length;
	        if (constraint.data.local) {
	            for (let i = 0; i < boneCount; i++) {
	                let child = constrained[i];
	                this.sortBone(child.parent);
	                this.sortBone(child);
	            }
	        }
	        else {
	            for (let i = 0; i < boneCount; i++) {
	                this.sortBone(constrained[i]);
	            }
	        }
	        this._updateCache.push(constraint);
	        for (let i = 0; i < boneCount; i++)
	            this.sortReset(constrained[i].children);
	        for (let i = 0; i < boneCount; i++)
	            constrained[i].sorted = true;
	    }
	    sortPathConstraintAttachment(skin, slotIndex, slotBone) {
	        let attachments = skin.attachments[slotIndex];
	        if (!attachments)
	            return;
	        for (let key in attachments) {
	            this.sortPathConstraintAttachmentWith(attachments[key], slotBone);
	        }
	    }
	    sortPathConstraintAttachmentWith(attachment, slotBone) {
	        if (!(attachment instanceof PathAttachment))
	            return;
	        let pathBones = attachment.bones;
	        if (!pathBones)
	            this.sortBone(slotBone);
	        else {
	            let bones = this.bones;
	            for (let i = 0, n = pathBones.length; i < n;) {
	                let nn = pathBones[i++];
	                nn += i;
	                while (i < nn)
	                    this.sortBone(bones[pathBones[i++]]);
	            }
	        }
	    }
	    sortPhysicsConstraint(constraint) {
	        const bone = constraint.bone;
	        constraint.active = bone.active && (!constraint.data.skinRequired || (this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true)));
	        if (!constraint.active)
	            return;
	        this.sortBone(bone);
	        this._updateCache.push(constraint);
	        this.sortReset(bone.children);
	        bone.sorted = true;
	    }
	    sortBone(bone) {
	        if (!bone)
	            return;
	        if (bone.sorted)
	            return;
	        let parent = bone.parent;
	        if (parent)
	            this.sortBone(parent);
	        bone.sorted = true;
	        this._updateCache.push(bone);
	    }
	    sortReset(bones) {
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            if (!bone.active)
	                continue;
	            if (bone.sorted)
	                this.sortReset(bone.children);
	            bone.sorted = false;
	        }
	    }
	    /** Updates the world transform for each bone and applies all constraints.
	     *
	     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine
	     * Runtimes Guide. */
	    updateWorldTransform(physics) {
	        if (physics === undefined || physics === null)
	            throw new Error("physics is undefined");
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            bone.ax = bone.x;
	            bone.ay = bone.y;
	            bone.arotation = bone.rotation;
	            bone.ascaleX = bone.scaleX;
	            bone.ascaleY = bone.scaleY;
	            bone.ashearX = bone.shearX;
	            bone.ashearY = bone.shearY;
	        }
	        let updateCache = this._updateCache;
	        for (let i = 0, n = updateCache.length; i < n; i++)
	            updateCache[i].update(physics);
	    }
	    updateWorldTransformWith(physics, parent) {
	        if (!parent)
	            throw new Error("parent cannot be null.");
	        let bones = this.bones;
	        for (let i = 1, n = bones.length; i < n; i++) { // Skip root bone.
	            let bone = bones[i];
	            bone.ax = bone.x;
	            bone.ay = bone.y;
	            bone.arotation = bone.rotation;
	            bone.ascaleX = bone.scaleX;
	            bone.ascaleY = bone.scaleY;
	            bone.ashearX = bone.shearX;
	            bone.ashearY = bone.shearY;
	        }
	        // Apply the parent bone transform to the root bone. The root bone always inherits scale, rotation and reflection.
	        let rootBone = this.getRootBone();
	        if (!rootBone)
	            throw new Error("Root bone must not be null.");
	        let pa = parent.a, pb = parent.b, pc = parent.c, pd = parent.d;
	        rootBone.worldX = pa * this.x + pb * this.y + parent.worldX;
	        rootBone.worldY = pc * this.x + pd * this.y + parent.worldY;
	        const rx = (rootBone.rotation + rootBone.shearX) * MathUtils.degRad;
	        const ry = (rootBone.rotation + 90 + rootBone.shearY) * MathUtils.degRad;
	        const la = Math.cos(rx) * rootBone.scaleX;
	        const lb = Math.cos(ry) * rootBone.scaleY;
	        const lc = Math.sin(rx) * rootBone.scaleX;
	        const ld = Math.sin(ry) * rootBone.scaleY;
	        rootBone.a = (pa * la + pb * lc) * this.scaleX;
	        rootBone.b = (pa * lb + pb * ld) * this.scaleX;
	        rootBone.c = (pc * la + pd * lc) * this.scaleY;
	        rootBone.d = (pc * lb + pd * ld) * this.scaleY;
	        // Update everything except root bone.
	        let updateCache = this._updateCache;
	        for (let i = 0, n = updateCache.length; i < n; i++) {
	            let updatable = updateCache[i];
	            if (updatable != rootBone)
	                updatable.update(physics);
	        }
	    }
	    /** Sets the bones, constraints, and slots to their setup pose values. */
	    setToSetupPose() {
	        this.setBonesToSetupPose();
	        this.setSlotsToSetupPose();
	    }
	    /** Sets the bones and constraints to their setup pose values. */
	    setBonesToSetupPose() {
	        for (const bone of this.bones)
	            bone.setToSetupPose();
	        for (const constraint of this.ikConstraints)
	            constraint.setToSetupPose();
	        for (const constraint of this.transformConstraints)
	            constraint.setToSetupPose();
	        for (const constraint of this.pathConstraints)
	            constraint.setToSetupPose();
	        for (const constraint of this.physicsConstraints)
	            constraint.setToSetupPose();
	    }
	    /** Sets the slots and draw order to their setup pose values. */
	    setSlotsToSetupPose() {
	        let slots = this.slots;
	        Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);
	        for (let i = 0, n = slots.length; i < n; i++)
	            slots[i].setToSetupPose();
	    }
	    /** @returns May return null. */
	    getRootBone() {
	        if (this.bones.length == 0)
	            return null;
	        return this.bones[0];
	    }
	    /** @returns May be null. */
	    findBone(boneName) {
	        if (!boneName)
	            throw new Error("boneName cannot be null.");
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            if (bone.data.name == boneName)
	                return bone;
	        }
	        return null;
	    }
	    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it
	     * repeatedly.
	     * @returns May be null. */
	    findSlot(slotName) {
	        if (!slotName)
	            throw new Error("slotName cannot be null.");
	        let slots = this.slots;
	        for (let i = 0, n = slots.length; i < n; i++) {
	            let slot = slots[i];
	            if (slot.data.name == slotName)
	                return slot;
	        }
	        return null;
	    }
	    /** Sets a skin by name.
	     *
	     * See {@link #setSkin()}. */
	    setSkinByName(skinName) {
	        let skin = this.data.findSkin(skinName);
	        if (!skin)
	            throw new Error("Skin not found: " + skinName);
	        this.setSkin(skin);
	    }
	    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#defaultSkin default skin}. If the
	     * skin is changed, {@link #updateCache()} is called.
	     *
	     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no
	     * old skin, each slot's setup mode attachment is attached from the new skin.
	     *
	     * After changing the skin, the visible attachments can be reset to those attached in the setup pose by calling
	     * {@link #setSlotsToSetupPose()}. Also, often {@link AnimationState#apply()} is called before the next time the
	     * skeleton is rendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.
	     * @param newSkin May be null. */
	    setSkin(newSkin) {
	        if (newSkin == this.skin)
	            return;
	        if (newSkin) {
	            if (this.skin)
	                newSkin.attachAll(this, this.skin);
	            else {
	                let slots = this.slots;
	                for (let i = 0, n = slots.length; i < n; i++) {
	                    let slot = slots[i];
	                    let name = slot.data.attachmentName;
	                    if (name) {
	                        let attachment = newSkin.getAttachment(i, name);
	                        if (attachment)
	                            slot.setAttachment(attachment);
	                    }
	                }
	            }
	        }
	        this.skin = newSkin;
	        this.updateCache();
	    }
	    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment
	     * name.
	     *
	     * See {@link #getAttachment()}.
	     * @returns May be null. */
	    getAttachmentByName(slotName, attachmentName) {
	        let slot = this.data.findSlot(slotName);
	        if (!slot)
	            throw new Error(`Can't find slot with name ${slotName}`);
	        return this.getAttachment(slot.index, attachmentName);
	    }
	    /** Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and
	     * attachment name. First the skin is checked and if the attachment was not found, the default skin is checked.
	     *
	     * See [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide.
	     * @returns May be null. */
	    getAttachment(slotIndex, attachmentName) {
	        if (!attachmentName)
	            throw new Error("attachmentName cannot be null.");
	        if (this.skin) {
	            let attachment = this.skin.getAttachment(slotIndex, attachmentName);
	            if (attachment)
	                return attachment;
	        }
	        if (this.data.defaultSkin)
	            return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);
	        return null;
	    }
	    /** A convenience method to set an attachment by finding the slot with {@link #findSlot()}, finding the attachment with
	     * {@link #getAttachment()}, then setting the slot's {@link Slot#attachment}.
	     * @param attachmentName May be null to clear the slot's attachment. */
	    setAttachment(slotName, attachmentName) {
	        if (!slotName)
	            throw new Error("slotName cannot be null.");
	        let slots = this.slots;
	        for (let i = 0, n = slots.length; i < n; i++) {
	            let slot = slots[i];
	            if (slot.data.name == slotName) {
	                let attachment = null;
	                if (attachmentName) {
	                    attachment = this.getAttachment(i, attachmentName);
	                    if (!attachment)
	                        throw new Error("Attachment not found: " + attachmentName + ", for slot: " + slotName);
	                }
	                slot.setAttachment(attachment);
	                return;
	            }
	        }
	        throw new Error("Slot not found: " + slotName);
	    }
	    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method
	     * than to call it repeatedly.
	     * @return May be null. */
	    findIkConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        return this.ikConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;
	    }
	    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of
	     * this method than to call it repeatedly.
	     * @return May be null. */
	    findTransformConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        return this.transformConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;
	    }
	    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method
	     * than to call it repeatedly.
	     * @return May be null. */
	    findPathConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        return this.pathConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;
	    }
	    /** Finds a physics constraint by comparing each physics constraint's name. It is more efficient to cache the results of this
	     * method than to call it repeatedly. */
	    findPhysicsConstraint(constraintName) {
	        if (constraintName == null)
	            throw new Error("constraintName cannot be null.");
	        return this.physicsConstraints.find((constraint) => constraint.data.name == constraintName) ?? null;
	    }
	    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose as `{ x: number, y: number, width: number, height: number }`.
	     * Note that this method will create temporary objects which can add to garbage collection pressure. Use `getBounds()` if garbage collection is a concern. */
	    getBoundsRect(clipper) {
	        let offset = new Vector2();
	        let size = new Vector2();
	        this.getBounds(offset, size, undefined, clipper);
	        return { x: offset.x, y: offset.y, width: size.x, height: size.y };
	    }
	    /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.
	     * @param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.
	     * @param size An output value, the width and height of the AABB.
	     * @param temp Working memory to temporarily store attachments' computed world vertices.
	     * @param clipper {@link SkeletonClipping} to use. If <code>null</code>, no clipping is applied. */
	    getBounds(offset, size, temp = new Array(2), clipper = null) {
	        if (!offset)
	            throw new Error("offset cannot be null.");
	        if (!size)
	            throw new Error("size cannot be null.");
	        let drawOrder = this.drawOrder;
	        let minX = Number.POSITIVE_INFINITY, minY = Number.POSITIVE_INFINITY, maxX = Number.NEGATIVE_INFINITY, maxY = Number.NEGATIVE_INFINITY;
	        for (let i = 0, n = drawOrder.length; i < n; i++) {
	            let slot = drawOrder[i];
	            if (!slot.bone.active)
	                continue;
	            let verticesLength = 0;
	            let vertices = null;
	            let triangles = null;
	            let attachment = slot.getAttachment();
	            if (attachment instanceof RegionAttachment) {
	                verticesLength = 8;
	                vertices = Utils.setArraySize(temp, verticesLength, 0);
	                attachment.computeWorldVertices(slot, vertices, 0, 2);
	                triangles = Skeleton.quadTriangles;
	            }
	            else if (attachment instanceof MeshAttachment) {
	                let mesh = attachment;
	                verticesLength = mesh.worldVerticesLength;
	                vertices = Utils.setArraySize(temp, verticesLength, 0);
	                mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);
	                triangles = mesh.triangles;
	            }
	            else if (attachment instanceof ClippingAttachment && clipper != null) {
	                clipper.clipStart(slot, attachment);
	                continue;
	            }
	            if (vertices && triangles) {
	                if (clipper != null && clipper.isClipping()) {
	                    clipper.clipTriangles(vertices, triangles, triangles.length);
	                    vertices = clipper.clippedVertices;
	                    verticesLength = clipper.clippedVertices.length;
	                }
	                for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {
	                    let x = vertices[ii], y = vertices[ii + 1];
	                    minX = Math.min(minX, x);
	                    minY = Math.min(minY, y);
	                    maxX = Math.max(maxX, x);
	                    maxY = Math.max(maxY, y);
	                }
	            }
	            if (clipper != null)
	                clipper.clipEndWithSlot(slot);
	        }
	        if (clipper != null)
	            clipper.clipEnd();
	        offset.set(minX, minY);
	        size.set(maxX - minX, maxY - minY);
	    }
	    /** Increments the skeleton's {@link #time}. */
	    update(delta) {
	        this.time += delta;
	    }
	    physicsTranslate(x, y) {
	        const physicsConstraints = this.physicsConstraints;
	        for (let i = 0, n = physicsConstraints.length; i < n; i++)
	            physicsConstraints[i].translate(x, y);
	    }
	    /** Calls {@link PhysicsConstraint#rotate(float, float, float)} for each physics constraint. */
	    physicsRotate(x, y, degrees) {
	        const physicsConstraints = this.physicsConstraints;
	        for (let i = 0, n = physicsConstraints.length; i < n; i++)
	            physicsConstraints[i].rotate(x, y, degrees);
	    }
	}
	/** Determines how physics and other non-deterministic updates are applied. */
	var Physics;
	(function (Physics) {
	    /** Physics are not updated or applied. */
	    Physics[Physics["none"] = 0] = "none";
	    /** Physics are reset to the current pose. */
	    Physics[Physics["reset"] = 1] = "reset";
	    /** Physics are updated and the pose from physics is applied. */
	    Physics[Physics["update"] = 2] = "update";
	    /** Physics are not updated but the pose from physics is applied. */
	    Physics[Physics["pose"] = 3] = "pose";
	})(Physics || (Physics = {}));

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose for a {@link PhysicsConstraint}.
	 * <p>
	 * See <a href="http://esotericsoftware.com/spine-physics-constraints">Physics constraints</a> in the Spine User Guide. */
	class PhysicsConstraintData extends ConstraintData {
	    _bone = null;
	    /** The bone constrained by this physics constraint. */
	    set bone(boneData) { this._bone = boneData; }
	    get bone() {
	        if (!this._bone)
	            throw new Error("BoneData not set.");
	        else
	            return this._bone;
	    }
	    x = 0;
	    y = 0;
	    rotate = 0;
	    scaleX = 0;
	    shearX = 0;
	    limit = 0;
	    step = 0;
	    inertia = 0;
	    strength = 0;
	    damping = 0;
	    massInverse = 0;
	    wind = 0;
	    gravity = 0;
	    /** A percentage (0-1) that controls the mix between the constrained and unconstrained poses. */
	    mix = 0;
	    inertiaGlobal = false;
	    strengthGlobal = false;
	    dampingGlobal = false;
	    massGlobal = false;
	    windGlobal = false;
	    gravityGlobal = false;
	    mixGlobal = false;
	    constructor(name) {
	        super(name, 0, false);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose and all of the stateless data for a skeleton.
	 *
	 * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes
	 * Guide. */
	class SkeletonData {
	    /** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */
	    name = null;
	    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */
	    bones = new Array(); // Ordered parents first.
	    /** The skeleton's slots in the setup pose draw order. */
	    slots = new Array(); // Setup pose draw order.
	    skins = new Array();
	    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.
	     *
	     * See {@link Skeleton#getAttachmentByName()}.
	     * May be null. */
	    defaultSkin = null;
	    /** The skeleton's events. */
	    events = new Array();
	    /** The skeleton's animations. */
	    animations = new Array();
	    /** The skeleton's IK constraints. */
	    ikConstraints = new Array();
	    /** The skeleton's transform constraints. */
	    transformConstraints = new Array();
	    /** The skeleton's path constraints. */
	    pathConstraints = new Array();
	    /** The skeleton's physics constraints. */
	    physicsConstraints = new Array();
	    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */
	    x = 0;
	    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */
	    y = 0;
	    /** The width of the skeleton's axis aligned bounding box in the setup pose. */
	    width = 0;
	    /** The height of the skeleton's axis aligned bounding box in the setup pose. */
	    height = 0;
	    /** Baseline scale factor for applying distance-dependent effects on non-scalable properties, such as angle or scale. Default
	     * is 100. */
	    referenceScale = 100;
	    /** The Spine version used to export the skeleton data, or null. */
	    version = null;
	    /** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */
	    hash = null;
	    // Nonessential
	    /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */
	    fps = 0;
	    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */
	    imagesPath = null;
	    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */
	    audioPath = null;
	    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it
	     * multiple times.
	     * @returns May be null. */
	    findBone(boneName) {
	        if (!boneName)
	            throw new Error("boneName cannot be null.");
	        let bones = this.bones;
	        for (let i = 0, n = bones.length; i < n; i++) {
	            let bone = bones[i];
	            if (bone.name == boneName)
	                return bone;
	        }
	        return null;
	    }
	    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it
	     * multiple times.
	     * @returns May be null. */
	    findSlot(slotName) {
	        if (!slotName)
	            throw new Error("slotName cannot be null.");
	        let slots = this.slots;
	        for (let i = 0, n = slots.length; i < n; i++) {
	            let slot = slots[i];
	            if (slot.name == slotName)
	                return slot;
	        }
	        return null;
	    }
	    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it
	     * multiple times.
	     * @returns May be null. */
	    findSkin(skinName) {
	        if (!skinName)
	            throw new Error("skinName cannot be null.");
	        let skins = this.skins;
	        for (let i = 0, n = skins.length; i < n; i++) {
	            let skin = skins[i];
	            if (skin.name == skinName)
	                return skin;
	        }
	        return null;
	    }
	    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it
	     * multiple times.
	     * @returns May be null. */
	    findEvent(eventDataName) {
	        if (!eventDataName)
	            throw new Error("eventDataName cannot be null.");
	        let events = this.events;
	        for (let i = 0, n = events.length; i < n; i++) {
	            let event = events[i];
	            if (event.name == eventDataName)
	                return event;
	        }
	        return null;
	    }
	    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to
	     * call it multiple times.
	     * @returns May be null. */
	    findAnimation(animationName) {
	        if (!animationName)
	            throw new Error("animationName cannot be null.");
	        let animations = this.animations;
	        for (let i = 0, n = animations.length; i < n; i++) {
	            let animation = animations[i];
	            if (animation.name == animationName)
	                return animation;
	        }
	        return null;
	    }
	    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method
	     * than to call it multiple times.
	     * @return May be null. */
	    findIkConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        const ikConstraints = this.ikConstraints;
	        for (let i = 0, n = ikConstraints.length; i < n; i++) {
	            const constraint = ikConstraints[i];
	            if (constraint.name == constraintName)
	                return constraint;
	        }
	        return null;
	    }
	    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of
	     * this method than to call it multiple times.
	     * @return May be null. */
	    findTransformConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        const transformConstraints = this.transformConstraints;
	        for (let i = 0, n = transformConstraints.length; i < n; i++) {
	            const constraint = transformConstraints[i];
	            if (constraint.name == constraintName)
	                return constraint;
	        }
	        return null;
	    }
	    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method
	     * than to call it multiple times.
	     * @return May be null. */
	    findPathConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        const pathConstraints = this.pathConstraints;
	        for (let i = 0, n = pathConstraints.length; i < n; i++) {
	            const constraint = pathConstraints[i];
	            if (constraint.name == constraintName)
	                return constraint;
	        }
	        return null;
	    }
	    /** Finds a physics constraint by comparing each physics constraint's name. It is more efficient to cache the results of this method
	     * than to call it multiple times.
	     * @return May be null. */
	    findPhysicsConstraint(constraintName) {
	        if (!constraintName)
	            throw new Error("constraintName cannot be null.");
	        const physicsConstraints = this.physicsConstraints;
	        for (let i = 0, n = physicsConstraints.length; i < n; i++) {
	            const constraint = physicsConstraints[i];
	            if (constraint.name == constraintName)
	                return constraint;
	        }
	        return null;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores an entry in the skin consisting of the slot index, name, and attachment **/
	class SkinEntry {
	    slotIndex;
	    name;
	    attachment;
	    constructor(slotIndex = 0, name, attachment) {
	        this.slotIndex = slotIndex;
	        this.name = name;
	        this.attachment = attachment;
	    }
	}
	/** Stores attachments by slot index and attachment name.
	 *
	 * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and
	 * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */
	class Skin {
	    /** The skin's name, which is unique across all skins in the skeleton. */
	    name;
	    attachments = new Array();
	    bones = Array();
	    constraints = new Array();
	    /** The color of the skin as it was in Spine, or a default color if nonessential data was not exported. */
	    color = new Color(0.99607843, 0.61960787, 0.30980393, 1); // fe9e4fff
	    constructor(name) {
	        if (!name)
	            throw new Error("name cannot be null.");
	        this.name = name;
	    }
	    /** Adds an attachment to the skin for the specified slot index and name. */
	    setAttachment(slotIndex, name, attachment) {
	        if (!attachment)
	            throw new Error("attachment cannot be null.");
	        let attachments = this.attachments;
	        if (slotIndex >= attachments.length)
	            attachments.length = slotIndex + 1;
	        if (!attachments[slotIndex])
	            attachments[slotIndex] = {};
	        attachments[slotIndex][name] = attachment;
	    }
	    /** Adds all attachments, bones, and constraints from the specified skin to this skin. */
	    addSkin(skin) {
	        for (let i = 0; i < skin.bones.length; i++) {
	            let bone = skin.bones[i];
	            let contained = false;
	            for (let ii = 0; ii < this.bones.length; ii++) {
	                if (this.bones[ii] == bone) {
	                    contained = true;
	                    break;
	                }
	            }
	            if (!contained)
	                this.bones.push(bone);
	        }
	        for (let i = 0; i < skin.constraints.length; i++) {
	            let constraint = skin.constraints[i];
	            let contained = false;
	            for (let ii = 0; ii < this.constraints.length; ii++) {
	                if (this.constraints[ii] == constraint) {
	                    contained = true;
	                    break;
	                }
	            }
	            if (!contained)
	                this.constraints.push(constraint);
	        }
	        let attachments = skin.getAttachments();
	        for (let i = 0; i < attachments.length; i++) {
	            var attachment = attachments[i];
	            this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);
	        }
	    }
	    /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not
	     * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */
	    copySkin(skin) {
	        for (let i = 0; i < skin.bones.length; i++) {
	            let bone = skin.bones[i];
	            let contained = false;
	            for (let ii = 0; ii < this.bones.length; ii++) {
	                if (this.bones[ii] == bone) {
	                    contained = true;
	                    break;
	                }
	            }
	            if (!contained)
	                this.bones.push(bone);
	        }
	        for (let i = 0; i < skin.constraints.length; i++) {
	            let constraint = skin.constraints[i];
	            let contained = false;
	            for (let ii = 0; ii < this.constraints.length; ii++) {
	                if (this.constraints[ii] == constraint) {
	                    contained = true;
	                    break;
	                }
	            }
	            if (!contained)
	                this.constraints.push(constraint);
	        }
	        let attachments = skin.getAttachments();
	        for (let i = 0; i < attachments.length; i++) {
	            var attachment = attachments[i];
	            if (!attachment.attachment)
	                continue;
	            if (attachment.attachment instanceof MeshAttachment) {
	                attachment.attachment = attachment.attachment.newLinkedMesh();
	                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);
	            }
	            else {
	                attachment.attachment = attachment.attachment.copy();
	                this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);
	            }
	        }
	    }
	    /** Returns the attachment for the specified slot index and name, or null. */
	    getAttachment(slotIndex, name) {
	        let dictionary = this.attachments[slotIndex];
	        return dictionary ? dictionary[name] : null;
	    }
	    /** Removes the attachment in the skin for the specified slot index and name, if any. */
	    removeAttachment(slotIndex, name) {
	        let dictionary = this.attachments[slotIndex];
	        if (dictionary)
	            delete dictionary[name];
	    }
	    /** Returns all attachments in this skin. */
	    getAttachments() {
	        let entries = new Array();
	        for (var i = 0; i < this.attachments.length; i++) {
	            let slotAttachments = this.attachments[i];
	            if (slotAttachments) {
	                for (let name in slotAttachments) {
	                    let attachment = slotAttachments[name];
	                    if (attachment)
	                        entries.push(new SkinEntry(i, name, attachment));
	                }
	            }
	        }
	        return entries;
	    }
	    /** Returns all attachments in this skin for the specified slot index. */
	    getAttachmentsForSlot(slotIndex, attachments) {
	        let slotAttachments = this.attachments[slotIndex];
	        if (slotAttachments) {
	            for (let name in slotAttachments) {
	                let attachment = slotAttachments[name];
	                if (attachment)
	                    attachments.push(new SkinEntry(slotIndex, name, attachment));
	            }
	        }
	    }
	    /** Clears all attachments, bones, and constraints. */
	    clear() {
	        this.attachments.length = 0;
	        this.bones.length = 0;
	        this.constraints.length = 0;
	    }
	    /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */
	    attachAll(skeleton, oldSkin) {
	        let slotIndex = 0;
	        for (let i = 0; i < skeleton.slots.length; i++) {
	            let slot = skeleton.slots[i];
	            let slotAttachment = slot.getAttachment();
	            if (slotAttachment && slotIndex < oldSkin.attachments.length) {
	                let dictionary = oldSkin.attachments[slotIndex];
	                for (let key in dictionary) {
	                    let skinAttachment = dictionary[key];
	                    if (slotAttachment == skinAttachment) {
	                        let attachment = this.getAttachment(slotIndex, key);
	                        if (attachment)
	                            slot.setAttachment(attachment);
	                        break;
	                    }
	                }
	            }
	            slotIndex++;
	        }
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose for a {@link Slot}. */
	class SlotData {
	    /** The index of the slot in {@link Skeleton#getSlots()}. */
	    index = 0;
	    /** The name of the slot, which is unique across all slots in the skeleton. */
	    name;
	    /** The bone this slot belongs to. */
	    boneData;
	    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two
	     * color tinting. */
	    color = new Color(1, 1, 1, 1);
	    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark
	     * color's alpha is not used. */
	    darkColor = null;
	    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */
	    attachmentName = null;
	    /** The blend mode for drawing the slot's attachment. */
	    blendMode = BlendMode.Normal;
	    /** False if the slot was hidden in Spine and nonessential data was exported. Does not affect runtime rendering. */
	    visible = true;
	    constructor(index, name, boneData) {
	        if (index < 0)
	            throw new Error("index must be >= 0.");
	        if (!name)
	            throw new Error("name cannot be null.");
	        if (!boneData)
	            throw new Error("boneData cannot be null.");
	        this.index = index;
	        this.name = name;
	        this.boneData = boneData;
	    }
	}
	/** Determines how images are blended with existing pixels when drawn. */
	var BlendMode;
	(function (BlendMode) {
	    BlendMode[BlendMode["Normal"] = 0] = "Normal";
	    BlendMode[BlendMode["Additive"] = 1] = "Additive";
	    BlendMode[BlendMode["Multiply"] = 2] = "Multiply";
	    BlendMode[BlendMode["Screen"] = 3] = "Screen";
	})(BlendMode || (BlendMode = {}));

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Stores the setup pose for a {@link TransformConstraint}.
	 *
	 * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide. */
	class TransformConstraintData extends ConstraintData {
	    /** The bones that will be modified by this transform constraint. */
	    bones = new Array();
	    /** The target bone whose world transform will be copied to the constrained bones. */
	    _target = null;
	    set target(boneData) { this._target = boneData; }
	    get target() {
	        if (!this._target)
	            throw new Error("BoneData not set.");
	        else
	            return this._target;
	    }
	    mixRotate = 0;
	    mixX = 0;
	    mixY = 0;
	    mixScaleX = 0;
	    mixScaleY = 0;
	    mixShearY = 0;
	    /** An offset added to the constrained bone rotation. */
	    offsetRotation = 0;
	    /** An offset added to the constrained bone X translation. */
	    offsetX = 0;
	    /** An offset added to the constrained bone Y translation. */
	    offsetY = 0;
	    /** An offset added to the constrained bone scaleX. */
	    offsetScaleX = 0;
	    /** An offset added to the constrained bone scaleY. */
	    offsetScaleY = 0;
	    /** An offset added to the constrained bone shearY. */
	    offsetShearY = 0;
	    relative = false;
	    local = false;
	    constructor(name) {
	        super(name, 0, false);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	var AttachmentType;
	(function (AttachmentType) {
	    AttachmentType[AttachmentType["Region"] = 0] = "Region";
	    AttachmentType[AttachmentType["BoundingBox"] = 1] = "BoundingBox";
	    AttachmentType[AttachmentType["Mesh"] = 2] = "Mesh";
	    AttachmentType[AttachmentType["LinkedMesh"] = 3] = "LinkedMesh";
	    AttachmentType[AttachmentType["Path"] = 4] = "Path";
	    AttachmentType[AttachmentType["Point"] = 5] = "Point";
	    AttachmentType[AttachmentType["Clipping"] = 6] = "Clipping";
	})(AttachmentType || (AttachmentType = {}));

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class Triangulator {
	    convexPolygons = new Array();
	    convexPolygonsIndices = new Array();
	    indicesArray = new Array();
	    isConcaveArray = new Array();
	    triangles = new Array();
	    polygonPool = new Pool(() => {
	        return new Array();
	    });
	    polygonIndicesPool = new Pool(() => {
	        return new Array();
	    });
	    triangulate(verticesArray) {
	        let vertices = verticesArray;
	        let vertexCount = verticesArray.length >> 1;
	        let indices = this.indicesArray;
	        indices.length = 0;
	        for (let i = 0; i < vertexCount; i++)
	            indices[i] = i;
	        let isConcave = this.isConcaveArray;
	        isConcave.length = 0;
	        for (let i = 0, n = vertexCount; i < n; ++i)
	            isConcave[i] = Triangulator.isConcave(i, vertexCount, vertices, indices);
	        let triangles = this.triangles;
	        triangles.length = 0;
	        while (vertexCount > 3) {
	            // Find ear tip.
	            let previous = vertexCount - 1, i = 0, next = 1;
	            while (true) {
	                outer: if (!isConcave[i]) {
	                    let p1 = indices[previous] << 1, p2 = indices[i] << 1, p3 = indices[next] << 1;
	                    let p1x = vertices[p1], p1y = vertices[p1 + 1];
	                    let p2x = vertices[p2], p2y = vertices[p2 + 1];
	                    let p3x = vertices[p3], p3y = vertices[p3 + 1];
	                    for (let ii = (next + 1) % vertexCount; ii != previous; ii = (ii + 1) % vertexCount) {
	                        if (!isConcave[ii])
	                            continue;
	                        let v = indices[ii] << 1;
	                        let vx = vertices[v], vy = vertices[v + 1];
	                        if (Triangulator.positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {
	                            if (Triangulator.positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {
	                                if (Triangulator.positiveArea(p2x, p2y, p3x, p3y, vx, vy))
	                                    break outer;
	                            }
	                        }
	                    }
	                    break;
	                }
	                if (next == 0) {
	                    do {
	                        if (!isConcave[i])
	                            break;
	                        i--;
	                    } while (i > 0);
	                    break;
	                }
	                previous = i;
	                i = next;
	                next = (next + 1) % vertexCount;
	            }
	            // Cut ear tip.
	            triangles.push(indices[(vertexCount + i - 1) % vertexCount]);
	            triangles.push(indices[i]);
	            triangles.push(indices[(i + 1) % vertexCount]);
	            indices.splice(i, 1);
	            isConcave.splice(i, 1);
	            vertexCount--;
	            let previousIndex = (vertexCount + i - 1) % vertexCount;
	            let nextIndex = i == vertexCount ? 0 : i;
	            isConcave[previousIndex] = Triangulator.isConcave(previousIndex, vertexCount, vertices, indices);
	            isConcave[nextIndex] = Triangulator.isConcave(nextIndex, vertexCount, vertices, indices);
	        }
	        if (vertexCount == 3) {
	            triangles.push(indices[2]);
	            triangles.push(indices[0]);
	            triangles.push(indices[1]);
	        }
	        return triangles;
	    }
	    decompose(verticesArray, triangles) {
	        let vertices = verticesArray;
	        let convexPolygons = this.convexPolygons;
	        this.polygonPool.freeAll(convexPolygons);
	        convexPolygons.length = 0;
	        let convexPolygonsIndices = this.convexPolygonsIndices;
	        this.polygonIndicesPool.freeAll(convexPolygonsIndices);
	        convexPolygonsIndices.length = 0;
	        let polygonIndices = this.polygonIndicesPool.obtain();
	        polygonIndices.length = 0;
	        let polygon = this.polygonPool.obtain();
	        polygon.length = 0;
	        // Merge subsequent triangles if they form a triangle fan.
	        let fanBaseIndex = -1, lastWinding = 0;
	        for (let i = 0, n = triangles.length; i < n; i += 3) {
	            let t1 = triangles[i] << 1, t2 = triangles[i + 1] << 1, t3 = triangles[i + 2] << 1;
	            let x1 = vertices[t1], y1 = vertices[t1 + 1];
	            let x2 = vertices[t2], y2 = vertices[t2 + 1];
	            let x3 = vertices[t3], y3 = vertices[t3 + 1];
	            // If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).
	            let merged = false;
	            if (fanBaseIndex == t1) {
	                let o = polygon.length - 4;
	                let winding1 = Triangulator.winding(polygon[o], polygon[o + 1], polygon[o + 2], polygon[o + 3], x3, y3);
	                let winding2 = Triangulator.winding(x3, y3, polygon[0], polygon[1], polygon[2], polygon[3]);
	                if (winding1 == lastWinding && winding2 == lastWinding) {
	                    polygon.push(x3);
	                    polygon.push(y3);
	                    polygonIndices.push(t3);
	                    merged = true;
	                }
	            }
	            // Otherwise make this triangle the new base.
	            if (!merged) {
	                if (polygon.length > 0) {
	                    convexPolygons.push(polygon);
	                    convexPolygonsIndices.push(polygonIndices);
	                }
	                else {
	                    this.polygonPool.free(polygon);
	                    this.polygonIndicesPool.free(polygonIndices);
	                }
	                polygon = this.polygonPool.obtain();
	                polygon.length = 0;
	                polygon.push(x1);
	                polygon.push(y1);
	                polygon.push(x2);
	                polygon.push(y2);
	                polygon.push(x3);
	                polygon.push(y3);
	                polygonIndices = this.polygonIndicesPool.obtain();
	                polygonIndices.length = 0;
	                polygonIndices.push(t1);
	                polygonIndices.push(t2);
	                polygonIndices.push(t3);
	                lastWinding = Triangulator.winding(x1, y1, x2, y2, x3, y3);
	                fanBaseIndex = t1;
	            }
	        }
	        if (polygon.length > 0) {
	            convexPolygons.push(polygon);
	            convexPolygonsIndices.push(polygonIndices);
	        }
	        // Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.
	        for (let i = 0, n = convexPolygons.length; i < n; i++) {
	            polygonIndices = convexPolygonsIndices[i];
	            if (polygonIndices.length == 0)
	                continue;
	            let firstIndex = polygonIndices[0];
	            let lastIndex = polygonIndices[polygonIndices.length - 1];
	            polygon = convexPolygons[i];
	            let o = polygon.length - 4;
	            let prevPrevX = polygon[o], prevPrevY = polygon[o + 1];
	            let prevX = polygon[o + 2], prevY = polygon[o + 3];
	            let firstX = polygon[0], firstY = polygon[1];
	            let secondX = polygon[2], secondY = polygon[3];
	            let winding = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY);
	            for (let ii = 0; ii < n; ii++) {
	                if (ii == i)
	                    continue;
	                let otherIndices = convexPolygonsIndices[ii];
	                if (otherIndices.length != 3)
	                    continue;
	                let otherFirstIndex = otherIndices[0];
	                let otherSecondIndex = otherIndices[1];
	                let otherLastIndex = otherIndices[2];
	                let otherPoly = convexPolygons[ii];
	                let x3 = otherPoly[otherPoly.length - 2], y3 = otherPoly[otherPoly.length - 1];
	                if (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex)
	                    continue;
	                let winding1 = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3);
	                let winding2 = Triangulator.winding(x3, y3, firstX, firstY, secondX, secondY);
	                if (winding1 == winding && winding2 == winding) {
	                    otherPoly.length = 0;
	                    otherIndices.length = 0;
	                    polygon.push(x3);
	                    polygon.push(y3);
	                    polygonIndices.push(otherLastIndex);
	                    prevPrevX = prevX;
	                    prevPrevY = prevY;
	                    prevX = x3;
	                    prevY = y3;
	                    ii = 0;
	                }
	            }
	        }
	        // Remove empty polygons that resulted from the merge step above.
	        for (let i = convexPolygons.length - 1; i >= 0; i--) {
	            polygon = convexPolygons[i];
	            if (polygon.length == 0) {
	                convexPolygons.splice(i, 1);
	                this.polygonPool.free(polygon);
	                polygonIndices = convexPolygonsIndices[i];
	                convexPolygonsIndices.splice(i, 1);
	                this.polygonIndicesPool.free(polygonIndices);
	            }
	        }
	        return convexPolygons;
	    }
	    static isConcave(index, vertexCount, vertices, indices) {
	        let previous = indices[(vertexCount + index - 1) % vertexCount] << 1;
	        let current = indices[index] << 1;
	        let next = indices[(index + 1) % vertexCount] << 1;
	        return !this.positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next], vertices[next + 1]);
	    }
	    static positiveArea(p1x, p1y, p2x, p2y, p3x, p3y) {
	        return p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;
	    }
	    static winding(p1x, p1y, p2x, p2y, p3x, p3y) {
	        let px = p2x - p1x, py = p2y - p1y;
	        return p3x * py - p3y * px + px * p1y - p1x * py >= 0 ? 1 : -1;
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class SkeletonClipping {
	    triangulator = new Triangulator();
	    clippingPolygon = new Array();
	    clipOutput = new Array();
	    clippedVertices = new Array();
	    clippedUVs = new Array();
	    clippedTriangles = new Array();
	    scratch = new Array();
	    clipAttachment = null;
	    clippingPolygons = null;
	    clipStart(slot, clip) {
	        if (this.clipAttachment)
	            return 0;
	        this.clipAttachment = clip;
	        let n = clip.worldVerticesLength;
	        let vertices = Utils.setArraySize(this.clippingPolygon, n);
	        clip.computeWorldVertices(slot, 0, n, vertices, 0, 2);
	        let clippingPolygon = this.clippingPolygon;
	        SkeletonClipping.makeClockwise(clippingPolygon);
	        let clippingPolygons = this.clippingPolygons = this.triangulator.decompose(clippingPolygon, this.triangulator.triangulate(clippingPolygon));
	        for (let i = 0, n = clippingPolygons.length; i < n; i++) {
	            let polygon = clippingPolygons[i];
	            SkeletonClipping.makeClockwise(polygon);
	            polygon.push(polygon[0]);
	            polygon.push(polygon[1]);
	        }
	        return clippingPolygons.length;
	    }
	    clipEndWithSlot(slot) {
	        if (this.clipAttachment && this.clipAttachment.endSlot == slot.data)
	            this.clipEnd();
	    }
	    clipEnd() {
	        if (!this.clipAttachment)
	            return;
	        this.clipAttachment = null;
	        this.clippingPolygons = null;
	        this.clippedVertices.length = 0;
	        this.clippedTriangles.length = 0;
	        this.clippingPolygon.length = 0;
	    }
	    isClipping() {
	        return this.clipAttachment != null;
	    }
	    clipTriangles(vertices, verticesLengthOrTriangles, trianglesOrTrianglesLength, trianglesLengthOrUvs, uvsOrLight, lightOrDark, darkOrTwoColor, twoColorParam) {
	        // Determine which overload is being used
	        let triangles;
	        let trianglesLength;
	        let uvs;
	        let light;
	        let dark;
	        let twoColor;
	        if (typeof verticesLengthOrTriangles === 'number') {
	            triangles = trianglesOrTrianglesLength;
	            trianglesLength = trianglesLengthOrUvs;
	            uvs = uvsOrLight;
	            light = lightOrDark;
	            dark = darkOrTwoColor;
	            twoColor = twoColorParam;
	        }
	        else {
	            triangles = verticesLengthOrTriangles;
	            trianglesLength = trianglesOrTrianglesLength;
	            uvs = trianglesLengthOrUvs;
	            light = uvsOrLight;
	            dark = lightOrDark;
	            twoColor = darkOrTwoColor;
	        }
	        if (uvs && light && dark && typeof twoColor === 'boolean')
	            this.clipTrianglesRender(vertices, triangles, trianglesLength, uvs, light, dark, twoColor);
	        else
	            this.clipTrianglesNoRender(vertices, triangles, trianglesLength);
	    }
	    clipTrianglesNoRender(vertices, triangles, trianglesLength) {
	        let clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;
	        let clippedTriangles = this.clippedTriangles;
	        let polygons = this.clippingPolygons;
	        let polygonsCount = polygons.length;
	        let index = 0;
	        clippedVertices.length = 0;
	        clippedTriangles.length = 0;
	        for (let i = 0; i < trianglesLength; i += 3) {
	            let vertexOffset = triangles[i] << 1;
	            let x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];
	            vertexOffset = triangles[i + 1] << 1;
	            let x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];
	            vertexOffset = triangles[i + 2] << 1;
	            let x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];
	            for (let p = 0; p < polygonsCount; p++) {
	                let s = clippedVertices.length;
	                if (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {
	                    let clipOutputLength = clipOutput.length;
	                    if (clipOutputLength == 0)
	                        continue;
	                    let clipOutputCount = clipOutputLength >> 1;
	                    let clipOutputItems = this.clipOutput;
	                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * 2);
	                    for (let ii = 0; ii < clipOutputLength; ii += 2, s += 2) {
	                        let x = clipOutputItems[ii], y = clipOutputItems[ii + 1];
	                        clippedVerticesItems[s] = x;
	                        clippedVerticesItems[s + 1] = y;
	                    }
	                    s = clippedTriangles.length;
	                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));
	                    clipOutputCount--;
	                    for (let ii = 1; ii < clipOutputCount; ii++, s += 3) {
	                        clippedTrianglesItems[s] = index;
	                        clippedTrianglesItems[s + 1] = (index + ii);
	                        clippedTrianglesItems[s + 2] = (index + ii + 1);
	                    }
	                    index += clipOutputCount + 1;
	                }
	                else {
	                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * 2);
	                    clippedVerticesItems[s] = x1;
	                    clippedVerticesItems[s + 1] = y1;
	                    clippedVerticesItems[s + 2] = x2;
	                    clippedVerticesItems[s + 3] = y2;
	                    clippedVerticesItems[s + 4] = x3;
	                    clippedVerticesItems[s + 5] = y3;
	                    s = clippedTriangles.length;
	                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);
	                    clippedTrianglesItems[s] = index;
	                    clippedTrianglesItems[s + 1] = (index + 1);
	                    clippedTrianglesItems[s + 2] = (index + 2);
	                    index += 3;
	                    break;
	                }
	            }
	        }
	    }
	    clipTrianglesRender(vertices, triangles, trianglesLength, uvs, light, dark, twoColor) {
	        let clipOutput = this.clipOutput, clippedVertices = this.clippedVertices;
	        let clippedTriangles = this.clippedTriangles;
	        let polygons = this.clippingPolygons;
	        let polygonsCount = polygons.length;
	        let vertexSize = twoColor ? 12 : 8;
	        let index = 0;
	        clippedVertices.length = 0;
	        clippedTriangles.length = 0;
	        for (let i = 0; i < trianglesLength; i += 3) {
	            let vertexOffset = triangles[i] << 1;
	            let x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];
	            let u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];
	            vertexOffset = triangles[i + 1] << 1;
	            let x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];
	            let u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];
	            vertexOffset = triangles[i + 2] << 1;
	            let x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];
	            let u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];
	            for (let p = 0; p < polygonsCount; p++) {
	                let s = clippedVertices.length;
	                if (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {
	                    let clipOutputLength = clipOutput.length;
	                    if (clipOutputLength == 0)
	                        continue;
	                    let d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;
	                    let d = 1 / (d0 * d2 + d1 * (y1 - y3));
	                    let clipOutputCount = clipOutputLength >> 1;
	                    let clipOutputItems = this.clipOutput;
	                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * vertexSize);
	                    for (let ii = 0; ii < clipOutputLength; ii += 2, s += vertexSize) {
	                        let x = clipOutputItems[ii], y = clipOutputItems[ii + 1];
	                        clippedVerticesItems[s] = x;
	                        clippedVerticesItems[s + 1] = y;
	                        clippedVerticesItems[s + 2] = light.r;
	                        clippedVerticesItems[s + 3] = light.g;
	                        clippedVerticesItems[s + 4] = light.b;
	                        clippedVerticesItems[s + 5] = light.a;
	                        let c0 = x - x3, c1 = y - y3;
	                        let a = (d0 * c0 + d1 * c1) * d;
	                        let b = (d4 * c0 + d2 * c1) * d;
	                        let c = 1 - a - b;
	                        clippedVerticesItems[s + 6] = u1 * a + u2 * b + u3 * c;
	                        clippedVerticesItems[s + 7] = v1 * a + v2 * b + v3 * c;
	                        if (twoColor) {
	                            clippedVerticesItems[s + 8] = dark.r;
	                            clippedVerticesItems[s + 9] = dark.g;
	                            clippedVerticesItems[s + 10] = dark.b;
	                            clippedVerticesItems[s + 11] = dark.a;
	                        }
	                    }
	                    s = clippedTriangles.length;
	                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));
	                    clipOutputCount--;
	                    for (let ii = 1; ii < clipOutputCount; ii++, s += 3) {
	                        clippedTrianglesItems[s] = index;
	                        clippedTrianglesItems[s + 1] = (index + ii);
	                        clippedTrianglesItems[s + 2] = (index + ii + 1);
	                    }
	                    index += clipOutputCount + 1;
	                }
	                else {
	                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * vertexSize);
	                    clippedVerticesItems[s] = x1;
	                    clippedVerticesItems[s + 1] = y1;
	                    clippedVerticesItems[s + 2] = light.r;
	                    clippedVerticesItems[s + 3] = light.g;
	                    clippedVerticesItems[s + 4] = light.b;
	                    clippedVerticesItems[s + 5] = light.a;
	                    if (!twoColor) {
	                        clippedVerticesItems[s + 6] = u1;
	                        clippedVerticesItems[s + 7] = v1;
	                        clippedVerticesItems[s + 8] = x2;
	                        clippedVerticesItems[s + 9] = y2;
	                        clippedVerticesItems[s + 10] = light.r;
	                        clippedVerticesItems[s + 11] = light.g;
	                        clippedVerticesItems[s + 12] = light.b;
	                        clippedVerticesItems[s + 13] = light.a;
	                        clippedVerticesItems[s + 14] = u2;
	                        clippedVerticesItems[s + 15] = v2;
	                        clippedVerticesItems[s + 16] = x3;
	                        clippedVerticesItems[s + 17] = y3;
	                        clippedVerticesItems[s + 18] = light.r;
	                        clippedVerticesItems[s + 19] = light.g;
	                        clippedVerticesItems[s + 20] = light.b;
	                        clippedVerticesItems[s + 21] = light.a;
	                        clippedVerticesItems[s + 22] = u3;
	                        clippedVerticesItems[s + 23] = v3;
	                    }
	                    else {
	                        clippedVerticesItems[s + 6] = u1;
	                        clippedVerticesItems[s + 7] = v1;
	                        clippedVerticesItems[s + 8] = dark.r;
	                        clippedVerticesItems[s + 9] = dark.g;
	                        clippedVerticesItems[s + 10] = dark.b;
	                        clippedVerticesItems[s + 11] = dark.a;
	                        clippedVerticesItems[s + 12] = x2;
	                        clippedVerticesItems[s + 13] = y2;
	                        clippedVerticesItems[s + 14] = light.r;
	                        clippedVerticesItems[s + 15] = light.g;
	                        clippedVerticesItems[s + 16] = light.b;
	                        clippedVerticesItems[s + 17] = light.a;
	                        clippedVerticesItems[s + 18] = u2;
	                        clippedVerticesItems[s + 19] = v2;
	                        clippedVerticesItems[s + 20] = dark.r;
	                        clippedVerticesItems[s + 21] = dark.g;
	                        clippedVerticesItems[s + 22] = dark.b;
	                        clippedVerticesItems[s + 23] = dark.a;
	                        clippedVerticesItems[s + 24] = x3;
	                        clippedVerticesItems[s + 25] = y3;
	                        clippedVerticesItems[s + 26] = light.r;
	                        clippedVerticesItems[s + 27] = light.g;
	                        clippedVerticesItems[s + 28] = light.b;
	                        clippedVerticesItems[s + 29] = light.a;
	                        clippedVerticesItems[s + 30] = u3;
	                        clippedVerticesItems[s + 31] = v3;
	                        clippedVerticesItems[s + 32] = dark.r;
	                        clippedVerticesItems[s + 33] = dark.g;
	                        clippedVerticesItems[s + 34] = dark.b;
	                        clippedVerticesItems[s + 35] = dark.a;
	                    }
	                    s = clippedTriangles.length;
	                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);
	                    clippedTrianglesItems[s] = index;
	                    clippedTrianglesItems[s + 1] = (index + 1);
	                    clippedTrianglesItems[s + 2] = (index + 2);
	                    index += 3;
	                    break;
	                }
	            }
	        }
	    }
	    clipTrianglesUnpacked(vertices, triangles, trianglesLength, uvs) {
	        let clipOutput = this.clipOutput, clippedVertices = this.clippedVertices, clippedUVs = this.clippedUVs;
	        let clippedTriangles = this.clippedTriangles;
	        let polygons = this.clippingPolygons;
	        let polygonsCount = polygons.length;
	        let index = 0;
	        clippedVertices.length = 0;
	        clippedUVs.length = 0;
	        clippedTriangles.length = 0;
	        for (let i = 0; i < trianglesLength; i += 3) {
	            let vertexOffset = triangles[i] << 1;
	            let x1 = vertices[vertexOffset], y1 = vertices[vertexOffset + 1];
	            let u1 = uvs[vertexOffset], v1 = uvs[vertexOffset + 1];
	            vertexOffset = triangles[i + 1] << 1;
	            let x2 = vertices[vertexOffset], y2 = vertices[vertexOffset + 1];
	            let u2 = uvs[vertexOffset], v2 = uvs[vertexOffset + 1];
	            vertexOffset = triangles[i + 2] << 1;
	            let x3 = vertices[vertexOffset], y3 = vertices[vertexOffset + 1];
	            let u3 = uvs[vertexOffset], v3 = uvs[vertexOffset + 1];
	            for (let p = 0; p < polygonsCount; p++) {
	                let s = clippedVertices.length;
	                if (this.clip(x1, y1, x2, y2, x3, y3, polygons[p], clipOutput)) {
	                    let clipOutputLength = clipOutput.length;
	                    if (clipOutputLength == 0)
	                        continue;
	                    let d0 = y2 - y3, d1 = x3 - x2, d2 = x1 - x3, d4 = y3 - y1;
	                    let d = 1 / (d0 * d2 + d1 * (y1 - y3));
	                    let clipOutputCount = clipOutputLength >> 1;
	                    let clipOutputItems = this.clipOutput;
	                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + clipOutputCount * 2);
	                    let clippedUVsItems = Utils.setArraySize(clippedUVs, s + clipOutputCount * 2);
	                    for (let ii = 0; ii < clipOutputLength; ii += 2, s += 2) {
	                        let x = clipOutputItems[ii], y = clipOutputItems[ii + 1];
	                        clippedVerticesItems[s] = x;
	                        clippedVerticesItems[s + 1] = y;
	                        let c0 = x - x3, c1 = y - y3;
	                        let a = (d0 * c0 + d1 * c1) * d;
	                        let b = (d4 * c0 + d2 * c1) * d;
	                        let c = 1 - a - b;
	                        clippedUVsItems[s] = u1 * a + u2 * b + u3 * c;
	                        clippedUVsItems[s + 1] = v1 * a + v2 * b + v3 * c;
	                    }
	                    s = clippedTriangles.length;
	                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3 * (clipOutputCount - 2));
	                    clipOutputCount--;
	                    for (let ii = 1; ii < clipOutputCount; ii++, s += 3) {
	                        clippedTrianglesItems[s] = index;
	                        clippedTrianglesItems[s + 1] = (index + ii);
	                        clippedTrianglesItems[s + 2] = (index + ii + 1);
	                    }
	                    index += clipOutputCount + 1;
	                }
	                else {
	                    let clippedVerticesItems = Utils.setArraySize(clippedVertices, s + 3 * 2);
	                    clippedVerticesItems[s] = x1;
	                    clippedVerticesItems[s + 1] = y1;
	                    clippedVerticesItems[s + 2] = x2;
	                    clippedVerticesItems[s + 3] = y2;
	                    clippedVerticesItems[s + 4] = x3;
	                    clippedVerticesItems[s + 5] = y3;
	                    let clippedUVSItems = Utils.setArraySize(clippedUVs, s + 3 * 2);
	                    clippedUVSItems[s] = u1;
	                    clippedUVSItems[s + 1] = v1;
	                    clippedUVSItems[s + 2] = u2;
	                    clippedUVSItems[s + 3] = v2;
	                    clippedUVSItems[s + 4] = u3;
	                    clippedUVSItems[s + 5] = v3;
	                    s = clippedTriangles.length;
	                    let clippedTrianglesItems = Utils.setArraySize(clippedTriangles, s + 3);
	                    clippedTrianglesItems[s] = index;
	                    clippedTrianglesItems[s + 1] = (index + 1);
	                    clippedTrianglesItems[s + 2] = (index + 2);
	                    index += 3;
	                    break;
	                }
	            }
	        }
	    }
	    /** Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping
	     * area, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list. */
	    clip(x1, y1, x2, y2, x3, y3, clippingArea, output) {
	        let originalOutput = output;
	        let clipped = false;
	        // Avoid copy at the end.
	        let input;
	        if (clippingArea.length % 4 >= 2) {
	            input = output;
	            output = this.scratch;
	        }
	        else
	            input = this.scratch;
	        input.length = 0;
	        input.push(x1);
	        input.push(y1);
	        input.push(x2);
	        input.push(y2);
	        input.push(x3);
	        input.push(y3);
	        input.push(x1);
	        input.push(y1);
	        output.length = 0;
	        let clippingVerticesLast = clippingArea.length - 4;
	        let clippingVertices = clippingArea;
	        for (let i = 0;; i += 2) {
	            let edgeX = clippingVertices[i], edgeY = clippingVertices[i + 1];
	            let ex = edgeX - clippingVertices[i + 2], ey = edgeY - clippingVertices[i + 3];
	            let outputStart = output.length;
	            let inputVertices = input;
	            for (let ii = 0, nn = input.length - 2; ii < nn;) {
	                let inputX = inputVertices[ii], inputY = inputVertices[ii + 1];
	                ii += 2;
	                let inputX2 = inputVertices[ii], inputY2 = inputVertices[ii + 1];
	                let s2 = ey * (edgeX - inputX2) > ex * (edgeY - inputY2);
	                let s1 = ey * (edgeX - inputX) - ex * (edgeY - inputY);
	                if (s1 > 0) {
	                    if (s2) { // v1 inside, v2 inside
	                        output.push(inputX2);
	                        output.push(inputY2);
	                        continue;
	                    }
	                    // v1 inside, v2 outside
	                    let ix = inputX2 - inputX, iy = inputY2 - inputY, t = s1 / (ix * ey - iy * ex);
	                    if (t >= 0 && t <= 1) {
	                        output.push(inputX + ix * t);
	                        output.push(inputY + iy * t);
	                    }
	                    else {
	                        output.push(inputX2);
	                        output.push(inputY2);
	                        continue;
	                    }
	                }
	                else if (s2) { // v1 outside, v2 inside
	                    let ix = inputX2 - inputX, iy = inputY2 - inputY, t = s1 / (ix * ey - iy * ex);
	                    if (t >= 0 && t <= 1) {
	                        output.push(inputX + ix * t);
	                        output.push(inputY + iy * t);
	                        output.push(inputX2);
	                        output.push(inputY2);
	                    }
	                    else {
	                        output.push(inputX2);
	                        output.push(inputY2);
	                        continue;
	                    }
	                }
	                clipped = true;
	            }
	            if (outputStart == output.length) { // All edges outside.
	                originalOutput.length = 0;
	                return true;
	            }
	            output.push(output[0]);
	            output.push(output[1]);
	            if (i == clippingVerticesLast)
	                break;
	            let temp = output;
	            output = input;
	            output.length = 0;
	            input = temp;
	        }
	        if (originalOutput != output) {
	            originalOutput.length = 0;
	            for (let i = 0, n = output.length - 2; i < n; i++)
	                originalOutput[i] = output[i];
	        }
	        else
	            originalOutput.length = originalOutput.length - 2;
	        return clipped;
	    }
	    static makeClockwise(polygon) {
	        let vertices = polygon;
	        let verticeslength = polygon.length;
	        let area = vertices[verticeslength - 2] * vertices[1] - vertices[0] * vertices[verticeslength - 1], p1x = 0, p1y = 0, p2x = 0, p2y = 0;
	        for (let i = 0, n = verticeslength - 3; i < n; i += 2) {
	            p1x = vertices[i];
	            p1y = vertices[i + 1];
	            p2x = vertices[i + 2];
	            p2y = vertices[i + 3];
	            area += p1x * p2y - p2x * p1y;
	        }
	        if (area < 0)
	            return;
	        for (let i = 0, lastX = verticeslength - 2, n = verticeslength >> 1; i < n; i += 2) {
	            let x = vertices[i], y = vertices[i + 1];
	            let other = lastX - i;
	            vertices[i] = vertices[other];
	            vertices[i + 1] = vertices[other + 1];
	            vertices[other] = x;
	            vertices[other + 1] = y;
	        }
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	/** Loads skeleton data in the Spine JSON format.
	 *
	 * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and
	 * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine
	 * Runtimes Guide. */
	class SkeletonJson {
	    attachmentLoader;
	    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at
	     * runtime than were used in Spine.
	     *
	     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */
	    scale = 1;
	    linkedMeshes = new Array();
	    constructor(attachmentLoader) {
	        this.attachmentLoader = attachmentLoader;
	    }
	    readSkeletonData(json) {
	        let scale = this.scale;
	        let skeletonData = new SkeletonData();
	        let root = typeof (json) === "string" ? JSON.parse(json) : json;
	        // Skeleton
	        let skeletonMap = root.skeleton;
	        if (skeletonMap) {
	            skeletonData.hash = skeletonMap.hash;
	            skeletonData.version = skeletonMap.spine;
	            skeletonData.x = skeletonMap.x;
	            skeletonData.y = skeletonMap.y;
	            skeletonData.width = skeletonMap.width;
	            skeletonData.height = skeletonMap.height;
	            skeletonData.referenceScale = getValue(skeletonMap, "referenceScale", 100) * scale;
	            skeletonData.fps = skeletonMap.fps;
	            skeletonData.imagesPath = skeletonMap.images ?? null;
	            skeletonData.audioPath = skeletonMap.audio ?? null;
	        }
	        // Bones
	        if (root.bones) {
	            for (let i = 0; i < root.bones.length; i++) {
	                let boneMap = root.bones[i];
	                let parent = null;
	                let parentName = getValue(boneMap, "parent", null);
	                if (parentName)
	                    parent = skeletonData.findBone(parentName);
	                let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);
	                data.length = getValue(boneMap, "length", 0) * scale;
	                data.x = getValue(boneMap, "x", 0) * scale;
	                data.y = getValue(boneMap, "y", 0) * scale;
	                data.rotation = getValue(boneMap, "rotation", 0);
	                data.scaleX = getValue(boneMap, "scaleX", 1);
	                data.scaleY = getValue(boneMap, "scaleY", 1);
	                data.shearX = getValue(boneMap, "shearX", 0);
	                data.shearY = getValue(boneMap, "shearY", 0);
	                data.inherit = Utils.enumValue(Inherit, getValue(boneMap, "inherit", "Normal"));
	                data.skinRequired = getValue(boneMap, "skin", false);
	                let color = getValue(boneMap, "color", null);
	                if (color)
	                    data.color.setFromString(color);
	                skeletonData.bones.push(data);
	            }
	        }
	        // Slots.
	        if (root.slots) {
	            for (let i = 0; i < root.slots.length; i++) {
	                let slotMap = root.slots[i];
	                let slotName = slotMap.name;
	                let boneData = skeletonData.findBone(slotMap.bone);
	                if (!boneData)
	                    throw new Error(`Couldn't find bone ${slotMap.bone} for slot ${slotName}`);
	                let data = new SlotData(skeletonData.slots.length, slotName, boneData);
	                let color = getValue(slotMap, "color", null);
	                if (color)
	                    data.color.setFromString(color);
	                let dark = getValue(slotMap, "dark", null);
	                if (dark)
	                    data.darkColor = Color.fromString(dark);
	                data.attachmentName = getValue(slotMap, "attachment", null);
	                data.blendMode = Utils.enumValue(BlendMode, getValue(slotMap, "blend", "normal"));
	                data.visible = getValue(slotMap, "visible", true);
	                skeletonData.slots.push(data);
	            }
	        }
	        // IK constraints
	        if (root.ik) {
	            for (let i = 0; i < root.ik.length; i++) {
	                let constraintMap = root.ik[i];
	                let data = new IkConstraintData(constraintMap.name);
	                data.order = getValue(constraintMap, "order", 0);
	                data.skinRequired = getValue(constraintMap, "skin", false);
	                for (let ii = 0; ii < constraintMap.bones.length; ii++) {
	                    let bone = skeletonData.findBone(constraintMap.bones[ii]);
	                    if (!bone)
	                        throw new Error(`Couldn't find bone ${constraintMap.bones[ii]} for IK constraint ${constraintMap.name}.`);
	                    data.bones.push(bone);
	                }
	                let target = skeletonData.findBone(constraintMap.target);
	                if (!target)
	                    throw new Error(`Couldn't find target bone ${constraintMap.target} for IK constraint ${constraintMap.name}.`);
	                data.target = target;
	                data.mix = getValue(constraintMap, "mix", 1);
	                data.softness = getValue(constraintMap, "softness", 0) * scale;
	                data.bendDirection = getValue(constraintMap, "bendPositive", true) ? 1 : -1;
	                data.compress = getValue(constraintMap, "compress", false);
	                data.stretch = getValue(constraintMap, "stretch", false);
	                data.uniform = getValue(constraintMap, "uniform", false);
	                skeletonData.ikConstraints.push(data);
	            }
	        }
	        // Transform constraints.
	        if (root.transform) {
	            for (let i = 0; i < root.transform.length; i++) {
	                let constraintMap = root.transform[i];
	                let data = new TransformConstraintData(constraintMap.name);
	                data.order = getValue(constraintMap, "order", 0);
	                data.skinRequired = getValue(constraintMap, "skin", false);
	                for (let ii = 0; ii < constraintMap.bones.length; ii++) {
	                    let boneName = constraintMap.bones[ii];
	                    let bone = skeletonData.findBone(boneName);
	                    if (!bone)
	                        throw new Error(`Couldn't find bone ${boneName} for transform constraint ${constraintMap.name}.`);
	                    data.bones.push(bone);
	                }
	                let targetName = constraintMap.target;
	                let target = skeletonData.findBone(targetName);
	                if (!target)
	                    throw new Error(`Couldn't find target bone ${targetName} for transform constraint ${constraintMap.name}.`);
	                data.target = target;
	                data.local = getValue(constraintMap, "local", false);
	                data.relative = getValue(constraintMap, "relative", false);
	                data.offsetRotation = getValue(constraintMap, "rotation", 0);
	                data.offsetX = getValue(constraintMap, "x", 0) * scale;
	                data.offsetY = getValue(constraintMap, "y", 0) * scale;
	                data.offsetScaleX = getValue(constraintMap, "scaleX", 0);
	                data.offsetScaleY = getValue(constraintMap, "scaleY", 0);
	                data.offsetShearY = getValue(constraintMap, "shearY", 0);
	                data.mixRotate = getValue(constraintMap, "mixRotate", 1);
	                data.mixX = getValue(constraintMap, "mixX", 1);
	                data.mixY = getValue(constraintMap, "mixY", data.mixX);
	                data.mixScaleX = getValue(constraintMap, "mixScaleX", 1);
	                data.mixScaleY = getValue(constraintMap, "mixScaleY", data.mixScaleX);
	                data.mixShearY = getValue(constraintMap, "mixShearY", 1);
	                skeletonData.transformConstraints.push(data);
	            }
	        }
	        // Path constraints.
	        if (root.path) {
	            for (let i = 0; i < root.path.length; i++) {
	                let constraintMap = root.path[i];
	                let data = new PathConstraintData(constraintMap.name);
	                data.order = getValue(constraintMap, "order", 0);
	                data.skinRequired = getValue(constraintMap, "skin", false);
	                for (let ii = 0; ii < constraintMap.bones.length; ii++) {
	                    let boneName = constraintMap.bones[ii];
	                    let bone = skeletonData.findBone(boneName);
	                    if (!bone)
	                        throw new Error(`Couldn't find bone ${boneName} for path constraint ${constraintMap.name}.`);
	                    data.bones.push(bone);
	                }
	                let targetName = constraintMap.target;
	                let target = skeletonData.findSlot(targetName);
	                if (!target)
	                    throw new Error(`Couldn't find target slot ${targetName} for path constraint ${constraintMap.name}.`);
	                data.target = target;
	                data.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, "positionMode", "Percent"));
	                data.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, "spacingMode", "Length"));
	                data.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, "rotateMode", "Tangent"));
	                data.offsetRotation = getValue(constraintMap, "rotation", 0);
	                data.position = getValue(constraintMap, "position", 0);
	                if (data.positionMode == PositionMode.Fixed)
	                    data.position *= scale;
	                data.spacing = getValue(constraintMap, "spacing", 0);
	                if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)
	                    data.spacing *= scale;
	                data.mixRotate = getValue(constraintMap, "mixRotate", 1);
	                data.mixX = getValue(constraintMap, "mixX", 1);
	                data.mixY = getValue(constraintMap, "mixY", data.mixX);
	                skeletonData.pathConstraints.push(data);
	            }
	        }
	        // Physics constraints.
	        if (root.physics) {
	            for (let i = 0; i < root.physics.length; i++) {
	                const constraintMap = root.physics[i];
	                const data = new PhysicsConstraintData(constraintMap.name);
	                data.order = getValue(constraintMap, "order", 0);
	                data.skinRequired = getValue(constraintMap, "skin", false);
	                const boneName = constraintMap.bone;
	                const bone = skeletonData.findBone(boneName);
	                if (bone == null)
	                    throw new Error("Physics bone not found: " + boneName);
	                data.bone = bone;
	                data.x = getValue(constraintMap, "x", 0);
	                data.y = getValue(constraintMap, "y", 0);
	                data.rotate = getValue(constraintMap, "rotate", 0);
	                data.scaleX = getValue(constraintMap, "scaleX", 0);
	                data.shearX = getValue(constraintMap, "shearX", 0);
	                data.limit = getValue(constraintMap, "limit", 5000) * scale;
	                data.step = 1 / getValue(constraintMap, "fps", 60);
	                data.inertia = getValue(constraintMap, "inertia", 1);
	                data.strength = getValue(constraintMap, "strength", 100);
	                data.damping = getValue(constraintMap, "damping", 1);
	                data.massInverse = 1 / getValue(constraintMap, "mass", 1);
	                data.wind = getValue(constraintMap, "wind", 0);
	                data.gravity = getValue(constraintMap, "gravity", 0);
	                data.mix = getValue(constraintMap, "mix", 1);
	                data.inertiaGlobal = getValue(constraintMap, "inertiaGlobal", false);
	                data.strengthGlobal = getValue(constraintMap, "strengthGlobal", false);
	                data.dampingGlobal = getValue(constraintMap, "dampingGlobal", false);
	                data.massGlobal = getValue(constraintMap, "massGlobal", false);
	                data.windGlobal = getValue(constraintMap, "windGlobal", false);
	                data.gravityGlobal = getValue(constraintMap, "gravityGlobal", false);
	                data.mixGlobal = getValue(constraintMap, "mixGlobal", false);
	                skeletonData.physicsConstraints.push(data);
	            }
	        }
	        // Skins.
	        if (root.skins) {
	            for (let i = 0; i < root.skins.length; i++) {
	                let skinMap = root.skins[i];
	                let skin = new Skin(skinMap.name);
	                if (skinMap.bones) {
	                    for (let ii = 0; ii < skinMap.bones.length; ii++) {
	                        let boneName = skinMap.bones[ii];
	                        let bone = skeletonData.findBone(boneName);
	                        if (!bone)
	                            throw new Error(`Couldn't find bone ${boneName} for skin ${skinMap.name}.`);
	                        skin.bones.push(bone);
	                    }
	                }
	                if (skinMap.ik) {
	                    for (let ii = 0; ii < skinMap.ik.length; ii++) {
	                        let constraintName = skinMap.ik[ii];
	                        let constraint = skeletonData.findIkConstraint(constraintName);
	                        if (!constraint)
	                            throw new Error(`Couldn't find IK constraint ${constraintName} for skin ${skinMap.name}.`);
	                        skin.constraints.push(constraint);
	                    }
	                }
	                if (skinMap.transform) {
	                    for (let ii = 0; ii < skinMap.transform.length; ii++) {
	                        let constraintName = skinMap.transform[ii];
	                        let constraint = skeletonData.findTransformConstraint(constraintName);
	                        if (!constraint)
	                            throw new Error(`Couldn't find transform constraint ${constraintName} for skin ${skinMap.name}.`);
	                        skin.constraints.push(constraint);
	                    }
	                }
	                if (skinMap.path) {
	                    for (let ii = 0; ii < skinMap.path.length; ii++) {
	                        let constraintName = skinMap.path[ii];
	                        let constraint = skeletonData.findPathConstraint(constraintName);
	                        if (!constraint)
	                            throw new Error(`Couldn't find path constraint ${constraintName} for skin ${skinMap.name}.`);
	                        skin.constraints.push(constraint);
	                    }
	                }
	                if (skinMap.physics) {
	                    for (let ii = 0; ii < skinMap.physics.length; ii++) {
	                        let constraintName = skinMap.physics[ii];
	                        let constraint = skeletonData.findPhysicsConstraint(constraintName);
	                        if (!constraint)
	                            throw new Error(`Couldn't find physics constraint ${constraintName} for skin ${skinMap.name}.`);
	                        skin.constraints.push(constraint);
	                    }
	                }
	                for (let slotName in skinMap.attachments) {
	                    let slot = skeletonData.findSlot(slotName);
	                    if (!slot)
	                        throw new Error(`Couldn't find slot ${slotName} for skin ${skinMap.name}.`);
	                    let slotMap = skinMap.attachments[slotName];
	                    for (let entryName in slotMap) {
	                        let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);
	                        if (attachment)
	                            skin.setAttachment(slot.index, entryName, attachment);
	                    }
	                }
	                skeletonData.skins.push(skin);
	                if (skin.name == "default")
	                    skeletonData.defaultSkin = skin;
	            }
	        }
	        // Linked meshes.
	        for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {
	            let linkedMesh = this.linkedMeshes[i];
	            let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
	            if (!skin)
	                throw new Error(`Skin not found: ${linkedMesh.skin}`);
	            let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);
	            if (!parent)
	                throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);
	            linkedMesh.mesh.timelineAttachment = linkedMesh.inheritTimeline ? parent : linkedMesh.mesh;
	            linkedMesh.mesh.setParentMesh(parent);
	            if (linkedMesh.mesh.region != null)
	                linkedMesh.mesh.updateRegion();
	        }
	        this.linkedMeshes.length = 0;
	        // Events.
	        if (root.events) {
	            for (let eventName in root.events) {
	                let eventMap = root.events[eventName];
	                let data = new EventData(eventName);
	                data.intValue = getValue(eventMap, "int", 0);
	                data.floatValue = getValue(eventMap, "float", 0);
	                data.stringValue = getValue(eventMap, "string", "");
	                data.audioPath = getValue(eventMap, "audio", null);
	                if (data.audioPath) {
	                    data.volume = getValue(eventMap, "volume", 1);
	                    data.balance = getValue(eventMap, "balance", 0);
	                }
	                skeletonData.events.push(data);
	            }
	        }
	        // Animations.
	        if (root.animations) {
	            for (let animationName in root.animations) {
	                let animationMap = root.animations[animationName];
	                this.readAnimation(animationMap, animationName, skeletonData);
	            }
	        }
	        return skeletonData;
	    }
	    readAttachment(map, skin, slotIndex, name, skeletonData) {
	        let scale = this.scale;
	        name = getValue(map, "name", name);
	        switch (getValue(map, "type", "region")) {
	            case "region": {
	                let path = getValue(map, "path", name);
	                let sequence = this.readSequence(getValue(map, "sequence", null));
	                let region = this.attachmentLoader.newRegionAttachment(skin, name, path, sequence);
	                if (!region)
	                    return null;
	                region.path = path;
	                region.x = getValue(map, "x", 0) * scale;
	                region.y = getValue(map, "y", 0) * scale;
	                region.scaleX = getValue(map, "scaleX", 1);
	                region.scaleY = getValue(map, "scaleY", 1);
	                region.rotation = getValue(map, "rotation", 0);
	                region.width = map.width * scale;
	                region.height = map.height * scale;
	                region.sequence = sequence;
	                let color = getValue(map, "color", null);
	                if (color)
	                    region.color.setFromString(color);
	                if (region.region != null)
	                    region.updateRegion();
	                return region;
	            }
	            case "boundingbox": {
	                let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);
	                if (!box)
	                    return null;
	                this.readVertices(map, box, map.vertexCount << 1);
	                let color = getValue(map, "color", null);
	                if (color)
	                    box.color.setFromString(color);
	                return box;
	            }
	            case "mesh":
	            case "linkedmesh": {
	                let path = getValue(map, "path", name);
	                let sequence = this.readSequence(getValue(map, "sequence", null));
	                let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);
	                if (!mesh)
	                    return null;
	                mesh.path = path;
	                let color = getValue(map, "color", null);
	                if (color)
	                    mesh.color.setFromString(color);
	                mesh.width = getValue(map, "width", 0) * scale;
	                mesh.height = getValue(map, "height", 0) * scale;
	                mesh.sequence = sequence;
	                let parent = getValue(map, "parent", null);
	                if (parent) {
	                    this.linkedMeshes.push(new LinkedMesh(mesh, getValue(map, "skin", null), slotIndex, parent, getValue(map, "timelines", true)));
	                    return mesh;
	                }
	                let uvs = map.uvs;
	                this.readVertices(map, mesh, uvs.length);
	                mesh.triangles = map.triangles;
	                mesh.regionUVs = uvs;
	                if (mesh.region != null)
	                    mesh.updateRegion();
	                mesh.edges = getValue(map, "edges", null);
	                mesh.hullLength = getValue(map, "hull", 0) * 2;
	                return mesh;
	            }
	            case "path": {
	                let path = this.attachmentLoader.newPathAttachment(skin, name);
	                if (!path)
	                    return null;
	                path.closed = getValue(map, "closed", false);
	                path.constantSpeed = getValue(map, "constantSpeed", true);
	                let vertexCount = map.vertexCount;
	                this.readVertices(map, path, vertexCount << 1);
	                let lengths = Utils.newArray(vertexCount / 3, 0);
	                for (let i = 0; i < map.lengths.length; i++)
	                    lengths[i] = map.lengths[i] * scale;
	                path.lengths = lengths;
	                let color = getValue(map, "color", null);
	                if (color)
	                    path.color.setFromString(color);
	                return path;
	            }
	            case "point": {
	                let point = this.attachmentLoader.newPointAttachment(skin, name);
	                if (!point)
	                    return null;
	                point.x = getValue(map, "x", 0) * scale;
	                point.y = getValue(map, "y", 0) * scale;
	                point.rotation = getValue(map, "rotation", 0);
	                let color = getValue(map, "color", null);
	                if (color)
	                    point.color.setFromString(color);
	                return point;
	            }
	            case "clipping": {
	                let clip = this.attachmentLoader.newClippingAttachment(skin, name);
	                if (!clip)
	                    return null;
	                let end = getValue(map, "end", null);
	                if (end)
	                    clip.endSlot = skeletonData.findSlot(end);
	                let vertexCount = map.vertexCount;
	                this.readVertices(map, clip, vertexCount << 1);
	                let color = getValue(map, "color", null);
	                if (color)
	                    clip.color.setFromString(color);
	                return clip;
	            }
	        }
	        return null;
	    }
	    readSequence(map) {
	        if (map == null)
	            return null;
	        let sequence = new Sequence(getValue(map, "count", 0));
	        sequence.start = getValue(map, "start", 1);
	        sequence.digits = getValue(map, "digits", 0);
	        sequence.setupIndex = getValue(map, "setup", 0);
	        return sequence;
	    }
	    readVertices(map, attachment, verticesLength) {
	        let scale = this.scale;
	        attachment.worldVerticesLength = verticesLength;
	        let vertices = map.vertices;
	        if (verticesLength == vertices.length) {
	            let scaledVertices = Utils.toFloatArray(vertices);
	            if (scale != 1) {
	                for (let i = 0, n = vertices.length; i < n; i++)
	                    scaledVertices[i] *= scale;
	            }
	            attachment.vertices = scaledVertices;
	            return;
	        }
	        let weights = new Array();
	        let bones = new Array();
	        for (let i = 0, n = vertices.length; i < n;) {
	            let boneCount = vertices[i++];
	            bones.push(boneCount);
	            for (let nn = i + boneCount * 4; i < nn; i += 4) {
	                bones.push(vertices[i]);
	                weights.push(vertices[i + 1] * scale);
	                weights.push(vertices[i + 2] * scale);
	                weights.push(vertices[i + 3]);
	            }
	        }
	        attachment.bones = bones;
	        attachment.vertices = Utils.toFloatArray(weights);
	    }
	    readAnimation(map, name, skeletonData) {
	        let scale = this.scale;
	        let timelines = new Array();
	        // Slot timelines.
	        if (map.slots) {
	            for (let slotName in map.slots) {
	                let slotMap = map.slots[slotName];
	                let slot = skeletonData.findSlot(slotName);
	                if (!slot)
	                    throw new Error("Slot not found: " + slotName);
	                let slotIndex = slot.index;
	                for (let timelineName in slotMap) {
	                    let timelineMap = slotMap[timelineName];
	                    if (!timelineMap)
	                        continue;
	                    let frames = timelineMap.length;
	                    if (timelineName == "attachment") {
	                        let timeline = new AttachmentTimeline(frames, slotIndex);
	                        for (let frame = 0; frame < frames; frame++) {
	                            let keyMap = timelineMap[frame];
	                            timeline.setFrame(frame, getValue(keyMap, "time", 0), getValue(keyMap, "name", null));
	                        }
	                        timelines.push(timeline);
	                    }
	                    else if (timelineName == "rgba") {
	                        let timeline = new RGBATimeline(frames, frames << 2, slotIndex);
	                        let keyMap = timelineMap[0];
	                        let time = getValue(keyMap, "time", 0);
	                        let color = Color.fromString(keyMap.color);
	                        for (let frame = 0, bezier = 0;; frame++) {
	                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a);
	                            let nextMap = timelineMap[frame + 1];
	                            if (!nextMap) {
	                                timeline.shrink(bezier);
	                                break;
	                            }
	                            let time2 = getValue(nextMap, "time", 0);
	                            let newColor = Color.fromString(nextMap.color);
	                            let curve = keyMap.curve;
	                            if (curve) {
	                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);
	                            }
	                            time = time2;
	                            color = newColor;
	                            keyMap = nextMap;
	                        }
	                        timelines.push(timeline);
	                    }
	                    else if (timelineName == "rgb") {
	                        let timeline = new RGBTimeline(frames, frames * 3, slotIndex);
	                        let keyMap = timelineMap[0];
	                        let time = getValue(keyMap, "time", 0);
	                        let color = Color.fromString(keyMap.color);
	                        for (let frame = 0, bezier = 0;; frame++) {
	                            timeline.setFrame(frame, time, color.r, color.g, color.b);
	                            let nextMap = timelineMap[frame + 1];
	                            if (!nextMap) {
	                                timeline.shrink(bezier);
	                                break;
	                            }
	                            let time2 = getValue(nextMap, "time", 0);
	                            let newColor = Color.fromString(nextMap.color);
	                            let curve = keyMap.curve;
	                            if (curve) {
	                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);
	                            }
	                            time = time2;
	                            color = newColor;
	                            keyMap = nextMap;
	                        }
	                        timelines.push(timeline);
	                    }
	                    else if (timelineName == "alpha") {
	                        timelines.push(readTimeline1(timelineMap, new AlphaTimeline(frames, frames, slotIndex), 0, 1));
	                    }
	                    else if (timelineName == "rgba2") {
	                        let timeline = new RGBA2Timeline(frames, frames * 7, slotIndex);
	                        let keyMap = timelineMap[0];
	                        let time = getValue(keyMap, "time", 0);
	                        let color = Color.fromString(keyMap.light);
	                        let color2 = Color.fromString(keyMap.dark);
	                        for (let frame = 0, bezier = 0;; frame++) {
	                            timeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);
	                            let nextMap = timelineMap[frame + 1];
	                            if (!nextMap) {
	                                timeline.shrink(bezier);
	                                break;
	                            }
	                            let time2 = getValue(nextMap, "time", 0);
	                            let newColor = Color.fromString(nextMap.light);
	                            let newColor2 = Color.fromString(nextMap.dark);
	                            let curve = keyMap.curve;
	                            if (curve) {
	                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);
	                            }
	                            time = time2;
	                            color = newColor;
	                            color2 = newColor2;
	                            keyMap = nextMap;
	                        }
	                        timelines.push(timeline);
	                    }
	                    else if (timelineName == "rgb2") {
	                        let timeline = new RGB2Timeline(frames, frames * 6, slotIndex);
	                        let keyMap = timelineMap[0];
	                        let time = getValue(keyMap, "time", 0);
	                        let color = Color.fromString(keyMap.light);
	                        let color2 = Color.fromString(keyMap.dark);
	                        for (let frame = 0, bezier = 0;; frame++) {
	                            timeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);
	                            let nextMap = timelineMap[frame + 1];
	                            if (!nextMap) {
	                                timeline.shrink(bezier);
	                                break;
	                            }
	                            let time2 = getValue(nextMap, "time", 0);
	                            let newColor = Color.fromString(nextMap.light);
	                            let newColor2 = Color.fromString(nextMap.dark);
	                            let curve = keyMap.curve;
	                            if (curve) {
	                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);
	                            }
	                            time = time2;
	                            color = newColor;
	                            color2 = newColor2;
	                            keyMap = nextMap;
	                        }
	                        timelines.push(timeline);
	                    }
	                }
	            }
	        }
	        // Bone timelines.
	        if (map.bones) {
	            for (let boneName in map.bones) {
	                let boneMap = map.bones[boneName];
	                let bone = skeletonData.findBone(boneName);
	                if (!bone)
	                    throw new Error("Bone not found: " + boneName);
	                let boneIndex = bone.index;
	                for (let timelineName in boneMap) {
	                    let timelineMap = boneMap[timelineName];
	                    let frames = timelineMap.length;
	                    if (frames == 0)
	                        continue;
	                    if (timelineName === "rotate") {
	                        timelines.push(readTimeline1(timelineMap, new RotateTimeline(frames, frames, boneIndex), 0, 1));
	                    }
	                    else if (timelineName === "translate") {
	                        let timeline = new TranslateTimeline(frames, frames << 1, boneIndex);
	                        timelines.push(readTimeline2(timelineMap, timeline, "x", "y", 0, scale));
	                    }
	                    else if (timelineName === "translatex") {
	                        let timeline = new TranslateXTimeline(frames, frames, boneIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));
	                    }
	                    else if (timelineName === "translatey") {
	                        let timeline = new TranslateYTimeline(frames, frames, boneIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 0, scale));
	                    }
	                    else if (timelineName === "scale") {
	                        let timeline = new ScaleTimeline(frames, frames << 1, boneIndex);
	                        timelines.push(readTimeline2(timelineMap, timeline, "x", "y", 1, 1));
	                    }
	                    else if (timelineName === "scalex") {
	                        let timeline = new ScaleXTimeline(frames, frames, boneIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));
	                    }
	                    else if (timelineName === "scaley") {
	                        let timeline = new ScaleYTimeline(frames, frames, boneIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 1, 1));
	                    }
	                    else if (timelineName === "shear") {
	                        let timeline = new ShearTimeline(frames, frames << 1, boneIndex);
	                        timelines.push(readTimeline2(timelineMap, timeline, "x", "y", 0, 1));
	                    }
	                    else if (timelineName === "shearx") {
	                        let timeline = new ShearXTimeline(frames, frames, boneIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));
	                    }
	                    else if (timelineName === "sheary") {
	                        let timeline = new ShearYTimeline(frames, frames, boneIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 0, 1));
	                    }
	                    else if (timelineName === "inherit") {
	                        let timeline = new InheritTimeline(frames, bone.index);
	                        for (let frame = 0; frame < timelineMap.length; frame++) {
	                            let aFrame = timelineMap[frame];
	                            timeline.setFrame(frame, getValue(aFrame, "time", 0), Utils.enumValue(Inherit, getValue(aFrame, "inherit", "Normal")));
	                        }
	                        timelines.push(timeline);
	                    }
	                }
	            }
	        }
	        // IK constraint timelines.
	        if (map.ik) {
	            for (let constraintName in map.ik) {
	                let constraintMap = map.ik[constraintName];
	                let keyMap = constraintMap[0];
	                if (!keyMap)
	                    continue;
	                let constraint = skeletonData.findIkConstraint(constraintName);
	                if (!constraint)
	                    throw new Error("IK Constraint not found: " + constraintName);
	                let constraintIndex = skeletonData.ikConstraints.indexOf(constraint);
	                let timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);
	                let time = getValue(keyMap, "time", 0);
	                let mix = getValue(keyMap, "mix", 1);
	                let softness = getValue(keyMap, "softness", 0) * scale;
	                for (let frame = 0, bezier = 0;; frame++) {
	                    timeline.setFrame(frame, time, mix, softness, getValue(keyMap, "bendPositive", true) ? 1 : -1, getValue(keyMap, "compress", false), getValue(keyMap, "stretch", false));
	                    let nextMap = constraintMap[frame + 1];
	                    if (!nextMap) {
	                        timeline.shrink(bezier);
	                        break;
	                    }
	                    let time2 = getValue(nextMap, "time", 0);
	                    let mix2 = getValue(nextMap, "mix", 1);
	                    let softness2 = getValue(nextMap, "softness", 0) * scale;
	                    let curve = keyMap.curve;
	                    if (curve) {
	                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);
	                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);
	                    }
	                    time = time2;
	                    mix = mix2;
	                    softness = softness2;
	                    keyMap = nextMap;
	                }
	                timelines.push(timeline);
	            }
	        }
	        // Transform constraint timelines.
	        if (map.transform) {
	            for (let constraintName in map.transform) {
	                let timelineMap = map.transform[constraintName];
	                let keyMap = timelineMap[0];
	                if (!keyMap)
	                    continue;
	                let constraint = skeletonData.findTransformConstraint(constraintName);
	                if (!constraint)
	                    throw new Error("Transform constraint not found: " + constraintName);
	                let constraintIndex = skeletonData.transformConstraints.indexOf(constraint);
	                let timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length * 6, constraintIndex);
	                let time = getValue(keyMap, "time", 0);
	                let mixRotate = getValue(keyMap, "mixRotate", 1);
	                let mixX = getValue(keyMap, "mixX", 1);
	                let mixY = getValue(keyMap, "mixY", mixX);
	                let mixScaleX = getValue(keyMap, "mixScaleX", 1);
	                let mixScaleY = getValue(keyMap, "mixScaleY", mixScaleX);
	                let mixShearY = getValue(keyMap, "mixShearY", 1);
	                for (let frame = 0, bezier = 0;; frame++) {
	                    timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);
	                    let nextMap = timelineMap[frame + 1];
	                    if (!nextMap) {
	                        timeline.shrink(bezier);
	                        break;
	                    }
	                    let time2 = getValue(nextMap, "time", 0);
	                    let mixRotate2 = getValue(nextMap, "mixRotate", 1);
	                    let mixX2 = getValue(nextMap, "mixX", 1);
	                    let mixY2 = getValue(nextMap, "mixY", mixX2);
	                    let mixScaleX2 = getValue(nextMap, "mixScaleX", 1);
	                    let mixScaleY2 = getValue(nextMap, "mixScaleY", mixScaleX2);
	                    let mixShearY2 = getValue(nextMap, "mixShearY", 1);
	                    let curve = keyMap.curve;
	                    if (curve) {
	                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);
	                        bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);
	                        bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);
	                        bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);
	                        bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);
	                        bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);
	                    }
	                    time = time2;
	                    mixRotate = mixRotate2;
	                    mixX = mixX2;
	                    mixY = mixY2;
	                    mixScaleX = mixScaleX2;
	                    mixScaleY = mixScaleY2;
	                    mixScaleX = mixScaleX2;
	                    keyMap = nextMap;
	                }
	                timelines.push(timeline);
	            }
	        }
	        // Path constraint timelines.
	        if (map.path) {
	            for (let constraintName in map.path) {
	                let constraintMap = map.path[constraintName];
	                let constraint = skeletonData.findPathConstraint(constraintName);
	                if (!constraint)
	                    throw new Error("Path constraint not found: " + constraintName);
	                let constraintIndex = skeletonData.pathConstraints.indexOf(constraint);
	                for (let timelineName in constraintMap) {
	                    let timelineMap = constraintMap[timelineName];
	                    let keyMap = timelineMap[0];
	                    if (!keyMap)
	                        continue;
	                    let frames = timelineMap.length;
	                    if (timelineName === "position") {
	                        let timeline = new PathConstraintPositionTimeline(frames, frames, constraintIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));
	                    }
	                    else if (timelineName === "spacing") {
	                        let timeline = new PathConstraintSpacingTimeline(frames, frames, constraintIndex);
	                        timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));
	                    }
	                    else if (timelineName === "mix") {
	                        let timeline = new PathConstraintMixTimeline(frames, frames * 3, constraintIndex);
	                        let time = getValue(keyMap, "time", 0);
	                        let mixRotate = getValue(keyMap, "mixRotate", 1);
	                        let mixX = getValue(keyMap, "mixX", 1);
	                        let mixY = getValue(keyMap, "mixY", mixX);
	                        for (let frame = 0, bezier = 0;; frame++) {
	                            timeline.setFrame(frame, time, mixRotate, mixX, mixY);
	                            let nextMap = timelineMap[frame + 1];
	                            if (!nextMap) {
	                                timeline.shrink(bezier);
	                                break;
	                            }
	                            let time2 = getValue(nextMap, "time", 0);
	                            let mixRotate2 = getValue(nextMap, "mixRotate", 1);
	                            let mixX2 = getValue(nextMap, "mixX", 1);
	                            let mixY2 = getValue(nextMap, "mixY", mixX2);
	                            let curve = keyMap.curve;
	                            if (curve) {
	                                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);
	                                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);
	                            }
	                            time = time2;
	                            mixRotate = mixRotate2;
	                            mixX = mixX2;
	                            mixY = mixY2;
	                            keyMap = nextMap;
	                        }
	                        timelines.push(timeline);
	                    }
	                }
	            }
	        }
	        // Physics constraint timelines.
	        if (map.physics) {
	            for (let constraintName in map.physics) {
	                let constraintMap = map.physics[constraintName];
	                let constraintIndex = -1;
	                if (constraintName.length > 0) {
	                    let constraint = skeletonData.findPhysicsConstraint(constraintName);
	                    if (!constraint)
	                        throw new Error("Physics constraint not found: " + constraintName);
	                    constraintIndex = skeletonData.physicsConstraints.indexOf(constraint);
	                }
	                for (let timelineName in constraintMap) {
	                    let timelineMap = constraintMap[timelineName];
	                    let keyMap = timelineMap[0];
	                    if (!keyMap)
	                        continue;
	                    let frames = timelineMap.length;
	                    if (timelineName == "reset") {
	                        const timeline = new PhysicsConstraintResetTimeline(frames, constraintIndex);
	                        for (let frame = 0; keyMap != null; keyMap = timelineMap[frame + 1], frame++)
	                            timeline.setFrame(frame, getValue(keyMap, "time", 0));
	                        timelines.push(timeline);
	                        continue;
	                    }
	                    let timeline;
	                    if (timelineName == "inertia")
	                        timeline = new PhysicsConstraintInertiaTimeline(frames, frames, constraintIndex);
	                    else if (timelineName == "strength")
	                        timeline = new PhysicsConstraintStrengthTimeline(frames, frames, constraintIndex);
	                    else if (timelineName == "damping")
	                        timeline = new PhysicsConstraintDampingTimeline(frames, frames, constraintIndex);
	                    else if (timelineName == "mass")
	                        timeline = new PhysicsConstraintMassTimeline(frames, frames, constraintIndex);
	                    else if (timelineName == "wind")
	                        timeline = new PhysicsConstraintWindTimeline(frames, frames, constraintIndex);
	                    else if (timelineName == "gravity")
	                        timeline = new PhysicsConstraintGravityTimeline(frames, frames, constraintIndex);
	                    else if (timelineName == "mix") //
	                        timeline = new PhysicsConstraintMixTimeline(frames, frames, constraintIndex);
	                    else
	                        continue;
	                    timelines.push(readTimeline1(timelineMap, timeline, 0, 1));
	                }
	            }
	        }
	        // Attachment timelines.
	        if (map.attachments) {
	            for (let attachmentsName in map.attachments) {
	                let attachmentsMap = map.attachments[attachmentsName];
	                let skin = skeletonData.findSkin(attachmentsName);
	                if (!skin)
	                    throw new Error("Skin not found: " + attachmentsName);
	                for (let slotMapName in attachmentsMap) {
	                    let slotMap = attachmentsMap[slotMapName];
	                    let slot = skeletonData.findSlot(slotMapName);
	                    if (!slot)
	                        throw new Error("Slot not found: " + slotMapName);
	                    let slotIndex = slot.index;
	                    for (let attachmentMapName in slotMap) {
	                        let attachmentMap = slotMap[attachmentMapName];
	                        let attachment = skin.getAttachment(slotIndex, attachmentMapName);
	                        for (let timelineMapName in attachmentMap) {
	                            let timelineMap = attachmentMap[timelineMapName];
	                            let keyMap = timelineMap[0];
	                            if (!keyMap)
	                                continue;
	                            if (timelineMapName == "deform") {
	                                let weighted = attachment.bones;
	                                let vertices = attachment.vertices;
	                                let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;
	                                let timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);
	                                let time = getValue(keyMap, "time", 0);
	                                for (let frame = 0, bezier = 0;; frame++) {
	                                    let deform;
	                                    let verticesValue = getValue(keyMap, "vertices", null);
	                                    if (!verticesValue)
	                                        deform = weighted ? Utils.newFloatArray(deformLength) : vertices;
	                                    else {
	                                        deform = Utils.newFloatArray(deformLength);
	                                        let start = getValue(keyMap, "offset", 0);
	                                        Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);
	                                        if (scale != 1) {
	                                            for (let i = start, n = i + verticesValue.length; i < n; i++)
	                                                deform[i] *= scale;
	                                        }
	                                        if (!weighted) {
	                                            for (let i = 0; i < deformLength; i++)
	                                                deform[i] += vertices[i];
	                                        }
	                                    }
	                                    timeline.setFrame(frame, time, deform);
	                                    let nextMap = timelineMap[frame + 1];
	                                    if (!nextMap) {
	                                        timeline.shrink(bezier);
	                                        break;
	                                    }
	                                    let time2 = getValue(nextMap, "time", 0);
	                                    let curve = keyMap.curve;
	                                    if (curve)
	                                        bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);
	                                    time = time2;
	                                    keyMap = nextMap;
	                                }
	                                timelines.push(timeline);
	                            }
	                            else if (timelineMapName == "sequence") {
	                                let timeline = new SequenceTimeline(timelineMap.length, slotIndex, attachment);
	                                let lastDelay = 0;
	                                for (let frame = 0; frame < timelineMap.length; frame++) {
	                                    let delay = getValue(keyMap, "delay", lastDelay);
	                                    let time = getValue(keyMap, "time", 0);
	                                    let mode = SequenceMode[getValue(keyMap, "mode", "hold")];
	                                    let index = getValue(keyMap, "index", 0);
	                                    timeline.setFrame(frame, time, mode, index, delay);
	                                    lastDelay = delay;
	                                    keyMap = timelineMap[frame + 1];
	                                }
	                                timelines.push(timeline);
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        // Draw order timelines.
	        if (map.drawOrder) {
	            let timeline = new DrawOrderTimeline(map.drawOrder.length);
	            let slotCount = skeletonData.slots.length;
	            let frame = 0;
	            for (let i = 0; i < map.drawOrder.length; i++, frame++) {
	                let drawOrderMap = map.drawOrder[i];
	                let drawOrder = null;
	                let offsets = getValue(drawOrderMap, "offsets", null);
	                if (offsets) {
	                    drawOrder = Utils.newArray(slotCount, -1);
	                    let unchanged = Utils.newArray(slotCount - offsets.length, 0);
	                    let originalIndex = 0, unchangedIndex = 0;
	                    for (let ii = 0; ii < offsets.length; ii++) {
	                        let offsetMap = offsets[ii];
	                        let slot = skeletonData.findSlot(offsetMap.slot);
	                        if (!slot)
	                            throw new Error("Slot not found: " + slot);
	                        let slotIndex = slot.index;
	                        // Collect unchanged items.
	                        while (originalIndex != slotIndex)
	                            unchanged[unchangedIndex++] = originalIndex++;
	                        // Set changed items.
	                        drawOrder[originalIndex + offsetMap.offset] = originalIndex++;
	                    }
	                    // Collect remaining unchanged items.
	                    while (originalIndex < slotCount)
	                        unchanged[unchangedIndex++] = originalIndex++;
	                    // Fill in unchanged items.
	                    for (let ii = slotCount - 1; ii >= 0; ii--)
	                        if (drawOrder[ii] == -1)
	                            drawOrder[ii] = unchanged[--unchangedIndex];
	                }
	                timeline.setFrame(frame, getValue(drawOrderMap, "time", 0), drawOrder);
	            }
	            timelines.push(timeline);
	        }
	        // Event timelines.
	        if (map.events) {
	            let timeline = new EventTimeline(map.events.length);
	            let frame = 0;
	            for (let i = 0; i < map.events.length; i++, frame++) {
	                let eventMap = map.events[i];
	                let eventData = skeletonData.findEvent(eventMap.name);
	                if (!eventData)
	                    throw new Error("Event not found: " + eventMap.name);
	                let event = new Event$1(Utils.toSinglePrecision(getValue(eventMap, "time", 0)), eventData);
	                event.intValue = getValue(eventMap, "int", eventData.intValue);
	                event.floatValue = getValue(eventMap, "float", eventData.floatValue);
	                event.stringValue = getValue(eventMap, "string", eventData.stringValue);
	                if (event.data.audioPath) {
	                    event.volume = getValue(eventMap, "volume", 1);
	                    event.balance = getValue(eventMap, "balance", 0);
	                }
	                timeline.setFrame(frame, event);
	            }
	            timelines.push(timeline);
	        }
	        let duration = 0;
	        for (let i = 0, n = timelines.length; i < n; i++)
	            duration = Math.max(duration, timelines[i].getDuration());
	        skeletonData.animations.push(new Animation$1(name, timelines, duration));
	    }
	}
	class LinkedMesh {
	    parent;
	    skin;
	    slotIndex;
	    mesh;
	    inheritTimeline;
	    constructor(mesh, skin, slotIndex, parent, inheritDeform) {
	        this.mesh = mesh;
	        this.skin = skin;
	        this.slotIndex = slotIndex;
	        this.parent = parent;
	        this.inheritTimeline = inheritDeform;
	    }
	}
	function readTimeline1(keys, timeline, defaultValue, scale) {
	    let keyMap = keys[0];
	    let time = getValue(keyMap, "time", 0);
	    let value = getValue(keyMap, "value", defaultValue) * scale;
	    let bezier = 0;
	    for (let frame = 0;; frame++) {
	        timeline.setFrame(frame, time, value);
	        let nextMap = keys[frame + 1];
	        if (!nextMap) {
	            timeline.shrink(bezier);
	            return timeline;
	        }
	        let time2 = getValue(nextMap, "time", 0);
	        let value2 = getValue(nextMap, "value", defaultValue) * scale;
	        if (keyMap.curve)
	            bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);
	        time = time2;
	        value = value2;
	        keyMap = nextMap;
	    }
	}
	function readTimeline2(keys, timeline, name1, name2, defaultValue, scale) {
	    let keyMap = keys[0];
	    let time = getValue(keyMap, "time", 0);
	    let value1 = getValue(keyMap, name1, defaultValue) * scale;
	    let value2 = getValue(keyMap, name2, defaultValue) * scale;
	    let bezier = 0;
	    for (let frame = 0;; frame++) {
	        timeline.setFrame(frame, time, value1, value2);
	        let nextMap = keys[frame + 1];
	        if (!nextMap) {
	            timeline.shrink(bezier);
	            return timeline;
	        }
	        let time2 = getValue(nextMap, "time", 0);
	        let nvalue1 = getValue(nextMap, name1, defaultValue) * scale;
	        let nvalue2 = getValue(nextMap, name2, defaultValue) * scale;
	        let curve = keyMap.curve;
	        if (curve) {
	            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);
	            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);
	        }
	        time = time2;
	        value1 = nvalue1;
	        value2 = nvalue2;
	        keyMap = nextMap;
	    }
	}
	function readCurve(curve, timeline, bezier, frame, value, time1, time2, value1, value2, scale) {
	    if (curve == "stepped") {
	        timeline.setStepped(frame);
	        return bezier;
	    }
	    let i = value << 2;
	    let cx1 = curve[i];
	    let cy1 = curve[i + 1] * scale;
	    let cx2 = curve[i + 2];
	    let cy2 = curve[i + 3] * scale;
	    timeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);
	    return bezier + 1;
	}
	function getValue(map, property, defaultValue) {
	    return map[property] !== undefined ? map[property] : defaultValue;
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	(() => {
	    if (typeof Math.fround === "undefined") {
	        Math.fround = (function (array) {
	            return function (x) {
	                return array[0] = x, array[0];
	            };
	        })(new Float32Array(1));
	    }
	})();

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class ThreeJsTexture extends Texture {
	    texture;
	    constructor(image, pma = false) {
	        super(image);
	        if (image instanceof ImageBitmap)
	            this.texture = new CanvasTexture(image);
	        else
	            this.texture = new Texture$1(image);
	        // if the texture is not pma, we ask to threejs to premultiply on upload
	        this.texture.premultiplyAlpha = !pma;
	        this.texture.flipY = false;
	        // Keep this as a reference - this is necessary in future versions of ThreeJS
	        // this.texture.colorSpace = THREE.SRGBColorSpace;
	        this.texture.needsUpdate = true;
	    }
	    setFilters(minFilter, magFilter) {
	        this.texture.minFilter = ThreeJsTexture.toThreeJsMinificationTextureFilter(minFilter);
	        this.texture.magFilter = ThreeJsTexture.toThreeJsMagnificationTextureFilter(magFilter);
	    }
	    setWraps(uWrap, vWrap) {
	        this.texture.wrapS = ThreeJsTexture.toThreeJsTextureWrap(uWrap);
	        this.texture.wrapT = ThreeJsTexture.toThreeJsTextureWrap(vWrap);
	    }
	    dispose() {
	        this.texture.dispose();
	    }
	    static toThreeJsMinificationTextureFilter(filter) {
	        if (filter === TextureFilter.Linear)
	            return LinearFilter;
	        else if (filter === TextureFilter.MipMap)
	            return LinearMipMapLinearFilter; // also includes TextureFilter.MipMapLinearLinear
	        else if (filter === TextureFilter.MipMapLinearNearest)
	            return LinearMipMapNearestFilter;
	        else if (filter === TextureFilter.MipMapNearestLinear)
	            return NearestMipMapLinearFilter;
	        else if (filter === TextureFilter.MipMapNearestNearest)
	            return NearestMipMapNearestFilter;
	        else if (filter === TextureFilter.Nearest)
	            return NearestFilter;
	        else
	            throw new Error("Unknown texture filter: " + filter);
	    }
	    static toThreeJsMagnificationTextureFilter(filter) {
	        if (filter === TextureFilter.Linear)
	            return LinearFilter;
	        else if (filter === TextureFilter.MipMap)
	            return LinearFilter;
	        else if (filter === TextureFilter.MipMapLinearNearest)
	            return NearestFilter;
	        else if (filter === TextureFilter.MipMapNearestLinear)
	            return LinearFilter;
	        else if (filter === TextureFilter.MipMapNearestNearest)
	            return NearestFilter;
	        else if (filter === TextureFilter.Nearest)
	            return NearestFilter;
	        else
	            throw new Error("Unknown texture filter: " + filter);
	    }
	    static toThreeJsTextureWrap(wrap) {
	        if (wrap === TextureWrap.ClampToEdge)
	            return ClampToEdgeWrapping;
	        else if (wrap === TextureWrap.MirroredRepeat)
	            return MirroredRepeatWrapping;
	        else if (wrap === TextureWrap.Repeat)
	            return RepeatWrapping;
	        else
	            throw new Error("Unknown texture wrap: " + wrap);
	    }
	    static fist = true;
	    static toThreeJsBlending(blend) {
	        if (blend === BlendMode.Normal)
	            return { blending: NormalBlending };
	        else if (blend === BlendMode.Additive)
	            return { blending: AdditiveBlending };
	        // else if (blend === BlendMode.Multiply) return { blending: THREE.NormalBlending };
	        else if (blend === BlendMode.Multiply)
	            return {
	                blending: CustomBlending,
	                blendSrc: DstColorFactor,
	                blendDst: OneMinusSrcAlphaFactor,
	                blendSrcAlpha: OneFactor,
	                blendDstAlpha: OneMinusSrcAlphaFactor,
	            };
	        else if (blend === BlendMode.Screen)
	            return {
	                blending: CustomBlending,
	                blendSrc: OneFactor,
	                blendDst: OneMinusSrcColorFactor,
	                blendSrcAlpha: OneFactor,
	                blendDstAlpha: OneMinusSrcColorFactor,
	            };
	        else
	            throw new Error("Unknown blendMode: " + blend);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class AssetManager extends AssetManagerBase {
	    constructor(pathPrefix = "", downloader = new Downloader(), pma = false) {
	        super((image) => {
	            return new ThreeJsTexture(image, pma);
	        }, pathPrefix, downloader);
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class SkeletonMesh extends Object3D {
	    // public static readonly DEFAULT_MATERIAL_PARAMETERS: THREE.MaterialParameters = {
	    static DEFAULT_MATERIAL_PARAMETERS = {
	        side: DoubleSide,
	        depthWrite: true,
	        depthTest: true,
	        transparent: true,
	        alphaTest: 0.001,
	        vertexColors: true,
	        premultipliedAlpha: true,
	    };
	    tempPos = new Vector2();
	    tempUv = new Vector2();
	    tempLight = new Color();
	    tempDark = new Color();
	    skeleton;
	    state;
	    zOffset = 0.1;
	    batches = new Array();
	    materialFactory;
	    nextBatchIndex = 0;
	    clipper = new SkeletonClipping();
	    static QUAD_TRIANGLES = [0, 1, 2, 2, 3, 0];
	    static VERTEX_SIZE = 2 + 2 + 4;
	    vertexSize = 2 + 2 + 4;
	    twoColorTint;
	    vertices = Utils.newFloatArray(1024);
	    tempColor = new Color();
	    tempDarkColor = new Color();
	    _castShadow = false;
	    _receiveShadow = false;
	    constructor(skeletonDataOrConfiguration, materialCustomizer = () => { }) {
	        super();
	        if (!('skeletonData' in skeletonDataOrConfiguration)) {
	            const materialFactory = () => {
	                const parameters = { ...SkeletonMesh.DEFAULT_MATERIAL_PARAMETERS };
	                materialCustomizer(parameters);
	                return new MeshBasicMaterial(parameters);
	            };
	            skeletonDataOrConfiguration = {
	                skeletonData: skeletonDataOrConfiguration,
	                materialFactory,
	            };
	        }
	        this.twoColorTint = skeletonDataOrConfiguration.twoColorTint ?? true;
	        if (this.twoColorTint) {
	            this.vertexSize += 4;
	        }
	        this.materialFactory = skeletonDataOrConfiguration.materialFactory ?? (() => new MeshBasicMaterial(SkeletonMesh.DEFAULT_MATERIAL_PARAMETERS));
	        this.skeleton = new Skeleton(skeletonDataOrConfiguration.skeletonData);
	        let animData = new AnimationStateData(skeletonDataOrConfiguration.skeletonData);
	        this.state = new AnimationState(animData);
	        Object.defineProperty(this, 'castShadow', {
	            get: () => this._castShadow,
	            set: (value) => {
	                this._castShadow = value;
	                this.traverse((child) => {
	                    if (child instanceof MeshBatcher) {
	                        child.castShadow = value;
	                    }
	                });
	            },
	        });
	        Object.defineProperty(this, 'receiveShadow', {
	            get: () => this._receiveShadow,
	            set: (value) => {
	                this._receiveShadow = value;
	                // Propagate to children
	                this.traverse((child) => {
	                    if (child instanceof MeshBatcher) {
	                        child.receiveShadow = value;
	                    }
	                });
	            },
	        });
	    }
	    update(deltaTime) {
	        let state = this.state;
	        let skeleton = this.skeleton;
	        state.update(deltaTime);
	        state.apply(skeleton);
	        skeleton.update(deltaTime);
	        skeleton.updateWorldTransform(Physics.update);
	        this.updateGeometry();
	    }
	    dispose() {
	        for (var i = 0; i < this.batches.length; i++) {
	            this.batches[i].dispose();
	        }
	    }
	    clearBatches() {
	        for (var i = 0; i < this.batches.length; i++) {
	            this.batches[i].clear();
	            this.batches[i].visible = false;
	        }
	        this.nextBatchIndex = 0;
	    }
	    nextBatch() {
	        if (this.batches.length == this.nextBatchIndex) {
	            let batch = new MeshBatcher(MeshBatcher.MAX_VERTICES, this.materialFactory, this.twoColorTint);
	            batch.castShadow = this._castShadow;
	            batch.receiveShadow = this._receiveShadow;
	            this.add(batch);
	            this.batches.push(batch);
	        }
	        let batch = this.batches[this.nextBatchIndex++];
	        batch.visible = true;
	        return batch;
	    }
	    updateGeometry() {
	        this.clearBatches();
	        let tempLight = this.tempLight;
	        this.tempDark;
	        let clipper = this.clipper;
	        let vertices = this.vertices;
	        let triangles = null;
	        let uvs = null;
	        let drawOrder = this.skeleton.drawOrder;
	        let batch = this.nextBatch();
	        batch.begin();
	        let z = 0;
	        let zOffset = this.zOffset;
	        for (let i = 0, n = drawOrder.length; i < n; i++) {
	            let vertexSize = clipper.isClipping() ? 2 : this.vertexSize;
	            let slot = drawOrder[i];
	            if (!slot.bone.active) {
	                clipper.clipEndWithSlot(slot);
	                continue;
	            }
	            let attachment = slot.getAttachment();
	            let attachmentColor;
	            let texture;
	            let numFloats = 0;
	            if (attachment instanceof RegionAttachment) {
	                let region = attachment;
	                attachmentColor = region.color;
	                vertices = this.vertices;
	                numFloats = vertexSize * 4;
	                region.computeWorldVertices(slot, vertices, 0, vertexSize);
	                triangles = SkeletonMesh.QUAD_TRIANGLES;
	                uvs = region.uvs;
	                texture = region.region.texture;
	            }
	            else if (attachment instanceof MeshAttachment) {
	                let mesh = attachment;
	                attachmentColor = mesh.color;
	                vertices = this.vertices;
	                numFloats = (mesh.worldVerticesLength >> 1) * vertexSize;
	                if (numFloats > vertices.length) {
	                    vertices = this.vertices = Utils.newFloatArray(numFloats);
	                }
	                mesh.computeWorldVertices(slot, 0, mesh.worldVerticesLength, vertices, 0, vertexSize);
	                triangles = mesh.triangles;
	                uvs = mesh.uvs;
	                texture = mesh.region.texture;
	            }
	            else if (attachment instanceof ClippingAttachment) {
	                let clip = attachment;
	                clipper.clipStart(slot, clip);
	                continue;
	            }
	            else {
	                clipper.clipEndWithSlot(slot);
	                continue;
	            }
	            if (texture != null) {
	                let skeleton = slot.bone.skeleton;
	                let skeletonColor = skeleton.color;
	                let slotColor = slot.color;
	                let alpha = skeletonColor.a * slotColor.a * attachmentColor.a;
	                let color = this.tempColor;
	                color.set(skeletonColor.r * slotColor.r * attachmentColor.r * alpha, skeletonColor.g * slotColor.g * attachmentColor.g * alpha, skeletonColor.b * slotColor.b * attachmentColor.b * alpha, alpha);
	                let darkColor = this.tempDarkColor;
	                if (!slot.darkColor)
	                    darkColor.set(1, 1, 1, 0);
	                else {
	                    darkColor.r = slot.darkColor.r * alpha;
	                    darkColor.g = slot.darkColor.g * alpha;
	                    darkColor.b = slot.darkColor.b * alpha;
	                    darkColor.a = 1;
	                }
	                let finalVertices;
	                let finalVerticesLength;
	                let finalIndices;
	                let finalIndicesLength;
	                if (clipper.isClipping()) {
	                    clipper.clipTriangles(vertices, triangles, triangles.length, uvs, color, tempLight, this.twoColorTint);
	                    let clippedVertices = clipper.clippedVertices;
	                    let clippedTriangles = clipper.clippedTriangles;
	                    finalVertices = clippedVertices;
	                    finalVerticesLength = clippedVertices.length;
	                    finalIndices = clippedTriangles;
	                    finalIndicesLength = clippedTriangles.length;
	                }
	                else {
	                    let verts = vertices;
	                    if (!this.twoColorTint) {
	                        for (let v = 2, u = 0, n = numFloats; v < n; v += vertexSize, u += 2) {
	                            verts[v] = color.r;
	                            verts[v + 1] = color.g;
	                            verts[v + 2] = color.b;
	                            verts[v + 3] = color.a;
	                            verts[v + 4] = uvs[u];
	                            verts[v + 5] = uvs[u + 1];
	                        }
	                    }
	                    else {
	                        for (let v = 2, u = 0, n = numFloats; v < n; v += vertexSize, u += 2) {
	                            verts[v] = color.r;
	                            verts[v + 1] = color.g;
	                            verts[v + 2] = color.b;
	                            verts[v + 3] = color.a;
	                            verts[v + 4] = uvs[u];
	                            verts[v + 5] = uvs[u + 1];
	                            verts[v + 6] = darkColor.r;
	                            verts[v + 7] = darkColor.g;
	                            verts[v + 8] = darkColor.b;
	                            verts[v + 9] = darkColor.a;
	                        }
	                    }
	                    finalVertices = vertices;
	                    finalVerticesLength = numFloats;
	                    finalIndices = triangles;
	                    finalIndicesLength = triangles.length;
	                }
	                if (finalVerticesLength == 0 || finalIndicesLength == 0) {
	                    clipper.clipEndWithSlot(slot);
	                    continue;
	                }
	                // Start new batch if this one can't hold vertices/indices
	                if (!batch.canBatch(finalVerticesLength / this.vertexSize, finalIndicesLength)) {
	                    batch.end();
	                    batch = this.nextBatch();
	                    batch.begin();
	                }
	                const slotBlendMode = slot.data.blendMode;
	                const slotTexture = texture.texture;
	                const materialGroup = batch.findMaterialGroup(slotTexture, slotBlendMode);
	                batch.addMaterialGroup(finalIndicesLength, materialGroup);
	                batch.batch(finalVertices, finalVerticesLength, finalIndices, finalIndicesLength, z);
	                z += zOffset;
	            }
	            clipper.clipEndWithSlot(slot);
	        }
	        clipper.clipEnd();
	        batch.end();
	    }
	}

	/******************************************************************************
	 * Spine Runtimes License Agreement
	 * Last updated July 28, 2023. Replaces all prior versions.
	 *
	 * Copyright (c) 2013-2023, Esoteric Software LLC
	 *
	 * Integration of the Spine Runtimes into software or otherwise creating
	 * derivative works of the Spine Runtimes is permitted under the terms and
	 * conditions of Section 2 of the Spine Editor License Agreement:
	 * http://esotericsoftware.com/spine-editor-license
	 *
	 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
	 * otherwise create derivative works of the Spine Runtimes (collectively,
	 * "Products"), provided that each user of the Products must obtain their own
	 * Spine Editor license and redistribution of the Products in any form must
	 * include this license and copyright notice.
	 *
	 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
	 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
	 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
	 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 *****************************************************************************/
	class MeshBatcher extends Mesh {
	    materialFactory;
	    twoColorTint;
	    static MAX_VERTICES = 10920;
	    // private static VERTEX_SIZE = 9;
	    vertexSize = 9;
	    vertexBuffer;
	    vertices;
	    verticesLength = 0;
	    indices;
	    indicesLength = 0;
	    materialGroups = [];
	    constructor(maxVertices = MeshBatcher.MAX_VERTICES, materialFactory, twoColorTint = true) {
	        super();
	        this.materialFactory = materialFactory;
	        this.twoColorTint = twoColorTint;
	        if (maxVertices > MeshBatcher.MAX_VERTICES)
	            throw new Error("Can't have more than 10920 triangles per batch: " + maxVertices);
	        if (twoColorTint) {
	            this.vertexSize += 3;
	        }
	        let vertices = this.vertices = new Float32Array(maxVertices * this.vertexSize);
	        let indices = this.indices = new Uint16Array(maxVertices * 3);
	        let geo = new BufferGeometry();
	        let vertexBuffer = this.vertexBuffer = new InterleavedBuffer(vertices, this.vertexSize);
	        vertexBuffer.usage = WebGLRenderingContext.DYNAMIC_DRAW;
	        geo.setAttribute("position", new InterleavedBufferAttribute(vertexBuffer, 3, 0, false));
	        geo.setAttribute("color", new InterleavedBufferAttribute(vertexBuffer, 4, 3, false));
	        geo.setAttribute("uv", new InterleavedBufferAttribute(vertexBuffer, 2, 7, false));
	        if (twoColorTint) {
	            geo.setAttribute("darkcolor", new InterleavedBufferAttribute(vertexBuffer, 3, 9, false));
	        }
	        geo.setIndex(new BufferAttribute(indices, 1));
	        geo.getIndex().usage = WebGLRenderingContext.DYNAMIC_DRAW;
	        geo.drawRange.start = 0;
	        geo.drawRange.count = 0;
	        this.geometry = geo;
	        this.material = [];
	    }
	    dispose() {
	        this.geometry.dispose();
	        if (this.material instanceof Material)
	            this.material.dispose();
	        else if (this.material) {
	            for (let i = 0; i < this.material.length; i++) {
	                let material = this.material[i];
	                if (material instanceof Material)
	                    material.dispose();
	            }
	        }
	    }
	    clear() {
	        let geo = this.geometry;
	        geo.drawRange.start = 0;
	        geo.drawRange.count = 0;
	        geo.clearGroups();
	        this.materialGroups = [];
	        if (this.material instanceof Material) {
	            const meshMaterial = this.material;
	            meshMaterial.map = null;
	            meshMaterial.blending = NormalBlending;
	        }
	        else if (Array.isArray(this.material)) {
	            for (let i = 0; i < this.material.length; i++) {
	                const meshMaterial = this.material[i];
	                meshMaterial.map = null;
	                meshMaterial.blending = NormalBlending;
	            }
	        }
	        return this;
	    }
	    begin() {
	        this.verticesLength = 0;
	        this.indicesLength = 0;
	    }
	    canBatch(numVertices, numIndices) {
	        if (this.indicesLength + numIndices >= this.indices.byteLength / 2)
	            return false;
	        if (this.verticesLength / this.vertexSize + numVertices >= (this.vertices.byteLength / 4) / this.vertexSize)
	            return false;
	        return true;
	    }
	    batch(vertices, verticesLength, indices, indicesLength, z = 0) {
	        let indexStart = this.verticesLength / this.vertexSize;
	        let vertexBuffer = this.vertices;
	        let i = this.verticesLength;
	        let j = 0;
	        if (this.twoColorTint) {
	            for (; j < verticesLength;) {
	                vertexBuffer[i++] = vertices[j++]; // x
	                vertexBuffer[i++] = vertices[j++]; // y
	                vertexBuffer[i++] = z; // z
	                vertexBuffer[i++] = vertices[j++]; // r
	                vertexBuffer[i++] = vertices[j++]; // g
	                vertexBuffer[i++] = vertices[j++]; // b
	                vertexBuffer[i++] = vertices[j++]; // a
	                vertexBuffer[i++] = vertices[j++]; // u
	                vertexBuffer[i++] = vertices[j++]; // v
	                vertexBuffer[i++] = vertices[j++]; // dark r
	                vertexBuffer[i++] = vertices[j++]; // dark g
	                vertexBuffer[i++] = vertices[j++]; // dark b
	                j++;
	            }
	        }
	        else {
	            for (; j < verticesLength;) {
	                vertexBuffer[i++] = vertices[j++]; // x
	                vertexBuffer[i++] = vertices[j++]; // y
	                vertexBuffer[i++] = z; // z
	                vertexBuffer[i++] = vertices[j++]; // r
	                vertexBuffer[i++] = vertices[j++]; // g
	                vertexBuffer[i++] = vertices[j++]; // b
	                vertexBuffer[i++] = vertices[j++]; // a
	                vertexBuffer[i++] = vertices[j++]; // u
	                vertexBuffer[i++] = vertices[j++]; // v
	            }
	        }
	        this.verticesLength = i;
	        let indicesArray = this.indices;
	        for (i = this.indicesLength, j = 0; j < indicesLength; i++, j++)
	            indicesArray[i] = indices[j] + indexStart;
	        this.indicesLength += indicesLength;
	    }
	    end() {
	        this.vertexBuffer.needsUpdate = this.verticesLength > 0;
	        this.vertexBuffer.addUpdateRange(0, this.verticesLength);
	        let geo = this.geometry;
	        this.closeMaterialGroups();
	        let index = geo.getIndex();
	        if (!index)
	            throw new Error("BufferAttribute must not be null.");
	        index.needsUpdate = this.indicesLength > 0;
	        index.addUpdateRange(0, this.indicesLength);
	        geo.drawRange.start = 0;
	        geo.drawRange.count = this.indicesLength;
	        geo.computeVertexNormals();
	    }
	    addMaterialGroup(indicesLength, materialGroup) {
	        const currentGroup = this.materialGroups[this.materialGroups.length - 1];
	        if (currentGroup === undefined || currentGroup[2] !== materialGroup) {
	            this.materialGroups.push([this.indicesLength, indicesLength, materialGroup]);
	        }
	        else {
	            currentGroup[1] += indicesLength;
	        }
	    }
	    closeMaterialGroups() {
	        const geometry = this.geometry;
	        for (let i = 0; i < this.materialGroups.length; i++) {
	            const [startIndex, count, materialGroup] = this.materialGroups[i];
	            geometry.addGroup(startIndex, count, materialGroup);
	        }
	    }
	    findMaterialGroup(slotTexture, slotBlendMode) {
	        const blendingObject = ThreeJsTexture.toThreeJsBlending(slotBlendMode);
	        let group = -1;
	        if (Array.isArray(this.material)) {
	            for (let i = 0; i < this.material.length; i++) {
	                const meshMaterial = this.material[i];
	                if (!meshMaterial.map) {
	                    updateMeshMaterial(meshMaterial, slotTexture, blendingObject);
	                    return i;
	                }
	                if (meshMaterial.map === slotTexture
	                    && blendingObject.blending === meshMaterial.blending
	                    && (blendingObject.blendSrc === undefined || blendingObject.blendSrc === meshMaterial.blendSrc)
	                    && (blendingObject.blendDst === undefined || blendingObject.blendDst === meshMaterial.blendDst)
	                    && (blendingObject.blendSrcAlpha === undefined || blendingObject.blendSrcAlpha === meshMaterial.blendSrcAlpha)
	                    && (blendingObject.blendDstAlpha === undefined || blendingObject.blendDstAlpha === meshMaterial.blendDstAlpha)) {
	                    return i;
	                }
	            }
	            const meshMaterial = this.newMaterial();
	            updateMeshMaterial(meshMaterial, slotTexture, blendingObject);
	            this.material.push(meshMaterial);
	            group = this.material.length - 1;
	        }
	        else {
	            throw new Error("MeshBatcher.material needs to be an array for geometry groups to work");
	        }
	        return group;
	    }
	    newMaterial() {
	        const meshMaterial = this.materialFactory(SkeletonMesh.DEFAULT_MATERIAL_PARAMETERS);
	        if (!('map' in meshMaterial)) {
	            throw new Error("The material factory must return a material having the map property for the texture.");
	        }
	        if (meshMaterial instanceof SkeletonMeshMaterial) {
	            return meshMaterial;
	        }
	        if (this.twoColorTint) {
	            meshMaterial.defines = {
	                ...meshMaterial.defines,
	                USE_SPINE_DARK_TINT: 1,
	            };
	        }
	        meshMaterial.onBeforeCompile = spineOnBeforeCompile;
	        return meshMaterial;
	    }
	}
	const spineOnBeforeCompile = (shader) => {
	    let code;
	    // VERTEX SHADER MODIFICATIONS
	    // Add dark color attribute
	    shader.vertexShader = `
		#if defined( USE_SPINE_DARK_TINT )
			attribute vec3 darkcolor;
		#endif
	` + shader.vertexShader;
	    // Add dark color attribute
	    code = `
		#if defined( USE_SPINE_DARK_TINT )
			varying vec3 v_dark;
		#endif
	`;
	    shader.vertexShader = insertAfterElementInShader(shader.vertexShader, '#include <color_pars_vertex>', code);
	    // Define v_dark varying
	    code = `
		#if defined( USE_SPINE_DARK_TINT )
			v_dark = vec3( 1.0 );
			v_dark *= darkcolor;
		#endif
	`;
	    shader.vertexShader = insertAfterElementInShader(shader.vertexShader, '#include <color_vertex>', code);
	    // FRAGMENT SHADER MODIFICATIONS
	    // Define v_dark varying
	    code = `
		#ifdef USE_SPINE_DARK_TINT
			varying vec3 v_dark;
		#endif
	`;
	    shader.fragmentShader = insertAfterElementInShader(shader.fragmentShader, '#include <color_pars_fragment>', code);
	    // Replacing color_fragment with the addition of dark tint formula if twoColorTint is true
	    shader.fragmentShader = shader.fragmentShader.replace('#include <color_fragment>', `
			#ifdef USE_SPINE_DARK_TINT
				#ifdef USE_COLOR_ALPHA
						diffuseColor.a *= vColor.a;
						diffuseColor.rgb *= (1.0 - diffuseColor.rgb) * v_dark.rgb + diffuseColor.rgb * vColor.rgb;
				#endif
			#else
				#ifdef USE_COLOR_ALPHA
						diffuseColor *= vColor;
				#endif
			#endif
		`);
	    // We had to remove this because we need premultiplied blending modes, but our textures are already premultiplied
	    // We could actually create a custom blending mode for Normal and Additive too
	    shader.fragmentShader = shader.fragmentShader.replace('#include <premultiplied_alpha_fragment>', '');
	    // We had to remove this (and don't assign a color space to the texture) otherwise we would see artifacts on texture edges
	    shader.fragmentShader = shader.fragmentShader.replace('#include <colorspace_fragment>', '');
	};
	function insertAfterElementInShader(shader, elementToFind, codeToInsert) {
	    const index = shader.indexOf(elementToFind);
	    const beforeToken = shader.slice(0, index + elementToFind.length);
	    const afterToken = shader.slice(index + elementToFind.length);
	    return beforeToken + codeToInsert + afterToken;
	}
	function updateMeshMaterial(meshMaterial, slotTexture, blending) {
	    meshMaterial.map = slotTexture;
	    Object.assign(meshMaterial, blending);
	    meshMaterial.needsUpdate = true;
	}
	class SkeletonMeshMaterial extends ShaderMaterial {
	    get map() {
	        return this.uniforms.map.value;
	    }
	    set map(value) {
	        this.uniforms.map.value = value;
	    }
	    constructor(parameters) {
	        let vertexShader = `
			varying vec2 vUv;
			varying vec4 vColor;
			void main() {
				vUv = uv;
				vColor = color;
				gl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);
			}
		`;
	        let fragmentShader = `
			uniform sampler2D map;
			#ifdef USE_SPINE_ALPHATEST
			uniform float alphaTest;
			#endif
			varying vec2 vUv;
			varying vec4 vColor;
			void main(void) {
				gl_FragColor = texture2D(map, vUv)*vColor;
				#ifdef USE_SPINE_ALPHATEST
					if (gl_FragColor.a < alphaTest) discard;
				#endif
			}
		`;
	        let uniforms = { map: { value: null } };
	        if (parameters.uniforms) {
	            uniforms = { ...parameters.uniforms, ...uniforms };
	        }
	        if (parameters.alphaTest && parameters.alphaTest > 0) {
	            parameters.defines = { USE_SPINE_ALPHATEST: 1 };
	        }
	        super({
	            vertexShader,
	            fragmentShader,
	            ...parameters,
	            uniforms,
	        });
	    }
	}

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	/*!
	 * GSAP 3.12.7
	 * https://gsap.com
	 *
	 * @license Copyright 2008-2025, GreenSock. All rights reserved.
	 * Subject to the terms at https://gsap.com/standard-license or for
	 * Club GSAP members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/

	/* eslint-disable */
	var _config = {
	  autoSleep: 120,
	  force3D: "auto",
	  nullTargetWarn: 1,
	  units: {
	    lineHeight: ""
	  }
	},
	    _defaults = {
	  duration: .5,
	  overwrite: false,
	  delay: 0
	},
	    _suppressOverwrites,
	    _reverting$1,
	    _context,
	    _bigNum$1 = 1e8,
	    _tinyNum = 1 / _bigNum$1,
	    _2PI = Math.PI * 2,
	    _HALF_PI = _2PI / 4,
	    _gsID = 0,
	    _sqrt = Math.sqrt,
	    _cos = Math.cos,
	    _sin = Math.sin,
	    _isString = function _isString(value) {
	  return typeof value === "string";
	},
	    _isFunction = function _isFunction(value) {
	  return typeof value === "function";
	},
	    _isNumber = function _isNumber(value) {
	  return typeof value === "number";
	},
	    _isUndefined = function _isUndefined(value) {
	  return typeof value === "undefined";
	},
	    _isObject = function _isObject(value) {
	  return typeof value === "object";
	},
	    _isNotFalse = function _isNotFalse(value) {
	  return value !== false;
	},
	    _windowExists$1 = function _windowExists() {
	  return typeof window !== "undefined";
	},
	    _isFuncOrString = function _isFuncOrString(value) {
	  return _isFunction(value) || _isString(value);
	},
	    _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
	    // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
	_isArray = Array.isArray,
	    _strictNumExp = /(?:-?\.?\d|\.)+/gi,
	    //only numbers (including negatives and decimals) but NOT relative values.
	_numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
	    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
	_numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
	    _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
	    //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
	_relExp = /[+-]=-?[.\d]+/,
	    _delimitedValueExp = /[^,'"\[\]\s]+/gi,
	    // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
	_unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
	    _globalTimeline,
	    _win$1,
	    _coreInitted,
	    _doc$1,
	    _globals = {},
	    _installScope = {},
	    _coreReady,
	    _install = function _install(scope) {
	  return (_installScope = _merge(scope, _globals)) && gsap;
	},
	    _missingPlugin = function _missingPlugin(property, value) {
	  return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
	},
	    _warn = function _warn(message, suppress) {
	  return !suppress && console.warn(message);
	},
	    _addGlobal = function _addGlobal(name, obj) {
	  return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
	},
	    _emptyFunc = function _emptyFunc() {
	  return 0;
	},
	    _startAtRevertConfig = {
	  suppressEvents: true,
	  isStart: true,
	  kill: false
	},
	    _revertConfigNoKill = {
	  suppressEvents: true,
	  kill: false
	},
	    _revertConfig = {
	  suppressEvents: true
	},
	    _reservedProps = {},
	    _lazyTweens = [],
	    _lazyLookup = {},
	    _lastRenderedFrame,
	    _plugins = {},
	    _effects = {},
	    _nextGCFrame = 30,
	    _harnessPlugins = [],
	    _callbackNames = "",
	    _harness = function _harness(targets) {
	  var target = targets[0],
	      harnessPlugin,
	      i;
	  _isObject(target) || _isFunction(target) || (targets = [targets]);

	  if (!(harnessPlugin = (target._gsap || {}).harness)) {
	    // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
	    i = _harnessPlugins.length;

	    while (i-- && !_harnessPlugins[i].targetTest(target)) {}

	    harnessPlugin = _harnessPlugins[i];
	  }

	  i = targets.length;

	  while (i--) {
	    targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
	  }

	  return targets;
	},
	    _getCache = function _getCache(target) {
	  return target._gsap || _harness(toArray(target))[0]._gsap;
	},
	    _getProperty = function _getProperty(target, property, v) {
	  return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
	},
	    _forEachName = function _forEachName(names, func) {
	  return (names = names.split(",")).forEach(func) || names;
	},
	    //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
	_round = function _round(value) {
	  return Math.round(value * 100000) / 100000 || 0;
	},
	    _roundPrecise = function _roundPrecise(value) {
	  return Math.round(value * 10000000) / 10000000 || 0;
	},
	    // increased precision mostly for timing values.
	_parseRelative = function _parseRelative(start, value) {
	  var operator = value.charAt(0),
	      end = parseFloat(value.substr(2));
	  start = parseFloat(start);
	  return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
	},
	    _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
	  //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
	  var l = toFind.length,
	      i = 0;

	  for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

	  return i < l;
	},
	    _lazyRender = function _lazyRender() {
	  var l = _lazyTweens.length,
	      a = _lazyTweens.slice(0),
	      i,
	      tween;

	  _lazyLookup = {};
	  _lazyTweens.length = 0;

	  for (i = 0; i < l; i++) {
	    tween = a[i];
	    tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
	  }
	},
	    _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
	  _lazyTweens.length && !_reverting$1 && _lazyRender();
	  animation.render(time, suppressEvents, force || _reverting$1 && time < 0 && (animation._initted || animation._startAt));
	  _lazyTweens.length && !_reverting$1 && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
	},
	    _numericIfPossible = function _numericIfPossible(value) {
	  var n = parseFloat(value);
	  return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;
	},
	    _passThrough = function _passThrough(p) {
	  return p;
	},
	    _setDefaults = function _setDefaults(obj, defaults) {
	  for (var p in defaults) {
	    p in obj || (obj[p] = defaults[p]);
	  }

	  return obj;
	},
	    _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
	  return function (obj, defaults) {
	    for (var p in defaults) {
	      p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
	    }
	  };
	},
	    _merge = function _merge(base, toMerge) {
	  for (var p in toMerge) {
	    base[p] = toMerge[p];
	  }

	  return base;
	},
	    _mergeDeep = function _mergeDeep(base, toMerge) {
	  for (var p in toMerge) {
	    p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
	  }

	  return base;
	},
	    _copyExcluding = function _copyExcluding(obj, excluding) {
	  var copy = {},
	      p;

	  for (p in obj) {
	    p in excluding || (copy[p] = obj[p]);
	  }

	  return copy;
	},
	    _inheritDefaults = function _inheritDefaults(vars) {
	  var parent = vars.parent || _globalTimeline,
	      func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;

	  if (_isNotFalse(vars.inherit)) {
	    while (parent) {
	      func(vars, parent.vars.defaults);
	      parent = parent.parent || parent._dp;
	    }
	  }

	  return vars;
	},
	    _arraysMatch = function _arraysMatch(a1, a2) {
	  var i = a1.length,
	      match = i === a2.length;

	  while (match && i-- && a1[i] === a2[i]) {}

	  return i < 0;
	},
	    _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
	  if (firstProp === void 0) {
	    firstProp = "_first";
	  }

	  if (lastProp === void 0) {
	    lastProp = "_last";
	  }

	  var prev = parent[lastProp],
	      t;

	  if (sortBy) {
	    t = child[sortBy];

	    while (prev && prev[sortBy] > t) {
	      prev = prev._prev;
	    }
	  }

	  if (prev) {
	    child._next = prev._next;
	    prev._next = child;
	  } else {
	    child._next = parent[firstProp];
	    parent[firstProp] = child;
	  }

	  if (child._next) {
	    child._next._prev = child;
	  } else {
	    parent[lastProp] = child;
	  }

	  child._prev = prev;
	  child.parent = child._dp = parent;
	  return child;
	},
	    _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
	  if (firstProp === void 0) {
	    firstProp = "_first";
	  }

	  if (lastProp === void 0) {
	    lastProp = "_last";
	  }

	  var prev = child._prev,
	      next = child._next;

	  if (prev) {
	    prev._next = next;
	  } else if (parent[firstProp] === child) {
	    parent[firstProp] = next;
	  }

	  if (next) {
	    next._prev = prev;
	  } else if (parent[lastProp] === child) {
	    parent[lastProp] = prev;
	  }

	  child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
	},
	    _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
	  child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
	  child._act = 0;
	},
	    _uncache = function _uncache(animation, child) {
	  if (animation && (!child || child._end > animation._dur || child._start < 0)) {
	    // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
	    var a = animation;

	    while (a) {
	      a._dirty = 1;
	      a = a.parent;
	    }
	  }

	  return animation;
	},
	    _recacheAncestors = function _recacheAncestors(animation) {
	  var parent = animation.parent;

	  while (parent && parent.parent) {
	    //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
	    parent._dirty = 1;
	    parent.totalDuration();
	    parent = parent.parent;
	  }

	  return animation;
	},
	    _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
	  return tween._startAt && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
	},
	    _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
	  return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
	},
	    _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
	  return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
	},
	    // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
	_animationCycle = function _animationCycle(tTime, cycleDuration) {
	  var whole = Math.floor(tTime = _roundPrecise(tTime / cycleDuration));
	  return tTime && whole === tTime ? whole - 1 : whole;
	},
	    _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
	  return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
	},
	    _setEnd = function _setEnd(animation) {
	  return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
	},
	    _alignPlayhead = function _alignPlayhead(animation, totalTime) {
	  // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
	  var parent = animation._dp;

	  if (parent && parent.smoothChildTiming && animation._ts) {
	    animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

	    _setEnd(animation);

	    parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
	  }

	  return animation;
	},

	/*
	_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
		let cycleDuration = duration + repeatDelay,
			time = _round(clampedTotalTime % cycleDuration);
		if (time > duration) {
			time = duration;
		}
		return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
	},
	*/
	_postAddChecks = function _postAddChecks(timeline, child) {
	  var t;

	  if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
	    // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
	    t = _parentToChildTotalTime(timeline.rawTime(), child);

	    if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
	      child.render(t, true);
	    }
	  } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


	  if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
	    //in case any of the ancestors had completed but should now be enabled...
	    if (timeline._dur < timeline.duration()) {
	      t = timeline;

	      while (t._dp) {
	        t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

	        t = t._dp;
	      }
	    }

	    timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
	  }
	},
	    _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
	  child.parent && _removeFromParent(child);
	  child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);
	  child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

	  _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

	  _isFromOrFromStart(child) || (timeline._recent = child);
	  skipChecks || _postAddChecks(timeline, child);
	  timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

	  return timeline;
	},
	    _scrollTrigger = function _scrollTrigger(animation, trigger) {
	  return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
	},
	    _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
	  _initTween(tween, time, tTime);

	  if (!tween._initted) {
	    return 1;
	  }

	  if (!force && tween._pt && !_reverting$1 && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
	    _lazyTweens.push(tween);

	    tween._lazy = [tTime, suppressEvents];
	    return 1;
	  }
	},
	    _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
	  var parent = _ref.parent;
	  return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
	},
	    // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
	_isFromOrFromStart = function _isFromOrFromStart(_ref2) {
	  var data = _ref2.data;
	  return data === "isFromStart" || data === "isStart";
	},
	    _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
	  var prevRatio = tween.ratio,
	      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
	      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
	  repeatDelay = tween._rDelay,
	      tTime = 0,
	      pt,
	      iteration,
	      prevIteration;

	  if (repeatDelay && tween._repeat) {
	    // in case there's a zero-duration tween that has a repeat with a repeatDelay
	    tTime = _clamp(0, tween._tDur, totalTime);
	    iteration = _animationCycle(tTime, repeatDelay);
	    tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

	    if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
	      // if iteration changed
	      prevRatio = 1 - ratio;
	      tween.vars.repeatRefresh && tween._initted && tween.invalidate();
	    }
	  }

	  if (ratio !== prevRatio || _reverting$1 || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
	    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
	      // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
	      return;
	    }

	    prevIteration = tween._zTime;
	    tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

	    suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

	    tween.ratio = ratio;
	    tween._from && (ratio = 1 - ratio);
	    tween._time = 0;
	    tween._tTime = tTime;
	    pt = tween._pt;

	    while (pt) {
	      pt.r(ratio, pt.d);
	      pt = pt._next;
	    }

	    totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
	    tween._onUpdate && !suppressEvents && _callback(tween, "onUpdate");
	    tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, "onRepeat");

	    if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
	      ratio && _removeFromParent(tween, 1);

	      if (!suppressEvents && !_reverting$1) {
	        _callback(tween, ratio ? "onComplete" : "onReverseComplete", true);

	        tween._prom && tween._prom();
	      }
	    }
	  } else if (!tween._zTime) {
	    tween._zTime = totalTime;
	  }
	},
	    _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
	  var child;

	  if (time > prevTime) {
	    child = animation._first;

	    while (child && child._start <= time) {
	      if (child.data === "isPause" && child._start > prevTime) {
	        return child;
	      }

	      child = child._next;
	    }
	  } else {
	    child = animation._last;

	    while (child && child._start >= time) {
	      if (child.data === "isPause" && child._start < prevTime) {
	        return child;
	      }

	      child = child._prev;
	    }
	  }
	},
	    _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
	  var repeat = animation._repeat,
	      dur = _roundPrecise(duration) || 0,
	      totalProgress = animation._tTime / animation._tDur;
	  totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
	  animation._dur = dur;
	  animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
	  totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
	  animation.parent && _setEnd(animation);
	  skipUncache || _uncache(animation.parent, animation);
	  return animation;
	},
	    _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
	  return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
	},
	    _zeroPosition = {
	  _start: 0,
	  endTime: _emptyFunc,
	  totalDuration: _emptyFunc
	},
	    _parsePosition = function _parsePosition(animation, position, percentAnimation) {
	  var labels = animation.labels,
	      recent = animation._recent || _zeroPosition,
	      clippedDuration = animation.duration() >= _bigNum$1 ? recent.endTime(false) : animation._dur,
	      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
	  i,
	      offset,
	      isPercent;

	  if (_isString(position) && (isNaN(position) || position in labels)) {
	    //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
	    offset = position.charAt(0);
	    isPercent = position.substr(-1) === "%";
	    i = position.indexOf("=");

	    if (offset === "<" || offset === ">") {
	      i >= 0 && (position = position.replace(/=/, ""));
	      return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
	    }

	    if (i < 0) {
	      position in labels || (labels[position] = clippedDuration);
	      return labels[position];
	    }

	    offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

	    if (isPercent && percentAnimation) {
	      offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
	    }

	    return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
	  }

	  return position == null ? clippedDuration : +position;
	},
	    _createTweenType = function _createTweenType(type, params, timeline) {
	  var isLegacy = _isNumber(params[1]),
	      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
	      vars = params[varsIndex],
	      irVars,
	      parent;

	  isLegacy && (vars.duration = params[1]);
	  vars.parent = timeline;

	  if (type) {
	    irVars = vars;
	    parent = timeline;

	    while (parent && !("immediateRender" in irVars)) {
	      // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
	      irVars = parent.vars.defaults || {};
	      parent = _isNotFalse(parent.vars.inherit) && parent.parent;
	    }

	    vars.immediateRender = _isNotFalse(irVars.immediateRender);
	    type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
	  }

	  return new Tween(params[0], vars, params[varsIndex + 1]);
	},
	    _conditionalReturn = function _conditionalReturn(value, func) {
	  return value || value === 0 ? func(value) : func;
	},
	    _clamp = function _clamp(min, max, value) {
	  return value < min ? min : value > max ? max : value;
	},
	    getUnit = function getUnit(value, v) {
	  return !_isString(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
	},
	    // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
	clamp = function clamp(min, max, value) {
	  return _conditionalReturn(value, function (v) {
	    return _clamp(min, max, v);
	  });
	},
	    _slice = [].slice,
	    _isArrayLike = function _isArrayLike(value, nonEmpty) {
	  return value && _isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win$1;
	},
	    _flatten = function _flatten(ar, leaveStrings, accumulator) {
	  if (accumulator === void 0) {
	    accumulator = [];
	  }

	  return ar.forEach(function (value) {
	    var _accumulator;

	    return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
	  }) || accumulator;
	},
	    //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
	toArray = function toArray(value, scope, leaveStrings) {
	  return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc$1).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
	},
	    selector = function selector(value) {
	  value = toArray(value)[0] || _warn("Invalid scope") || {};
	  return function (v) {
	    var el = value.current || value.nativeElement || value;
	    return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc$1.createElement("div") : value);
	  };
	},
	    shuffle = function shuffle(a) {
	  return a.sort(function () {
	    return .5 - Math.random();
	  });
	},
	    // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = (Math.random() * i) | 0, v = a[--i], a[i] = a[j], a[j] = v); return a;
	//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
	distribute = function distribute(v) {
	  if (_isFunction(v)) {
	    return v;
	  }

	  var vars = _isObject(v) ? v : {
	    each: v
	  },
	      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
	  ease = _parseEase(vars.ease),
	      from = vars.from || 0,
	      base = parseFloat(vars.base) || 0,
	      cache = {},
	      isDecimal = from > 0 && from < 1,
	      ratios = isNaN(from) || isDecimal,
	      axis = vars.axis,
	      ratioX = from,
	      ratioY = from;

	  if (_isString(from)) {
	    ratioX = ratioY = {
	      center: .5,
	      edges: .5,
	      end: 1
	    }[from] || 0;
	  } else if (!isDecimal && ratios) {
	    ratioX = from[0];
	    ratioY = from[1];
	  }

	  return function (i, target, a) {
	    var l = (a || vars).length,
	        distances = cache[l],
	        originX,
	        originY,
	        x,
	        y,
	        d,
	        j,
	        max,
	        min,
	        wrapAt;

	    if (!distances) {
	      wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum$1])[1];

	      if (!wrapAt) {
	        max = -_bigNum$1;

	        while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

	        wrapAt < l && wrapAt--;
	      }

	      distances = cache[l] = [];
	      originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
	      originY = wrapAt === _bigNum$1 ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
	      max = 0;
	      min = _bigNum$1;

	      for (j = 0; j < l; j++) {
	        x = j % wrapAt - originX;
	        y = originY - (j / wrapAt | 0);
	        distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
	        d > max && (max = d);
	        d < min && (min = d);
	      }

	      from === "random" && shuffle(distances);
	      distances.max = max - min;
	      distances.min = min;
	      distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
	      distances.b = l < 0 ? base - l : base;
	      distances.u = getUnit(vars.amount || vars.each) || 0; //unit

	      ease = ease && l < 0 ? _invertEase(ease) : ease;
	    }

	    l = (distances[i] - distances.min) / distances.max || 0;
	    return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
	  };
	},
	    _roundModifier = function _roundModifier(v) {
	  //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
	  var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

	  return function (raw) {
	    var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);

	    return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
	  };
	},
	    snap = function snap(snapTo, value) {
	  var isArray = _isArray(snapTo),
	      radius,
	      is2D;

	  if (!isArray && _isObject(snapTo)) {
	    radius = isArray = snapTo.radius || _bigNum$1;

	    if (snapTo.values) {
	      snapTo = toArray(snapTo.values);

	      if (is2D = !_isNumber(snapTo[0])) {
	        radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
	      }
	    } else {
	      snapTo = _roundModifier(snapTo.increment);
	    }
	  }

	  return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {
	    is2D = snapTo(raw);
	    return Math.abs(is2D - raw) <= radius ? is2D : raw;
	  } : function (raw) {
	    var x = parseFloat(is2D ? raw.x : raw),
	        y = parseFloat(is2D ? raw.y : 0),
	        min = _bigNum$1,
	        closest = 0,
	        i = snapTo.length,
	        dx,
	        dy;

	    while (i--) {
	      if (is2D) {
	        dx = snapTo[i].x - x;
	        dy = snapTo[i].y - y;
	        dx = dx * dx + dy * dy;
	      } else {
	        dx = Math.abs(snapTo[i] - x);
	      }

	      if (dx < min) {
	        min = dx;
	        closest = i;
	      }
	    }

	    closest = !radius || min <= radius ? snapTo[closest] : raw;
	    return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);
	  });
	},
	    random = function random(min, max, roundingIncrement, returnFunction) {
	  return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
	    return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
	  });
	},
	    pipe = function pipe() {
	  for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
	    functions[_key] = arguments[_key];
	  }

	  return function (value) {
	    return functions.reduce(function (v, f) {
	      return f(v);
	    }, value);
	  };
	},
	    unitize = function unitize(func, unit) {
	  return function (value) {
	    return func(parseFloat(value)) + (unit || getUnit(value));
	  };
	},
	    normalize = function normalize(min, max, value) {
	  return mapRange(min, max, 0, 1, value);
	},
	    _wrapArray = function _wrapArray(a, wrapper, value) {
	  return _conditionalReturn(value, function (index) {
	    return a[~~wrapper(index)];
	  });
	},
	    wrap$1 = function wrap(min, max, value) {
	  // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
	  var range = max - min;
	  return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
	    return (range + (value - min) % range) % range + min;
	  });
	},
	    wrapYoyo = function wrapYoyo(min, max, value) {
	  var range = max - min,
	      total = range * 2;
	  return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
	    value = (total + (value - min) % total) % total || 0;
	    return min + (value > range ? total - value : value);
	  });
	},
	    _replaceRandom = function _replaceRandom(value) {
	  //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
	  var prev = 0,
	      s = "",
	      i,
	      nums,
	      end,
	      isArray;

	  while (~(i = value.indexOf("random(", prev))) {
	    end = value.indexOf(")", i);
	    isArray = value.charAt(i + 7) === "[";
	    nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
	    s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
	    prev = end + 1;
	  }

	  return s + value.substr(prev, value.length - prev);
	},
	    mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
	  var inRange = inMax - inMin,
	      outRange = outMax - outMin;
	  return _conditionalReturn(value, function (value) {
	    return outMin + ((value - inMin) / inRange * outRange || 0);
	  });
	},
	    interpolate = function interpolate(start, end, progress, mutate) {
	  var func = isNaN(start + end) ? 0 : function (p) {
	    return (1 - p) * start + p * end;
	  };

	  if (!func) {
	    var isString = _isString(start),
	        master = {},
	        p,
	        i,
	        interpolators,
	        l,
	        il;

	    progress === true && (mutate = 1) && (progress = null);

	    if (isString) {
	      start = {
	        p: start
	      };
	      end = {
	        p: end
	      };
	    } else if (_isArray(start) && !_isArray(end)) {
	      interpolators = [];
	      l = start.length;
	      il = l - 2;

	      for (i = 1; i < l; i++) {
	        interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
	      }

	      l--;

	      func = function func(p) {
	        p *= l;
	        var i = Math.min(il, ~~p);
	        return interpolators[i](p - i);
	      };

	      progress = end;
	    } else if (!mutate) {
	      start = _merge(_isArray(start) ? [] : {}, start);
	    }

	    if (!interpolators) {
	      for (p in end) {
	        _addPropTween.call(master, start, p, "get", end[p]);
	      }

	      func = function func(p) {
	        return _renderPropTweens(p, master) || (isString ? start.p : start);
	      };
	    }
	  }

	  return _conditionalReturn(progress, func);
	},
	    _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
	  //used for nextLabel() and previousLabel()
	  var labels = timeline.labels,
	      min = _bigNum$1,
	      p,
	      distance,
	      label;

	  for (p in labels) {
	    distance = labels[p] - fromTime;

	    if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
	      label = p;
	      min = distance;
	    }
	  }

	  return label;
	},
	    _callback = function _callback(animation, type, executeLazyFirst) {
	  var v = animation.vars,
	      callback = v[type],
	      prevContext = _context,
	      context = animation._ctx,
	      params,
	      scope,
	      result;

	  if (!callback) {
	    return;
	  }

	  params = v[type + "Params"];
	  scope = v.callbackScope || animation;
	  executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

	  context && (_context = context);
	  result = params ? callback.apply(scope, params) : callback.call(scope);
	  _context = prevContext;
	  return result;
	},
	    _interrupt = function _interrupt(animation) {
	  _removeFromParent(animation);

	  animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting$1);
	  animation.progress() < 1 && _callback(animation, "onInterrupt");
	  return animation;
	},
	    _quickTween,
	    _registerPluginQueue = [],
	    _createPlugin = function _createPlugin(config) {
	  if (!config) return;
	  config = !config.name && config["default"] || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

	  if (_windowExists$1() || config.headless) {
	    // edge case: some build tools may pass in a null/undefined value
	    var name = config.name,
	        isFunc = _isFunction(config),
	        Plugin = name && !isFunc && config.init ? function () {
	      this._props = [];
	    } : config,
	        //in case someone passes in an object that's not a plugin, like CustomEase
	    instanceDefaults = {
	      init: _emptyFunc,
	      render: _renderPropTweens,
	      add: _addPropTween,
	      kill: _killPropTweensOf,
	      modifier: _addPluginModifier,
	      rawVars: 0
	    },
	        statics = {
	      targetTest: 0,
	      get: 0,
	      getSetter: _getSetter,
	      aliases: {},
	      register: 0
	    };

	    _wake();

	    if (config !== Plugin) {
	      if (_plugins[name]) {
	        return;
	      }

	      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods


	      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


	      _plugins[Plugin.prop = name] = Plugin;

	      if (config.targetTest) {
	        _harnessPlugins.push(Plugin);

	        _reservedProps[name] = 1;
	      }

	      name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
	    }

	    _addGlobal(name, Plugin);

	    config.register && config.register(gsap, Plugin, PropTween);
	  } else {
	    _registerPluginQueue.push(config);
	  }
	},

	/*
	 * --------------------------------------------------------------------------------------
	 * COLORS
	 * --------------------------------------------------------------------------------------
	 */
	_255 = 255,
	    _colorLookup = {
	  aqua: [0, _255, _255],
	  lime: [0, _255, 0],
	  silver: [192, 192, 192],
	  black: [0, 0, 0],
	  maroon: [128, 0, 0],
	  teal: [0, 128, 128],
	  blue: [0, 0, _255],
	  navy: [0, 0, 128],
	  white: [_255, _255, _255],
	  olive: [128, 128, 0],
	  yellow: [_255, _255, 0],
	  orange: [_255, 165, 0],
	  gray: [128, 128, 128],
	  purple: [128, 0, 128],
	  green: [0, 128, 0],
	  red: [_255, 0, 0],
	  pink: [_255, 192, 203],
	  cyan: [0, _255, _255],
	  transparent: [_255, _255, _255, 0]
	},
	    // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
	// let ctx = _doc.createElement("canvas").getContext("2d");
	// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
	_hue = function _hue(h, m1, m2) {
	  h += h < 0 ? 1 : h > 1 ? -1 : 0;
	  return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
	},
	    splitColor = function splitColor(v, toHSL, forceAlpha) {
	  var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
	      r,
	      g,
	      b,
	      h,
	      s,
	      l,
	      max,
	      min,
	      d,
	      wasHSL;

	  if (!a) {
	    if (v.substr(-1) === ",") {
	      //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
	      v = v.substr(0, v.length - 1);
	    }

	    if (_colorLookup[v]) {
	      a = _colorLookup[v];
	    } else if (v.charAt(0) === "#") {
	      if (v.length < 6) {
	        //for shorthand like #9F0 or #9F0F (could have alpha)
	        r = v.charAt(1);
	        g = v.charAt(2);
	        b = v.charAt(3);
	        v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
	      }

	      if (v.length === 9) {
	        // hex with alpha, like #fd5e53ff
	        a = parseInt(v.substr(1, 6), 16);
	        return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
	      }

	      v = parseInt(v.substr(1), 16);
	      a = [v >> 16, v >> 8 & _255, v & _255];
	    } else if (v.substr(0, 3) === "hsl") {
	      a = wasHSL = v.match(_strictNumExp);

	      if (!toHSL) {
	        h = +a[0] % 360 / 360;
	        s = +a[1] / 100;
	        l = +a[2] / 100;
	        g = l <= .5 ? l * (s + 1) : l + s - l * s;
	        r = l * 2 - g;
	        a.length > 3 && (a[3] *= 1); //cast as number

	        a[0] = _hue(h + 1 / 3, r, g);
	        a[1] = _hue(h, r, g);
	        a[2] = _hue(h - 1 / 3, r, g);
	      } else if (~v.indexOf("=")) {
	        //if relative values are found, just return the raw strings with the relative prefixes in place.
	        a = v.match(_numExp);
	        forceAlpha && a.length < 4 && (a[3] = 1);
	        return a;
	      }
	    } else {
	      a = v.match(_strictNumExp) || _colorLookup.transparent;
	    }

	    a = a.map(Number);
	  }

	  if (toHSL && !wasHSL) {
	    r = a[0] / _255;
	    g = a[1] / _255;
	    b = a[2] / _255;
	    max = Math.max(r, g, b);
	    min = Math.min(r, g, b);
	    l = (max + min) / 2;

	    if (max === min) {
	      h = s = 0;
	    } else {
	      d = max - min;
	      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	      h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
	      h *= 60;
	    }

	    a[0] = ~~(h + .5);
	    a[1] = ~~(s * 100 + .5);
	    a[2] = ~~(l * 100 + .5);
	  }

	  forceAlpha && a.length < 4 && (a[3] = 1);
	  return a;
	},
	    _colorOrderData = function _colorOrderData(v) {
	  // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
	  var values = [],
	      c = [],
	      i = -1;
	  v.split(_colorExp).forEach(function (v) {
	    var a = v.match(_numWithUnitExp) || [];
	    values.push.apply(values, a);
	    c.push(i += a.length + 1);
	  });
	  values.c = c;
	  return values;
	},
	    _formatColors = function _formatColors(s, toHSL, orderMatchData) {
	  var result = "",
	      colors = (s + result).match(_colorExp),
	      type = toHSL ? "hsla(" : "rgba(",
	      i = 0,
	      c,
	      shell,
	      d,
	      l;

	  if (!colors) {
	    return s;
	  }

	  colors = colors.map(function (color) {
	    return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
	  });

	  if (orderMatchData) {
	    d = _colorOrderData(s);
	    c = orderMatchData.c;

	    if (c.join(result) !== d.c.join(result)) {
	      shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
	      l = shell.length - 1;

	      for (; i < l; i++) {
	        result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
	      }
	    }
	  }

	  if (!shell) {
	    shell = s.split(_colorExp);
	    l = shell.length - 1;

	    for (; i < l; i++) {
	      result += shell[i] + colors[i];
	    }
	  }

	  return result + shell[l];
	},
	    _colorExp = function () {
	  var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
	      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
	  p;

	  for (p in _colorLookup) {
	    s += "|" + p + "\\b";
	  }

	  return new RegExp(s + ")", "gi");
	}(),
	    _hslExp = /hsl[a]?\(/,
	    _colorStringFilter = function _colorStringFilter(a) {
	  var combined = a.join(" "),
	      toHSL;
	  _colorExp.lastIndex = 0;

	  if (_colorExp.test(combined)) {
	    toHSL = _hslExp.test(combined);
	    a[1] = _formatColors(a[1], toHSL);
	    a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

	    return true;
	  }
	},

	/*
	 * --------------------------------------------------------------------------------------
	 * TICKER
	 * --------------------------------------------------------------------------------------
	 */
	_tickerActive,
	    _ticker = function () {
	  var _getTime = Date.now,
	      _lagThreshold = 500,
	      _adjustedLag = 33,
	      _startTime = _getTime(),
	      _lastUpdate = _startTime,
	      _gap = 1000 / 240,
	      _nextTime = _gap,
	      _listeners = [],
	      _id,
	      _req,
	      _raf,
	      _self,
	      _delta,
	      _i,
	      _tick = function _tick(v) {
	    var elapsed = _getTime() - _lastUpdate,
	        manual = v === true,
	        overlap,
	        dispatch,
	        time,
	        frame;

	    (elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
	    _lastUpdate += elapsed;
	    time = _lastUpdate - _startTime;
	    overlap = time - _nextTime;

	    if (overlap > 0 || manual) {
	      frame = ++_self.frame;
	      _delta = time - _self.time * 1000;
	      _self.time = time = time / 1000;
	      _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
	      dispatch = 1;
	    }

	    manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

	    if (dispatch) {
	      for (_i = 0; _i < _listeners.length; _i++) {
	        // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
	        _listeners[_i](time, _delta, frame, v);
	      }
	    }
	  };

	  _self = {
	    time: 0,
	    frame: 0,
	    tick: function tick() {
	      _tick(true);
	    },
	    deltaRatio: function deltaRatio(fps) {
	      return _delta / (1000 / (fps || 60));
	    },
	    wake: function wake() {
	      if (_coreReady) {
	        if (!_coreInitted && _windowExists$1()) {
	          _win$1 = _coreInitted = window;
	          _doc$1 = _win$1.document || {};
	          _globals.gsap = gsap;
	          (_win$1.gsapVersions || (_win$1.gsapVersions = [])).push(gsap.version);

	          _install(_installScope || _win$1.GreenSockGlobals || !_win$1.gsap && _win$1 || {});

	          _registerPluginQueue.forEach(_createPlugin);
	        }

	        _raf = typeof requestAnimationFrame !== "undefined" && requestAnimationFrame;
	        _id && _self.sleep();

	        _req = _raf || function (f) {
	          return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
	        };

	        _tickerActive = 1;

	        _tick(2);
	      }
	    },
	    sleep: function sleep() {
	      (_raf ? cancelAnimationFrame : clearTimeout)(_id);
	      _tickerActive = 0;
	      _req = _emptyFunc;
	    },
	    lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
	      _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

	      _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
	    },
	    fps: function fps(_fps) {
	      _gap = 1000 / (_fps || 240);
	      _nextTime = _self.time * 1000 + _gap;
	    },
	    add: function add(callback, once, prioritize) {
	      var func = once ? function (t, d, f, v) {
	        callback(t, d, f, v);

	        _self.remove(func);
	      } : callback;

	      _self.remove(callback);

	      _listeners[prioritize ? "unshift" : "push"](func);

	      _wake();

	      return func;
	    },
	    remove: function remove(callback, i) {
	      ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
	    },
	    _listeners: _listeners
	  };
	  return _self;
	}(),
	    _wake = function _wake() {
	  return !_tickerActive && _ticker.wake();
	},
	    //also ensures the core classes are initialized.

	/*
	* -------------------------------------------------
	* EASING
	* -------------------------------------------------
	*/
	_easeMap = {},
	    _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
	    _quotesExp = /["']/g,
	    _parseObjectInString = function _parseObjectInString(value) {
	  //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
	  var obj = {},
	      split = value.substr(1, value.length - 3).split(":"),
	      key = split[0],
	      i = 1,
	      l = split.length,
	      index,
	      val,
	      parsedVal;

	  for (; i < l; i++) {
	    val = split[i];
	    index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
	    parsedVal = val.substr(0, index);
	    obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
	    key = val.substr(index + 1).trim();
	  }

	  return obj;
	},
	    _valueInParentheses = function _valueInParentheses(value) {
	  var open = value.indexOf("(") + 1,
	      close = value.indexOf(")"),
	      nested = value.indexOf("(", open);
	  return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
	},
	    _configEaseFromString = function _configEaseFromString(name) {
	  //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
	  var split = (name + "").split("("),
	      ease = _easeMap[split[0]];
	  return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
	},
	    _invertEase = function _invertEase(ease) {
	  return function (p) {
	    return 1 - ease(1 - p);
	  };
	},
	    // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
	_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
	  var child = timeline._first,
	      ease;

	  while (child) {
	    if (child instanceof Timeline) {
	      _propagateYoyoEase(child, isYoyo);
	    } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
	      if (child.timeline) {
	        _propagateYoyoEase(child.timeline, isYoyo);
	      } else {
	        ease = child._ease;
	        child._ease = child._yEase;
	        child._yEase = ease;
	        child._yoyo = isYoyo;
	      }
	    }

	    child = child._next;
	  }
	},
	    _parseEase = function _parseEase(ease, defaultEase) {
	  return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
	},
	    _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
	  if (easeOut === void 0) {
	    easeOut = function easeOut(p) {
	      return 1 - easeIn(1 - p);
	    };
	  }

	  if (easeInOut === void 0) {
	    easeInOut = function easeInOut(p) {
	      return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
	    };
	  }

	  var ease = {
	    easeIn: easeIn,
	    easeOut: easeOut,
	    easeInOut: easeInOut
	  },
	      lowercaseName;

	  _forEachName(names, function (name) {
	    _easeMap[name] = _globals[name] = ease;
	    _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

	    for (var p in ease) {
	      _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
	    }
	  });

	  return ease;
	},
	    _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
	  return function (p) {
	    return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
	  };
	},
	    _configElastic = function _configElastic(type, amplitude, period) {
	  var p1 = amplitude >= 1 ? amplitude : 1,
	      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
	  p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
	      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
	      easeOut = function easeOut(p) {
	    return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
	  },
	      ease = type === "out" ? easeOut : type === "in" ? function (p) {
	    return 1 - easeOut(1 - p);
	  } : _easeInOutFromOut(easeOut);

	  p2 = _2PI / p2; //precalculate to optimize

	  ease.config = function (amplitude, period) {
	    return _configElastic(type, amplitude, period);
	  };

	  return ease;
	},
	    _configBack = function _configBack(type, overshoot) {
	  if (overshoot === void 0) {
	    overshoot = 1.70158;
	  }

	  var easeOut = function easeOut(p) {
	    return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
	  },
	      ease = type === "out" ? easeOut : type === "in" ? function (p) {
	    return 1 - easeOut(1 - p);
	  } : _easeInOutFromOut(easeOut);

	  ease.config = function (overshoot) {
	    return _configBack(type, overshoot);
	  };

	  return ease;
	}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
	// _weightedEase = ratio => {
	// 	let y = 0.5 + ratio / 2;
	// 	return p => (2 * (1 - p) * p * y + p * p);
	// },
	// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
	// _weightedEaseStrong = ratio => {
	// 	ratio = .5 + ratio / 2;
	// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
	// 		b = ratio - o,
	// 		c = ratio + o;
	// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
	// };


	_forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
	  var power = i < 5 ? i + 1 : i;

	  _insertEase(name + ",Power" + (power - 1), i ? function (p) {
	    return Math.pow(p, power);
	  } : function (p) {
	    return p;
	  }, function (p) {
	    return 1 - Math.pow(1 - p, power);
	  }, function (p) {
	    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
	  });
	});

	_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

	_insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

	(function (n, c) {
	  var n1 = 1 / c,
	      n2 = 2 * n1,
	      n3 = 2.5 * n1,
	      easeOut = function easeOut(p) {
	    return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
	  };

	  _insertEase("Bounce", function (p) {
	    return 1 - easeOut(1 - p);
	  }, easeOut);
	})(7.5625, 2.75);

	_insertEase("Expo", function (p) {
	  return Math.pow(2, 10 * (p - 1)) * p + p * p * p * p * p * p * (1 - p);
	}); // previously 2 ** (10 * (p - 1)) but that doesn't end up with the value quite at the right spot so we do a blended ease to ensure it lands where it should perfectly.


	_insertEase("Circ", function (p) {
	  return -(_sqrt(1 - p * p) - 1);
	});

	_insertEase("Sine", function (p) {
	  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
	});

	_insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

	_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
	  config: function config(steps, immediateStart) {
	    if (steps === void 0) {
	      steps = 1;
	    }

	    var p1 = 1 / steps,
	        p2 = steps + (immediateStart ? 0 : 1),
	        p3 = immediateStart ? 1 : 0,
	        max = 1 - _tinyNum;
	    return function (p) {
	      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;
	    };
	  }
	};
	_defaults.ease = _easeMap["quad.out"];

	_forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
	  return _callbackNames += name + "," + name + "Params,";
	});
	/*
	 * --------------------------------------------------------------------------------------
	 * CACHE
	 * --------------------------------------------------------------------------------------
	 */


	var GSCache = function GSCache(target, harness) {
	  this.id = _gsID++;
	  target._gsap = this;
	  this.target = target;
	  this.harness = harness;
	  this.get = harness ? harness.get : _getProperty;
	  this.set = harness ? harness.getSetter : _getSetter;
	};
	/*
	 * --------------------------------------------------------------------------------------
	 * ANIMATION
	 * --------------------------------------------------------------------------------------
	 */

	var Animation = /*#__PURE__*/function () {
	  function Animation(vars) {
	    this.vars = vars;
	    this._delay = +vars.delay || 0;

	    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
	      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
	      this._rDelay = vars.repeatDelay || 0;
	      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
	    }

	    this._ts = 1;

	    _setDuration(this, +vars.duration, 1, 1);

	    this.data = vars.data;

	    if (_context) {
	      this._ctx = _context;

	      _context.data.push(this);
	    }

	    _tickerActive || _ticker.wake();
	  }

	  var _proto = Animation.prototype;

	  _proto.delay = function delay(value) {
	    if (value || value === 0) {
	      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
	      this._delay = value;
	      return this;
	    }

	    return this._delay;
	  };

	  _proto.duration = function duration(value) {
	    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
	  };

	  _proto.totalDuration = function totalDuration(value) {
	    if (!arguments.length) {
	      return this._tDur;
	    }

	    this._dirty = 0;
	    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
	  };

	  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
	    _wake();

	    if (!arguments.length) {
	      return this._tTime;
	    }

	    var parent = this._dp;

	    if (parent && parent.smoothChildTiming && this._ts) {
	      _alignPlayhead(this, _totalTime);

	      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
	      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

	      while (parent && parent.parent) {
	        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
	          parent.totalTime(parent._tTime, true);
	        }

	        parent = parent.parent;
	      }

	      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
	        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
	        _addToTimeline(this._dp, this, this._start - this._delay);
	      }
	    }

	    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
	      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
	      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
	      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
	      //   this._lock = 1;

	      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
	      //}

	    }

	    return this;
	  };

	  _proto.time = function time(value, suppressEvents) {
	    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
	  };

	  _proto.totalProgress = function totalProgress(value, suppressEvents) {
	    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() >= 0 && this._initted ? 1 : 0;
	  };

	  _proto.progress = function progress(value, suppressEvents) {
	    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;
	  };

	  _proto.iteration = function iteration(value, suppressEvents) {
	    var cycleDuration = this.duration() + this._rDelay;

	    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
	  } // potential future addition:
	  // isPlayingBackwards() {
	  // 	let animation = this,
	  // 		orientation = 1; // 1 = forward, -1 = backward
	  // 	while (animation) {
	  // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
	  // 		animation = animation.parent;
	  // 	}
	  // 	return orientation < 0;
	  // }
	  ;

	  _proto.timeScale = function timeScale(value, suppressEvents) {
	    if (!arguments.length) {
	      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
	    }

	    if (this._rts === value) {
	      return this;
	    }

	    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
	    // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
	    //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
	    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

	    this._rts = +value || 0;
	    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

	    this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);

	    _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.


	    return _recacheAncestors(this);
	  };

	  _proto.paused = function paused(value) {
	    if (!arguments.length) {
	      return this._ps;
	    } // possible future addition - if an animation is removed from its parent and then .restart() or .play() or .resume() is called, perhaps we should force it back into the globalTimeline but be careful because what if it's already at its end? We don't want it to just persist forever and not get released for GC.
	    // !this.parent && !value && this._tTime < this._tDur && this !== _globalTimeline && _globalTimeline.add(this);


	    if (this._ps !== value) {
	      this._ps = value;

	      if (value) {
	        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

	        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
	      } else {
	        _wake();

	        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

	        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
	      }
	    }

	    return this;
	  };

	  _proto.startTime = function startTime(value) {
	    if (arguments.length) {
	      this._start = value;
	      var parent = this.parent || this._dp;
	      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
	      return this;
	    }

	    return this._start;
	  };

	  _proto.endTime = function endTime(includeRepeats) {
	    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
	  };

	  _proto.rawTime = function rawTime(wrapRepeats) {
	    var parent = this.parent || this._dp; // _dp = detached parent

	    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
	  };

	  _proto.revert = function revert(config) {
	    if (config === void 0) {
	      config = _revertConfig;
	    }

	    var prevIsReverting = _reverting$1;
	    _reverting$1 = config;

	    if (this._initted || this._startAt) {
	      this.timeline && this.timeline.revert(config);
	      this.totalTime(-0.01, config.suppressEvents);
	    }

	    this.data !== "nested" && config.kill !== false && this.kill();
	    _reverting$1 = prevIsReverting;
	    return this;
	  };

	  _proto.globalTime = function globalTime(rawTime) {
	    var animation = this,
	        time = arguments.length ? rawTime : animation.rawTime();

	    while (animation) {
	      time = animation._start + time / (Math.abs(animation._ts) || 1);
	      animation = animation._dp;
	    }

	    return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
	  };

	  _proto.repeat = function repeat(value) {
	    if (arguments.length) {
	      this._repeat = value === Infinity ? -2 : value;
	      return _onUpdateTotalDuration(this);
	    }

	    return this._repeat === -2 ? Infinity : this._repeat;
	  };

	  _proto.repeatDelay = function repeatDelay(value) {
	    if (arguments.length) {
	      var time = this._time;
	      this._rDelay = value;

	      _onUpdateTotalDuration(this);

	      return time ? this.time(time) : this;
	    }

	    return this._rDelay;
	  };

	  _proto.yoyo = function yoyo(value) {
	    if (arguments.length) {
	      this._yoyo = value;
	      return this;
	    }

	    return this._yoyo;
	  };

	  _proto.seek = function seek(position, suppressEvents) {
	    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));
	  };

	  _proto.restart = function restart(includeDelay, suppressEvents) {
	    this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
	    this._dur || (this._zTime = -_tinyNum); // ensures onComplete fires on a zero-duration animation that gets restarted.

	    return this;
	  };

	  _proto.play = function play(from, suppressEvents) {
	    from != null && this.seek(from, suppressEvents);
	    return this.reversed(false).paused(false);
	  };

	  _proto.reverse = function reverse(from, suppressEvents) {
	    from != null && this.seek(from || this.totalDuration(), suppressEvents);
	    return this.reversed(true).paused(false);
	  };

	  _proto.pause = function pause(atTime, suppressEvents) {
	    atTime != null && this.seek(atTime, suppressEvents);
	    return this.paused(true);
	  };

	  _proto.resume = function resume() {
	    return this.paused(false);
	  };

	  _proto.reversed = function reversed(value) {
	    if (arguments.length) {
	      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

	      return this;
	    }

	    return this._rts < 0;
	  };

	  _proto.invalidate = function invalidate() {
	    this._initted = this._act = 0;
	    this._zTime = -_tinyNum;
	    return this;
	  };

	  _proto.isActive = function isActive() {
	    var parent = this.parent || this._dp,
	        start = this._start,
	        rawTime;
	    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
	  };

	  _proto.eventCallback = function eventCallback(type, callback, params) {
	    var vars = this.vars;

	    if (arguments.length > 1) {
	      if (!callback) {
	        delete vars[type];
	      } else {
	        vars[type] = callback;
	        params && (vars[type + "Params"] = params);
	        type === "onUpdate" && (this._onUpdate = callback);
	      }

	      return this;
	    }

	    return vars[type];
	  };

	  _proto.then = function then(onFulfilled) {
	    var self = this;
	    return new Promise(function (resolve) {
	      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,
	          _resolve = function _resolve() {
	        var _then = self.then;
	        self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

	        _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
	        resolve(f);
	        self.then = _then;
	      };

	      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
	        _resolve();
	      } else {
	        self._prom = _resolve;
	      }
	    });
	  };

	  _proto.kill = function kill() {
	    _interrupt(this);
	  };

	  return Animation;
	}();

	_setDefaults(Animation.prototype, {
	  _time: 0,
	  _start: 0,
	  _end: 0,
	  _tTime: 0,
	  _tDur: 0,
	  _dirty: 0,
	  _repeat: 0,
	  _yoyo: false,
	  parent: null,
	  _initted: false,
	  _rDelay: 0,
	  _ts: 1,
	  _dp: 0,
	  ratio: 0,
	  _zTime: -_tinyNum,
	  _prom: 0,
	  _ps: false,
	  _rts: 1
	});
	/*
	 * -------------------------------------------------
	 * TIMELINE
	 * -------------------------------------------------
	 */


	var Timeline = /*#__PURE__*/function (_Animation) {
	  _inheritsLoose(Timeline, _Animation);

	  function Timeline(vars, position) {
	    var _this;

	    if (vars === void 0) {
	      vars = {};
	    }

	    _this = _Animation.call(this, vars) || this;
	    _this.labels = {};
	    _this.smoothChildTiming = !!vars.smoothChildTiming;
	    _this.autoRemoveChildren = !!vars.autoRemoveChildren;
	    _this._sort = _isNotFalse(vars.sortChildren);
	    _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
	    vars.reversed && _this.reverse();
	    vars.paused && _this.paused(true);
	    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
	    return _this;
	  }

	  var _proto2 = Timeline.prototype;

	  _proto2.to = function to(targets, vars, position) {
	    _createTweenType(0, arguments, this);

	    return this;
	  };

	  _proto2.from = function from(targets, vars, position) {
	    _createTweenType(1, arguments, this);

	    return this;
	  };

	  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
	    _createTweenType(2, arguments, this);

	    return this;
	  };

	  _proto2.set = function set(targets, vars, position) {
	    vars.duration = 0;
	    vars.parent = this;
	    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
	    vars.immediateRender = !!vars.immediateRender;
	    new Tween(targets, vars, _parsePosition(this, position), 1);
	    return this;
	  };

	  _proto2.call = function call(callback, params, position) {
	    return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
	  } //ONLY for backward compatibility! Maybe delete?
	  ;

	  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
	    vars.duration = duration;
	    vars.stagger = vars.stagger || stagger;
	    vars.onComplete = onCompleteAll;
	    vars.onCompleteParams = onCompleteAllParams;
	    vars.parent = this;
	    new Tween(targets, vars, _parsePosition(this, position));
	    return this;
	  };

	  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
	    vars.runBackwards = 1;
	    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
	    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
	  };

	  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
	    toVars.startAt = fromVars;
	    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
	    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
	  };

	  _proto2.render = function render(totalTime, suppressEvents, force) {
	    var prevTime = this._time,
	        tDur = this._dirty ? this.totalDuration() : this._tDur,
	        dur = this._dur,
	        tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
	        // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
	    crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
	        time,
	        child,
	        next,
	        iteration,
	        cycleDuration,
	        prevPaused,
	        pauseTween,
	        timeScale,
	        prevStart,
	        prevIteration,
	        yoyo,
	        isYoyo;
	    this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

	    if (tTime !== this._tTime || force || crossingStart) {
	      if (prevTime !== this._time && dur) {
	        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
	        tTime += this._time - prevTime;
	        totalTime += this._time - prevTime;
	      }

	      time = tTime;
	      prevStart = this._start;
	      timeScale = this._ts;
	      prevPaused = !timeScale;

	      if (crossingStart) {
	        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

	        (totalTime || !suppressEvents) && (this._zTime = totalTime);
	      }

	      if (this._repeat) {
	        //adjust the time for repeats and yoyos
	        yoyo = this._yoyo;
	        cycleDuration = dur + this._rDelay;

	        if (this._repeat < -1 && totalTime < 0) {
	          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
	        }

	        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

	        if (tTime === tDur) {
	          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
	          iteration = this._repeat;
	          time = dur;
	        } else {
	          prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

	          iteration = ~~prevIteration;

	          if (iteration && iteration === prevIteration) {
	            time = dur;
	            iteration--;
	          }

	          time > dur && (time = dur);
	        }

	        prevIteration = _animationCycle(this._tTime, cycleDuration);
	        !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

	        if (yoyo && iteration & 1) {
	          time = dur - time;
	          isYoyo = 1;
	        }
	        /*
	        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
	        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
	        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
	        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
	        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
	        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
	        */


	        if (iteration !== prevIteration && !this._lock) {
	          var rewinding = yoyo && prevIteration & 1,
	              doesWrap = rewinding === (yoyo && iteration & 1);
	          iteration < prevIteration && (rewinding = !rewinding);
	          prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.

	          this._lock = 1;
	          this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
	          this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

	          !suppressEvents && this.parent && _callback(this, "onRepeat");
	          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

	          if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
	            // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
	            return this;
	          }

	          dur = this._dur; // in case the duration changed in the onRepeat

	          tDur = this._tDur;

	          if (doesWrap) {
	            this._lock = 2;
	            prevTime = rewinding ? dur : -0.0001;
	            this.render(prevTime, true);
	            this.vars.repeatRefresh && !isYoyo && this.invalidate();
	          }

	          this._lock = 0;

	          if (!this._ts && !prevPaused) {
	            return this;
	          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


	          _propagateYoyoEase(this, isYoyo);
	        }
	      }

	      if (this._hasPause && !this._forcing && this._lock < 2) {
	        pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

	        if (pauseTween) {
	          tTime -= time - (time = pauseTween._start);
	        }
	      }

	      this._tTime = tTime;
	      this._time = time;
	      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

	      if (!this._initted) {
	        this._onUpdate = this.vars.onUpdate;
	        this._initted = 1;
	        this._zTime = totalTime;
	        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
	      }

	      if (!prevTime && time && !suppressEvents && !iteration) {
	        _callback(this, "onStart");

	        if (this._tTime !== tTime) {
	          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
	          return this;
	        }
	      }

	      if (time >= prevTime && totalTime >= 0) {
	        child = this._first;

	        while (child) {
	          next = child._next;

	          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
	            if (child.parent !== this) {
	              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
	              return this.render(totalTime, suppressEvents, force);
	            }

	            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

	            if (time !== this._time || !this._ts && !prevPaused) {
	              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
	              pauseTween = 0;
	              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that the next time render() is called it'll be forced (to render any remaining children)

	              break;
	            }
	          }

	          child = next;
	        }
	      } else {
	        child = this._last;
	        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

	        while (child) {
	          next = child._prev;

	          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
	            if (child.parent !== this) {
	              // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
	              return this.render(totalTime, suppressEvents, force);
	            }

	            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting$1 && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

	            if (time !== this._time || !this._ts && !prevPaused) {
	              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
	              pauseTween = 0;
	              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

	              break;
	            }
	          }

	          child = next;
	        }
	      }

	      if (pauseTween && !suppressEvents) {
	        this.pause();
	        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

	        if (this._ts) {
	          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
	          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

	          _setEnd(this);

	          return this.render(totalTime, suppressEvents, force);
	        }
	      }

	      this._onUpdate && !suppressEvents && _callback(this, "onUpdate", true);
	      if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
	        // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
	        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

	        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
	          _callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

	          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
	        }
	      }
	    }

	    return this;
	  };

	  _proto2.add = function add(child, position) {
	    var _this2 = this;

	    _isNumber(position) || (position = _parsePosition(this, position, child));

	    if (!(child instanceof Animation)) {
	      if (_isArray(child)) {
	        child.forEach(function (obj) {
	          return _this2.add(obj, position);
	        });
	        return this;
	      }

	      if (_isString(child)) {
	        return this.addLabel(child, position);
	      }

	      if (_isFunction(child)) {
	        child = Tween.delayedCall(0, child);
	      } else {
	        return this;
	      }
	    }

	    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
	  };

	  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
	    if (nested === void 0) {
	      nested = true;
	    }

	    if (tweens === void 0) {
	      tweens = true;
	    }

	    if (timelines === void 0) {
	      timelines = true;
	    }

	    if (ignoreBeforeTime === void 0) {
	      ignoreBeforeTime = -_bigNum$1;
	    }

	    var a = [],
	        child = this._first;

	    while (child) {
	      if (child._start >= ignoreBeforeTime) {
	        if (child instanceof Tween) {
	          tweens && a.push(child);
	        } else {
	          timelines && a.push(child);
	          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
	        }
	      }

	      child = child._next;
	    }

	    return a;
	  };

	  _proto2.getById = function getById(id) {
	    var animations = this.getChildren(1, 1, 1),
	        i = animations.length;

	    while (i--) {
	      if (animations[i].vars.id === id) {
	        return animations[i];
	      }
	    }
	  };

	  _proto2.remove = function remove(child) {
	    if (_isString(child)) {
	      return this.removeLabel(child);
	    }

	    if (_isFunction(child)) {
	      return this.killTweensOf(child);
	    }

	    child.parent === this && _removeLinkedListItem(this, child);

	    if (child === this._recent) {
	      this._recent = this._last;
	    }

	    return _uncache(this);
	  };

	  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
	    if (!arguments.length) {
	      return this._tTime;
	    }

	    this._forcing = 1;

	    if (!this._dp && this._ts) {
	      //special case for the global timeline (or any other that has no parent or detached parent).
	      this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
	    }

	    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

	    this._forcing = 0;
	    return this;
	  };

	  _proto2.addLabel = function addLabel(label, position) {
	    this.labels[label] = _parsePosition(this, position);
	    return this;
	  };

	  _proto2.removeLabel = function removeLabel(label) {
	    delete this.labels[label];
	    return this;
	  };

	  _proto2.addPause = function addPause(position, callback, params) {
	    var t = Tween.delayedCall(0, callback || _emptyFunc, params);
	    t.data = "isPause";
	    this._hasPause = 1;
	    return _addToTimeline(this, t, _parsePosition(this, position));
	  };

	  _proto2.removePause = function removePause(position) {
	    var child = this._first;
	    position = _parsePosition(this, position);

	    while (child) {
	      if (child._start === position && child.data === "isPause") {
	        _removeFromParent(child);
	      }

	      child = child._next;
	    }
	  };

	  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
	    var tweens = this.getTweensOf(targets, onlyActive),
	        i = tweens.length;

	    while (i--) {
	      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
	    }

	    return this;
	  };

	  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
	    var a = [],
	        parsedTargets = toArray(targets),
	        child = this._first,
	        isGlobalTime = _isNumber(onlyActive),
	        // a number is interpreted as a global time. If the animation spans
	    children;

	    while (child) {
	      if (child instanceof Tween) {
	        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
	          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
	          a.push(child);
	        }
	      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
	        a.push.apply(a, children);
	      }

	      child = child._next;
	    }

	    return a;
	  } // potential future feature - targets() on timelines
	  // targets() {
	  // 	let result = [];
	  // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
	  // 	return result.filter((v, i) => result.indexOf(v) === i);
	  // }
	  ;

	  _proto2.tweenTo = function tweenTo(position, vars) {
	    vars = vars || {};

	    var tl = this,
	        endTime = _parsePosition(tl, position),
	        _vars = vars,
	        startAt = _vars.startAt,
	        _onStart = _vars.onStart,
	        onStartParams = _vars.onStartParams,
	        immediateRender = _vars.immediateRender,
	        initted,
	        tween = Tween.to(tl, _setDefaults({
	      ease: vars.ease || "none",
	      lazy: false,
	      immediateRender: false,
	      time: endTime,
	      overwrite: "auto",
	      duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
	      onStart: function onStart() {
	        tl.pause();

	        if (!initted) {
	          var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
	          tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
	          initted = 1;
	        }

	        _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
	      }
	    }, vars));

	    return immediateRender ? tween.render(0) : tween;
	  };

	  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
	    return this.tweenTo(toPosition, _setDefaults({
	      startAt: {
	        time: _parsePosition(this, fromPosition)
	      }
	    }, vars));
	  };

	  _proto2.recent = function recent() {
	    return this._recent;
	  };

	  _proto2.nextLabel = function nextLabel(afterTime) {
	    if (afterTime === void 0) {
	      afterTime = this._time;
	    }

	    return _getLabelInDirection(this, _parsePosition(this, afterTime));
	  };

	  _proto2.previousLabel = function previousLabel(beforeTime) {
	    if (beforeTime === void 0) {
	      beforeTime = this._time;
	    }

	    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);
	  };

	  _proto2.currentLabel = function currentLabel(value) {
	    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
	  };

	  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
	    if (ignoreBeforeTime === void 0) {
	      ignoreBeforeTime = 0;
	    }

	    var child = this._first,
	        labels = this.labels,
	        p;

	    while (child) {
	      if (child._start >= ignoreBeforeTime) {
	        child._start += amount;
	        child._end += amount;
	      }

	      child = child._next;
	    }

	    if (adjustLabels) {
	      for (p in labels) {
	        if (labels[p] >= ignoreBeforeTime) {
	          labels[p] += amount;
	        }
	      }
	    }

	    return _uncache(this);
	  };

	  _proto2.invalidate = function invalidate(soft) {
	    var child = this._first;
	    this._lock = 0;

	    while (child) {
	      child.invalidate(soft);
	      child = child._next;
	    }

	    return _Animation.prototype.invalidate.call(this, soft);
	  };

	  _proto2.clear = function clear(includeLabels) {
	    if (includeLabels === void 0) {
	      includeLabels = true;
	    }

	    var child = this._first,
	        next;

	    while (child) {
	      next = child._next;
	      this.remove(child);
	      child = next;
	    }

	    this._dp && (this._time = this._tTime = this._pTime = 0);
	    includeLabels && (this.labels = {});
	    return _uncache(this);
	  };

	  _proto2.totalDuration = function totalDuration(value) {
	    var max = 0,
	        self = this,
	        child = self._last,
	        prevStart = _bigNum$1,
	        prev,
	        start,
	        parent;

	    if (arguments.length) {
	      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
	    }

	    if (self._dirty) {
	      parent = self.parent;

	      while (child) {
	        prev = child._prev; //record it here in case the tween changes position in the sequence...

	        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

	        start = child._start;

	        if (start > prevStart && self._sort && child._ts && !self._lock) {
	          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
	          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

	          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
	        } else {
	          prevStart = start;
	        }

	        if (start < 0 && child._ts) {
	          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
	          max -= start;

	          if (!parent && !self._dp || parent && parent.smoothChildTiming) {
	            self._start += start / self._ts;
	            self._time -= start;
	            self._tTime -= start;
	          }

	          self.shiftChildren(-start, false, -1e999);
	          prevStart = 0;
	        }

	        child._end > max && child._ts && (max = child._end);
	        child = prev;
	      }

	      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

	      self._dirty = 0;
	    }

	    return self._tDur;
	  };

	  Timeline.updateRoot = function updateRoot(time) {
	    if (_globalTimeline._ts) {
	      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

	      _lastRenderedFrame = _ticker.frame;
	    }

	    if (_ticker.frame >= _nextGCFrame) {
	      _nextGCFrame += _config.autoSleep || 120;
	      var child = _globalTimeline._first;
	      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
	        while (child && !child._ts) {
	          child = child._next;
	        }

	        child || _ticker.sleep();
	      }
	    }
	  };

	  return Timeline;
	}(Animation);

	_setDefaults(Timeline.prototype, {
	  _lock: 0,
	  _hasPause: 0,
	  _forcing: 0
	});

	var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
	  //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
	  var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
	      index = 0,
	      matchIndex = 0,
	      result,
	      startNums,
	      color,
	      endNum,
	      chunk,
	      startNum,
	      hasRandom,
	      a;
	  pt.b = start;
	  pt.e = end;
	  start += ""; //ensure values are strings

	  end += "";

	  if (hasRandom = ~end.indexOf("random(")) {
	    end = _replaceRandom(end);
	  }

	  if (stringFilter) {
	    a = [start, end];
	    stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

	    start = a[0];
	    end = a[1];
	  }

	  startNums = start.match(_complexStringNumExp) || [];

	  while (result = _complexStringNumExp.exec(end)) {
	    endNum = result[0];
	    chunk = end.substring(index, result.index);

	    if (color) {
	      color = (color + 1) % 5;
	    } else if (chunk.substr(-5) === "rgba(") {
	      color = 1;
	    }

	    if (endNum !== startNums[matchIndex++]) {
	      startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

	      pt._pt = {
	        _next: pt._pt,
	        p: chunk || matchIndex === 1 ? chunk : ",",
	        //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
	        s: startNum,
	        c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
	        m: color && color < 4 ? Math.round : 0
	      };
	      index = _complexStringNumExp.lastIndex;
	    }
	  }

	  pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

	  pt.fp = funcParam;

	  if (_relExp.test(end) || hasRandom) {
	    pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
	  }

	  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

	  return pt;
	},
	    _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
	  _isFunction(end) && (end = end(index || 0, target, targets));
	  var currentValue = target[prop],
	      parsedStart = start !== "get" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
	      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
	      pt;

	  if (_isString(end)) {
	    if (~end.indexOf("random(")) {
	      end = _replaceRandom(end);
	    }

	    if (end.charAt(1) === "=") {
	      pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

	      if (pt || pt === 0) {
	        // to avoid isNaN, like if someone passes in a value like "!= whatever"
	        end = pt;
	      }
	    }
	  }

	  if (!optional || parsedStart !== end || _forceAllPropTweens) {
	    if (!isNaN(parsedStart * end) && end !== "") {
	      // fun fact: any number multiplied by "" is evaluated as the number 0!
	      pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
	      funcParam && (pt.fp = funcParam);
	      modifier && pt.modifier(modifier, this, target);
	      return this._pt = pt;
	    }

	    !currentValue && !(prop in target) && _missingPlugin(prop, end);
	    return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
	  }
	},
	    //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
	_processVars = function _processVars(vars, index, target, targets, tween) {
	  _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

	  if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
	    return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
	  }

	  var copy = {},
	      p;

	  for (p in vars) {
	    copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
	  }

	  return copy;
	},
	    _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
	  var plugin, pt, ptLookup, i;

	  if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
	    tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

	    if (tween !== _quickTween) {
	      ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

	      i = plugin._props.length;

	      while (i--) {
	        ptLookup[plugin._props[i]] = pt;
	      }
	    }
	  }

	  return plugin;
	},
	    _overwritingTween,
	    //store a reference temporarily so we can avoid overwriting itself.
	_forceAllPropTweens,
	    _initTween = function _initTween(tween, time, tTime) {
	  var vars = tween.vars,
	      ease = vars.ease,
	      startAt = vars.startAt,
	      immediateRender = vars.immediateRender,
	      lazy = vars.lazy,
	      onUpdate = vars.onUpdate,
	      runBackwards = vars.runBackwards,
	      yoyoEase = vars.yoyoEase,
	      keyframes = vars.keyframes,
	      autoRevert = vars.autoRevert,
	      dur = tween._dur,
	      prevStartAt = tween._startAt,
	      targets = tween._targets,
	      parent = tween.parent,
	      fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
	      autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites,
	      tl = tween.timeline,
	      cleanVars,
	      i,
	      p,
	      pt,
	      target,
	      hasPriority,
	      gsData,
	      harness,
	      plugin,
	      ptLookup,
	      index,
	      harnessVars,
	      overwritten;
	  tl && (!keyframes || !ease) && (ease = "none");
	  tween._ease = _parseEase(ease, _defaults.ease);
	  tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;

	  if (yoyoEase && tween._yoyo && !tween._repeat) {
	    //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
	    yoyoEase = tween._yEase;
	    tween._yEase = tween._ease;
	    tween._ease = yoyoEase;
	  }

	  tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

	  if (!tl || keyframes && !vars.stagger) {
	    //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
	    harness = targets[0] ? _getCache(targets[0]).harness : 0;
	    harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

	    cleanVars = _copyExcluding(vars, _reservedProps);

	    if (prevStartAt) {
	      prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

	      time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
	      // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

	      prevStartAt._lazy = 0;
	    }

	    if (startAt) {
	      _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({
	        data: "isStart",
	        overwrite: false,
	        parent: parent,
	        immediateRender: true,
	        lazy: !prevStartAt && _isNotFalse(lazy),
	        startAt: null,
	        delay: 0,
	        onUpdate: onUpdate && function () {
	          return _callback(tween, "onUpdate");
	        },
	        stagger: 0
	      }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


	      tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

	      tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

	      time < 0 && (_reverting$1 || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

	      if (immediateRender) {
	        if (dur && time <= 0 && tTime <= 0) {
	          // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
	          time && (tween._zTime = time);
	          return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
	        }
	      }
	    } else if (runBackwards && dur) {
	      //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
	      if (!prevStartAt) {
	        time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

	        p = _setDefaults({
	          overwrite: false,
	          data: "isFromStart",
	          //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
	          lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
	          immediateRender: immediateRender,
	          //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
	          stagger: 0,
	          parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})

	        }, cleanVars);
	        harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

	        _removeFromParent(tween._startAt = Tween.set(targets, p));

	        tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

	        tween._startAt._sat = tween; // used in globalTime()

	        time < 0 && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
	        tween._zTime = time;

	        if (!immediateRender) {
	          _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded

	        } else if (!time) {
	          return;
	        }
	      }
	    }

	    tween._pt = tween._ptCache = 0;
	    lazy = dur && _isNotFalse(lazy) || lazy && !dur;

	    for (i = 0; i < targets.length; i++) {
	      target = targets[i];
	      gsData = target._gsap || _harness(targets)[i]._gsap;
	      tween._ptLookup[i] = ptLookup = {};
	      _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

	      index = fullTargets === targets ? i : fullTargets.indexOf(target);

	      if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
	        tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

	        plugin._props.forEach(function (name) {
	          ptLookup[name] = pt;
	        });

	        plugin.priority && (hasPriority = 1);
	      }

	      if (!harness || harnessVars) {
	        for (p in cleanVars) {
	          if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
	            plugin.priority && (hasPriority = 1);
	          } else {
	            ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
	          }
	        }
	      }

	      tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

	      if (autoOverwrite && tween._pt) {
	        _overwritingTween = tween;

	        _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!


	        overwritten = !tween.parent;
	        _overwritingTween = 0;
	      }

	      tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
	    }

	    hasPriority && _sortPropTweensByPriority(tween);
	    tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
	  }

	  tween._onUpdate = onUpdate;
	  tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

	  keyframes && time <= 0 && tl.render(_bigNum$1, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
	},
	    _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time, skipRecursion) {
	  var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
	      pt,
	      rootPT,
	      lookup,
	      i;

	  if (!ptCache) {
	    ptCache = tween._ptCache[property] = [];
	    lookup = tween._ptLookup;
	    i = tween._targets.length;

	    while (i--) {
	      pt = lookup[i][property];

	      if (pt && pt.d && pt.d._pt) {
	        // it's a plugin, so find the nested PropTween
	        pt = pt.d._pt;

	        while (pt && pt.p !== property && pt.fp !== property) {
	          // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
	          pt = pt._next;
	        }
	      }

	      if (!pt) {
	        // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
	        // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
	        _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

	        tween.vars[property] = "+=0";

	        _initTween(tween, time);

	        _forceAllPropTweens = 0;
	        return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
	      }

	      ptCache.push(pt);
	    }
	  }

	  i = ptCache.length;

	  while (i--) {
	    rootPT = ptCache[i];
	    pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

	    pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
	    pt.c = value - pt.s;
	    rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

	    rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
	  }
	},
	    _addAliasesToVars = function _addAliasesToVars(targets, vars) {
	  var harness = targets[0] ? _getCache(targets[0]).harness : 0,
	      propertyAliases = harness && harness.aliases,
	      copy,
	      p,
	      i,
	      aliases;

	  if (!propertyAliases) {
	    return vars;
	  }

	  copy = _merge({}, vars);

	  for (p in propertyAliases) {
	    if (p in copy) {
	      aliases = propertyAliases[p].split(",");
	      i = aliases.length;

	      while (i--) {
	        copy[aliases[i]] = copy[p];
	      }
	    }
	  }

	  return copy;
	},
	    // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
	_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
	  var ease = obj.ease || easeEach || "power1.inOut",
	      p,
	      a;

	  if (_isArray(obj)) {
	    a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

	    obj.forEach(function (value, i) {
	      return a.push({
	        t: i / (obj.length - 1) * 100,
	        v: value,
	        e: ease
	      });
	    });
	  } else {
	    for (p in obj) {
	      a = allProps[p] || (allProps[p] = []);
	      p === "ease" || a.push({
	        t: parseFloat(prop),
	        v: obj[p],
	        e: ease
	      });
	    }
	  }
	},
	    _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
	  return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
	},
	    _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
	    _staggerPropsToSkip = {};

	_forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
	  return _staggerPropsToSkip[name] = 1;
	});
	/*
	 * --------------------------------------------------------------------------------------
	 * TWEEN
	 * --------------------------------------------------------------------------------------
	 */


	var Tween = /*#__PURE__*/function (_Animation2) {
	  _inheritsLoose(Tween, _Animation2);

	  function Tween(targets, vars, position, skipInherit) {
	    var _this3;

	    if (typeof vars === "number") {
	      position.duration = vars;
	      vars = position;
	      position = null;
	    }

	    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
	    var _this3$vars = _this3.vars,
	        duration = _this3$vars.duration,
	        delay = _this3$vars.delay,
	        immediateRender = _this3$vars.immediateRender,
	        stagger = _this3$vars.stagger,
	        overwrite = _this3$vars.overwrite,
	        keyframes = _this3$vars.keyframes,
	        defaults = _this3$vars.defaults,
	        scrollTrigger = _this3$vars.scrollTrigger,
	        yoyoEase = _this3$vars.yoyoEase,
	        parent = vars.parent || _globalTimeline,
	        parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
	        tl,
	        i,
	        copy,
	        l,
	        p,
	        curTarget,
	        staggerFunc,
	        staggerVarsToMerge;
	    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
	    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

	    _this3._overwrite = overwrite;

	    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
	      vars = _this3.vars;
	      tl = _this3.timeline = new Timeline({
	        data: "nested",
	        defaults: defaults || {},
	        targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
	      }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

	      tl.kill();
	      tl.parent = tl._dp = _assertThisInitialized(_this3);
	      tl._start = 0;

	      if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
	        l = parsedTargets.length;
	        staggerFunc = stagger && distribute(stagger);

	        if (_isObject(stagger)) {
	          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
	          for (p in stagger) {
	            if (~_staggerTweenProps.indexOf(p)) {
	              staggerVarsToMerge || (staggerVarsToMerge = {});
	              staggerVarsToMerge[p] = stagger[p];
	            }
	          }
	        }

	        for (i = 0; i < l; i++) {
	          copy = _copyExcluding(vars, _staggerPropsToSkip);
	          copy.stagger = 0;
	          yoyoEase && (copy.yoyoEase = yoyoEase);
	          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
	          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

	          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
	          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

	          if (!stagger && l === 1 && copy.delay) {
	            // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
	            _this3._delay = delay = copy.delay;
	            _this3._start += delay;
	            copy.delay = 0;
	          }

	          tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
	          tl._ease = _easeMap.none;
	        }

	        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
	      } else if (keyframes) {
	        _inheritDefaults(_setDefaults(tl.vars.defaults, {
	          ease: "none"
	        }));

	        tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
	        var time = 0,
	            a,
	            kf,
	            v;

	        if (_isArray(keyframes)) {
	          keyframes.forEach(function (frame) {
	            return tl.to(parsedTargets, frame, ">");
	          });
	          tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
	        } else {
	          copy = {};

	          for (p in keyframes) {
	            p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
	          }

	          for (p in copy) {
	            a = copy[p].sort(function (a, b) {
	              return a.t - b.t;
	            });
	            time = 0;

	            for (i = 0; i < a.length; i++) {
	              kf = a[i];
	              v = {
	                ease: kf.e,
	                duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
	              };
	              v[p] = kf.v;
	              tl.to(parsedTargets, v, time);
	              time += v.duration;
	            }
	          }

	          tl.duration() < duration && tl.to({}, {
	            duration: duration - tl.duration()
	          }); // in case keyframes didn't go to 100%
	        }
	      }

	      duration || _this3.duration(duration = tl.duration());
	    } else {
	      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
	    }

	    if (overwrite === true && !_suppressOverwrites) {
	      _overwritingTween = _assertThisInitialized(_this3);

	      _globalTimeline.killTweensOf(parsedTargets);

	      _overwritingTween = 0;
	    }

	    _addToTimeline(parent, _assertThisInitialized(_this3), position);

	    vars.reversed && _this3.reverse();
	    vars.paused && _this3.paused(true);

	    if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
	      _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

	      _this3.render(Math.max(0, -delay) || 0); //in case delay is negative

	    }

	    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
	    return _this3;
	  }

	  var _proto3 = Tween.prototype;

	  _proto3.render = function render(totalTime, suppressEvents, force) {
	    var prevTime = this._time,
	        tDur = this._tDur,
	        dur = this._dur,
	        isNegative = totalTime < 0,
	        tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
	        time,
	        pt,
	        iteration,
	        cycleDuration,
	        prevIteration,
	        isYoyo,
	        ratio,
	        timeline,
	        yoyoEase;

	    if (!dur) {
	      _renderZeroDurationTween(this, totalTime, suppressEvents, force);
	    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative || this._lazy) {
	      // this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
	      time = tTime;
	      timeline = this.timeline;

	      if (this._repeat) {
	        //adjust the time for repeats and yoyos
	        cycleDuration = dur + this._rDelay;

	        if (this._repeat < -1 && isNegative) {
	          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
	        }

	        time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

	        if (tTime === tDur) {
	          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
	          iteration = this._repeat;
	          time = dur;
	        } else {
	          prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

	          iteration = ~~prevIteration;

	          if (iteration && iteration === prevIteration) {
	            time = dur;
	            iteration--;
	          } else if (time > dur) {
	            time = dur;
	          }
	        }

	        isYoyo = this._yoyo && iteration & 1;

	        if (isYoyo) {
	          yoyoEase = this._yEase;
	          time = dur - time;
	        }

	        prevIteration = _animationCycle(this._tTime, cycleDuration);

	        if (time === prevTime && !force && this._initted && iteration === prevIteration) {
	          //could be during the repeatDelay part. No need to render and fire callbacks.
	          this._tTime = tTime;
	          return this;
	        }

	        if (iteration !== prevIteration) {
	          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

	          if (this.vars.repeatRefresh && !isYoyo && !this._lock && time !== cycleDuration && this._initted) {
	            // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
	            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

	            this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
	          }
	        }
	      }

	      if (!this._initted) {
	        if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
	          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

	          return this;
	        }

	        if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) {
	          // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
	          return this;
	        }

	        if (dur !== this._dur) {
	          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
	          return this.render(totalTime, suppressEvents, force);
	        }
	      }

	      this._tTime = tTime;
	      this._time = time;

	      if (!this._act && this._ts) {
	        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

	        this._lazy = 0;
	      }

	      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

	      if (this._from) {
	        this.ratio = ratio = 1 - ratio;
	      }

	      if (time && !prevTime && !suppressEvents && !iteration) {
	        _callback(this, "onStart");

	        if (this._tTime !== tTime) {
	          // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
	          return this;
	        }
	      }

	      pt = this._pt;

	      while (pt) {
	        pt.r(ratio, pt.d);
	        pt = pt._next;
	      }

	      timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

	      if (this._onUpdate && !suppressEvents) {
	        isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

	        _callback(this, "onUpdate");
	      }

	      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, "onRepeat");

	      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
	        isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
	        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

	        if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
	          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
	          _callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

	          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
	        }
	      }
	    }

	    return this;
	  };

	  _proto3.targets = function targets() {
	    return this._targets;
	  };

	  _proto3.invalidate = function invalidate(soft) {
	    // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
	    (!soft || !this.vars.runBackwards) && (this._startAt = 0);
	    this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
	    this._ptLookup = [];
	    this.timeline && this.timeline.invalidate(soft);
	    return _Animation2.prototype.invalidate.call(this, soft);
	  };

	  _proto3.resetTo = function resetTo(property, value, start, startIsRelative, skipRecursion) {
	    _tickerActive || _ticker.wake();
	    this._ts || this.play();
	    var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
	        ratio;
	    this._initted || _initTween(this, time);
	    ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
	    // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
	    // if (_isObject(property)) { // performance optimization
	    // 	for (p in property) {
	    // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
	    // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
	    // 		}
	    // 	}
	    // } else {

	    if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
	      return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
	    } //}


	    _alignPlayhead(this, 0);

	    this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
	    return this.render(0);
	  };

	  _proto3.kill = function kill(targets, vars) {
	    if (vars === void 0) {
	      vars = "all";
	    }

	    if (!targets && (!vars || vars === "all")) {
	      this._lazy = this._pt = 0;
	      this.parent ? _interrupt(this) : this.scrollTrigger && this.scrollTrigger.kill(!!_reverting$1);
	      return this;
	    }

	    if (this.timeline) {
	      var tDur = this.timeline.totalDuration();
	      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

	      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

	      return this;
	    }

	    var parsedTargets = this._targets,
	        killingTargets = targets ? toArray(targets) : parsedTargets,
	        propTweenLookup = this._ptLookup,
	        firstPT = this._pt,
	        overwrittenProps,
	        curLookup,
	        curOverwriteProps,
	        props,
	        p,
	        pt,
	        i;

	    if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
	      vars === "all" && (this._pt = 0);
	      return _interrupt(this);
	    }

	    overwrittenProps = this._op = this._op || [];

	    if (vars !== "all") {
	      //so people can pass in a comma-delimited list of property names
	      if (_isString(vars)) {
	        p = {};

	        _forEachName(vars, function (name) {
	          return p[name] = 1;
	        });

	        vars = p;
	      }

	      vars = _addAliasesToVars(parsedTargets, vars);
	    }

	    i = parsedTargets.length;

	    while (i--) {
	      if (~killingTargets.indexOf(parsedTargets[i])) {
	        curLookup = propTweenLookup[i];

	        if (vars === "all") {
	          overwrittenProps[i] = vars;
	          props = curLookup;
	          curOverwriteProps = {};
	        } else {
	          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
	          props = vars;
	        }

	        for (p in props) {
	          pt = curLookup && curLookup[p];

	          if (pt) {
	            if (!("kill" in pt.d) || pt.d.kill(p) === true) {
	              _removeLinkedListItem(this, pt, "_pt");
	            }

	            delete curLookup[p];
	          }

	          if (curOverwriteProps !== "all") {
	            curOverwriteProps[p] = 1;
	          }
	        }
	      }
	    }

	    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

	    return this;
	  };

	  Tween.to = function to(targets, vars) {
	    return new Tween(targets, vars, arguments[2]);
	  };

	  Tween.from = function from(targets, vars) {
	    return _createTweenType(1, arguments);
	  };

	  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
	    return new Tween(callback, 0, {
	      immediateRender: false,
	      lazy: false,
	      overwrite: false,
	      delay: delay,
	      onComplete: callback,
	      onReverseComplete: callback,
	      onCompleteParams: params,
	      onReverseCompleteParams: params,
	      callbackScope: scope
	    }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
	  };

	  Tween.fromTo = function fromTo(targets, fromVars, toVars) {
	    return _createTweenType(2, arguments);
	  };

	  Tween.set = function set(targets, vars) {
	    vars.duration = 0;
	    vars.repeatDelay || (vars.repeat = 0);
	    return new Tween(targets, vars);
	  };

	  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
	    return _globalTimeline.killTweensOf(targets, props, onlyActive);
	  };

	  return Tween;
	}(Animation);

	_setDefaults(Tween.prototype, {
	  _targets: [],
	  _lazy: 0,
	  _startAt: 0,
	  _op: 0,
	  _onInit: 0
	}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
	// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
	// 	Tween.prototype[name] = function() {
	// 		let tl = new Timeline();
	// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
	// 	}
	// });
	//for backward compatibility. Leverage the timeline calls.


	_forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
	  Tween[name] = function () {
	    var tl = new Timeline(),
	        params = _slice.call(arguments, 0);

	    params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
	    return tl[name].apply(tl, params);
	  };
	});
	/*
	 * --------------------------------------------------------------------------------------
	 * PROPTWEEN
	 * --------------------------------------------------------------------------------------
	 */


	var _setterPlain = function _setterPlain(target, property, value) {
	  return target[property] = value;
	},
	    _setterFunc = function _setterFunc(target, property, value) {
	  return target[property](value);
	},
	    _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
	  return target[property](data.fp, value);
	},
	    _setterAttribute = function _setterAttribute(target, property, value) {
	  return target.setAttribute(property, value);
	},
	    _getSetter = function _getSetter(target, property) {
	  return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
	},
	    _renderPlain = function _renderPlain(ratio, data) {
	  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
	},
	    _renderBoolean = function _renderBoolean(ratio, data) {
	  return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
	},
	    _renderComplexString = function _renderComplexString(ratio, data) {
	  var pt = data._pt,
	      s = "";

	  if (!ratio && data.b) {
	    //b = beginning string
	    s = data.b;
	  } else if (ratio === 1 && data.e) {
	    //e = ending string
	    s = data.e;
	  } else {
	    while (pt) {
	      s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

	      pt = pt._next;
	    }

	    s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
	  }

	  data.set(data.t, data.p, s, data);
	},
	    _renderPropTweens = function _renderPropTweens(ratio, data) {
	  var pt = data._pt;

	  while (pt) {
	    pt.r(ratio, pt.d);
	    pt = pt._next;
	  }
	},
	    _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
	  var pt = this._pt,
	      next;

	  while (pt) {
	    next = pt._next;
	    pt.p === property && pt.modifier(modifier, tween, target);
	    pt = next;
	  }
	},
	    _killPropTweensOf = function _killPropTweensOf(property) {
	  var pt = this._pt,
	      hasNonDependentRemaining,
	      next;

	  while (pt) {
	    next = pt._next;

	    if (pt.p === property && !pt.op || pt.op === property) {
	      _removeLinkedListItem(this, pt, "_pt");
	    } else if (!pt.dep) {
	      hasNonDependentRemaining = 1;
	    }

	    pt = next;
	  }

	  return !hasNonDependentRemaining;
	},
	    _setterWithModifier = function _setterWithModifier(target, property, value, data) {
	  data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
	},
	    _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
	  var pt = parent._pt,
	      next,
	      pt2,
	      first,
	      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

	  while (pt) {
	    next = pt._next;
	    pt2 = first;

	    while (pt2 && pt2.pr > pt.pr) {
	      pt2 = pt2._next;
	    }

	    if (pt._prev = pt2 ? pt2._prev : last) {
	      pt._prev._next = pt;
	    } else {
	      first = pt;
	    }

	    if (pt._next = pt2) {
	      pt2._prev = pt;
	    } else {
	      last = pt;
	    }

	    pt = next;
	  }

	  parent._pt = first;
	}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


	var PropTween = /*#__PURE__*/function () {
	  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
	    this.t = target;
	    this.s = start;
	    this.c = change;
	    this.p = prop;
	    this.r = renderer || _renderPlain;
	    this.d = data || this;
	    this.set = setter || _setterPlain;
	    this.pr = priority || 0;
	    this._next = next;

	    if (next) {
	      next._prev = this;
	    }
	  }

	  var _proto4 = PropTween.prototype;

	  _proto4.modifier = function modifier(func, tween, target) {
	    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

	    this.set = _setterWithModifier;
	    this.m = func;
	    this.mt = target; //modifier target

	    this.tween = tween;
	  };

	  return PropTween;
	}(); //Initialization tasks

	_forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
	  return _reservedProps[name] = 1;
	});

	_globals.TweenMax = _globals.TweenLite = Tween;
	_globals.TimelineLite = _globals.TimelineMax = Timeline;
	_globalTimeline = new Timeline({
	  sortChildren: false,
	  defaults: _defaults,
	  autoRemoveChildren: true,
	  id: "root",
	  smoothChildTiming: true
	});
	_config.stringFilter = _colorStringFilter;

	var _media = [],
	    _listeners = {},
	    _emptyArray = [],
	    _lastMediaTime = 0,
	    _contextID = 0,
	    _dispatch = function _dispatch(type) {
	  return (_listeners[type] || _emptyArray).map(function (f) {
	    return f();
	  });
	},
	    _onMediaChange = function _onMediaChange() {
	  var time = Date.now(),
	      matches = [];

	  if (time - _lastMediaTime > 2) {
	    _dispatch("matchMediaInit");

	    _media.forEach(function (c) {
	      var queries = c.queries,
	          conditions = c.conditions,
	          match,
	          p,
	          anyMatch,
	          toggled;

	      for (p in queries) {
	        match = _win$1.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

	        match && (anyMatch = 1);

	        if (match !== conditions[p]) {
	          conditions[p] = match;
	          toggled = 1;
	        }
	      }

	      if (toggled) {
	        c.revert();
	        anyMatch && matches.push(c);
	      }
	    });

	    _dispatch("matchMediaRevert");

	    matches.forEach(function (c) {
	      return c.onMatch(c, function (func) {
	        return c.add(null, func);
	      });
	    });
	    _lastMediaTime = time;

	    _dispatch("matchMedia");
	  }
	};

	var Context = /*#__PURE__*/function () {
	  function Context(func, scope) {
	    this.selector = scope && selector(scope);
	    this.data = [];
	    this._r = []; // returned/cleanup functions

	    this.isReverted = false;
	    this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely

	    func && this.add(func);
	  }

	  var _proto5 = Context.prototype;

	  _proto5.add = function add(name, func, scope) {
	    // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
	    // if (name && _isFunction(name.revert)) {
	    // 	this.data.push(name);
	    // 	return (name._ctx = this);
	    // }
	    if (_isFunction(name)) {
	      scope = func;
	      func = name;
	      name = _isFunction;
	    }

	    var self = this,
	        f = function f() {
	      var prev = _context,
	          prevSelector = self.selector,
	          result;
	      prev && prev !== self && prev.data.push(self);
	      scope && (self.selector = selector(scope));
	      _context = self;
	      result = func.apply(self, arguments);
	      _isFunction(result) && self._r.push(result);
	      _context = prev;
	      self.selector = prevSelector;
	      self.isReverted = false;
	      return result;
	    };

	    self.last = f;
	    return name === _isFunction ? f(self, function (func) {
	      return self.add(null, func);
	    }) : name ? self[name] = f : f;
	  };

	  _proto5.ignore = function ignore(func) {
	    var prev = _context;
	    _context = null;
	    func(this);
	    _context = prev;
	  };

	  _proto5.getTweens = function getTweens() {
	    var a = [];
	    this.data.forEach(function (e) {
	      return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
	    });
	    return a;
	  };

	  _proto5.clear = function clear() {
	    this._r.length = this.data.length = 0;
	  };

	  _proto5.kill = function kill(revert, matchMedia) {
	    var _this4 = this;

	    if (revert) {
	      (function () {
	        var tweens = _this4.getTweens(),
	            i = _this4.data.length,
	            t;

	        while (i--) {
	          // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
	          t = _this4.data[i];

	          if (t.data === "isFlip") {
	            t.revert();
	            t.getChildren(true, true, false).forEach(function (tween) {
	              return tweens.splice(tweens.indexOf(tween), 1);
	            });
	          }
	        } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort


	        tweens.map(function (t) {
	          return {
	            g: t._dur || t._delay || t._sat && !t._sat.vars.immediateRender ? t.globalTime(0) : -Infinity,
	            t: t
	          };
	        }).sort(function (a, b) {
	          return b.g - a.g || -Infinity;
	        }).forEach(function (o) {
	          return o.t.revert(revert);
	        }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

	        i = _this4.data.length;

	        while (i--) {
	          // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
	          t = _this4.data[i];

	          if (t instanceof Timeline) {
	            if (t.data !== "nested") {
	              t.scrollTrigger && t.scrollTrigger.revert();
	              t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
	            }
	          } else {
	            !(t instanceof Tween) && t.revert && t.revert(revert);
	          }
	        }

	        _this4._r.forEach(function (f) {
	          return f(revert, _this4);
	        });

	        _this4.isReverted = true;
	      })();
	    } else {
	      this.data.forEach(function (e) {
	        return e.kill && e.kill();
	      });
	    }

	    this.clear();

	    if (matchMedia) {
	      var i = _media.length;

	      while (i--) {
	        // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
	        _media[i].id === this.id && _media.splice(i, 1);
	      }
	    }
	  } // killWithCleanup() {
	  // 	this.kill();
	  // 	this._r.forEach(f => f(false, this));
	  // }
	  ;

	  _proto5.revert = function revert(config) {
	    this.kill(config || {});
	  };

	  return Context;
	}();

	var MatchMedia = /*#__PURE__*/function () {
	  function MatchMedia(scope) {
	    this.contexts = [];
	    this.scope = scope;
	    _context && _context.data.push(this);
	  }

	  var _proto6 = MatchMedia.prototype;

	  _proto6.add = function add(conditions, func, scope) {
	    _isObject(conditions) || (conditions = {
	      matches: conditions
	    });
	    var context = new Context(0, scope || this.scope),
	        cond = context.conditions = {},
	        mq,
	        p,
	        active;
	    _context && !context.selector && (context.selector = _context.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()

	    this.contexts.push(context);
	    func = context.add("onMatch", func);
	    context.queries = conditions;

	    for (p in conditions) {
	      if (p === "all") {
	        active = 1;
	      } else {
	        mq = _win$1.matchMedia(conditions[p]);

	        if (mq) {
	          _media.indexOf(context) < 0 && _media.push(context);
	          (cond[p] = mq.matches) && (active = 1);
	          mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
	        }
	      }
	    }

	    active && func(context, function (f) {
	      return context.add(null, f);
	    });
	    return this;
	  } // refresh() {
	  // 	let time = _lastMediaTime,
	  // 		media = _media;
	  // 	_lastMediaTime = -1;
	  // 	_media = this.contexts;
	  // 	_onMediaChange();
	  // 	_lastMediaTime = time;
	  // 	_media = media;
	  // }
	  ;

	  _proto6.revert = function revert(config) {
	    this.kill(config || {});
	  };

	  _proto6.kill = function kill(revert) {
	    this.contexts.forEach(function (c) {
	      return c.kill(revert, true);
	    });
	  };

	  return MatchMedia;
	}();
	/*
	 * --------------------------------------------------------------------------------------
	 * GSAP
	 * --------------------------------------------------------------------------------------
	 */


	var _gsap = {
	  registerPlugin: function registerPlugin() {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    args.forEach(function (config) {
	      return _createPlugin(config);
	    });
	  },
	  timeline: function timeline(vars) {
	    return new Timeline(vars);
	  },
	  getTweensOf: function getTweensOf(targets, onlyActive) {
	    return _globalTimeline.getTweensOf(targets, onlyActive);
	  },
	  getProperty: function getProperty(target, property, unit, uncache) {
	    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

	    var getter = _getCache(target || {}).get,
	        format = unit ? _passThrough : _numericIfPossible;

	    unit === "native" && (unit = "");
	    return !target ? target : !property ? function (property, unit, uncache) {
	      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
	    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
	  },
	  quickSetter: function quickSetter(target, property, unit) {
	    target = toArray(target);

	    if (target.length > 1) {
	      var setters = target.map(function (t) {
	        return gsap.quickSetter(t, property, unit);
	      }),
	          l = setters.length;
	      return function (value) {
	        var i = l;

	        while (i--) {
	          setters[i](value);
	        }
	      };
	    }

	    target = target[0] || {};

	    var Plugin = _plugins[property],
	        cache = _getCache(target),
	        p = cache.harness && (cache.harness.aliases || {})[property] || property,
	        // in case it's an alias, like "rotate" for "rotation".
	    setter = Plugin ? function (value) {
	      var p = new Plugin();
	      _quickTween._pt = 0;
	      p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
	      p.render(1, p);
	      _quickTween._pt && _renderPropTweens(1, _quickTween);
	    } : cache.set(target, p);

	    return Plugin ? setter : function (value) {
	      return setter(target, p, unit ? value + unit : value, cache, 1);
	    };
	  },
	  quickTo: function quickTo(target, property, vars) {
	    var _setDefaults2;

	    var tween = gsap.to(target, _setDefaults((_setDefaults2 = {}, _setDefaults2[property] = "+=0.1", _setDefaults2.paused = true, _setDefaults2.stagger = 0, _setDefaults2), vars || {})),
	        func = function func(value, start, startIsRelative) {
	      return tween.resetTo(property, value, start, startIsRelative);
	    };

	    func.tween = tween;
	    return func;
	  },
	  isTweening: function isTweening(targets) {
	    return _globalTimeline.getTweensOf(targets, true).length > 0;
	  },
	  defaults: function defaults(value) {
	    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));
	    return _mergeDeep(_defaults, value || {});
	  },
	  config: function config(value) {
	    return _mergeDeep(_config, value || {});
	  },
	  registerEffect: function registerEffect(_ref3) {
	    var name = _ref3.name,
	        effect = _ref3.effect,
	        plugins = _ref3.plugins,
	        defaults = _ref3.defaults,
	        extendTimeline = _ref3.extendTimeline;
	    (plugins || "").split(",").forEach(function (pluginName) {
	      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
	    });

	    _effects[name] = function (targets, vars, tl) {
	      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);
	    };

	    if (extendTimeline) {
	      Timeline.prototype[name] = function (targets, vars, position) {
	        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);
	      };
	    }
	  },
	  registerEase: function registerEase(name, ease) {
	    _easeMap[name] = _parseEase(ease);
	  },
	  parseEase: function parseEase(ease, defaultEase) {
	    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
	  },
	  getById: function getById(id) {
	    return _globalTimeline.getById(id);
	  },
	  exportRoot: function exportRoot(vars, includeDelayedCalls) {
	    if (vars === void 0) {
	      vars = {};
	    }

	    var tl = new Timeline(vars),
	        child,
	        next;
	    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

	    _globalTimeline.remove(tl);

	    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

	    tl._time = tl._tTime = _globalTimeline._time;
	    child = _globalTimeline._first;

	    while (child) {
	      next = child._next;

	      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
	        _addToTimeline(tl, child, child._start - child._delay);
	      }

	      child = next;
	    }

	    _addToTimeline(_globalTimeline, tl, 0);

	    return tl;
	  },
	  context: function context(func, scope) {
	    return func ? new Context(func, scope) : _context;
	  },
	  matchMedia: function matchMedia(scope) {
	    return new MatchMedia(scope);
	  },
	  matchMediaRefresh: function matchMediaRefresh() {
	    return _media.forEach(function (c) {
	      var cond = c.conditions,
	          found,
	          p;

	      for (p in cond) {
	        if (cond[p]) {
	          cond[p] = false;
	          found = 1;
	        }
	      }

	      found && c.revert();
	    }) || _onMediaChange();
	  },
	  addEventListener: function addEventListener(type, callback) {
	    var a = _listeners[type] || (_listeners[type] = []);
	    ~a.indexOf(callback) || a.push(callback);
	  },
	  removeEventListener: function removeEventListener(type, callback) {
	    var a = _listeners[type],
	        i = a && a.indexOf(callback);
	    i >= 0 && a.splice(i, 1);
	  },
	  utils: {
	    wrap: wrap$1,
	    wrapYoyo: wrapYoyo,
	    distribute: distribute,
	    random: random,
	    snap: snap,
	    normalize: normalize,
	    getUnit: getUnit,
	    clamp: clamp,
	    splitColor: splitColor,
	    toArray: toArray,
	    selector: selector,
	    mapRange: mapRange,
	    pipe: pipe,
	    unitize: unitize,
	    interpolate: interpolate,
	    shuffle: shuffle
	  },
	  install: _install,
	  effects: _effects,
	  ticker: _ticker,
	  updateRoot: Timeline.updateRoot,
	  plugins: _plugins,
	  globalTimeline: _globalTimeline,
	  core: {
	    PropTween: PropTween,
	    globals: _addGlobal,
	    Tween: Tween,
	    Timeline: Timeline,
	    Animation: Animation,
	    getCache: _getCache,
	    _removeLinkedListItem: _removeLinkedListItem,
	    reverting: function reverting() {
	      return _reverting$1;
	    },
	    context: function context(toAdd) {
	      if (toAdd && _context) {
	        _context.data.push(toAdd);

	        toAdd._ctx = _context;
	      }

	      return _context;
	    },
	    suppressOverwrites: function suppressOverwrites(value) {
	      return _suppressOverwrites = value;
	    }
	  }
	};

	_forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
	  return _gsap[name] = Tween[name];
	});

	_ticker.add(Timeline.updateRoot);

	_quickTween = _gsap.to({}, {
	  duration: 0
	}); // ---- EXTRA PLUGINS --------------------------------------------------------

	var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
	  var pt = plugin._pt;

	  while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
	    pt = pt._next;
	  }

	  return pt;
	},
	    _addModifiers = function _addModifiers(tween, modifiers) {
	  var targets = tween._targets,
	      p,
	      i,
	      pt;

	  for (p in modifiers) {
	    i = targets.length;

	    while (i--) {
	      pt = tween._ptLookup[i][p];

	      if (pt && (pt = pt.d)) {
	        if (pt._pt) {
	          // is a plugin
	          pt = _getPluginPropTween(pt, p);
	        }

	        pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
	      }
	    }
	  }
	},
	    _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
	  return {
	    name: name,
	    rawVars: 1,
	    //don't pre-process function-based values or "random()" strings.
	    init: function init(target, vars, tween) {
	      tween._onInit = function (tween) {
	        var temp, p;

	        if (_isString(vars)) {
	          temp = {};

	          _forEachName(vars, function (name) {
	            return temp[name] = 1;
	          }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


	          vars = temp;
	        }

	        if (modifier) {
	          temp = {};

	          for (p in vars) {
	            temp[p] = modifier(vars[p]);
	          }

	          vars = temp;
	        }

	        _addModifiers(tween, vars);
	      };
	    }
	  };
	}; //register core plugins


	var gsap = _gsap.registerPlugin({
	  name: "attr",
	  init: function init(target, vars, tween, index, targets) {
	    var p, pt, v;
	    this.tween = tween;

	    for (p in vars) {
	      v = target.getAttribute(p) || "";
	      pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
	      pt.op = p;
	      pt.b = v; // record the beginning value so we can revert()

	      this._props.push(p);
	    }
	  },
	  render: function render(ratio, data) {
	    var pt = data._pt;

	    while (pt) {
	      _reverting$1 ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

	      pt = pt._next;
	    }
	  }
	}, {
	  name: "endArray",
	  init: function init(target, value) {
	    var i = value.length;

	    while (i--) {
	      this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
	    }
	  }
	}, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

	Tween.version = Timeline.version = gsap.version = "3.12.7";
	_coreReady = 1;
	_windowExists$1() && _wake();
	_easeMap.Power0;
	    _easeMap.Power1;
	    _easeMap.Power2;
	    _easeMap.Power3;
	    _easeMap.Power4;
	    _easeMap.Linear;
	    _easeMap.Quad;
	    _easeMap.Cubic;
	    _easeMap.Quart;
	    _easeMap.Quint;
	    _easeMap.Strong;
	    _easeMap.Elastic;
	    _easeMap.Back;
	    _easeMap.SteppedEase;
	    _easeMap.Bounce;
	    _easeMap.Sine;
	    _easeMap.Expo;
	    _easeMap.Circ;

	/*!
	 * CSSPlugin 3.12.7
	 * https://gsap.com
	 *
	 * Copyright 2008-2025, GreenSock. All rights reserved.
	 * Subject to the terms at https://gsap.com/standard-license or for
	 * Club GSAP members, the agreement issued with that membership.
	 * @author: Jack Doyle, jack@greensock.com
	*/


	var _win,
	    _doc,
	    _docElement,
	    _pluginInitted,
	    _tempDiv,
	    _recentSetterPlugin,
	    _reverting,
	    _windowExists = function _windowExists() {
	  return typeof window !== "undefined";
	},
	    _transformProps = {},
	    _RAD2DEG = 180 / Math.PI,
	    _DEG2RAD = Math.PI / 180,
	    _atan2 = Math.atan2,
	    _bigNum = 1e8,
	    _capsExp = /([A-Z])/g,
	    _horizontalExp = /(left|right|width|margin|padding|x)/i,
	    _complexExp = /[\s,\(]\S/,
	    _propertyAliases = {
	  autoAlpha: "opacity,visibility",
	  scale: "scaleX,scaleY",
	  alpha: "opacity"
	},
	    _renderCSSProp = function _renderCSSProp(ratio, data) {
	  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
	},
	    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
	  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
	},
	    _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
	  return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
	},
	    //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
	_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
	  var value = data.s + data.c * ratio;
	  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
	},
	    _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
	  return data.set(data.t, data.p, ratio ? data.e : data.b, data);
	},
	    _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
	  return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
	},
	    _setterCSSStyle = function _setterCSSStyle(target, property, value) {
	  return target.style[property] = value;
	},
	    _setterCSSProp = function _setterCSSProp(target, property, value) {
	  return target.style.setProperty(property, value);
	},
	    _setterTransform = function _setterTransform(target, property, value) {
	  return target._gsap[property] = value;
	},
	    _setterScale = function _setterScale(target, property, value) {
	  return target._gsap.scaleX = target._gsap.scaleY = value;
	},
	    _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
	  var cache = target._gsap;
	  cache.scaleX = cache.scaleY = value;
	  cache.renderTransform(ratio, cache);
	},
	    _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
	  var cache = target._gsap;
	  cache[property] = value;
	  cache.renderTransform(ratio, cache);
	},
	    _transformProp = "transform",
	    _transformOriginProp = _transformProp + "Origin",
	    _saveStyle = function _saveStyle(property, isNotCSS) {
	  var _this = this;

	  var target = this.target,
	      style = target.style,
	      cache = target._gsap;

	  if (property in _transformProps && style) {
	    this.tfm = this.tfm || {};

	    if (property !== "transform") {
	      property = _propertyAliases[property] || property;
	      ~property.indexOf(",") ? property.split(",").forEach(function (a) {
	        return _this.tfm[a] = _get(target, a);
	      }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.

	      property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
	    } else {
	      return _propertyAliases.transform.split(",").forEach(function (p) {
	        return _saveStyle.call(_this, p, isNotCSS);
	      });
	    }

	    if (this.props.indexOf(_transformProp) >= 0) {
	      return;
	    }

	    if (cache.svg) {
	      this.svgo = target.getAttribute("data-svg-origin");
	      this.props.push(_transformOriginProp, isNotCSS, "");
	    }

	    property = _transformProp;
	  }

	  (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
	},
	    _removeIndependentTransforms = function _removeIndependentTransforms(style) {
	  if (style.translate) {
	    style.removeProperty("translate");
	    style.removeProperty("scale");
	    style.removeProperty("rotate");
	  }
	},
	    _revertStyle = function _revertStyle() {
	  var props = this.props,
	      target = this.target,
	      style = target.style,
	      cache = target._gsap,
	      i,
	      p;

	  for (i = 0; i < props.length; i += 3) {
	    // stored like this: property, isNotCSS, value
	    if (!props[i + 1]) {
	      props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp, "-$1").toLowerCase());
	    } else if (props[i + 1] === 2) {
	      // non-CSS value (function-based)
	      target[props[i]](props[i + 2]);
	    } else {
	      // non-CSS value (not function-based)
	      target[props[i]] = props[i + 2];
	    }
	  }

	  if (this.tfm) {
	    for (p in this.tfm) {
	      cache[p] = this.tfm[p];
	    }

	    if (cache.svg) {
	      cache.renderTransform();
	      target.setAttribute("data-svg-origin", this.svgo || "");
	    }

	    i = _reverting();

	    if ((!i || !i.isStart) && !style[_transformProp]) {
	      _removeIndependentTransforms(style);

	      if (cache.zOrigin && style[_transformOriginProp]) {
	        style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.

	        cache.zOrigin = 0;
	        cache.renderTransform();
	      }

	      cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
	    }
	  }
	},
	    _getStyleSaver = function _getStyleSaver(target, properties) {
	  var saver = {
	    target: target,
	    props: [],
	    revert: _revertStyle,
	    save: _saveStyle
	  };
	  target._gsap || gsap.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

	  properties && target.style && target.nodeType && properties.split(",").forEach(function (p) {
	    return saver.save(p);
	  }); // make sure it's a DOM node too.

	  return saver;
	},
	    _supports3D,
	    _createElement = function _createElement(type, ns) {
	  var e = _doc.createElementNS ? _doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

	  return e && e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
	},
	    _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
	  var cs = getComputedStyle(target);
	  return cs[property] || cs.getPropertyValue(property.replace(_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
	},
	    _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
	    _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
	  var e = element || _tempDiv,
	      s = e.style,
	      i = 5;

	  if (property in s && !preferPrefix) {
	    return property;
	  }

	  property = property.charAt(0).toUpperCase() + property.substr(1);

	  while (i-- && !(_prefixes[i] + property in s)) {}

	  return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
	},
	    _initCore = function _initCore() {
	  if (_windowExists() && window.document) {
	    _win = window;
	    _doc = _win.document;
	    _docElement = _doc.documentElement;
	    _tempDiv = _createElement("div") || {
	      style: {}
	    };
	    _createElement("div");
	    _transformProp = _checkPropPrefix(_transformProp);
	    _transformOriginProp = _transformProp + "Origin";
	    _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

	    _supports3D = !!_checkPropPrefix("perspective");
	    _reverting = gsap.core.reverting;
	    _pluginInitted = 1;
	  }
	},
	    _getReparentedCloneBBox = function _getReparentedCloneBBox(target) {
	  //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
	  var owner = target.ownerSVGElement,
	      svg = _createElement("svg", owner && owner.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
	      clone = target.cloneNode(true),
	      bbox;

	  clone.style.display = "block";
	  svg.appendChild(clone);

	  _docElement.appendChild(svg);

	  try {
	    bbox = clone.getBBox();
	  } catch (e) {}

	  svg.removeChild(clone);

	  _docElement.removeChild(svg);

	  return bbox;
	},
	    _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
	  var i = attributesArray.length;

	  while (i--) {
	    if (target.hasAttribute(attributesArray[i])) {
	      return target.getAttribute(attributesArray[i]);
	    }
	  }
	},
	    _getBBox = function _getBBox(target) {
	  var bounds, cloned;

	  try {
	    bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
	  } catch (error) {
	    bounds = _getReparentedCloneBBox(target);
	    cloned = 1;
	  }

	  bounds && (bounds.width || bounds.height) || cloned || (bounds = _getReparentedCloneBBox(target)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

	  return bounds && !bounds.width && !bounds.x && !bounds.y ? {
	    x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
	    y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
	    width: 0,
	    height: 0
	  } : bounds;
	},
	    _isSVG = function _isSVG(e) {
	  return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
	},
	    //reports if the element is an SVG on which getBBox() actually works
	_removeProperty = function _removeProperty(target, property) {
	  if (property) {
	    var style = target.style,
	        first2Chars;

	    if (property in _transformProps && property !== _transformOriginProp) {
	      property = _transformProp;
	    }

	    if (style.removeProperty) {
	      first2Chars = property.substr(0, 2);

	      if (first2Chars === "ms" || property.substr(0, 6) === "webkit") {
	        //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
	        property = "-" + property;
	      }

	      style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp, "-$1").toLowerCase());
	    } else {
	      //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
	      style.removeAttribute(property);
	    }
	  }
	},
	    _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
	  var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
	  plugin._pt = pt;
	  pt.b = beginning;
	  pt.e = end;

	  plugin._props.push(property);

	  return pt;
	},
	    _nonConvertibleUnits = {
	  deg: 1,
	  rad: 1,
	  turn: 1
	},
	    _nonStandardLayouts = {
	  grid: 1,
	  flex: 1
	},
	    //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
	_convertToUnit = function _convertToUnit(target, property, value, unit) {
	  var curValue = parseFloat(value) || 0,
	      curUnit = (value + "").trim().substr((curValue + "").length) || "px",
	      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
	  style = _tempDiv.style,
	      horizontal = _horizontalExp.test(property),
	      isRootSVG = target.tagName.toLowerCase() === "svg",
	      measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
	      amount = 100,
	      toPixels = unit === "px",
	      toPercent = unit === "%",
	      px,
	      parent,
	      cache,
	      isSVG;

	  if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
	    return curValue;
	  }

	  curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
	  isSVG = target.getCTM && _isSVG(target);

	  if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
	    px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
	    return _round(toPercent ? curValue / px * amount : curValue / 100 * px);
	  }

	  style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
	  parent = unit !== "rem" && ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

	  if (isSVG) {
	    parent = (target.ownerSVGElement || {}).parentNode;
	  }

	  if (!parent || parent === _doc || !parent.appendChild) {
	    parent = _doc.body;
	  }

	  cache = parent._gsap;

	  if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
	    return _round(curValue / cache.width * amount);
	  } else {
	    if (toPercent && (property === "height" || property === "width")) {
	      // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
	      var v = target.style[property];
	      target.style[property] = amount + unit;
	      px = target[measureProperty];
	      v ? target.style[property] = v : _removeProperty(target, property);
	    } else {
	      (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
	      parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

	      parent.appendChild(_tempDiv);
	      px = _tempDiv[measureProperty];
	      parent.removeChild(_tempDiv);
	      style.position = "absolute";
	    }

	    if (horizontal && toPercent) {
	      cache = _getCache(parent);
	      cache.time = _ticker.time;
	      cache.width = parent[measureProperty];
	    }
	  }

	  return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
	},
	    _get = function _get(target, property, unit, uncache) {
	  var value;
	  _pluginInitted || _initCore();

	  if (property in _propertyAliases && property !== "transform") {
	    property = _propertyAliases[property];

	    if (~property.indexOf(",")) {
	      property = property.split(",")[0];
	    }
	  }

	  if (_transformProps[property] && property !== "transform") {
	    value = _parseTransform(target, uncache);
	    value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
	  } else {
	    value = target.style[property];

	    if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
	      value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
	    }
	  }

	  return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
	},
	    _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
	  // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
	  if (!start || start === "none") {
	    // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
	    var p = _checkPropPrefix(prop, target, 1),
	        s = p && _getComputedProperty(target, p, 1);

	    if (s && s !== start) {
	      prop = p;
	      start = s;
	    } else if (prop === "borderColor") {
	      start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
	    }
	  }

	  var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
	      index = 0,
	      matchIndex = 0,
	      a,
	      result,
	      startValues,
	      startNum,
	      color,
	      startValue,
	      endValue,
	      endNum,
	      chunk,
	      endUnit,
	      startUnit,
	      endValues;
	  pt.b = start;
	  pt.e = end;
	  start += ""; // ensure values are strings

	  end += "";

	  if (end === "auto") {
	    startValue = target.style[prop];
	    target.style[prop] = end;
	    end = _getComputedProperty(target, prop) || end;
	    startValue ? target.style[prop] = startValue : _removeProperty(target, prop);
	  }

	  a = [start, end];

	  _colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


	  start = a[0];
	  end = a[1];
	  startValues = start.match(_numWithUnitExp) || [];
	  endValues = end.match(_numWithUnitExp) || [];

	  if (endValues.length) {
	    while (result = _numWithUnitExp.exec(end)) {
	      endValue = result[0];
	      chunk = end.substring(index, result.index);

	      if (color) {
	        color = (color + 1) % 5;
	      } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
	        color = 1;
	      }

	      if (endValue !== (startValue = startValues[matchIndex++] || "")) {
	        startNum = parseFloat(startValue) || 0;
	        startUnit = startValue.substr((startNum + "").length);
	        endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
	        endNum = parseFloat(endValue);
	        endUnit = endValue.substr((endNum + "").length);
	        index = _numWithUnitExp.lastIndex - endUnit.length;

	        if (!endUnit) {
	          //if something like "perspective:300" is passed in and we must add a unit to the end
	          endUnit = endUnit || _config.units[prop] || startUnit;

	          if (index === end.length) {
	            end += endUnit;
	            pt.e += endUnit;
	          }
	        }

	        if (startUnit !== endUnit) {
	          startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
	        } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


	        pt._pt = {
	          _next: pt._pt,
	          p: chunk || matchIndex === 1 ? chunk : ",",
	          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
	          s: startNum,
	          c: endNum - startNum,
	          m: color && color < 4 || prop === "zIndex" ? Math.round : 0
	        };
	      }
	    }

	    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
	  } else {
	    pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
	  }

	  _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

	  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

	  return pt;
	},
	    _keywordToPercent = {
	  top: "0%",
	  bottom: "100%",
	  left: "0%",
	  right: "100%",
	  center: "50%"
	},
	    _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
	  var split = value.split(" "),
	      x = split[0],
	      y = split[1] || "50%";

	  if (x === "top" || x === "bottom" || y === "left" || y === "right") {
	    //the user provided them in the wrong order, so flip them
	    value = x;
	    x = y;
	    y = value;
	  }

	  split[0] = _keywordToPercent[x] || x;
	  split[1] = _keywordToPercent[y] || y;
	  return split.join(" ");
	},
	    _renderClearProps = function _renderClearProps(ratio, data) {
	  if (data.tween && data.tween._time === data.tween._dur) {
	    var target = data.t,
	        style = target.style,
	        props = data.u,
	        cache = target._gsap,
	        prop,
	        clearTransforms,
	        i;

	    if (props === "all" || props === true) {
	      style.cssText = "";
	      clearTransforms = 1;
	    } else {
	      props = props.split(",");
	      i = props.length;

	      while (--i > -1) {
	        prop = props[i];

	        if (_transformProps[prop]) {
	          clearTransforms = 1;
	          prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp;
	        }

	        _removeProperty(target, prop);
	      }
	    }

	    if (clearTransforms) {
	      _removeProperty(target, _transformProp);

	      if (cache) {
	        cache.svg && target.removeAttribute("transform");
	        style.scale = style.rotate = style.translate = "none";

	        _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


	        cache.uncache = 1;

	        _removeIndependentTransforms(style);
	      }
	    }
	  }
	},
	    // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
	_specialProps = {
	  clearProps: function clearProps(plugin, target, property, endValue, tween) {
	    if (tween.data !== "isFromStart") {
	      var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
	      pt.u = endValue;
	      pt.pr = -10;
	      pt.tween = tween;

	      plugin._props.push(property);

	      return 1;
	    }
	  }
	  /* className feature (about 0.4kb gzipped).
	  , className(plugin, target, property, endValue, tween) {
	  	let _renderClassName = (ratio, data) => {
	  			data.css.render(ratio, data.css);
	  			if (!ratio || ratio === 1) {
	  				let inline = data.rmv,
	  					target = data.t,
	  					p;
	  				target.setAttribute("class", ratio ? data.e : data.b);
	  				for (p in inline) {
	  					_removeProperty(target, p);
	  				}
	  			}
	  		},
	  		_getAllStyles = (target) => {
	  			let styles = {},
	  				computed = getComputedStyle(target),
	  				p;
	  			for (p in computed) {
	  				if (isNaN(p) && p !== "cssText" && p !== "length") {
	  					styles[p] = computed[p];
	  				}
	  			}
	  			_setDefaults(styles, _parseTransform(target, 1));
	  			return styles;
	  		},
	  		startClassList = target.getAttribute("class"),
	  		style = target.style,
	  		cssText = style.cssText,
	  		cache = target._gsap,
	  		classPT = cache.classPT,
	  		inlineToRemoveAtEnd = {},
	  		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
	  		changingVars = {},
	  		startVars = _getAllStyles(target),
	  		transformRelated = /(transform|perspective)/i,
	  		endVars, p;
	  	if (classPT) {
	  		classPT.r(1, classPT.d);
	  		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
	  	}
	  	target.setAttribute("class", data.e);
	  	endVars = _getAllStyles(target, true);
	  	target.setAttribute("class", startClassList);
	  	for (p in endVars) {
	  		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
	  			changingVars[p] = endVars[p];
	  			if (!style[p] && style[p] !== "0") {
	  				inlineToRemoveAtEnd[p] = 1;
	  			}
	  		}
	  	}
	  	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
	  	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
	  		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
	  	}
	  	_parseTransform(target, true); //to clear the caching of transforms
	  	data.css = new gsap.plugins.css();
	  	data.css.init(target, changingVars, tween);
	  	plugin._props.push(...data.css._props);
	  	return 1;
	  }
	  */

	},

	/*
	 * --------------------------------------------------------------------------------------
	 * TRANSFORMS
	 * --------------------------------------------------------------------------------------
	 */
	_identity2DMatrix = [1, 0, 0, 1, 0, 0],
	    _rotationalProperties = {},
	    _isNullTransform = function _isNullTransform(value) {
	  return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
	},
	    _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
	  var matrixString = _getComputedProperty(target, _transformProp);

	  return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);
	},
	    _getMatrix = function _getMatrix(target, force2D) {
	  var cache = target._gsap || _getCache(target),
	      style = target.style,
	      matrix = _getComputedTransformMatrixAsArray(target),
	      parent,
	      nextSibling,
	      temp,
	      addedToDOM;

	  if (cache.svg && target.getAttribute("transform")) {
	    temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

	    matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
	    return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
	  } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
	    //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	    //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
	    temp = style.display;
	    style.display = "block";
	    parent = target.parentNode;

	    if (!parent || !target.offsetParent && !target.getBoundingClientRect().width) {
	      // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375. Note: position: fixed elements report a null offsetParent but they could also be invisible because they're in an ancestor with display: none, so we check getBoundingClientRect(). We only want to alter the DOM if we absolutely have to because it can cause iframe content to reload, like a Vimeo video.
	      addedToDOM = 1; //flag

	      nextSibling = target.nextElementSibling;

	      _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

	    }

	    matrix = _getComputedTransformMatrixAsArray(target);
	    temp ? style.display = temp : _removeProperty(target, "display");

	    if (addedToDOM) {
	      nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
	    }
	  }

	  return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
	},
	    _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
	  var cache = target._gsap,
	      matrix = matrixArray || _getMatrix(target, true),
	      xOriginOld = cache.xOrigin || 0,
	      yOriginOld = cache.yOrigin || 0,
	      xOffsetOld = cache.xOffset || 0,
	      yOffsetOld = cache.yOffset || 0,
	      a = matrix[0],
	      b = matrix[1],
	      c = matrix[2],
	      d = matrix[3],
	      tx = matrix[4],
	      ty = matrix[5],
	      originSplit = origin.split(" "),
	      xOrigin = parseFloat(originSplit[0]) || 0,
	      yOrigin = parseFloat(originSplit[1]) || 0,
	      bounds,
	      determinant,
	      x,
	      y;

	  if (!originIsAbsolute) {
	    bounds = _getBBox(target);
	    xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
	    yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin); // if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
	    // 	xOrigin -= bounds.x;
	    // 	yOrigin -= bounds.y;
	    // }
	  } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
	    //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
	    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
	    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
	    xOrigin = x;
	    yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
	  }

	  if (smooth || smooth !== false && cache.smooth) {
	    tx = xOrigin - xOriginOld;
	    ty = yOrigin - yOriginOld;
	    cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
	    cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
	  } else {
	    cache.xOffset = cache.yOffset = 0;
	  }

	  cache.xOrigin = xOrigin;
	  cache.yOrigin = yOrigin;
	  cache.smooth = !!smooth;
	  cache.origin = origin;
	  cache.originIsAbsolute = !!originIsAbsolute;
	  target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

	  if (pluginToAddPropTweensTo) {
	    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

	    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

	    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

	    _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
	  }

	  target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
	},
	    _parseTransform = function _parseTransform(target, uncache) {
	  var cache = target._gsap || new GSCache(target);

	  if ("x" in cache && !uncache && !cache.uncache) {
	    return cache;
	  }

	  var style = target.style,
	      invertedScaleX = cache.scaleX < 0,
	      px = "px",
	      deg = "deg",
	      cs = getComputedStyle(target),
	      origin = _getComputedProperty(target, _transformOriginProp) || "0",
	      x,
	      y,
	      z,
	      scaleX,
	      scaleY,
	      rotation,
	      rotationX,
	      rotationY,
	      skewX,
	      skewY,
	      perspective,
	      xOrigin,
	      yOrigin,
	      matrix,
	      angle,
	      cos,
	      sin,
	      a,
	      b,
	      c,
	      d,
	      a12,
	      a22,
	      t1,
	      t2,
	      t3,
	      a13,
	      a23,
	      a33,
	      a42,
	      a43,
	      a32;
	  x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
	  scaleX = scaleY = 1;
	  cache.svg = !!(target.getCTM && _isSVG(target));

	  if (cs.translate) {
	    // accommodate independent transforms by combining them into normal ones.
	    if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
	      style[_transformProp] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp] !== "none" ? cs[_transformProp] : "");
	    }

	    style.scale = style.rotate = style.translate = "none";
	  }

	  matrix = _getMatrix(target, cache.svg);

	  if (cache.svg) {
	    if (cache.uncache) {
	      // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
	      t2 = target.getBBox();
	      origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
	      t1 = "";
	    } else {
	      t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
	    }

	    _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
	  }

	  xOrigin = cache.xOrigin || 0;
	  yOrigin = cache.yOrigin || 0;

	  if (matrix !== _identity2DMatrix) {
	    a = matrix[0]; //a11

	    b = matrix[1]; //a21

	    c = matrix[2]; //a31

	    d = matrix[3]; //a41

	    x = a12 = matrix[4];
	    y = a22 = matrix[5]; //2D matrix

	    if (matrix.length === 6) {
	      scaleX = Math.sqrt(a * a + b * b);
	      scaleY = Math.sqrt(d * d + c * c);
	      rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

	      skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
	      skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

	      if (cache.svg) {
	        x -= xOrigin - (xOrigin * a + yOrigin * c);
	        y -= yOrigin - (xOrigin * b + yOrigin * d);
	      } //3D matrix

	    } else {
	      a32 = matrix[6];
	      a42 = matrix[7];
	      a13 = matrix[8];
	      a23 = matrix[9];
	      a33 = matrix[10];
	      a43 = matrix[11];
	      x = matrix[12];
	      y = matrix[13];
	      z = matrix[14];
	      angle = _atan2(a32, a33);
	      rotationX = angle * _RAD2DEG; //rotationX

	      if (angle) {
	        cos = Math.cos(-angle);
	        sin = Math.sin(-angle);
	        t1 = a12 * cos + a13 * sin;
	        t2 = a22 * cos + a23 * sin;
	        t3 = a32 * cos + a33 * sin;
	        a13 = a12 * -sin + a13 * cos;
	        a23 = a22 * -sin + a23 * cos;
	        a33 = a32 * -sin + a33 * cos;
	        a43 = a42 * -sin + a43 * cos;
	        a12 = t1;
	        a22 = t2;
	        a32 = t3;
	      } //rotationY


	      angle = _atan2(-c, a33);
	      rotationY = angle * _RAD2DEG;

	      if (angle) {
	        cos = Math.cos(-angle);
	        sin = Math.sin(-angle);
	        t1 = a * cos - a13 * sin;
	        t2 = b * cos - a23 * sin;
	        t3 = c * cos - a33 * sin;
	        a43 = d * sin + a43 * cos;
	        a = t1;
	        b = t2;
	        c = t3;
	      } //rotationZ


	      angle = _atan2(b, a);
	      rotation = angle * _RAD2DEG;

	      if (angle) {
	        cos = Math.cos(angle);
	        sin = Math.sin(angle);
	        t1 = a * cos + b * sin;
	        t2 = a12 * cos + a22 * sin;
	        b = b * cos - a * sin;
	        a22 = a22 * cos - a12 * sin;
	        a = t1;
	        a12 = t2;
	      }

	      if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
	        //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
	        rotationX = rotation = 0;
	        rotationY = 180 - rotationY;
	      }

	      scaleX = _round(Math.sqrt(a * a + b * b + c * c));
	      scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));
	      angle = _atan2(a12, a22);
	      skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
	      perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
	    }

	    if (cache.svg) {
	      //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
	      t1 = target.getAttribute("transform");
	      cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp));
	      t1 && target.setAttribute("transform", t1);
	    }
	  }

	  if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
	    if (invertedScaleX) {
	      scaleX *= -1;
	      skewX += rotation <= 0 ? 180 : -180;
	      rotation += rotation <= 0 ? 180 : -180;
	    } else {
	      scaleY *= -1;
	      skewX += skewX <= 0 ? 180 : -180;
	    }
	  }

	  uncache = uncache || cache.uncache;
	  cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
	  cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
	  cache.z = z + px;
	  cache.scaleX = _round(scaleX);
	  cache.scaleY = _round(scaleY);
	  cache.rotation = _round(rotation) + deg;
	  cache.rotationX = _round(rotationX) + deg;
	  cache.rotationY = _round(rotationY) + deg;
	  cache.skewX = skewX + deg;
	  cache.skewY = skewY + deg;
	  cache.transformPerspective = perspective + px;

	  if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || !uncache && cache.zOrigin || 0) {
	    style[_transformOriginProp] = _firstTwoOnly(origin);
	  }

	  cache.xOffset = cache.yOffset = 0;
	  cache.force3D = _config.force3D;
	  cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
	  cache.uncache = 0;
	  return cache;
	},
	    _firstTwoOnly = function _firstTwoOnly(value) {
	  return (value = value.split(" "))[0] + " " + value[1];
	},
	    //for handling transformOrigin values, stripping out the 3rd dimension
	_addPxTranslate = function _addPxTranslate(target, start, value) {
	  var unit = getUnit(start);
	  return _round(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
	},
	    _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
	  cache.z = "0px";
	  cache.rotationY = cache.rotationX = "0deg";
	  cache.force3D = 0;

	  _renderCSSTransforms(ratio, cache);
	},
	    _zeroDeg = "0deg",
	    _zeroPx = "0px",
	    _endParenthesis = ") ",
	    _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
	  var _ref = cache || this,
	      xPercent = _ref.xPercent,
	      yPercent = _ref.yPercent,
	      x = _ref.x,
	      y = _ref.y,
	      z = _ref.z,
	      rotation = _ref.rotation,
	      rotationY = _ref.rotationY,
	      rotationX = _ref.rotationX,
	      skewX = _ref.skewX,
	      skewY = _ref.skewY,
	      scaleX = _ref.scaleX,
	      scaleY = _ref.scaleY,
	      transformPerspective = _ref.transformPerspective,
	      force3D = _ref.force3D,
	      target = _ref.target,
	      zOrigin = _ref.zOrigin,
	      transforms = "",
	      use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


	  if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
	    var angle = parseFloat(rotationY) * _DEG2RAD,
	        a13 = Math.sin(angle),
	        a33 = Math.cos(angle),
	        cos;

	    angle = parseFloat(rotationX) * _DEG2RAD;
	    cos = Math.cos(angle);
	    x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
	    y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
	    z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
	  }

	  if (transformPerspective !== _zeroPx) {
	    transforms += "perspective(" + transformPerspective + _endParenthesis;
	  }

	  if (xPercent || yPercent) {
	    transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
	  }

	  if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
	    transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
	  }

	  if (rotation !== _zeroDeg) {
	    transforms += "rotate(" + rotation + _endParenthesis;
	  }

	  if (rotationY !== _zeroDeg) {
	    transforms += "rotateY(" + rotationY + _endParenthesis;
	  }

	  if (rotationX !== _zeroDeg) {
	    transforms += "rotateX(" + rotationX + _endParenthesis;
	  }

	  if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
	    transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
	  }

	  if (scaleX !== 1 || scaleY !== 1) {
	    transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
	  }

	  target.style[_transformProp] = transforms || "translate(0, 0)";
	},
	    _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
	  var _ref2 = cache || this,
	      xPercent = _ref2.xPercent,
	      yPercent = _ref2.yPercent,
	      x = _ref2.x,
	      y = _ref2.y,
	      rotation = _ref2.rotation,
	      skewX = _ref2.skewX,
	      skewY = _ref2.skewY,
	      scaleX = _ref2.scaleX,
	      scaleY = _ref2.scaleY,
	      target = _ref2.target,
	      xOrigin = _ref2.xOrigin,
	      yOrigin = _ref2.yOrigin,
	      xOffset = _ref2.xOffset,
	      yOffset = _ref2.yOffset,
	      forceCSS = _ref2.forceCSS,
	      tx = parseFloat(x),
	      ty = parseFloat(y),
	      a11,
	      a21,
	      a12,
	      a22,
	      temp;

	  rotation = parseFloat(rotation);
	  skewX = parseFloat(skewX);
	  skewY = parseFloat(skewY);

	  if (skewY) {
	    //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
	    skewY = parseFloat(skewY);
	    skewX += skewY;
	    rotation += skewY;
	  }

	  if (rotation || skewX) {
	    rotation *= _DEG2RAD;
	    skewX *= _DEG2RAD;
	    a11 = Math.cos(rotation) * scaleX;
	    a21 = Math.sin(rotation) * scaleX;
	    a12 = Math.sin(rotation - skewX) * -scaleY;
	    a22 = Math.cos(rotation - skewX) * scaleY;

	    if (skewX) {
	      skewY *= _DEG2RAD;
	      temp = Math.tan(skewX - skewY);
	      temp = Math.sqrt(1 + temp * temp);
	      a12 *= temp;
	      a22 *= temp;

	      if (skewY) {
	        temp = Math.tan(skewY);
	        temp = Math.sqrt(1 + temp * temp);
	        a11 *= temp;
	        a21 *= temp;
	      }
	    }

	    a11 = _round(a11);
	    a21 = _round(a21);
	    a12 = _round(a12);
	    a22 = _round(a22);
	  } else {
	    a11 = scaleX;
	    a22 = scaleY;
	    a21 = a12 = 0;
	  }

	  if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
	    tx = _convertToUnit(target, "x", x, "px");
	    ty = _convertToUnit(target, "y", y, "px");
	  }

	  if (xOrigin || yOrigin || xOffset || yOffset) {
	    tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
	    ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
	  }

	  if (xPercent || yPercent) {
	    //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
	    temp = target.getBBox();
	    tx = _round(tx + xPercent / 100 * temp.width);
	    ty = _round(ty + yPercent / 100 * temp.height);
	  }

	  temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
	  target.setAttribute("transform", temp);
	  forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
	},
	    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
	  var cap = 360,
	      isString = _isString(endValue),
	      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
	      change = endNum - startNum,
	      finalValue = startNum + change + "deg",
	      direction,
	      pt;

	  if (isString) {
	    direction = endValue.split("_")[1];

	    if (direction === "short") {
	      change %= cap;

	      if (change !== change % (cap / 2)) {
	        change += change < 0 ? cap : -cap;
	      }
	    }

	    if (direction === "cw" && change < 0) {
	      change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
	    } else if (direction === "ccw" && change > 0) {
	      change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
	    }
	  }

	  plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
	  pt.e = finalValue;
	  pt.u = "deg";

	  plugin._props.push(property);

	  return pt;
	},
	    _assign = function _assign(target, source) {
	  // Internet Explorer doesn't have Object.assign(), so we recreate it here.
	  for (var p in source) {
	    target[p] = source[p];
	  }

	  return target;
	},
	    _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
	  //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
	  var startCache = _assign({}, target._gsap),
	      exclude = "perspective,force3D,transformOrigin,svgOrigin",
	      style = target.style,
	      endCache,
	      p,
	      startValue,
	      endValue,
	      startNum,
	      endNum,
	      startUnit,
	      endUnit;

	  if (startCache.svg) {
	    startValue = target.getAttribute("transform");
	    target.setAttribute("transform", "");
	    style[_transformProp] = transforms;
	    endCache = _parseTransform(target, 1);

	    _removeProperty(target, _transformProp);

	    target.setAttribute("transform", startValue);
	  } else {
	    startValue = getComputedStyle(target)[_transformProp];
	    style[_transformProp] = transforms;
	    endCache = _parseTransform(target, 1);
	    style[_transformProp] = startValue;
	  }

	  for (p in _transformProps) {
	    startValue = startCache[p];
	    endValue = endCache[p];

	    if (startValue !== endValue && exclude.indexOf(p) < 0) {
	      //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
	      startUnit = getUnit(startValue);
	      endUnit = getUnit(endValue);
	      startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
	      endNum = parseFloat(endValue);
	      plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
	      plugin._pt.u = endUnit || 0;

	      plugin._props.push(p);
	    }
	  }

	  _assign(endCache, startCache);
	}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


	_forEachName("padding,margin,Width,Radius", function (name, index) {
	  var t = "Top",
	      r = "Right",
	      b = "Bottom",
	      l = "Left",
	      props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
	    return index < 2 ? name + side : "border" + side + name;
	  });

	  _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
	    var a, vars;

	    if (arguments.length < 4) {
	      // getter, passed target, property, and unit (from _get())
	      a = props.map(function (prop) {
	        return _get(plugin, prop, property);
	      });
	      vars = a.join(" ");
	      return vars.split(a[0]).length === 5 ? a[0] : vars;
	    }

	    a = (endValue + "").split(" ");
	    vars = {};
	    props.forEach(function (prop, i) {
	      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
	    });
	    plugin.init(target, vars, tween);
	  };
	});

	var CSSPlugin = {
	  name: "css",
	  register: _initCore,
	  targetTest: function targetTest(target) {
	    return target.style && target.nodeType;
	  },
	  init: function init(target, vars, tween, index, targets) {
	    var props = this._props,
	        style = target.style,
	        startAt = tween.vars.startAt,
	        startValue,
	        endValue,
	        endNum,
	        startNum,
	        type,
	        specialProp,
	        p,
	        startUnit,
	        endUnit,
	        relative,
	        isTransformRelated,
	        transformPropTween,
	        cache,
	        smooth,
	        hasPriority,
	        inlineProps;
	    _pluginInitted || _initCore(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

	    this.styles = this.styles || _getStyleSaver(target);
	    inlineProps = this.styles.props;
	    this.tween = tween;

	    for (p in vars) {
	      if (p === "autoRound") {
	        continue;
	      }

	      endValue = vars[p];

	      if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
	        // plugins
	        continue;
	      }

	      type = typeof endValue;
	      specialProp = _specialProps[p];

	      if (type === "function") {
	        endValue = endValue.call(tween, index, target, targets);
	        type = typeof endValue;
	      }

	      if (type === "string" && ~endValue.indexOf("random(")) {
	        endValue = _replaceRandom(endValue);
	      }

	      if (specialProp) {
	        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
	      } else if (p.substr(0, 2) === "--") {
	        //CSS variable
	        startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
	        endValue += "";
	        _colorExp.lastIndex = 0;

	        if (!_colorExp.test(startValue)) {
	          // colors don't have units
	          startUnit = getUnit(startValue);
	          endUnit = getUnit(endValue);
	        }

	        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
	        this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
	        props.push(p);
	        inlineProps.push(p, 0, style[p]);
	      } else if (type !== "undefined") {
	        if (startAt && p in startAt) {
	          // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
	          startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
	          _isString(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
	          getUnit(startValue + "") || startValue === "auto" || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

	          (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
	        } else {
	          startValue = _get(target, p);
	        }

	        startNum = parseFloat(startValue);
	        relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
	        relative && (endValue = endValue.substr(2));
	        endNum = parseFloat(endValue);

	        if (p in _propertyAliases) {
	          if (p === "autoAlpha") {
	            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
	            if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
	              //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
	              startNum = 0;
	            }

	            inlineProps.push("visibility", 0, style.visibility);

	            _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
	          }

	          if (p !== "scale" && p !== "transform") {
	            p = _propertyAliases[p];
	            ~p.indexOf(",") && (p = p.split(",")[0]);
	          }
	        }

	        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

	        if (isTransformRelated) {
	          this.styles.save(p);

	          if (!transformPropTween) {
	            cache = target._gsap;
	            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

	            smooth = vars.smoothOrigin !== false && cache.smooth;
	            transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

	            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
	          }

	          if (p === "scale") {
	            this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
	            this._pt.u = 0;
	            props.push("scaleY", p);
	            p += "X";
	          } else if (p === "transformOrigin") {
	            inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
	            endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

	            if (cache.svg) {
	              _applySVGOrigin(target, endValue, 0, smooth, 0, this);
	            } else {
	              endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

	              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

	              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
	            }

	            continue;
	          } else if (p === "svgOrigin") {
	            _applySVGOrigin(target, endValue, 1, smooth, 0, this);

	            continue;
	          } else if (p in _rotationalProperties) {
	            _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);

	            continue;
	          } else if (p === "smoothOrigin") {
	            _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

	            continue;
	          } else if (p === "force3D") {
	            cache[p] = endValue;
	            continue;
	          } else if (p === "transform") {
	            _addRawTransformPTs(this, endValue, target);

	            continue;
	          }
	        } else if (!(p in style)) {
	          p = _checkPropPrefix(p) || p;
	        }

	        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
	          startUnit = (startValue + "").substr((startNum + "").length);
	          endNum || (endNum = 0); // protect against NaN

	          endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
	          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
	          this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
	          this._pt.u = endUnit || 0;

	          if (startUnit !== endUnit && endUnit !== "%") {
	            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
	            this._pt.b = startValue;
	            this._pt.r = _renderCSSPropWithBeginning;
	          }
	        } else if (!(p in style)) {
	          if (p in target) {
	            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
	            this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
	          } else if (p !== "parseTransform") {
	            _missingPlugin(p, endValue);

	            continue;
	          }
	        } else {
	          _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
	        }

	        isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : typeof target[p] === "function" ? inlineProps.push(p, 2, target[p]()) : inlineProps.push(p, 1, startValue || target[p]));
	        props.push(p);
	      }
	    }

	    hasPriority && _sortPropTweensByPriority(this);
	  },
	  render: function render(ratio, data) {
	    if (data.tween._time || !_reverting()) {
	      var pt = data._pt;

	      while (pt) {
	        pt.r(ratio, pt.d);
	        pt = pt._next;
	      }
	    } else {
	      data.styles.revert();
	    }
	  },
	  get: _get,
	  aliases: _propertyAliases,
	  getSetter: function getSetter(target, property, plugin) {
	    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
	    var p = _propertyAliases[property];
	    p && p.indexOf(",") < 0 && (property = p);
	    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
	  },
	  core: {
	    _removeProperty: _removeProperty,
	    _getMatrix: _getMatrix
	  }
	};
	gsap.utils.checkPrefix = _checkPropPrefix;
	gsap.core.getStyleSaver = _getStyleSaver;

	(function (positionAndScale, rotation, others, aliases) {
	  var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
	    _transformProps[name] = 1;
	  });

	  _forEachName(rotation, function (name) {
	    _config.units[name] = "deg";
	    _rotationalProperties[name] = 1;
	  });

	  _propertyAliases[all[13]] = positionAndScale + "," + rotation;

	  _forEachName(aliases, function (name) {
	    var split = name.split(":");
	    _propertyAliases[split[1]] = all[split[0]];
	  });
	})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

	_forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
	  _config.units[name] = "px";
	});

	gsap.registerPlugin(CSSPlugin);

	var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap;
	    // to protect from tree shaking
	gsapWithCSS.core.Tween;

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
	 */

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const stringToByteArray$1 = function (str) {
	    // TODO(user): Use native implementations if/when available
	    const out = [];
	    let p = 0;
	    for (let i = 0; i < str.length; i++) {
	        let c = str.charCodeAt(i);
	        if (c < 128) {
	            out[p++] = c;
	        }
	        else if (c < 2048) {
	            out[p++] = (c >> 6) | 192;
	            out[p++] = (c & 63) | 128;
	        }
	        else if ((c & 0xfc00) === 0xd800 &&
	            i + 1 < str.length &&
	            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
	            // Surrogate Pair
	            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
	            out[p++] = (c >> 18) | 240;
	            out[p++] = ((c >> 12) & 63) | 128;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	        else {
	            out[p++] = (c >> 12) | 224;
	            out[p++] = ((c >> 6) & 63) | 128;
	            out[p++] = (c & 63) | 128;
	        }
	    }
	    return out;
	};
	/**
	 * Turns an array of numbers into the string given by the concatenation of the
	 * characters to which the numbers correspond.
	 * @param bytes Array of numbers representing characters.
	 * @return Stringification of the array.
	 */
	const byteArrayToString = function (bytes) {
	    // TODO(user): Use native implementations if/when available
	    const out = [];
	    let pos = 0, c = 0;
	    while (pos < bytes.length) {
	        const c1 = bytes[pos++];
	        if (c1 < 128) {
	            out[c++] = String.fromCharCode(c1);
	        }
	        else if (c1 > 191 && c1 < 224) {
	            const c2 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
	        }
	        else if (c1 > 239 && c1 < 365) {
	            // Surrogate Pair
	            const c2 = bytes[pos++];
	            const c3 = bytes[pos++];
	            const c4 = bytes[pos++];
	            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
	                0x10000;
	            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
	            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
	        }
	        else {
	            const c2 = bytes[pos++];
	            const c3 = bytes[pos++];
	            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
	        }
	    }
	    return out.join('');
	};
	// We define it as an object literal instead of a class because a class compiled down to es5 can't
	// be treeshaked. https://github.com/rollup/rollup/issues/1691
	// Static lookup maps, lazily populated by init_()
	// TODO(dlarocque): Define this as a class, since we no longer target ES5.
	const base64 = {
	    /**
	     * Maps bytes to characters.
	     */
	    byteToCharMap_: null,
	    /**
	     * Maps characters to bytes.
	     */
	    charToByteMap_: null,
	    /**
	     * Maps bytes to websafe characters.
	     * @private
	     */
	    byteToCharMapWebSafe_: null,
	    /**
	     * Maps websafe characters to bytes.
	     * @private
	     */
	    charToByteMapWebSafe_: null,
	    /**
	     * Our default alphabet, shared between
	     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
	     */
	    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
	    /**
	     * Our default alphabet. Value 64 (=) is special; it means "nothing."
	     */
	    get ENCODED_VALS() {
	        return this.ENCODED_VALS_BASE + '+/=';
	    },
	    /**
	     * Our websafe alphabet.
	     */
	    get ENCODED_VALS_WEBSAFE() {
	        return this.ENCODED_VALS_BASE + '-_.';
	    },
	    /**
	     * Whether this browser supports the atob and btoa functions. This extension
	     * started at Mozilla but is now implemented by many browsers. We use the
	     * ASSUME_* variables to avoid pulling in the full useragent detection library
	     * but still allowing the standard per-browser compilations.
	     *
	     */
	    HAS_NATIVE_SUPPORT: typeof atob === 'function',
	    /**
	     * Base64-encode an array of bytes.
	     *
	     * @param input An array of bytes (numbers with
	     *     value in [0, 255]) to encode.
	     * @param webSafe Boolean indicating we should use the
	     *     alternative alphabet.
	     * @return The base64 encoded string.
	     */
	    encodeByteArray(input, webSafe) {
	        if (!Array.isArray(input)) {
	            throw Error('encodeByteArray takes an array as a parameter');
	        }
	        this.init_();
	        const byteToCharMap = webSafe
	            ? this.byteToCharMapWebSafe_
	            : this.byteToCharMap_;
	        const output = [];
	        for (let i = 0; i < input.length; i += 3) {
	            const byte1 = input[i];
	            const haveByte2 = i + 1 < input.length;
	            const byte2 = haveByte2 ? input[i + 1] : 0;
	            const haveByte3 = i + 2 < input.length;
	            const byte3 = haveByte3 ? input[i + 2] : 0;
	            const outByte1 = byte1 >> 2;
	            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
	            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
	            let outByte4 = byte3 & 0x3f;
	            if (!haveByte3) {
	                outByte4 = 64;
	                if (!haveByte2) {
	                    outByte3 = 64;
	                }
	            }
	            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
	        }
	        return output.join('');
	    },
	    /**
	     * Base64-encode a string.
	     *
	     * @param input A string to encode.
	     * @param webSafe If true, we should use the
	     *     alternative alphabet.
	     * @return The base64 encoded string.
	     */
	    encodeString(input, webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
	            return btoa(input);
	        }
	        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * @param input to decode.
	     * @param webSafe True if we should use the
	     *     alternative alphabet.
	     * @return string representing the decoded value.
	     */
	    decodeString(input, webSafe) {
	        // Shortcut for Mozilla browsers that implement
	        // a native base64 encoder in the form of "btoa/atob"
	        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
	            return atob(input);
	        }
	        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
	    },
	    /**
	     * Base64-decode a string.
	     *
	     * In base-64 decoding, groups of four characters are converted into three
	     * bytes.  If the encoder did not apply padding, the input length may not
	     * be a multiple of 4.
	     *
	     * In this case, the last group will have fewer than 4 characters, and
	     * padding will be inferred.  If the group has one or two characters, it decodes
	     * to one byte.  If the group has three characters, it decodes to two bytes.
	     *
	     * @param input Input to decode.
	     * @param webSafe True if we should use the web-safe alphabet.
	     * @return bytes representing the decoded value.
	     */
	    decodeStringToByteArray(input, webSafe) {
	        this.init_();
	        const charToByteMap = webSafe
	            ? this.charToByteMapWebSafe_
	            : this.charToByteMap_;
	        const output = [];
	        for (let i = 0; i < input.length;) {
	            const byte1 = charToByteMap[input.charAt(i++)];
	            const haveByte2 = i < input.length;
	            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
	            ++i;
	            const haveByte3 = i < input.length;
	            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            const haveByte4 = i < input.length;
	            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
	            ++i;
	            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
	                throw new DecodeBase64StringError();
	            }
	            const outByte1 = (byte1 << 2) | (byte2 >> 4);
	            output.push(outByte1);
	            if (byte3 !== 64) {
	                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
	                output.push(outByte2);
	                if (byte4 !== 64) {
	                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
	                    output.push(outByte3);
	                }
	            }
	        }
	        return output;
	    },
	    /**
	     * Lazy static initialization function. Called before
	     * accessing any of the static map variables.
	     * @private
	     */
	    init_() {
	        if (!this.byteToCharMap_) {
	            this.byteToCharMap_ = {};
	            this.charToByteMap_ = {};
	            this.byteToCharMapWebSafe_ = {};
	            this.charToByteMapWebSafe_ = {};
	            // We want quick mappings back and forth, so we precompute two maps.
	            for (let i = 0; i < this.ENCODED_VALS.length; i++) {
	                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
	                this.charToByteMap_[this.byteToCharMap_[i]] = i;
	                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
	                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
	                // Be forgiving when decoding and correctly decode both encodings.
	                if (i >= this.ENCODED_VALS_BASE.length) {
	                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
	                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
	                }
	            }
	        }
	    }
	};
	/**
	 * An error encountered while decoding base64 string.
	 */
	class DecodeBase64StringError extends Error {
	    constructor() {
	        super(...arguments);
	        this.name = 'DecodeBase64StringError';
	    }
	}
	/**
	 * URL-safe base64 encoding
	 */
	const base64Encode = function (str) {
	    const utf8Bytes = stringToByteArray$1(str);
	    return base64.encodeByteArray(utf8Bytes, true);
	};
	/**
	 * URL-safe base64 encoding (without "." padding in the end).
	 * e.g. Used in JSON Web Token (JWT) parts.
	 */
	const base64urlEncodeWithoutPadding = function (str) {
	    // Use base64url encoding and remove padding in the end (dot characters).
	    return base64Encode(str).replace(/\./g, '');
	};
	/**
	 * URL-safe base64 decoding
	 *
	 * NOTE: DO NOT use the global atob() function - it does NOT support the
	 * base64Url variant encoding.
	 *
	 * @param str To be decoded
	 * @return Decoded result, if possible
	 */
	const base64Decode = function (str) {
	    try {
	        return base64.decodeString(str, true);
	    }
	    catch (e) {
	        console.error('base64Decode failed: ', e);
	    }
	    return null;
	};

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Polyfill for `globalThis` object.
	 * @returns the `globalThis` object for the given environment.
	 * @public
	 */
	function getGlobal() {
	    if (typeof self !== 'undefined') {
	        return self;
	    }
	    if (typeof window !== 'undefined') {
	        return window;
	    }
	    if (typeof global !== 'undefined') {
	        return global;
	    }
	    throw new Error('Unable to locate global object.');
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
	/**
	 * Attempt to read defaults from a JSON string provided to
	 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
	 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
	 * The dots are in parens because certain compilers (Vite?) cannot
	 * handle seeing that variable in comments.
	 * See https://github.com/firebase/firebase-js-sdk/issues/6838
	 */
	const getDefaultsFromEnvVariable = () => {
	    if (typeof process === 'undefined' || typeof process.env === 'undefined') {
	        return;
	    }
	    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
	    if (defaultsJsonString) {
	        return JSON.parse(defaultsJsonString);
	    }
	};
	const getDefaultsFromCookie = () => {
	    if (typeof document === 'undefined') {
	        return;
	    }
	    let match;
	    try {
	        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
	    }
	    catch (e) {
	        // Some environments such as Angular Universal SSR have a
	        // `document` object but error on accessing `document.cookie`.
	        return;
	    }
	    const decoded = match && base64Decode(match[1]);
	    return decoded && JSON.parse(decoded);
	};
	/**
	 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
	 * (1) if such an object exists as a property of `globalThis`
	 * (2) if such an object was provided on a shell environment variable
	 * (3) if such an object exists in a cookie
	 * @public
	 */
	const getDefaults = () => {
	    try {
	        return (getDefaultsFromGlobal() ||
	            getDefaultsFromEnvVariable() ||
	            getDefaultsFromCookie());
	    }
	    catch (e) {
	        /**
	         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
	         * to any environment case we have not accounted for. Log to
	         * info instead of swallowing so we can find these unknown cases
	         * and add paths for them if needed.
	         */
	        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
	        return;
	    }
	};
	/**
	 * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
	 * for the given product.
	 * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
	 * @public
	 */
	const getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };
	/**
	 * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
	 * for the given product.
	 * @returns a pair of hostname and port like `["::1", 4000]` if available
	 * @public
	 */
	const getDefaultEmulatorHostnameAndPort = (productName) => {
	    const host = getDefaultEmulatorHost(productName);
	    if (!host) {
	        return undefined;
	    }
	    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
	    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
	        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
	    }
	    // eslint-disable-next-line no-restricted-globals
	    const port = parseInt(host.substring(separatorIndex + 1), 10);
	    if (host[0] === '[') {
	        // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
	        return [host.substring(1, separatorIndex - 1), port];
	    }
	    else {
	        return [host.substring(0, separatorIndex), port];
	    }
	};
	/**
	 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
	 * @public
	 */
	const getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class Deferred {
	    constructor() {
	        this.reject = () => { };
	        this.resolve = () => { };
	        this.promise = new Promise((resolve, reject) => {
	            this.resolve = resolve;
	            this.reject = reject;
	        });
	    }
	    /**
	     * Our API internals are not promisified and cannot because our callback APIs have subtle expectations around
	     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
	     * and returns a node-style callback which will resolve or reject the Deferred's promise.
	     */
	    wrapCallback(callback) {
	        return (error, value) => {
	            if (error) {
	                this.reject(error);
	            }
	            else {
	                this.resolve(value);
	            }
	            if (typeof callback === 'function') {
	                // Attaching noop handler just in case developer wasn't expecting
	                // promises
	                this.promise.catch(() => { });
	                // Some of our callbacks don't expect a value and our own tests
	                // assert that the parameter length is 1
	                if (callback.length === 1) {
	                    callback(error);
	                }
	                else {
	                    callback(error, value);
	                }
	            }
	        };
	    }
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function createMockUserToken(token, projectId) {
	    if (token.uid) {
	        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
	    }
	    // Unsecured JWTs use "none" as the algorithm.
	    const header = {
	        alg: 'none',
	        type: 'JWT'
	    };
	    const project = projectId || 'demo-project';
	    const iat = token.iat || 0;
	    const sub = token.sub || token.user_id;
	    if (!sub) {
	        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
	    }
	    const payload = Object.assign({ 
	        // Set all required fields to decent defaults
	        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
	            sign_in_provider: 'custom',
	            identities: {}
	        } }, token);
	    // Unsecured JWTs use the empty string as a signature.
	    const signature = '';
	    return [
	        base64urlEncodeWithoutPadding(JSON.stringify(header)),
	        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
	        signature
	    ].join('.');
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns navigator.userAgent string or '' if it's not defined.
	 * @return user agent string
	 */
	function getUA() {
	    if (typeof navigator !== 'undefined' &&
	        typeof navigator['userAgent'] === 'string') {
	        return navigator['userAgent'];
	    }
	    else {
	        return '';
	    }
	}
	/**
	 * Detect Node.js.
	 *
	 * @return true if Node.js environment is detected or specified.
	 */
	// Node detection logic from: https://github.com/iliakan/detect-node/
	function isNode() {
	    var _a;
	    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
	    if (forceEnvironment === 'node') {
	        return true;
	    }
	    else if (forceEnvironment === 'browser') {
	        return false;
	    }
	    try {
	        return (Object.prototype.toString.call(global.process) === '[object process]');
	    }
	    catch (e) {
	        return false;
	    }
	}
	/** Returns true if we are running in Safari. */
	function isSafari() {
	    return (!isNode() &&
	        !!navigator.userAgent &&
	        navigator.userAgent.includes('Safari') &&
	        !navigator.userAgent.includes('Chrome'));
	}
	/**
	 * This method checks if indexedDB is supported by current browser/service worker context
	 * @return true if indexedDB is supported by current browser/service worker context
	 */
	function isIndexedDBAvailable() {
	    try {
	        return typeof indexedDB === 'object';
	    }
	    catch (e) {
	        return false;
	    }
	}
	/**
	 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
	 * if errors occur during the database open operation.
	 *
	 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
	 * private browsing)
	 */
	function validateIndexedDBOpenable() {
	    return new Promise((resolve, reject) => {
	        try {
	            let preExist = true;
	            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
	            const request = self.indexedDB.open(DB_CHECK_NAME);
	            request.onsuccess = () => {
	                request.result.close();
	                // delete database only when it doesn't pre-exist
	                if (!preExist) {
	                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);
	                }
	                resolve(true);
	            };
	            request.onupgradeneeded = () => {
	                preExist = false;
	            };
	            request.onerror = () => {
	                var _a;
	                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
	            };
	        }
	        catch (error) {
	            reject(error);
	        }
	    });
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @fileoverview Standardized Firebase Error.
	 *
	 * Usage:
	 *
	 *   // TypeScript string literals for type-safe codes
	 *   type Err =
	 *     'unknown' |
	 *     'object-not-found'
	 *     ;
	 *
	 *   // Closure enum for type-safe error codes
	 *   // at-enum {string}
	 *   var Err = {
	 *     UNKNOWN: 'unknown',
	 *     OBJECT_NOT_FOUND: 'object-not-found',
	 *   }
	 *
	 *   let errors: Map<Err, string> = {
	 *     'generic-error': "Unknown error",
	 *     'file-not-found': "Could not find file: {$file}",
	 *   };
	 *
	 *   // Type-safe function - must pass a valid error code as param.
	 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
	 *
	 *   ...
	 *   throw error.create(Err.GENERIC);
	 *   ...
	 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
	 *   ...
	 *   // Service: Could not file file: foo.txt (service/file-not-found).
	 *
	 *   catch (e) {
	 *     assert(e.message === "Could not find file: foo.txt.");
	 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
	 *       console.log("Could not read file: " + e['file']);
	 *     }
	 *   }
	 */
	const ERROR_NAME = 'FirebaseError';
	// Based on code from:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
	class FirebaseError extends Error {
	    constructor(
	    /** The error code for this error. */
	    code, message, 
	    /** Custom data for this error. */
	    customData) {
	        super(message);
	        this.code = code;
	        this.customData = customData;
	        /** The custom name for all FirebaseErrors. */
	        this.name = ERROR_NAME;
	        // Fix For ES5
	        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
	        // TODO(dlarocque): Replace this with `new.target`: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html#support-for-newtarget
	        //                   which we can now use since we no longer target ES5.
	        Object.setPrototypeOf(this, FirebaseError.prototype);
	        // Maintains proper stack trace for where our error was thrown.
	        // Only available on V8.
	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, ErrorFactory.prototype.create);
	        }
	    }
	}
	class ErrorFactory {
	    constructor(service, serviceName, errors) {
	        this.service = service;
	        this.serviceName = serviceName;
	        this.errors = errors;
	    }
	    create(code, ...data) {
	        const customData = data[0] || {};
	        const fullCode = `${this.service}/${code}`;
	        const template = this.errors[code];
	        const message = template ? replaceTemplate(template, customData) : 'Error';
	        // Service Name: Error message (service/code).
	        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
	        const error = new FirebaseError(fullCode, fullMessage, customData);
	        return error;
	    }
	}
	function replaceTemplate(template, data) {
	    return template.replace(PATTERN, (_, key) => {
	        const value = data[key];
	        return value != null ? String(value) : `<${key}?>`;
	    });
	}
	const PATTERN = /\{\$([^}]+)}/g;
	/**
	 * Deep equal two objects. Support Arrays and Objects.
	 */
	function deepEqual(a, b) {
	    if (a === b) {
	        return true;
	    }
	    const aKeys = Object.keys(a);
	    const bKeys = Object.keys(b);
	    for (const k of aKeys) {
	        if (!bKeys.includes(k)) {
	            return false;
	        }
	        const aProp = a[k];
	        const bProp = b[k];
	        if (isObject(aProp) && isObject(bProp)) {
	            if (!deepEqual(aProp, bProp)) {
	                return false;
	            }
	        }
	        else if (aProp !== bProp) {
	            return false;
	        }
	    }
	    for (const k of bKeys) {
	        if (!aKeys.includes(k)) {
	            return false;
	        }
	    }
	    return true;
	}
	function isObject(thing) {
	    return thing !== null && typeof thing === 'object';
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function getModularInstance(service) {
	    if (service && service._delegate) {
	        return service._delegate;
	    }
	    else {
	        return service;
	    }
	}

	/**
	 * Component for service name T, e.g. `auth`, `auth-internal`
	 */
	class Component {
	    /**
	     *
	     * @param name The public service name, e.g. app, auth, firestore, database
	     * @param instanceFactory Service factory responsible for creating the public interface
	     * @param type whether the service provided by the component is public or private
	     */
	    constructor(name, instanceFactory, type) {
	        this.name = name;
	        this.instanceFactory = instanceFactory;
	        this.type = type;
	        this.multipleInstances = false;
	        /**
	         * Properties to be added to the service namespace
	         */
	        this.serviceProps = {};
	        this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
	        this.onInstanceCreated = null;
	    }
	    setInstantiationMode(mode) {
	        this.instantiationMode = mode;
	        return this;
	    }
	    setMultipleInstances(multipleInstances) {
	        this.multipleInstances = multipleInstances;
	        return this;
	    }
	    setServiceProps(props) {
	        this.serviceProps = props;
	        return this;
	    }
	    setInstanceCreatedCallback(callback) {
	        this.onInstanceCreated = callback;
	        return this;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DEFAULT_ENTRY_NAME$1 = '[DEFAULT]';

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
	 * NameServiceMapping[T] is an alias for the type of the instance
	 */
	class Provider {
	    constructor(name, container) {
	        this.name = name;
	        this.container = container;
	        this.component = null;
	        this.instances = new Map();
	        this.instancesDeferred = new Map();
	        this.instancesOptions = new Map();
	        this.onInitCallbacks = new Map();
	    }
	    /**
	     * @param identifier A provider can provide multiple instances of a service
	     * if this.component.multipleInstances is true.
	     */
	    get(identifier) {
	        // if multipleInstances is not supported, use the default name
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        if (!this.instancesDeferred.has(normalizedIdentifier)) {
	            const deferred = new Deferred();
	            this.instancesDeferred.set(normalizedIdentifier, deferred);
	            if (this.isInitialized(normalizedIdentifier) ||
	                this.shouldAutoInitialize()) {
	                // initialize the service if it can be auto-initialized
	                try {
	                    const instance = this.getOrInitializeService({
	                        instanceIdentifier: normalizedIdentifier
	                    });
	                    if (instance) {
	                        deferred.resolve(instance);
	                    }
	                }
	                catch (e) {
	                    // when the instance factory throws an exception during get(), it should not cause
	                    // a fatal error. We just return the unresolved promise in this case.
	                }
	            }
	        }
	        return this.instancesDeferred.get(normalizedIdentifier).promise;
	    }
	    getImmediate(options) {
	        var _a;
	        // if multipleInstances is not supported, use the default name
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
	        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
	        if (this.isInitialized(normalizedIdentifier) ||
	            this.shouldAutoInitialize()) {
	            try {
	                return this.getOrInitializeService({
	                    instanceIdentifier: normalizedIdentifier
	                });
	            }
	            catch (e) {
	                if (optional) {
	                    return null;
	                }
	                else {
	                    throw e;
	                }
	            }
	        }
	        else {
	            // In case a component is not initialized and should/cannot be auto-initialized at the moment, return null if the optional flag is set, or throw
	            if (optional) {
	                return null;
	            }
	            else {
	                throw Error(`Service ${this.name} is not available`);
	            }
	        }
	    }
	    getComponent() {
	        return this.component;
	    }
	    setComponent(component) {
	        if (component.name !== this.name) {
	            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
	        }
	        if (this.component) {
	            throw Error(`Component for ${this.name} has already been provided`);
	        }
	        this.component = component;
	        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
	        if (!this.shouldAutoInitialize()) {
	            return;
	        }
	        // if the service is eager, initialize the default instance
	        if (isComponentEager(component)) {
	            try {
	                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME$1 });
	            }
	            catch (e) {
	                // when the instance factory for an eager Component throws an exception during the eager
	                // initialization, it should not cause a fatal error.
	                // TODO: Investigate if we need to make it configurable, because some component may want to cause
	                // a fatal error in this case?
	            }
	        }
	        // Create service instances for the pending promises and resolve them
	        // NOTE: if this.multipleInstances is false, only the default instance will be created
	        // and all promises with resolve with it regardless of the identifier.
	        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
	            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	            try {
	                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
	                const instance = this.getOrInitializeService({
	                    instanceIdentifier: normalizedIdentifier
	                });
	                instanceDeferred.resolve(instance);
	            }
	            catch (e) {
	                // when the instance factory throws an exception, it should not cause
	                // a fatal error. We just leave the promise unresolved.
	            }
	        }
	    }
	    clearInstance(identifier = DEFAULT_ENTRY_NAME$1) {
	        this.instancesDeferred.delete(identifier);
	        this.instancesOptions.delete(identifier);
	        this.instances.delete(identifier);
	    }
	    // app.delete() will call this method on every provider to delete the services
	    // TODO: should we mark the provider as deleted?
	    async delete() {
	        const services = Array.from(this.instances.values());
	        await Promise.all([
	            ...services
	                .filter(service => 'INTERNAL' in service) // legacy services
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                .map(service => service.INTERNAL.delete()),
	            ...services
	                .filter(service => '_delete' in service) // modularized services
	                // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                .map(service => service._delete())
	        ]);
	    }
	    isComponentSet() {
	        return this.component != null;
	    }
	    isInitialized(identifier = DEFAULT_ENTRY_NAME$1) {
	        return this.instances.has(identifier);
	    }
	    getOptions(identifier = DEFAULT_ENTRY_NAME$1) {
	        return this.instancesOptions.get(identifier) || {};
	    }
	    initialize(opts = {}) {
	        const { options = {} } = opts;
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
	        if (this.isInitialized(normalizedIdentifier)) {
	            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
	        }
	        if (!this.isComponentSet()) {
	            throw Error(`Component ${this.name} has not been registered yet`);
	        }
	        const instance = this.getOrInitializeService({
	            instanceIdentifier: normalizedIdentifier,
	            options
	        });
	        // resolve any pending promise waiting for the service instance
	        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
	            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
	            if (normalizedIdentifier === normalizedDeferredIdentifier) {
	                instanceDeferred.resolve(instance);
	            }
	        }
	        return instance;
	    }
	    /**
	     *
	     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
	     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
	     *
	     * @param identifier An optional instance identifier
	     * @returns a function to unregister the callback
	     */
	    onInit(callback, identifier) {
	        var _a;
	        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
	        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
	        existingCallbacks.add(callback);
	        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
	        const existingInstance = this.instances.get(normalizedIdentifier);
	        if (existingInstance) {
	            callback(existingInstance, normalizedIdentifier);
	        }
	        return () => {
	            existingCallbacks.delete(callback);
	        };
	    }
	    /**
	     * Invoke onInit callbacks synchronously
	     * @param instance the service instance`
	     */
	    invokeOnInitCallbacks(instance, identifier) {
	        const callbacks = this.onInitCallbacks.get(identifier);
	        if (!callbacks) {
	            return;
	        }
	        for (const callback of callbacks) {
	            try {
	                callback(instance, identifier);
	            }
	            catch (_a) {
	                // ignore errors in the onInit callback
	            }
	        }
	    }
	    getOrInitializeService({ instanceIdentifier, options = {} }) {
	        let instance = this.instances.get(instanceIdentifier);
	        if (!instance && this.component) {
	            instance = this.component.instanceFactory(this.container, {
	                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
	                options
	            });
	            this.instances.set(instanceIdentifier, instance);
	            this.instancesOptions.set(instanceIdentifier, options);
	            /**
	             * Invoke onInit listeners.
	             * Note this.component.onInstanceCreated is different, which is used by the component creator,
	             * while onInit listeners are registered by consumers of the provider.
	             */
	            this.invokeOnInitCallbacks(instance, instanceIdentifier);
	            /**
	             * Order is important
	             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
	             * makes `isInitialized()` return true.
	             */
	            if (this.component.onInstanceCreated) {
	                try {
	                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
	                }
	                catch (_a) {
	                    // ignore errors in the onInstanceCreatedCallback
	                }
	            }
	        }
	        return instance || null;
	    }
	    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME$1) {
	        if (this.component) {
	            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME$1;
	        }
	        else {
	            return identifier; // assume multiple instances are supported before the component is provided.
	        }
	    }
	    shouldAutoInitialize() {
	        return (!!this.component &&
	            this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */);
	    }
	}
	// undefined should be passed to the service factory for the default instance
	function normalizeIdentifierForFactory(identifier) {
	    return identifier === DEFAULT_ENTRY_NAME$1 ? undefined : identifier;
	}
	function isComponentEager(component) {
	    return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
	 */
	class ComponentContainer {
	    constructor(name) {
	        this.name = name;
	        this.providers = new Map();
	    }
	    /**
	     *
	     * @param component Component being added
	     * @param overwrite When a component with the same name has already been registered,
	     * if overwrite is true: overwrite the existing component with the new component and create a new
	     * provider with the new component. It can be useful in tests where you want to use different mocks
	     * for different tests.
	     * if overwrite is false: throw an exception
	     */
	    addComponent(component) {
	        const provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
	        }
	        provider.setComponent(component);
	    }
	    addOrOverwriteComponent(component) {
	        const provider = this.getProvider(component.name);
	        if (provider.isComponentSet()) {
	            // delete the existing provider from the container, so we can register the new component
	            this.providers.delete(component.name);
	        }
	        this.addComponent(component);
	    }
	    /**
	     * getProvider provides a type safe interface where it can only be called with a field name
	     * present in NameServiceMapping interface.
	     *
	     * Firebase SDKs providing services should extend NameServiceMapping interface to register
	     * themselves.
	     */
	    getProvider(name) {
	        if (this.providers.has(name)) {
	            return this.providers.get(name);
	        }
	        // create a Provider for a service that hasn't registered with Firebase
	        const provider = new Provider(name, this);
	        this.providers.set(name, provider);
	        return provider;
	    }
	    getProviders() {
	        return Array.from(this.providers.values());
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A container for all of the Logger instances
	 */
	/**
	 * The JS SDK supports 5 log levels and also allows a user the ability to
	 * silence the logs altogether.
	 *
	 * The order is a follows:
	 * DEBUG < VERBOSE < INFO < WARN < ERROR
	 *
	 * All of the log types above the current log level will be captured (i.e. if
	 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
	 * `VERBOSE` logs will not)
	 */
	var LogLevel;
	(function (LogLevel) {
	    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
	    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
	    LogLevel[LogLevel["INFO"] = 2] = "INFO";
	    LogLevel[LogLevel["WARN"] = 3] = "WARN";
	    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
	    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
	})(LogLevel || (LogLevel = {}));
	const levelStringToEnum = {
	    'debug': LogLevel.DEBUG,
	    'verbose': LogLevel.VERBOSE,
	    'info': LogLevel.INFO,
	    'warn': LogLevel.WARN,
	    'error': LogLevel.ERROR,
	    'silent': LogLevel.SILENT
	};
	/**
	 * The default log level
	 */
	const defaultLogLevel = LogLevel.INFO;
	/**
	 * By default, `console.debug` is not displayed in the developer console (in
	 * chrome). To avoid forcing users to have to opt-in to these logs twice
	 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
	 * logs to the `console.log` function.
	 */
	const ConsoleMethod = {
	    [LogLevel.DEBUG]: 'log',
	    [LogLevel.VERBOSE]: 'log',
	    [LogLevel.INFO]: 'info',
	    [LogLevel.WARN]: 'warn',
	    [LogLevel.ERROR]: 'error'
	};
	/**
	 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
	 * messages on to their corresponding console counterparts (if the log method
	 * is supported by the current log level)
	 */
	const defaultLogHandler = (instance, logType, ...args) => {
	    if (logType < instance.logLevel) {
	        return;
	    }
	    const now = new Date().toISOString();
	    const method = ConsoleMethod[logType];
	    if (method) {
	        console[method](`[${now}]  ${instance.name}:`, ...args);
	    }
	    else {
	        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
	    }
	};
	class Logger {
	    /**
	     * Gives you an instance of a Logger to capture messages according to
	     * Firebase's logging scheme.
	     *
	     * @param name The name that the logs will be associated with
	     */
	    constructor(name) {
	        this.name = name;
	        /**
	         * The log level of the given Logger instance.
	         */
	        this._logLevel = defaultLogLevel;
	        /**
	         * The main (internal) log handler for the Logger instance.
	         * Can be set to a new function in internal package code but not by user.
	         */
	        this._logHandler = defaultLogHandler;
	        /**
	         * The optional, additional, user-defined log handler for the Logger instance.
	         */
	        this._userLogHandler = null;
	    }
	    get logLevel() {
	        return this._logLevel;
	    }
	    set logLevel(val) {
	        if (!(val in LogLevel)) {
	            throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
	        }
	        this._logLevel = val;
	    }
	    // Workaround for setter/getter having to be the same type.
	    setLogLevel(val) {
	        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
	    }
	    get logHandler() {
	        return this._logHandler;
	    }
	    set logHandler(val) {
	        if (typeof val !== 'function') {
	            throw new TypeError('Value assigned to `logHandler` must be a function');
	        }
	        this._logHandler = val;
	    }
	    get userLogHandler() {
	        return this._userLogHandler;
	    }
	    set userLogHandler(val) {
	        this._userLogHandler = val;
	    }
	    /**
	     * The functions below are all based on the `console` interface
	     */
	    debug(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
	        this._logHandler(this, LogLevel.DEBUG, ...args);
	    }
	    log(...args) {
	        this._userLogHandler &&
	            this._userLogHandler(this, LogLevel.VERBOSE, ...args);
	        this._logHandler(this, LogLevel.VERBOSE, ...args);
	    }
	    info(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
	        this._logHandler(this, LogLevel.INFO, ...args);
	    }
	    warn(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
	        this._logHandler(this, LogLevel.WARN, ...args);
	    }
	    error(...args) {
	        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
	        this._logHandler(this, LogLevel.ERROR, ...args);
	    }
	}

	const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

	let idbProxyableTypes;
	let cursorAdvanceMethods;
	// This is a function to prevent it throwing up in node environments.
	function getIdbProxyableTypes() {
	    return (idbProxyableTypes ||
	        (idbProxyableTypes = [
	            IDBDatabase,
	            IDBObjectStore,
	            IDBIndex,
	            IDBCursor,
	            IDBTransaction,
	        ]));
	}
	// This is a function to prevent it throwing up in node environments.
	function getCursorAdvanceMethods() {
	    return (cursorAdvanceMethods ||
	        (cursorAdvanceMethods = [
	            IDBCursor.prototype.advance,
	            IDBCursor.prototype.continue,
	            IDBCursor.prototype.continuePrimaryKey,
	        ]));
	}
	const cursorRequestMap = new WeakMap();
	const transactionDoneMap = new WeakMap();
	const transactionStoreNamesMap = new WeakMap();
	const transformCache = new WeakMap();
	const reverseTransformCache = new WeakMap();
	function promisifyRequest(request) {
	    const promise = new Promise((resolve, reject) => {
	        const unlisten = () => {
	            request.removeEventListener('success', success);
	            request.removeEventListener('error', error);
	        };
	        const success = () => {
	            resolve(wrap(request.result));
	            unlisten();
	        };
	        const error = () => {
	            reject(request.error);
	            unlisten();
	        };
	        request.addEventListener('success', success);
	        request.addEventListener('error', error);
	    });
	    promise
	        .then((value) => {
	        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
	        // (see wrapFunction).
	        if (value instanceof IDBCursor) {
	            cursorRequestMap.set(value, request);
	        }
	        // Catching to avoid "Uncaught Promise exceptions"
	    })
	        .catch(() => { });
	    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
	    // is because we create many promises from a single IDBRequest.
	    reverseTransformCache.set(promise, request);
	    return promise;
	}
	function cacheDonePromiseForTransaction(tx) {
	    // Early bail if we've already created a done promise for this transaction.
	    if (transactionDoneMap.has(tx))
	        return;
	    const done = new Promise((resolve, reject) => {
	        const unlisten = () => {
	            tx.removeEventListener('complete', complete);
	            tx.removeEventListener('error', error);
	            tx.removeEventListener('abort', error);
	        };
	        const complete = () => {
	            resolve();
	            unlisten();
	        };
	        const error = () => {
	            reject(tx.error || new DOMException('AbortError', 'AbortError'));
	            unlisten();
	        };
	        tx.addEventListener('complete', complete);
	        tx.addEventListener('error', error);
	        tx.addEventListener('abort', error);
	    });
	    // Cache it for later retrieval.
	    transactionDoneMap.set(tx, done);
	}
	let idbProxyTraps = {
	    get(target, prop, receiver) {
	        if (target instanceof IDBTransaction) {
	            // Special handling for transaction.done.
	            if (prop === 'done')
	                return transactionDoneMap.get(target);
	            // Polyfill for objectStoreNames because of Edge.
	            if (prop === 'objectStoreNames') {
	                return target.objectStoreNames || transactionStoreNamesMap.get(target);
	            }
	            // Make tx.store return the only store in the transaction, or undefined if there are many.
	            if (prop === 'store') {
	                return receiver.objectStoreNames[1]
	                    ? undefined
	                    : receiver.objectStore(receiver.objectStoreNames[0]);
	            }
	        }
	        // Else transform whatever we get back.
	        return wrap(target[prop]);
	    },
	    set(target, prop, value) {
	        target[prop] = value;
	        return true;
	    },
	    has(target, prop) {
	        if (target instanceof IDBTransaction &&
	            (prop === 'done' || prop === 'store')) {
	            return true;
	        }
	        return prop in target;
	    },
	};
	function replaceTraps(callback) {
	    idbProxyTraps = callback(idbProxyTraps);
	}
	function wrapFunction(func) {
	    // Due to expected object equality (which is enforced by the caching in `wrap`), we
	    // only create one new func per func.
	    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
	    if (func === IDBDatabase.prototype.transaction &&
	        !('objectStoreNames' in IDBTransaction.prototype)) {
	        return function (storeNames, ...args) {
	            const tx = func.call(unwrap(this), storeNames, ...args);
	            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
	            return wrap(tx);
	        };
	    }
	    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
	    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
	    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
	    // with real promises, so each advance methods returns a new promise for the cursor object, or
	    // undefined if the end of the cursor has been reached.
	    if (getCursorAdvanceMethods().includes(func)) {
	        return function (...args) {
	            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
	            // the original object.
	            func.apply(unwrap(this), args);
	            return wrap(cursorRequestMap.get(this));
	        };
	    }
	    return function (...args) {
	        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
	        // the original object.
	        return wrap(func.apply(unwrap(this), args));
	    };
	}
	function transformCachableValue(value) {
	    if (typeof value === 'function')
	        return wrapFunction(value);
	    // This doesn't return, it just creates a 'done' promise for the transaction,
	    // which is later returned for transaction.done (see idbObjectHandler).
	    if (value instanceof IDBTransaction)
	        cacheDonePromiseForTransaction(value);
	    if (instanceOfAny(value, getIdbProxyableTypes()))
	        return new Proxy(value, idbProxyTraps);
	    // Return the same value back if we're not going to transform it.
	    return value;
	}
	function wrap(value) {
	    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
	    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
	    if (value instanceof IDBRequest)
	        return promisifyRequest(value);
	    // If we've already transformed this value before, reuse the transformed value.
	    // This is faster, but it also provides object equality.
	    if (transformCache.has(value))
	        return transformCache.get(value);
	    const newValue = transformCachableValue(value);
	    // Not all types are transformed.
	    // These may be primitive types, so they can't be WeakMap keys.
	    if (newValue !== value) {
	        transformCache.set(value, newValue);
	        reverseTransformCache.set(newValue, value);
	    }
	    return newValue;
	}
	const unwrap = (value) => reverseTransformCache.get(value);

	/**
	 * Open a database.
	 *
	 * @param name Name of the database.
	 * @param version Schema version.
	 * @param callbacks Additional callbacks.
	 */
	function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
	    const request = indexedDB.open(name, version);
	    const openPromise = wrap(request);
	    if (upgrade) {
	        request.addEventListener('upgradeneeded', (event) => {
	            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
	        });
	    }
	    if (blocked) {
	        request.addEventListener('blocked', (event) => blocked(
	        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
	        event.oldVersion, event.newVersion, event));
	    }
	    openPromise
	        .then((db) => {
	        if (terminated)
	            db.addEventListener('close', () => terminated());
	        if (blocking) {
	            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
	        }
	    })
	        .catch(() => { });
	    return openPromise;
	}

	const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
	const writeMethods = ['put', 'add', 'delete', 'clear'];
	const cachedMethods = new Map();
	function getMethod(target, prop) {
	    if (!(target instanceof IDBDatabase &&
	        !(prop in target) &&
	        typeof prop === 'string')) {
	        return;
	    }
	    if (cachedMethods.get(prop))
	        return cachedMethods.get(prop);
	    const targetFuncName = prop.replace(/FromIndex$/, '');
	    const useIndex = prop !== targetFuncName;
	    const isWrite = writeMethods.includes(targetFuncName);
	    if (
	    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
	    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
	        !(isWrite || readMethods.includes(targetFuncName))) {
	        return;
	    }
	    const method = async function (storeName, ...args) {
	        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
	        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
	        let target = tx.store;
	        if (useIndex)
	            target = target.index(args.shift());
	        // Must reject if op rejects.
	        // If it's a write operation, must reject if tx.done rejects.
	        // Must reject with op rejection first.
	        // Must resolve with op value.
	        // Must handle both promises (no unhandled rejections)
	        return (await Promise.all([
	            target[targetFuncName](...args),
	            isWrite && tx.done,
	        ]))[0];
	    };
	    cachedMethods.set(prop, method);
	    return method;
	}
	replaceTraps((oldTraps) => ({
	    ...oldTraps,
	    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
	    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
	}));

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class PlatformLoggerServiceImpl {
	    constructor(container) {
	        this.container = container;
	    }
	    // In initial implementation, this will be called by installations on
	    // auth token refresh, and installations will send this string.
	    getPlatformInfoString() {
	        const providers = this.container.getProviders();
	        // Loop through providers and get library/version pairs from any that are
	        // version components.
	        return providers
	            .map(provider => {
	            if (isVersionServiceProvider(provider)) {
	                const service = provider.getImmediate();
	                return `${service.library}/${service.version}`;
	            }
	            else {
	                return null;
	            }
	        })
	            .filter(logString => logString)
	            .join(' ');
	    }
	}
	/**
	 *
	 * @param provider check if this provider provides a VersionService
	 *
	 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
	 * provides VersionService. The provider is not necessarily a 'app-version'
	 * provider.
	 */
	function isVersionServiceProvider(provider) {
	    const component = provider.getComponent();
	    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* ComponentType.VERSION */;
	}

	const name$q = "@firebase/app";
	const version$1 = "0.11.1";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const logger = new Logger('@firebase/app');

	const name$p = "@firebase/app-compat";

	const name$o = "@firebase/analytics-compat";

	const name$n = "@firebase/analytics";

	const name$m = "@firebase/app-check-compat";

	const name$l = "@firebase/app-check";

	const name$k = "@firebase/auth";

	const name$j = "@firebase/auth-compat";

	const name$i = "@firebase/database";

	const name$h = "@firebase/data-connect";

	const name$g = "@firebase/database-compat";

	const name$f = "@firebase/functions";

	const name$e = "@firebase/functions-compat";

	const name$d = "@firebase/installations";

	const name$c = "@firebase/installations-compat";

	const name$b = "@firebase/messaging";

	const name$a = "@firebase/messaging-compat";

	const name$9 = "@firebase/performance";

	const name$8 = "@firebase/performance-compat";

	const name$7 = "@firebase/remote-config";

	const name$6 = "@firebase/remote-config-compat";

	const name$5 = "@firebase/storage";

	const name$4 = "@firebase/storage-compat";

	const name$3 = "@firebase/firestore";

	const name$2 = "@firebase/vertexai";

	const name$1 = "@firebase/firestore-compat";

	const name$r = "firebase";
	const version$2 = "11.3.1";

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The default app name
	 *
	 * @internal
	 */
	const DEFAULT_ENTRY_NAME = '[DEFAULT]';
	const PLATFORM_LOG_STRING = {
	    [name$q]: 'fire-core',
	    [name$p]: 'fire-core-compat',
	    [name$n]: 'fire-analytics',
	    [name$o]: 'fire-analytics-compat',
	    [name$l]: 'fire-app-check',
	    [name$m]: 'fire-app-check-compat',
	    [name$k]: 'fire-auth',
	    [name$j]: 'fire-auth-compat',
	    [name$i]: 'fire-rtdb',
	    [name$h]: 'fire-data-connect',
	    [name$g]: 'fire-rtdb-compat',
	    [name$f]: 'fire-fn',
	    [name$e]: 'fire-fn-compat',
	    [name$d]: 'fire-iid',
	    [name$c]: 'fire-iid-compat',
	    [name$b]: 'fire-fcm',
	    [name$a]: 'fire-fcm-compat',
	    [name$9]: 'fire-perf',
	    [name$8]: 'fire-perf-compat',
	    [name$7]: 'fire-rc',
	    [name$6]: 'fire-rc-compat',
	    [name$5]: 'fire-gcs',
	    [name$4]: 'fire-gcs-compat',
	    [name$3]: 'fire-fst',
	    [name$1]: 'fire-fst-compat',
	    [name$2]: 'fire-vertex',
	    'fire-js': 'fire-js', // Platform identifier for JS SDK.
	    [name$r]: 'fire-js-all'
	};

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @internal
	 */
	const _apps = new Map();
	/**
	 * @internal
	 */
	const _serverApps = new Map();
	/**
	 * Registered components.
	 *
	 * @internal
	 */
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	const _components = new Map();
	/**
	 * @param component - the component being added to this app's container
	 *
	 * @internal
	 */
	function _addComponent(app, component) {
	    try {
	        app.container.addComponent(component);
	    }
	    catch (e) {
	        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
	    }
	}
	/**
	 *
	 * @param component - the component to register
	 * @returns whether or not the component is registered successfully
	 *
	 * @internal
	 */
	function _registerComponent(component) {
	    const componentName = component.name;
	    if (_components.has(componentName)) {
	        logger.debug(`There were multiple attempts to register component ${componentName}.`);
	        return false;
	    }
	    _components.set(componentName, component);
	    // add the component to existing app instances
	    for (const app of _apps.values()) {
	        _addComponent(app, component);
	    }
	    for (const serverApp of _serverApps.values()) {
	        _addComponent(serverApp, component);
	    }
	    return true;
	}
	/**
	 *
	 * @param app - FirebaseApp instance
	 * @param name - service name
	 *
	 * @returns the provider for the service with the matching name
	 *
	 * @internal
	 */
	function _getProvider(app, name) {
	    const heartbeatController = app.container
	        .getProvider('heartbeat')
	        .getImmediate({ optional: true });
	    if (heartbeatController) {
	        void heartbeatController.triggerHeartbeat();
	    }
	    return app.container.getProvider(name);
	}
	/**
	 *
	 * @param obj - an object of type FirebaseApp.
	 *
	 * @returns true if the provided object is of type FirebaseServerAppImpl.
	 *
	 * @internal
	 */
	function _isFirebaseServerApp(obj) {
	    if (obj === null || obj === undefined) {
	        return false;
	    }
	    return obj.settings !== undefined;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const ERRORS = {
	    ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " +
	        'call initializeApp() first',
	    ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}'",
	    ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
	    ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
	    ["server-app-deleted" /* AppError.SERVER_APP_DELETED */]: 'Firebase Server App has been deleted',
	    ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
	    ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
	        'Firebase App instance.',
	    ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
	    ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
	    ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
	    ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
	    ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',
	    ["finalization-registry-not-supported" /* AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED */]: 'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',
	    ["invalid-server-app-environment" /* AppError.INVALID_SERVER_APP_ENVIRONMENT */]: 'FirebaseServerApp is not for use in browser environments.'
	};
	const ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class FirebaseAppImpl {
	    constructor(options, config, container) {
	        this._isDeleted = false;
	        this._options = Object.assign({}, options);
	        this._config = Object.assign({}, config);
	        this._name = config.name;
	        this._automaticDataCollectionEnabled =
	            config.automaticDataCollectionEnabled;
	        this._container = container;
	        this.container.addComponent(new Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
	    }
	    get automaticDataCollectionEnabled() {
	        this.checkDestroyed();
	        return this._automaticDataCollectionEnabled;
	    }
	    set automaticDataCollectionEnabled(val) {
	        this.checkDestroyed();
	        this._automaticDataCollectionEnabled = val;
	    }
	    get name() {
	        this.checkDestroyed();
	        return this._name;
	    }
	    get options() {
	        this.checkDestroyed();
	        return this._options;
	    }
	    get config() {
	        this.checkDestroyed();
	        return this._config;
	    }
	    get container() {
	        return this._container;
	    }
	    get isDeleted() {
	        return this._isDeleted;
	    }
	    set isDeleted(val) {
	        this._isDeleted = val;
	    }
	    /**
	     * This function will throw an Error if the App has already been deleted -
	     * use before performing API actions on the App.
	     */
	    checkDestroyed() {
	        if (this.isDeleted) {
	            throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */, { appName: this._name });
	        }
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The current SDK version.
	 *
	 * @public
	 */
	const SDK_VERSION = version$2;
	function initializeApp(_options, rawConfig = {}) {
	    let options = _options;
	    if (typeof rawConfig !== 'object') {
	        const name = rawConfig;
	        rawConfig = { name };
	    }
	    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
	    const name = config.name;
	    if (typeof name !== 'string' || !name) {
	        throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
	            appName: String(name)
	        });
	    }
	    options || (options = getDefaultAppConfig());
	    if (!options) {
	        throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */);
	    }
	    const existingApp = _apps.get(name);
	    if (existingApp) {
	        // return the existing app if options and config deep equal the ones in the existing app.
	        if (deepEqual(options, existingApp.options) &&
	            deepEqual(config, existingApp.config)) {
	            return existingApp;
	        }
	        else {
	            throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */, { appName: name });
	        }
	    }
	    const container = new ComponentContainer(name);
	    for (const component of _components.values()) {
	        container.addComponent(component);
	    }
	    const newApp = new FirebaseAppImpl(options, config, container);
	    _apps.set(name, newApp);
	    return newApp;
	}
	/**
	 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
	 *
	 * When called with no arguments, the default app is returned. When an app name
	 * is provided, the app corresponding to that name is returned.
	 *
	 * An exception is thrown if the app being retrieved has not yet been
	 * initialized.
	 *
	 * @example
	 * ```javascript
	 * // Return the default app
	 * const app = getApp();
	 * ```
	 *
	 * @example
	 * ```javascript
	 * // Return a named app
	 * const otherApp = getApp("otherApp");
	 * ```
	 *
	 * @param name - Optional name of the app to return. If no name is
	 *   provided, the default is `"[DEFAULT]"`.
	 *
	 * @returns The app corresponding to the provided app name.
	 *   If no app name is provided, the default app is returned.
	 *
	 * @public
	 */
	function getApp(name = DEFAULT_ENTRY_NAME) {
	    const app = _apps.get(name);
	    if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {
	        return initializeApp();
	    }
	    if (!app) {
	        throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */, { appName: name });
	    }
	    return app;
	}
	/**
	 * Registers a library's name and version for platform logging purposes.
	 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
	 * @param version - Current version of that library.
	 * @param variant - Bundle variant, e.g., node, rn, etc.
	 *
	 * @public
	 */
	function registerVersion(libraryKeyOrName, version, variant) {
	    var _a;
	    // TODO: We can use this check to whitelist strings when/if we set up
	    // a good whitelist system.
	    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
	    if (variant) {
	        library += `-${variant}`;
	    }
	    const libraryMismatch = library.match(/\s|\//);
	    const versionMismatch = version.match(/\s|\//);
	    if (libraryMismatch || versionMismatch) {
	        const warning = [
	            `Unable to register library "${library}" with version "${version}":`
	        ];
	        if (libraryMismatch) {
	            warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
	        }
	        if (libraryMismatch && versionMismatch) {
	            warning.push('and');
	        }
	        if (versionMismatch) {
	            warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
	        }
	        logger.warn(warning.join(' '));
	        return;
	    }
	    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), "VERSION" /* ComponentType.VERSION */));
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const DB_NAME = 'firebase-heartbeat-database';
	const DB_VERSION = 1;
	const STORE_NAME = 'firebase-heartbeat-store';
	let dbPromise = null;
	function getDbPromise() {
	    if (!dbPromise) {
	        dbPromise = openDB(DB_NAME, DB_VERSION, {
	            upgrade: (db, oldVersion) => {
	                // We don't use 'break' in this switch statement, the fall-through
	                // behavior is what we want, because if there are multiple versions between
	                // the old version and the current version, we want ALL the migrations
	                // that correspond to those versions to run, not only the last one.
	                // eslint-disable-next-line default-case
	                switch (oldVersion) {
	                    case 0:
	                        try {
	                            db.createObjectStore(STORE_NAME);
	                        }
	                        catch (e) {
	                            // Safari/iOS browsers throw occasional exceptions on
	                            // db.createObjectStore() that may be a bug. Avoid blocking
	                            // the rest of the app functionality.
	                            console.warn(e);
	                        }
	                }
	            }
	        }).catch(e => {
	            throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */, {
	                originalErrorMessage: e.message
	            });
	        });
	    }
	    return dbPromise;
	}
	async function readHeartbeatsFromIndexedDB(app) {
	    try {
	        const db = await getDbPromise();
	        const tx = db.transaction(STORE_NAME);
	        const result = await tx.objectStore(STORE_NAME).get(computeKey(app));
	        // We already have the value but tx.done can throw,
	        // so we need to await it here to catch errors
	        await tx.done;
	        return result;
	    }
	    catch (e) {
	        if (e instanceof FirebaseError) {
	            logger.warn(e.message);
	        }
	        else {
	            const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */, {
	                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
	            });
	            logger.warn(idbGetError.message);
	        }
	    }
	}
	async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
	    try {
	        const db = await getDbPromise();
	        const tx = db.transaction(STORE_NAME, 'readwrite');
	        const objectStore = tx.objectStore(STORE_NAME);
	        await objectStore.put(heartbeatObject, computeKey(app));
	        await tx.done;
	    }
	    catch (e) {
	        if (e instanceof FirebaseError) {
	            logger.warn(e.message);
	        }
	        else {
	            const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */, {
	                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
	            });
	            logger.warn(idbGetError.message);
	        }
	    }
	}
	function computeKey(app) {
	    return `${app.name}!${app.options.appId}`;
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const MAX_HEADER_BYTES = 1024;
	const MAX_NUM_STORED_HEARTBEATS = 30;
	class HeartbeatServiceImpl {
	    constructor(container) {
	        this.container = container;
	        /**
	         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
	         * the header string.
	         * Stores one record per date. This will be consolidated into the standard
	         * format of one record per user agent string before being sent as a header.
	         * Populated from indexedDB when the controller is instantiated and should
	         * be kept in sync with indexedDB.
	         * Leave public for easier testing.
	         */
	        this._heartbeatsCache = null;
	        const app = this.container.getProvider('app').getImmediate();
	        this._storage = new HeartbeatStorageImpl(app);
	        this._heartbeatsCachePromise = this._storage.read().then(result => {
	            this._heartbeatsCache = result;
	            return result;
	        });
	    }
	    /**
	     * Called to report a heartbeat. The function will generate
	     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
	     * to IndexedDB.
	     * Note that we only store one heartbeat per day. So if a heartbeat for today is
	     * already logged, subsequent calls to this function in the same day will be ignored.
	     */
	    async triggerHeartbeat() {
	        var _a, _b;
	        try {
	            const platformLogger = this.container
	                .getProvider('platform-logger')
	                .getImmediate();
	            // This is the "Firebase user agent" string from the platform logger
	            // service, not the browser user agent.
	            const agent = platformLogger.getPlatformInfoString();
	            const date = getUTCDateString();
	            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null) {
	                this._heartbeatsCache = await this._heartbeatsCachePromise;
	                // If we failed to construct a heartbeats cache, then return immediately.
	                if (((_b = this._heartbeatsCache) === null || _b === void 0 ? void 0 : _b.heartbeats) == null) {
	                    return;
	                }
	            }
	            // Do not store a heartbeat if one is already stored for this day
	            // or if a header has already been sent today.
	            if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
	                this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
	                return;
	            }
	            else {
	                // There is no entry for this date. Create one.
	                this._heartbeatsCache.heartbeats.push({ date, agent });
	                // If the number of stored heartbeats exceeds the maximum number of stored heartbeats, remove the heartbeat with the earliest date.
	                // Since this is executed each time a heartbeat is pushed, the limit can only be exceeded by one, so only one needs to be removed.
	                if (this._heartbeatsCache.heartbeats.length > MAX_NUM_STORED_HEARTBEATS) {
	                    const earliestHeartbeatIdx = getEarliestHeartbeatIdx(this._heartbeatsCache.heartbeats);
	                    this._heartbeatsCache.heartbeats.splice(earliestHeartbeatIdx, 1);
	                }
	            }
	            return this._storage.overwrite(this._heartbeatsCache);
	        }
	        catch (e) {
	            logger.warn(e);
	        }
	    }
	    /**
	     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
	     * It also clears all heartbeats from memory as well as in IndexedDB.
	     *
	     * NOTE: Consuming product SDKs should not send the header if this method
	     * returns an empty string.
	     */
	    async getHeartbeatsHeader() {
	        var _a;
	        try {
	            if (this._heartbeatsCache === null) {
	                await this._heartbeatsCachePromise;
	            }
	            // If it's still null or the array is empty, there is no data to send.
	            if (((_a = this._heartbeatsCache) === null || _a === void 0 ? void 0 : _a.heartbeats) == null ||
	                this._heartbeatsCache.heartbeats.length === 0) {
	                return '';
	            }
	            const date = getUTCDateString();
	            // Extract as many heartbeats from the cache as will fit under the size limit.
	            const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
	            const headerString = base64urlEncodeWithoutPadding(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
	            // Store last sent date to prevent another being logged/sent for the same day.
	            this._heartbeatsCache.lastSentHeartbeatDate = date;
	            if (unsentEntries.length > 0) {
	                // Store any unsent entries if they exist.
	                this._heartbeatsCache.heartbeats = unsentEntries;
	                // This seems more likely than emptying the array (below) to lead to some odd state
	                // since the cache isn't empty and this will be called again on the next request,
	                // and is probably safest if we await it.
	                await this._storage.overwrite(this._heartbeatsCache);
	            }
	            else {
	                this._heartbeatsCache.heartbeats = [];
	                // Do not wait for this, to reduce latency.
	                void this._storage.overwrite(this._heartbeatsCache);
	            }
	            return headerString;
	        }
	        catch (e) {
	            logger.warn(e);
	            return '';
	        }
	    }
	}
	function getUTCDateString() {
	    const today = new Date();
	    // Returns date format 'YYYY-MM-DD'
	    return today.toISOString().substring(0, 10);
	}
	function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
	    // Heartbeats grouped by user agent in the standard format to be sent in
	    // the header.
	    const heartbeatsToSend = [];
	    // Single date format heartbeats that are not sent.
	    let unsentEntries = heartbeatsCache.slice();
	    for (const singleDateHeartbeat of heartbeatsCache) {
	        // Look for an existing entry with the same user agent.
	        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
	        if (!heartbeatEntry) {
	            // If no entry for this user agent exists, create one.
	            heartbeatsToSend.push({
	                agent: singleDateHeartbeat.agent,
	                dates: [singleDateHeartbeat.date]
	            });
	            if (countBytes(heartbeatsToSend) > maxSize) {
	                // If the header would exceed max size, remove the added heartbeat
	                // entry and stop adding to the header.
	                heartbeatsToSend.pop();
	                break;
	            }
	        }
	        else {
	            heartbeatEntry.dates.push(singleDateHeartbeat.date);
	            // If the header would exceed max size, remove the added date
	            // and stop adding to the header.
	            if (countBytes(heartbeatsToSend) > maxSize) {
	                heartbeatEntry.dates.pop();
	                break;
	            }
	        }
	        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
	        // quota and the loop breaks early.)
	        unsentEntries = unsentEntries.slice(1);
	    }
	    return {
	        heartbeatsToSend,
	        unsentEntries
	    };
	}
	class HeartbeatStorageImpl {
	    constructor(app) {
	        this.app = app;
	        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
	    }
	    async runIndexedDBEnvironmentCheck() {
	        if (!isIndexedDBAvailable()) {
	            return false;
	        }
	        else {
	            return validateIndexedDBOpenable()
	                .then(() => true)
	                .catch(() => false);
	        }
	    }
	    /**
	     * Read all heartbeats.
	     */
	    async read() {
	        const canUseIndexedDB = await this._canUseIndexedDBPromise;
	        if (!canUseIndexedDB) {
	            return { heartbeats: [] };
	        }
	        else {
	            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
	            if (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) {
	                return idbHeartbeatObject;
	            }
	            else {
	                return { heartbeats: [] };
	            }
	        }
	    }
	    // overwrite the storage with the provided heartbeats
	    async overwrite(heartbeatsObject) {
	        var _a;
	        const canUseIndexedDB = await this._canUseIndexedDBPromise;
	        if (!canUseIndexedDB) {
	            return;
	        }
	        else {
	            const existingHeartbeatsObject = await this.read();
	            return writeHeartbeatsToIndexedDB(this.app, {
	                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
	                heartbeats: heartbeatsObject.heartbeats
	            });
	        }
	    }
	    // add heartbeats
	    async add(heartbeatsObject) {
	        var _a;
	        const canUseIndexedDB = await this._canUseIndexedDBPromise;
	        if (!canUseIndexedDB) {
	            return;
	        }
	        else {
	            const existingHeartbeatsObject = await this.read();
	            return writeHeartbeatsToIndexedDB(this.app, {
	                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
	                heartbeats: [
	                    ...existingHeartbeatsObject.heartbeats,
	                    ...heartbeatsObject.heartbeats
	                ]
	            });
	        }
	    }
	}
	/**
	 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
	 * in a platform logging header JSON object, stringified, and converted
	 * to base 64.
	 */
	function countBytes(heartbeatsCache) {
	    // base64 has a restricted set of characters, all of which should be 1 byte.
	    return base64urlEncodeWithoutPadding(
	    // heartbeatsCache wrapper properties
	    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
	}
	/**
	 * Returns the index of the heartbeat with the earliest date.
	 * If the heartbeats array is empty, -1 is returned.
	 */
	function getEarliestHeartbeatIdx(heartbeats) {
	    if (heartbeats.length === 0) {
	        return -1;
	    }
	    let earliestHeartbeatIdx = 0;
	    let earliestHeartbeatDate = heartbeats[0].date;
	    for (let i = 1; i < heartbeats.length; i++) {
	        if (heartbeats[i].date < earliestHeartbeatDate) {
	            earliestHeartbeatDate = heartbeats[i].date;
	            earliestHeartbeatIdx = i;
	        }
	    }
	    return earliestHeartbeatIdx;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function registerCoreComponents(variant) {
	    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
	    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
	    // Register `app` package.
	    registerVersion(name$q, version$1, variant);
	    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
	    registerVersion(name$q, version$1, 'esm2017');
	    // Register platform SDK identifier (no version).
	    registerVersion('fire-js', '');
	}

	/**
	 * Firebase App
	 *
	 * @remarks This package coordinates the communication between the different Firebase components
	 * @packageDocumentation
	 */
	registerCoreComponents('');

	var name = "firebase";
	var version = "11.3.1";

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	registerVersion(name, version, 'app');

	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	/** @license
	Copyright The Closure Library Authors.
	SPDX-License-Identifier: Apache-2.0
	*/

	var Integer;
	var Md5;
	(function() {var h;/** @license

	 Copyright The Closure Library Authors.
	 SPDX-License-Identifier: Apache-2.0
	*/
	function k(f,a){function c(){}c.prototype=a.prototype;f.D=a.prototype;f.prototype=new c;f.prototype.constructor=f;f.C=function(d,e,g){for(var b=Array(arguments.length-2),r=2;r<arguments.length;r++)b[r-2]=arguments[r];return a.prototype[e].apply(d,b)};}function l(){this.blockSize=-1;}function m(){this.blockSize=-1;this.blockSize=64;this.g=Array(4);this.B=Array(this.blockSize);this.o=this.h=0;this.s();}k(m,l);m.prototype.s=function(){this.g[0]=1732584193;this.g[1]=4023233417;this.g[2]=2562383102;this.g[3]=271733878;this.o=this.h=0;};
	function n(f,a,c){c||(c=0);var d=Array(16);if("string"===typeof a)for(var e=0;16>e;++e)d[e]=a.charCodeAt(c++)|a.charCodeAt(c++)<<8|a.charCodeAt(c++)<<16|a.charCodeAt(c++)<<24;else for(e=0;16>e;++e)d[e]=a[c++]|a[c++]<<8|a[c++]<<16|a[c++]<<24;a=f.g[0];c=f.g[1];e=f.g[2];var g=f.g[3];var b=a+(g^c&(e^g))+d[0]+3614090360&4294967295;a=c+(b<<7&4294967295|b>>>25);b=g+(e^a&(c^e))+d[1]+3905402710&4294967295;g=a+(b<<12&4294967295|b>>>20);b=e+(c^g&(a^c))+d[2]+606105819&4294967295;e=g+(b<<17&4294967295|b>>>15);
	b=c+(a^e&(g^a))+d[3]+3250441966&4294967295;c=e+(b<<22&4294967295|b>>>10);b=a+(g^c&(e^g))+d[4]+4118548399&4294967295;a=c+(b<<7&4294967295|b>>>25);b=g+(e^a&(c^e))+d[5]+1200080426&4294967295;g=a+(b<<12&4294967295|b>>>20);b=e+(c^g&(a^c))+d[6]+2821735955&4294967295;e=g+(b<<17&4294967295|b>>>15);b=c+(a^e&(g^a))+d[7]+4249261313&4294967295;c=e+(b<<22&4294967295|b>>>10);b=a+(g^c&(e^g))+d[8]+1770035416&4294967295;a=c+(b<<7&4294967295|b>>>25);b=g+(e^a&(c^e))+d[9]+2336552879&4294967295;g=a+(b<<12&4294967295|
	b>>>20);b=e+(c^g&(a^c))+d[10]+4294925233&4294967295;e=g+(b<<17&4294967295|b>>>15);b=c+(a^e&(g^a))+d[11]+2304563134&4294967295;c=e+(b<<22&4294967295|b>>>10);b=a+(g^c&(e^g))+d[12]+1804603682&4294967295;a=c+(b<<7&4294967295|b>>>25);b=g+(e^a&(c^e))+d[13]+4254626195&4294967295;g=a+(b<<12&4294967295|b>>>20);b=e+(c^g&(a^c))+d[14]+2792965006&4294967295;e=g+(b<<17&4294967295|b>>>15);b=c+(a^e&(g^a))+d[15]+1236535329&4294967295;c=e+(b<<22&4294967295|b>>>10);b=a+(e^g&(c^e))+d[1]+4129170786&4294967295;a=c+(b<<
	5&4294967295|b>>>27);b=g+(c^e&(a^c))+d[6]+3225465664&4294967295;g=a+(b<<9&4294967295|b>>>23);b=e+(a^c&(g^a))+d[11]+643717713&4294967295;e=g+(b<<14&4294967295|b>>>18);b=c+(g^a&(e^g))+d[0]+3921069994&4294967295;c=e+(b<<20&4294967295|b>>>12);b=a+(e^g&(c^e))+d[5]+3593408605&4294967295;a=c+(b<<5&4294967295|b>>>27);b=g+(c^e&(a^c))+d[10]+38016083&4294967295;g=a+(b<<9&4294967295|b>>>23);b=e+(a^c&(g^a))+d[15]+3634488961&4294967295;e=g+(b<<14&4294967295|b>>>18);b=c+(g^a&(e^g))+d[4]+3889429448&4294967295;c=
	e+(b<<20&4294967295|b>>>12);b=a+(e^g&(c^e))+d[9]+568446438&4294967295;a=c+(b<<5&4294967295|b>>>27);b=g+(c^e&(a^c))+d[14]+3275163606&4294967295;g=a+(b<<9&4294967295|b>>>23);b=e+(a^c&(g^a))+d[3]+4107603335&4294967295;e=g+(b<<14&4294967295|b>>>18);b=c+(g^a&(e^g))+d[8]+1163531501&4294967295;c=e+(b<<20&4294967295|b>>>12);b=a+(e^g&(c^e))+d[13]+2850285829&4294967295;a=c+(b<<5&4294967295|b>>>27);b=g+(c^e&(a^c))+d[2]+4243563512&4294967295;g=a+(b<<9&4294967295|b>>>23);b=e+(a^c&(g^a))+d[7]+1735328473&4294967295;
	e=g+(b<<14&4294967295|b>>>18);b=c+(g^a&(e^g))+d[12]+2368359562&4294967295;c=e+(b<<20&4294967295|b>>>12);b=a+(c^e^g)+d[5]+4294588738&4294967295;a=c+(b<<4&4294967295|b>>>28);b=g+(a^c^e)+d[8]+2272392833&4294967295;g=a+(b<<11&4294967295|b>>>21);b=e+(g^a^c)+d[11]+1839030562&4294967295;e=g+(b<<16&4294967295|b>>>16);b=c+(e^g^a)+d[14]+4259657740&4294967295;c=e+(b<<23&4294967295|b>>>9);b=a+(c^e^g)+d[1]+2763975236&4294967295;a=c+(b<<4&4294967295|b>>>28);b=g+(a^c^e)+d[4]+1272893353&4294967295;g=a+(b<<11&4294967295|
	b>>>21);b=e+(g^a^c)+d[7]+4139469664&4294967295;e=g+(b<<16&4294967295|b>>>16);b=c+(e^g^a)+d[10]+3200236656&4294967295;c=e+(b<<23&4294967295|b>>>9);b=a+(c^e^g)+d[13]+681279174&4294967295;a=c+(b<<4&4294967295|b>>>28);b=g+(a^c^e)+d[0]+3936430074&4294967295;g=a+(b<<11&4294967295|b>>>21);b=e+(g^a^c)+d[3]+3572445317&4294967295;e=g+(b<<16&4294967295|b>>>16);b=c+(e^g^a)+d[6]+76029189&4294967295;c=e+(b<<23&4294967295|b>>>9);b=a+(c^e^g)+d[9]+3654602809&4294967295;a=c+(b<<4&4294967295|b>>>28);b=g+(a^c^e)+d[12]+
	3873151461&4294967295;g=a+(b<<11&4294967295|b>>>21);b=e+(g^a^c)+d[15]+530742520&4294967295;e=g+(b<<16&4294967295|b>>>16);b=c+(e^g^a)+d[2]+3299628645&4294967295;c=e+(b<<23&4294967295|b>>>9);b=a+(e^(c|~g))+d[0]+4096336452&4294967295;a=c+(b<<6&4294967295|b>>>26);b=g+(c^(a|~e))+d[7]+1126891415&4294967295;g=a+(b<<10&4294967295|b>>>22);b=e+(a^(g|~c))+d[14]+2878612391&4294967295;e=g+(b<<15&4294967295|b>>>17);b=c+(g^(e|~a))+d[5]+4237533241&4294967295;c=e+(b<<21&4294967295|b>>>11);b=a+(e^(c|~g))+d[12]+1700485571&
	4294967295;a=c+(b<<6&4294967295|b>>>26);b=g+(c^(a|~e))+d[3]+2399980690&4294967295;g=a+(b<<10&4294967295|b>>>22);b=e+(a^(g|~c))+d[10]+4293915773&4294967295;e=g+(b<<15&4294967295|b>>>17);b=c+(g^(e|~a))+d[1]+2240044497&4294967295;c=e+(b<<21&4294967295|b>>>11);b=a+(e^(c|~g))+d[8]+1873313359&4294967295;a=c+(b<<6&4294967295|b>>>26);b=g+(c^(a|~e))+d[15]+4264355552&4294967295;g=a+(b<<10&4294967295|b>>>22);b=e+(a^(g|~c))+d[6]+2734768916&4294967295;e=g+(b<<15&4294967295|b>>>17);b=c+(g^(e|~a))+d[13]+1309151649&
	4294967295;c=e+(b<<21&4294967295|b>>>11);b=a+(e^(c|~g))+d[4]+4149444226&4294967295;a=c+(b<<6&4294967295|b>>>26);b=g+(c^(a|~e))+d[11]+3174756917&4294967295;g=a+(b<<10&4294967295|b>>>22);b=e+(a^(g|~c))+d[2]+718787259&4294967295;e=g+(b<<15&4294967295|b>>>17);b=c+(g^(e|~a))+d[9]+3951481745&4294967295;f.g[0]=f.g[0]+a&4294967295;f.g[1]=f.g[1]+(e+(b<<21&4294967295|b>>>11))&4294967295;f.g[2]=f.g[2]+e&4294967295;f.g[3]=f.g[3]+g&4294967295;}
	m.prototype.u=function(f,a){void 0===a&&(a=f.length);for(var c=a-this.blockSize,d=this.B,e=this.h,g=0;g<a;){if(0==e)for(;g<=c;)n(this,f,g),g+=this.blockSize;if("string"===typeof f)for(;g<a;){if(d[e++]=f.charCodeAt(g++),e==this.blockSize){n(this,d);e=0;break}}else for(;g<a;)if(d[e++]=f[g++],e==this.blockSize){n(this,d);e=0;break}}this.h=e;this.o+=a;};
	m.prototype.v=function(){var f=Array((56>this.h?this.blockSize:2*this.blockSize)-this.h);f[0]=128;for(var a=1;a<f.length-8;++a)f[a]=0;var c=8*this.o;for(a=f.length-8;a<f.length;++a)f[a]=c&255,c/=256;this.u(f);f=Array(16);for(a=c=0;4>a;++a)for(var d=0;32>d;d+=8)f[c++]=this.g[a]>>>d&255;return f};function p(f,a){var c=q;return Object.prototype.hasOwnProperty.call(c,f)?c[f]:c[f]=a(f)}function t(f,a){this.h=a;for(var c=[],d=!0,e=f.length-1;0<=e;e--){var g=f[e]|0;d&&g==a||(c[e]=g,d=!1);}this.g=c;}var q={};function u(f){return -128<=f&&128>f?p(f,function(a){return new t([a|0],0>a?-1:0)}):new t([f|0],0>f?-1:0)}function v(f){if(isNaN(f)||!isFinite(f))return w;if(0>f)return x(v(-f));for(var a=[],c=1,d=0;f>=c;d++)a[d]=f/c|0,c*=4294967296;return new t(a,0)}
	function y(f,a){if(0==f.length)throw Error("number format error: empty string");a=a||10;if(2>a||36<a)throw Error("radix out of range: "+a);if("-"==f.charAt(0))return x(y(f.substring(1),a));if(0<=f.indexOf("-"))throw Error('number format error: interior "-" character');for(var c=v(Math.pow(a,8)),d=w,e=0;e<f.length;e+=8){var g=Math.min(8,f.length-e),b=parseInt(f.substring(e,e+g),a);8>g?(g=v(Math.pow(a,g)),d=d.j(g).add(v(b))):(d=d.j(c),d=d.add(v(b)));}return d}var w=u(0),z=u(1),A=u(16777216);h=t.prototype;
	h.m=function(){if(B(this))return -x(this).m();for(var f=0,a=1,c=0;c<this.g.length;c++){var d=this.i(c);f+=(0<=d?d:4294967296+d)*a;a*=4294967296;}return f};h.toString=function(f){f=f||10;if(2>f||36<f)throw Error("radix out of range: "+f);if(C(this))return "0";if(B(this))return "-"+x(this).toString(f);for(var a=v(Math.pow(f,6)),c=this,d="";;){var e=D(c,a).g;c=F(c,e.j(a));var g=((0<c.g.length?c.g[0]:c.h)>>>0).toString(f);c=e;if(C(c))return g+d;for(;6>g.length;)g="0"+g;d=g+d;}};
	h.i=function(f){return 0>f?0:f<this.g.length?this.g[f]:this.h};function C(f){if(0!=f.h)return !1;for(var a=0;a<f.g.length;a++)if(0!=f.g[a])return !1;return !0}function B(f){return -1==f.h}h.l=function(f){f=F(this,f);return B(f)?-1:C(f)?0:1};function x(f){for(var a=f.g.length,c=[],d=0;d<a;d++)c[d]=~f.g[d];return (new t(c,~f.h)).add(z)}h.abs=function(){return B(this)?x(this):this};
	h.add=function(f){for(var a=Math.max(this.g.length,f.g.length),c=[],d=0,e=0;e<=a;e++){var g=d+(this.i(e)&65535)+(f.i(e)&65535),b=(g>>>16)+(this.i(e)>>>16)+(f.i(e)>>>16);d=b>>>16;g&=65535;b&=65535;c[e]=b<<16|g;}return new t(c,c[c.length-1]&-2147483648?-1:0)};function F(f,a){return f.add(x(a))}
	h.j=function(f){if(C(this)||C(f))return w;if(B(this))return B(f)?x(this).j(x(f)):x(x(this).j(f));if(B(f))return x(this.j(x(f)));if(0>this.l(A)&&0>f.l(A))return v(this.m()*f.m());for(var a=this.g.length+f.g.length,c=[],d=0;d<2*a;d++)c[d]=0;for(d=0;d<this.g.length;d++)for(var e=0;e<f.g.length;e++){var g=this.i(d)>>>16,b=this.i(d)&65535,r=f.i(e)>>>16,E=f.i(e)&65535;c[2*d+2*e]+=b*E;G(c,2*d+2*e);c[2*d+2*e+1]+=g*E;G(c,2*d+2*e+1);c[2*d+2*e+1]+=b*r;G(c,2*d+2*e+1);c[2*d+2*e+2]+=g*r;G(c,2*d+2*e+2);}for(d=0;d<
	a;d++)c[d]=c[2*d+1]<<16|c[2*d];for(d=a;d<2*a;d++)c[d]=0;return new t(c,0)};function G(f,a){for(;(f[a]&65535)!=f[a];)f[a+1]+=f[a]>>>16,f[a]&=65535,a++;}function H(f,a){this.g=f;this.h=a;}
	function D(f,a){if(C(a))throw Error("division by zero");if(C(f))return new H(w,w);if(B(f))return a=D(x(f),a),new H(x(a.g),x(a.h));if(B(a))return a=D(f,x(a)),new H(x(a.g),a.h);if(30<f.g.length){if(B(f)||B(a))throw Error("slowDivide_ only works with positive integers.");for(var c=z,d=a;0>=d.l(f);)c=I(c),d=I(d);var e=J(c,1),g=J(d,1);d=J(d,2);for(c=J(c,2);!C(d);){var b=g.add(d);0>=b.l(f)&&(e=e.add(c),g=b);d=J(d,1);c=J(c,1);}a=F(f,e.j(a));return new H(e,a)}for(e=w;0<=f.l(a);){c=Math.max(1,Math.floor(f.m()/
	a.m()));d=Math.ceil(Math.log(c)/Math.LN2);d=48>=d?1:Math.pow(2,d-48);g=v(c);for(b=g.j(a);B(b)||0<b.l(f);)c-=d,g=v(c),b=g.j(a);C(g)&&(g=z);e=e.add(g);f=F(f,b);}return new H(e,f)}h.A=function(f){return D(this,f).h};h.and=function(f){for(var a=Math.max(this.g.length,f.g.length),c=[],d=0;d<a;d++)c[d]=this.i(d)&f.i(d);return new t(c,this.h&f.h)};h.or=function(f){for(var a=Math.max(this.g.length,f.g.length),c=[],d=0;d<a;d++)c[d]=this.i(d)|f.i(d);return new t(c,this.h|f.h)};
	h.xor=function(f){for(var a=Math.max(this.g.length,f.g.length),c=[],d=0;d<a;d++)c[d]=this.i(d)^f.i(d);return new t(c,this.h^f.h)};function I(f){for(var a=f.g.length+1,c=[],d=0;d<a;d++)c[d]=f.i(d)<<1|f.i(d-1)>>>31;return new t(c,f.h)}function J(f,a){var c=a>>5;a%=32;for(var d=f.g.length-c,e=[],g=0;g<d;g++)e[g]=0<a?f.i(g+c)>>>a|f.i(g+c+1)<<32-a:f.i(g+c);return new t(e,f.h)}m.prototype.digest=m.prototype.v;m.prototype.reset=m.prototype.s;m.prototype.update=m.prototype.u;Md5 = m;t.prototype.add=t.prototype.add;t.prototype.multiply=t.prototype.j;t.prototype.modulo=t.prototype.A;t.prototype.compare=t.prototype.l;t.prototype.toNumber=t.prototype.m;t.prototype.toString=t.prototype.toString;t.prototype.getBits=t.prototype.i;t.fromNumber=v;t.fromString=y;Integer = t;}).apply( typeof commonjsGlobal$1 !== 'undefined' ? commonjsGlobal$1 : typeof self !== 'undefined' ? self  : typeof window !== 'undefined' ? window  : {});

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	/** @license
	Copyright The Closure Library Authors.
	SPDX-License-Identifier: Apache-2.0
	*/

	var XhrIo;
	var WebChannel;
	var EventType;
	var ErrorCode;
	var Stat;
	var Event;
	var getStatEventTarget;
	var createWebChannelTransport;
	(function() {var h,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};function ba(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof commonjsGlobal&&commonjsGlobal];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var ca=ba(this);
	function da(a,b){if(b)a:{var c=ca;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e];}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&aa(c,a,{configurable:!0,writable:!0,value:b});}}function ea(a,b){a instanceof String&&(a+="");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var f=c++;return {value:b(f,a[f]),done:!1}}d=!0;return {done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e}
	da("Array.prototype.values",function(a){return a?a:function(){return ea(this,function(b,c){return c})}});/** @license

	 Copyright The Closure Library Authors.
	 SPDX-License-Identifier: Apache-2.0
	*/
	var fa=fa||{},k=this||self;function ha(a){var b=typeof a;b="object"!=b?b:a?Array.isArray(a)?"array":b:"null";return "array"==b||"object"==b&&"number"==typeof a.length}function n(a){var b=typeof a;return "object"==b&&null!=a||"function"==b}function ia(a,b,c){return a.call.apply(a.bind,arguments)}
	function ja(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ia:ja;return p.apply(null,arguments)}
	function ka(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function r(a,b){function c(){}c.prototype=b.prototype;a.aa=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Qb=function(d,e,f){for(var g=Array(arguments.length-2),m=2;m<arguments.length;m++)g[m-2]=arguments[m];return b.prototype[e].apply(d,g)};}function la(a){const b=a.length;if(0<b){const c=Array(b);for(let d=0;d<b;d++)c[d]=a[d];return c}return []}function ma(a,b){for(let c=1;c<arguments.length;c++){const d=arguments[c];if(ha(d)){const e=a.length||0,f=d.length||0;a.length=e+f;for(let g=0;g<f;g++)a[e+g]=d[g];}else a.push(d);}}class na{constructor(a,b){this.i=a;this.j=b;this.h=0;this.g=null;}get(){let a;0<this.h?(this.h--,a=this.g,this.g=a.next,a.next=null):a=this.i();return a}}function t(a){return /^[\s\xa0]*$/.test(a)}function u(){var a=k.navigator;return a&&(a=a.userAgent)?a:""}function oa(a){oa[" "](a);return a}oa[" "]=function(){};var pa=-1!=u().indexOf("Gecko")&&!(-1!=u().toLowerCase().indexOf("webkit")&&-1==u().indexOf("Edge"))&&!(-1!=u().indexOf("Trident")||-1!=u().indexOf("MSIE"))&&-1==u().indexOf("Edge");function qa(a,b,c){for(const d in a)b.call(c,a[d],d,a);}function ra(a,b){for(const c in a)b.call(void 0,a[c],c,a);}function sa(a){const b={};for(const c in a)b[c]=a[c];return b}const ta="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ua(a,b){let c,d;for(let e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(let f=0;f<ta.length;f++)c=ta[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}function va(a){var b=1;a=a.split(":");const c=[];for(;0<b&&a.length;)c.push(a.shift()),b--;a.length&&c.push(a.join(":"));return c}function wa(a){k.setTimeout(()=>{throw a;},0);}function xa(){var a=za;let b=null;a.g&&(b=a.g,a.g=a.g.next,a.g||(a.h=null),b.next=null);return b}class Aa{constructor(){this.h=this.g=null;}add(a,b){const c=Ba.get();c.set(a,b);this.h?this.h.next=c:this.g=c;this.h=c;}}var Ba=new na(()=>new Ca,a=>a.reset());class Ca{constructor(){this.next=this.g=this.h=null;}set(a,b){this.h=a;this.g=b;this.next=null;}reset(){this.next=this.g=this.h=null;}}let x,y=!1,za=new Aa,Ea=()=>{const a=k.Promise.resolve(void 0);x=()=>{a.then(Da);};};var Da=()=>{for(var a;a=xa();){try{a.h.call(a.g);}catch(c){wa(c);}var b=Ba;b.j(a);100>b.h&&(b.h++,a.next=b.g,b.g=a);}y=!1;};function z(){this.s=this.s;this.C=this.C;}z.prototype.s=!1;z.prototype.ma=function(){this.s||(this.s=!0,this.N());};z.prototype.N=function(){if(this.C)for(;this.C.length;)this.C.shift()();};function A(a,b){this.type=a;this.g=this.target=b;this.defaultPrevented=!1;}A.prototype.h=function(){this.defaultPrevented=!0;};var Fa=function(){if(!k.addEventListener||!Object.defineProperty)return !1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0;}});try{const c=()=>{};k.addEventListener("test",c,b);k.removeEventListener("test",c,b);}catch(c){}return a}();function C(a,b){A.call(this,a?a.type:"");this.relatedTarget=this.g=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.state=null;this.pointerId=0;this.pointerType="";this.i=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.g=b;if(b=a.relatedTarget){if(pa){a:{try{oa(b.nodeName);var e=!0;break a}catch(f){}e=
	!1;}e||(b=null);}}else "mouseover"==c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=
	a.shiftKey;this.metaKey=a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:Ga[a.pointerType]||"";this.state=a.state;this.i=a;a.defaultPrevented&&C.aa.h.call(this);}}r(C,A);var Ga={2:"touch",3:"pen",4:"mouse"};C.prototype.h=function(){C.aa.h.call(this);var a=this.i;a.preventDefault?a.preventDefault():a.returnValue=!1;};var D="closure_listenable_"+(1E6*Math.random()|0);var Ha=0;function Ia(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.ha=e;this.key=++Ha;this.da=this.fa=!1;}function Ja(a){a.da=!0;a.listener=null;a.proxy=null;a.src=null;a.ha=null;}function Ka(a){this.src=a;this.g={};this.h=0;}Ka.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.g[f];a||(a=this.g[f]=[],this.h++);var g=La(a,b,d,e);-1<g?(b=a[g],c||(b.fa=!1)):(b=new Ia(b,this.src,f,!!d,e),b.fa=c,a.push(b));return b};function Ma(a,b){var c=b.type;if(c in a.g){var d=a.g[c],e=Array.prototype.indexOf.call(d,b,void 0),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(Ja(b),0==a.g[c].length&&(delete a.g[c],a.h--));}}
	function La(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.da&&f.listener==b&&f.capture==!!c&&f.ha==d)return e}return -1}var Na="closure_lm_"+(1E6*Math.random()|0),Oa={};function Qa(a,b,c,d,e){if(d&&d.once)return Ra(a,b,c,d,e);if(Array.isArray(b)){for(var f=0;f<b.length;f++)Qa(a,b[f],c,d,e);return null}c=Sa(c);return a&&a[D]?a.K(b,c,n(d)?!!d.capture:!!d,e):Ta(a,b,c,!1,d,e)}
	function Ta(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=n(e)?!!e.capture:!!e,m=Ua(a);m||(a[Na]=m=new Ka(a));c=m.add(b,c,d,g,f);if(c.proxy)return c;d=Va();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Fa||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(Wa(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");return c}
	function Va(){function a(c){return b.call(a.src,a.listener,c)}const b=Xa;return a}function Ra(a,b,c,d,e){if(Array.isArray(b)){for(var f=0;f<b.length;f++)Ra(a,b[f],c,d,e);return null}c=Sa(c);return a&&a[D]?a.L(b,c,n(d)?!!d.capture:!!d,e):Ta(a,b,c,!0,d,e)}
	function Ya(a,b,c,d,e){if(Array.isArray(b))for(var f=0;f<b.length;f++)Ya(a,b[f],c,d,e);else (d=n(d)?!!d.capture:!!d,c=Sa(c),a&&a[D])?(a=a.i,b=String(b).toString(),b in a.g&&(f=a.g[b],c=La(f,c,d,e),-1<c&&(Ja(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.g[b],a.h--)))):a&&(a=Ua(a))&&(b=a.g[b.toString()],a=-1,b&&(a=La(b,c,d,e)),(c=-1<a?b[a]:null)&&Za(c));}
	function Za(a){if("number"!==typeof a&&a&&!a.da){var b=a.src;if(b&&b[D])Ma(b.i,a);else {var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(Wa(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=Ua(b))?(Ma(c,a),0==c.h&&(c.src=null,b[Na]=null)):Ja(a);}}}function Wa(a){return a in Oa?Oa[a]:Oa[a]="on"+a}function Xa(a,b){if(a.da)a=!0;else {b=new C(b,this);var c=a.listener,d=a.ha||a.src;a.fa&&Za(a);a=c.call(d,b);}return a}
	function Ua(a){a=a[Na];return a instanceof Ka?a:null}var $a="__closure_events_fn_"+(1E9*Math.random()>>>0);function Sa(a){if("function"===typeof a)return a;a[$a]||(a[$a]=function(b){return a.handleEvent(b)});return a[$a]}function E(){z.call(this);this.i=new Ka(this);this.M=this;this.F=null;}r(E,z);E.prototype[D]=!0;E.prototype.removeEventListener=function(a,b,c,d){Ya(this,a,b,c,d);};
	function F(a,b){var c,d=a.F;if(d)for(c=[];d;d=d.F)c.push(d);a=a.M;d=b.type||b;if("string"===typeof b)b=new A(b,a);else if(b instanceof A)b.target=b.target||a;else {var e=b;b=new A(d,a);ua(b,e);}e=!0;if(c)for(var f=c.length-1;0<=f;f--){var g=b.g=c[f];e=ab(g,d,!0,b)&&e;}g=b.g=a;e=ab(g,d,!0,b)&&e;e=ab(g,d,!1,b)&&e;if(c)for(f=0;f<c.length;f++)g=b.g=c[f],e=ab(g,d,!1,b)&&e;}
	E.prototype.N=function(){E.aa.N.call(this);if(this.i){var a=this.i,c;for(c in a.g){for(var d=a.g[c],e=0;e<d.length;e++)Ja(d[e]);delete a.g[c];a.h--;}}this.F=null;};E.prototype.K=function(a,b,c,d){return this.i.add(String(a),b,!1,c,d)};E.prototype.L=function(a,b,c,d){return this.i.add(String(a),b,!0,c,d)};
	function ab(a,b,c,d){b=a.i.g[String(b)];if(!b)return !0;b=b.concat();for(var e=!0,f=0;f<b.length;++f){var g=b[f];if(g&&!g.da&&g.capture==c){var m=g.listener,q=g.ha||g.src;g.fa&&Ma(a.i,g);e=!1!==m.call(q,d)&&e;}}return e&&!d.defaultPrevented}function bb(a,b,c){if("function"===typeof a)c&&(a=p(a,c));else if(a&&"function"==typeof a.handleEvent)a=p(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<Number(b)?-1:k.setTimeout(a,b||0)}function cb(a){a.g=bb(()=>{a.g=null;a.i&&(a.i=!1,cb(a));},a.l);const b=a.h;a.h=null;a.m.apply(null,b);}class eb extends z{constructor(a,b){super();this.m=a;this.l=b;this.h=null;this.i=!1;this.g=null;}j(a){this.h=arguments;this.g?this.i=!0:cb(this);}N(){super.N();this.g&&(k.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null);}}function G(a){z.call(this);this.h=a;this.g={};}r(G,z);var fb=[];function gb(a){qa(a.g,function(b,c){this.g.hasOwnProperty(c)&&Za(b);},a);a.g={};}G.prototype.N=function(){G.aa.N.call(this);gb(this);};G.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};var hb=k.JSON.stringify;var ib=k.JSON.parse;var jb=class{stringify(a){return k.JSON.stringify(a,void 0)}parse(a){return k.JSON.parse(a,void 0)}};function kb(){}kb.prototype.h=null;function lb(a){return a.h||(a.h=a.i())}function mb(){}var H={OPEN:"a",kb:"b",Ja:"c",wb:"d"};function nb(){A.call(this,"d");}r(nb,A);function ob(){A.call(this,"c");}r(ob,A);var I={},pb=null;function qb(){return pb=pb||new E}I.La="serverreachability";function rb(a){A.call(this,I.La,a);}r(rb,A);function J(a){const b=qb();F(b,new rb(b));}I.STAT_EVENT="statevent";function sb(a,b){A.call(this,I.STAT_EVENT,a);this.stat=b;}r(sb,A);function K(a){const b=qb();F(b,new sb(b,a));}I.Ma="timingevent";function tb(a,b){A.call(this,I.Ma,a);this.size=b;}r(tb,A);
	function ub(a,b){if("function"!==typeof a)throw Error("Fn must not be null and must be a function");return k.setTimeout(function(){a();},b)}function vb(){this.g=!0;}vb.prototype.xa=function(){this.g=!1;};function wb(a,b,c,d,e,f){a.info(function(){if(a.g)if(f){var g="";for(var m=f.split("&"),q=0;q<m.length;q++){var l=m[q].split("=");if(1<l.length){var v=l[0];l=l[1];var w=v.split("_");g=2<=w.length&&"type"==w[1]?g+(v+"="+l+"&"):g+(v+"=redacted&");}}}else g=null;else g=f;return "XMLHTTP REQ ("+d+") [attempt "+e+"]: "+b+"\n"+c+"\n"+g});}
	function xb(a,b,c,d,e,f,g){a.info(function(){return "XMLHTTP RESP ("+d+") [ attempt "+e+"]: "+b+"\n"+c+"\n"+f+" "+g});}function L(a,b,c,d){a.info(function(){return "XMLHTTP TEXT ("+b+"): "+yb(a,c)+(d?" "+d:"")});}function zb(a,b){a.info(function(){return "TIMEOUT: "+b});}vb.prototype.info=function(){};
	function yb(a,b){if(!a.g)return b;if(!b)return null;try{var c=JSON.parse(b);if(c)for(a=0;a<c.length;a++)if(Array.isArray(c[a])){var d=c[a];if(!(2>d.length)){var e=d[1];if(Array.isArray(e)&&!(1>e.length)){var f=e[0];if("noop"!=f&&"stop"!=f&&"close"!=f)for(var g=1;g<e.length;g++)e[g]="";}}}return hb(c)}catch(m){return b}}var Ab={NO_ERROR:0,gb:1,tb:2,sb:3,nb:4,rb:5,ub:6,Ia:7,TIMEOUT:8,xb:9};var Bb={lb:"complete",Hb:"success",Ja:"error",Ia:"abort",zb:"ready",Ab:"readystatechange",TIMEOUT:"timeout",vb:"incrementaldata",yb:"progress",ob:"downloadprogress",Pb:"uploadprogress"};var Cb;function Db(){}r(Db,kb);Db.prototype.g=function(){return new XMLHttpRequest};Db.prototype.i=function(){return {}};Cb=new Db;function M(a,b,c,d){this.j=a;this.i=b;this.l=c;this.R=d||1;this.U=new G(this);this.I=45E3;this.H=null;this.o=!1;this.m=this.A=this.v=this.L=this.F=this.S=this.B=null;this.D=[];this.g=null;this.C=0;this.s=this.u=null;this.X=-1;this.J=!1;this.O=0;this.M=null;this.W=this.K=this.T=this.P=!1;this.h=new Eb;}function Eb(){this.i=null;this.g="";this.h=!1;}var Fb={},Gb={};function Hb(a,b,c){a.L=1;a.v=Ib(N(b));a.m=c;a.P=!0;Jb(a,null);}
	function Jb(a,b){a.F=Date.now();Kb(a);a.A=N(a.v);var c=a.A,d=a.R;Array.isArray(d)||(d=[String(d)]);Lb(c.i,"t",d);a.C=0;c=a.j.J;a.h=new Eb;a.g=Mb(a.j,c?b:null,!a.m);0<a.O&&(a.M=new eb(p(a.Y,a,a.g),a.O));b=a.U;c=a.g;d=a.ca;var e="readystatechange";Array.isArray(e)||(e&&(fb[0]=e.toString()),e=fb);for(var f=0;f<e.length;f++){var g=Qa(c,e[f],d||b.handleEvent,!1,b.h||b);if(!g)break;b.g[g.key]=g;}b=a.H?sa(a.H):{};a.m?(a.u||(a.u="POST"),b["Content-Type"]="application/x-www-form-urlencoded",a.g.ea(a.A,a.u,
	a.m,b)):(a.u="GET",a.g.ea(a.A,a.u,null,b));J();wb(a.i,a.u,a.A,a.l,a.R,a.m);}M.prototype.ca=function(a){a=a.target;const b=this.M;b&&3==P(a)?b.j():this.Y(a);};
	M.prototype.Y=function(a){try{if(a==this.g)a:{const w=P(this.g);var b=this.g.Ba();const O=this.g.Z();if(!(3>w)&&(3!=w||this.g&&(this.h.h||this.g.oa()||Nb(this.g)))){this.J||4!=w||7==b||(8==b||0>=O?J(3):J(2));Ob(this);var c=this.g.Z();this.X=c;b:if(Pb(this)){var d=Nb(this.g);a="";var e=d.length,f=4==P(this.g);if(!this.h.i){if("undefined"===typeof TextDecoder){Q(this);Qb(this);var g="";break b}this.h.i=new k.TextDecoder;}for(b=0;b<e;b++)this.h.h=!0,a+=this.h.i.decode(d[b],{stream:!(f&&b==e-1)});d.length=
	0;this.h.g+=a;this.C=0;g=this.h.g;}else g=this.g.oa();this.o=200==c;xb(this.i,this.u,this.A,this.l,this.R,w,c);if(this.o){if(this.T&&!this.K){b:{if(this.g){var m,q=this.g;if((m=q.g?q.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!t(m)){var l=m;break b}}l=null;}if(c=l)L(this.i,this.l,c,"Initial handshake response via X-HTTP-Initial-Response"),this.K=!0,Rb(this,c);else {this.o=!1;this.s=3;K(12);Q(this);Qb(this);break a}}if(this.P){c=!0;let B;for(;!this.J&&this.C<g.length;)if(B=Sb(this,g),B==Gb){4==
	w&&(this.s=4,K(14),c=!1);L(this.i,this.l,null,"[Incomplete Response]");break}else if(B==Fb){this.s=4;K(15);L(this.i,this.l,g,"[Invalid Chunk]");c=!1;break}else L(this.i,this.l,B,null),Rb(this,B);Pb(this)&&0!=this.C&&(this.h.g=this.h.g.slice(this.C),this.C=0);4!=w||0!=g.length||this.h.h||(this.s=1,K(16),c=!1);this.o=this.o&&c;if(!c)L(this.i,this.l,g,"[Invalid Chunked Response]"),Q(this),Qb(this);else if(0<g.length&&!this.W){this.W=!0;var v=this.j;v.g==this&&v.ba&&!v.M&&(v.j.info("Great, no buffering proxy detected. Bytes received: "+
	g.length),Tb(v),v.M=!0,K(11));}}else L(this.i,this.l,g,null),Rb(this,g);4==w&&Q(this);this.o&&!this.J&&(4==w?Ub(this.j,this):(this.o=!1,Kb(this)));}else Vb(this.g),400==c&&0<g.indexOf("Unknown SID")?(this.s=3,K(12)):(this.s=0,K(13)),Q(this),Qb(this);}}}catch(w){}finally{}};function Pb(a){return a.g?"GET"==a.u&&2!=a.L&&a.j.Ca:!1}
	function Sb(a,b){var c=a.C,d=b.indexOf("\n",c);if(-1==d)return Gb;c=Number(b.substring(c,d));if(isNaN(c))return Fb;d+=1;if(d+c>b.length)return Gb;b=b.slice(d,d+c);a.C=d+c;return b}M.prototype.cancel=function(){this.J=!0;Q(this);};function Kb(a){a.S=Date.now()+a.I;Wb(a,a.I);}function Wb(a,b){if(null!=a.B)throw Error("WatchDog timer not null");a.B=ub(p(a.ba,a),b);}function Ob(a){a.B&&(k.clearTimeout(a.B),a.B=null);}
	M.prototype.ba=function(){this.B=null;const a=Date.now();0<=a-this.S?(zb(this.i,this.A),2!=this.L&&(J(),K(17)),Q(this),this.s=2,Qb(this)):Wb(this,this.S-a);};function Qb(a){0==a.j.G||a.J||Ub(a.j,a);}function Q(a){Ob(a);var b=a.M;b&&"function"==typeof b.ma&&b.ma();a.M=null;gb(a.U);a.g&&(b=a.g,a.g=null,b.abort(),b.ma());}
	function Rb(a,b){try{var c=a.j;if(0!=c.G&&(c.g==a||Xb(c.h,a)))if(!a.K&&Xb(c.h,a)&&3==c.G){try{var d=c.Da.g.parse(b);}catch(l){d=null;}if(Array.isArray(d)&&3==d.length){var e=d;if(0==e[0])a:{if(!c.u){if(c.g)if(c.g.F+3E3<a.F)Yb(c),Zb(c);else break a;$b(c);K(18);}}else c.za=e[1],0<c.za-c.T&&37500>e[2]&&c.F&&0==c.v&&!c.C&&(c.C=ub(p(c.Za,c),6E3));if(1>=ac(c.h)&&c.ca){try{c.ca();}catch(l){}c.ca=void 0;}}else R(c,11);}else if((a.K||c.g==a)&&Yb(c),!t(b))for(e=c.Da.g.parse(b),b=0;b<e.length;b++){let l=e[b];c.T=
	l[0];l=l[1];if(2==c.G)if("c"==l[0]){c.K=l[1];c.ia=l[2];const v=l[3];null!=v&&(c.la=v,c.j.info("VER="+c.la));const w=l[4];null!=w&&(c.Aa=w,c.j.info("SVER="+c.Aa));const O=l[5];null!=O&&"number"===typeof O&&0<O&&(d=1.5*O,c.L=d,c.j.info("backChannelRequestTimeoutMs_="+d));d=c;const B=a.g;if(B){const ya=B.g?B.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(ya){var f=d.h;f.g||-1==ya.indexOf("spdy")&&-1==ya.indexOf("quic")&&-1==ya.indexOf("h2")||(f.j=f.l,f.g=new Set,f.h&&(bc(f,f.h),f.h=null));}if(d.D){const db=
	B.g?B.g.getResponseHeader("X-HTTP-Session-Id"):null;db&&(d.ya=db,S(d.I,d.D,db));}}c.G=3;c.l&&c.l.ua();c.ba&&(c.R=Date.now()-a.F,c.j.info("Handshake RTT: "+c.R+"ms"));d=c;var g=a;d.qa=cc(d,d.J?d.ia:null,d.W);if(g.K){dc(d.h,g);var m=g,q=d.L;q&&(m.I=q);m.B&&(Ob(m),Kb(m));d.g=g;}else ec(d);0<c.i.length&&fc(c);}else "stop"!=l[0]&&"close"!=l[0]||R(c,7);else 3==c.G&&("stop"==l[0]||"close"==l[0]?"stop"==l[0]?R(c,7):gc(c):"noop"!=l[0]&&c.l&&c.l.ta(l),c.v=0);}J(4);}catch(l){}}var hc=class{constructor(a,b){this.g=a;this.map=b;}};function ic(a){this.l=a||10;k.PerformanceNavigationTiming?(a=k.performance.getEntriesByType("navigation"),a=0<a.length&&("hq"==a[0].nextHopProtocol||"h2"==a[0].nextHopProtocol)):a=!!(k.chrome&&k.chrome.loadTimes&&k.chrome.loadTimes()&&k.chrome.loadTimes().wasFetchedViaSpdy);this.j=a?this.l:1;this.g=null;1<this.j&&(this.g=new Set);this.h=null;this.i=[];}function jc(a){return a.h?!0:a.g?a.g.size>=a.j:!1}function ac(a){return a.h?1:a.g?a.g.size:0}function Xb(a,b){return a.h?a.h==b:a.g?a.g.has(b):!1}
	function bc(a,b){a.g?a.g.add(b):a.h=b;}function dc(a,b){a.h&&a.h==b?a.h=null:a.g&&a.g.has(b)&&a.g.delete(b);}ic.prototype.cancel=function(){this.i=kc(this);if(this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const a of this.g.values())a.cancel();this.g.clear();}};function kc(a){if(null!=a.h)return a.i.concat(a.h.D);if(null!=a.g&&0!==a.g.size){let b=a.i;for(const c of a.g.values())b=b.concat(c.D);return b}return la(a.i)}function lc(a){if(a.V&&"function"==typeof a.V)return a.V();if("undefined"!==typeof Map&&a instanceof Map||"undefined"!==typeof Set&&a instanceof Set)return Array.from(a.values());if("string"===typeof a)return a.split("");if(ha(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}
	function mc(a){if(a.na&&"function"==typeof a.na)return a.na();if(!a.V||"function"!=typeof a.V){if("undefined"!==typeof Map&&a instanceof Map)return Array.from(a.keys());if(!("undefined"!==typeof Set&&a instanceof Set)){if(ha(a)||"string"===typeof a){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}b=[];c=0;for(const d in a)b[c++]=d;return b}}}
	function nc(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ha(a)||"string"===typeof a)Array.prototype.forEach.call(a,b,void 0);else for(var c=mc(a),d=lc(a),e=d.length,f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a);}var oc=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^\\\\/?#]*)@)?([^\\\\/?#]*?)(?::([0-9]+))?(?=[\\\\/?#]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\s\\S]*))?$");function pc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1);}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"");}}}function T(a){this.g=this.o=this.j="";this.s=null;this.m=this.l="";this.h=!1;if(a instanceof T){this.h=a.h;qc(this,a.j);this.o=a.o;this.g=a.g;rc(this,a.s);this.l=a.l;var b=a.i;var c=new sc;c.i=b.i;b.g&&(c.g=new Map(b.g),c.h=b.h);tc(this,c);this.m=a.m;}else a&&(b=String(a).match(oc))?(this.h=!1,qc(this,b[1]||"",!0),this.o=uc(b[2]||""),this.g=uc(b[3]||"",!0),rc(this,b[4]),this.l=uc(b[5]||"",!0),tc(this,b[6]||"",!0),this.m=uc(b[7]||"")):(this.h=!1,this.i=new sc(null,this.h));}
	T.prototype.toString=function(){var a=[],b=this.j;b&&a.push(vc(b,wc,!0),":");var c=this.g;if(c||"file"==b)a.push("//"),(b=this.o)&&a.push(vc(b,wc,!0),"@"),a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.s,null!=c&&a.push(":",String(c));if(c=this.l)this.g&&"/"!=c.charAt(0)&&a.push("/"),a.push(vc(c,"/"==c.charAt(0)?xc:yc,!0));(c=this.i.toString())&&a.push("?",c);(c=this.m)&&a.push("#",vc(c,zc));return a.join("")};function N(a){return new T(a)}
	function qc(a,b,c){a.j=c?uc(b,!0):b;a.j&&(a.j=a.j.replace(/:$/,""));}function rc(a,b){if(b){b=Number(b);if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.s=b;}else a.s=null;}function tc(a,b,c){b instanceof sc?(a.i=b,Ac(a.i,a.h)):(c||(b=vc(b,Bc)),a.i=new sc(b,a.h));}function S(a,b,c){a.i.set(b,c);}function Ib(a){S(a,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36));return a}
	function uc(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function vc(a,b,c){return "string"===typeof a?(a=encodeURI(a).replace(b,Cc),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function Cc(a){a=a.charCodeAt(0);return "%"+(a>>4&15).toString(16)+(a&15).toString(16)}var wc=/[#\/\?@]/g,yc=/[#\?:]/g,xc=/[#\?]/g,Bc=/[#\?@]/g,zc=/#/g;function sc(a,b){this.h=this.g=null;this.i=a||null;this.j=!!b;}
	function U(a){a.g||(a.g=new Map,a.h=0,a.i&&pc(a.i,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c);}));}h=sc.prototype;h.add=function(a,b){U(this);this.i=null;a=V(this,a);var c=this.g.get(a);c||this.g.set(a,c=[]);c.push(b);this.h+=1;return this};function Dc(a,b){U(a);b=V(a,b);a.g.has(b)&&(a.i=null,a.h-=a.g.get(b).length,a.g.delete(b));}function Ec(a,b){U(a);b=V(a,b);return a.g.has(b)}
	h.forEach=function(a,b){U(this);this.g.forEach(function(c,d){c.forEach(function(e){a.call(b,e,d,this);},this);},this);};h.na=function(){U(this);const a=Array.from(this.g.values()),b=Array.from(this.g.keys()),c=[];for(let d=0;d<b.length;d++){const e=a[d];for(let f=0;f<e.length;f++)c.push(b[d]);}return c};h.V=function(a){U(this);let b=[];if("string"===typeof a)Ec(this,a)&&(b=b.concat(this.g.get(V(this,a))));else {a=Array.from(this.g.values());for(let c=0;c<a.length;c++)b=b.concat(a[c]);}return b};
	h.set=function(a,b){U(this);this.i=null;a=V(this,a);Ec(this,a)&&(this.h-=this.g.get(a).length);this.g.set(a,[b]);this.h+=1;return this};h.get=function(a,b){if(!a)return b;a=this.V(a);return 0<a.length?String(a[0]):b};function Lb(a,b,c){Dc(a,b);0<c.length&&(a.i=null,a.g.set(V(a,b),la(c)),a.h+=c.length);}
	h.toString=function(){if(this.i)return this.i;if(!this.g)return "";const a=[],b=Array.from(this.g.keys());for(var c=0;c<b.length;c++){var d=b[c];const f=encodeURIComponent(String(d)),g=this.V(d);for(d=0;d<g.length;d++){var e=f;""!==g[d]&&(e+="="+encodeURIComponent(String(g[d])));a.push(e);}}return this.i=a.join("&")};function V(a,b){b=String(b);a.j&&(b=b.toLowerCase());return b}
	function Ac(a,b){b&&!a.j&&(U(a),a.i=null,a.g.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(Dc(this,d),Lb(this,e,c));},a));a.j=b;}function Fc(a,b){const c=new vb;if(k.Image){const d=new Image;d.onload=ka(W,c,"TestLoadImage: loaded",!0,b,d);d.onerror=ka(W,c,"TestLoadImage: error",!1,b,d);d.onabort=ka(W,c,"TestLoadImage: abort",!1,b,d);d.ontimeout=ka(W,c,"TestLoadImage: timeout",!1,b,d);k.setTimeout(function(){if(d.ontimeout)d.ontimeout();},1E4);d.src=a;}else b(!1);}
	function Gc(a,b){const c=new vb,d=new AbortController,e=setTimeout(()=>{d.abort();W(c,"TestPingServer: timeout",!1,b);},1E4);fetch(a,{signal:d.signal}).then(f=>{clearTimeout(e);f.ok?W(c,"TestPingServer: ok",!0,b):W(c,"TestPingServer: server error",!1,b);}).catch(()=>{clearTimeout(e);W(c,"TestPingServer: error",!1,b);});}function W(a,b,c,d,e){try{e&&(e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null),d(c);}catch(f){}}function Hc(){this.g=new jb;}function Ic(a,b,c){const d=c||"";try{nc(a,function(e,f){let g=e;n(e)&&(g=hb(e));b.push(d+f+"="+encodeURIComponent(g));});}catch(e){throw b.push(d+"type="+encodeURIComponent("_badmap")),e;}}function Jc(a){this.l=a.Ub||null;this.j=a.eb||!1;}r(Jc,kb);Jc.prototype.g=function(){return new Kc(this.l,this.j)};Jc.prototype.i=function(a){return function(){return a}}({});function Kc(a,b){E.call(this);this.D=a;this.o=b;this.m=void 0;this.status=this.readyState=0;this.responseType=this.responseText=this.response=this.statusText="";this.onreadystatechange=null;this.u=new Headers;this.h=null;this.B="GET";this.A="";this.g=!1;this.v=this.j=this.l=null;}r(Kc,E);h=Kc.prototype;
	h.open=function(a,b){if(0!=this.readyState)throw this.abort(),Error("Error reopening a connection");this.B=a;this.A=b;this.readyState=1;Lc(this);};h.send=function(a){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const b={headers:this.u,method:this.B,credentials:this.m,cache:void 0};a&&(b.body=a);(this.D||k).fetch(new Request(this.A,b)).then(this.Sa.bind(this),this.ga.bind(this));};
	h.abort=function(){this.response=this.responseText="";this.u=new Headers;this.status=0;this.j&&this.j.cancel("Request was aborted.").catch(()=>{});1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,Mc(this));this.readyState=0;};
	h.Sa=function(a){if(this.g&&(this.l=a,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=a.headers,this.readyState=2,Lc(this)),this.g&&(this.readyState=3,Lc(this),this.g)))if("arraybuffer"===this.responseType)a.arrayBuffer().then(this.Qa.bind(this),this.ga.bind(this));else if("undefined"!==typeof k.ReadableStream&&"body"in a){this.j=a.body.getReader();if(this.o){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=
	[];}else this.response=this.responseText="",this.v=new TextDecoder;Nc(this);}else a.text().then(this.Ra.bind(this),this.ga.bind(this));};function Nc(a){a.j.read().then(a.Pa.bind(a)).catch(a.ga.bind(a));}h.Pa=function(a){if(this.g){if(this.o&&a.value)this.response.push(a.value);else if(!this.o){var b=a.value?a.value:new Uint8Array(0);if(b=this.v.decode(b,{stream:!a.done}))this.response=this.responseText+=b;}a.done?Mc(this):Lc(this);3==this.readyState&&Nc(this);}};
	h.Ra=function(a){this.g&&(this.response=this.responseText=a,Mc(this));};h.Qa=function(a){this.g&&(this.response=a,Mc(this));};h.ga=function(){this.g&&Mc(this);};function Mc(a){a.readyState=4;a.l=null;a.j=null;a.v=null;Lc(a);}h.setRequestHeader=function(a,b){this.u.append(a,b);};h.getResponseHeader=function(a){return this.h?this.h.get(a.toLowerCase())||"":""};
	h.getAllResponseHeaders=function(){if(!this.h)return "";const a=[],b=this.h.entries();for(var c=b.next();!c.done;)c=c.value,a.push(c[0]+": "+c[1]),c=b.next();return a.join("\r\n")};function Lc(a){a.onreadystatechange&&a.onreadystatechange.call(a);}Object.defineProperty(Kc.prototype,"withCredentials",{get:function(){return "include"===this.m},set:function(a){this.m=a?"include":"same-origin";}});function Oc(a){let b="";qa(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n";});return b}function Pc(a,b,c){a:{for(d in c){var d=!1;break a}d=!0;}d||(c=Oc(c),"string"===typeof a?(null!=c&&encodeURIComponent(String(c))):S(a,b,c));}function X(a){E.call(this);this.headers=new Map;this.o=a||null;this.h=!1;this.v=this.g=null;this.D="";this.m=0;this.l="";this.j=this.B=this.u=this.A=!1;this.I=null;this.H="";this.J=!1;}r(X,E);var Qc=/^https?$/i,Rc=["POST","PUT"];h=X.prototype;h.Ha=function(a){this.J=a;};
	h.ea=function(a,b,c,d){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.D+"; newUri="+a);b=b?b.toUpperCase():"GET";this.D=a;this.l="";this.m=0;this.A=!1;this.h=!0;this.g=this.o?this.o.g():Cb.g();this.v=this.o?lb(this.o):lb(Cb);this.g.onreadystatechange=p(this.Ea,this);try{this.B=!0,this.g.open(b,String(a),!0),this.B=!1;}catch(f){Sc(this,f);return}a=c||"";c=new Map(this.headers);if(d)if(Object.getPrototypeOf(d)===Object.prototype)for(var e in d)c.set(e,d[e]);else if("function"===
	typeof d.keys&&"function"===typeof d.get)for(const f of d.keys())c.set(f,d.get(f));else throw Error("Unknown input type for opt_headers: "+String(d));d=Array.from(c.keys()).find(f=>"content-type"==f.toLowerCase());e=k.FormData&&a instanceof k.FormData;!(0<=Array.prototype.indexOf.call(Rc,b,void 0))||d||e||c.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");for(const [f,g]of c)this.g.setRequestHeader(f,g);this.H&&(this.g.responseType=this.H);"withCredentials"in this.g&&this.g.withCredentials!==
	this.J&&(this.g.withCredentials=this.J);try{Tc(this),this.u=!0,this.g.send(a),this.u=!1;}catch(f){Sc(this,f);}};function Sc(a,b){a.h=!1;a.g&&(a.j=!0,a.g.abort(),a.j=!1);a.l=b;a.m=5;Uc(a);Vc(a);}function Uc(a){a.A||(a.A=!0,F(a,"complete"),F(a,"error"));}h.abort=function(a){this.g&&this.h&&(this.h=!1,this.j=!0,this.g.abort(),this.j=!1,this.m=a||7,F(this,"complete"),F(this,"abort"),Vc(this));};h.N=function(){this.g&&(this.h&&(this.h=!1,this.j=!0,this.g.abort(),this.j=!1),Vc(this,!0));X.aa.N.call(this);};
	h.Ea=function(){this.s||(this.B||this.u||this.j?Wc(this):this.bb());};h.bb=function(){Wc(this);};
	function Wc(a){if(a.h&&"undefined"!=typeof fa&&(!a.v[1]||4!=P(a)||2!=a.Z()))if(a.u&&4==P(a))bb(a.Ea,0,a);else if(F(a,"readystatechange"),4==P(a)){a.h=!1;try{const g=a.Z();a:switch(g){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var b=!0;break a;default:b=!1;}var c;if(!(c=b)){var d;if(d=0===g){var e=String(a.D).match(oc)[1]||null;!e&&k.self&&k.self.location&&(e=k.self.location.protocol.slice(0,-1));d=!Qc.test(e?e.toLowerCase():"");}c=d;}if(c)F(a,"complete"),F(a,"success");else {a.m=
	6;try{var f=2<P(a)?a.g.statusText:"";}catch(m){f="";}a.l=f+" ["+a.Z()+"]";Uc(a);}}finally{Vc(a);}}}function Vc(a,b){if(a.g){Tc(a);const c=a.g,d=a.v[0]?()=>{}:null;a.g=null;a.v=null;b||F(a,"ready");try{c.onreadystatechange=d;}catch(e){}}}function Tc(a){a.I&&(k.clearTimeout(a.I),a.I=null);}h.isActive=function(){return !!this.g};function P(a){return a.g?a.g.readyState:0}h.Z=function(){try{return 2<P(this)?this.g.status:-1}catch(a){return -1}};h.oa=function(){try{return this.g?this.g.responseText:""}catch(a){return ""}};
	h.Oa=function(a){if(this.g){var b=this.g.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));return ib(b)}};function Nb(a){try{if(!a.g)return null;if("response"in a.g)return a.g.response;switch(a.H){case "":case "text":return a.g.responseText;case "arraybuffer":if("mozResponseArrayBuffer"in a.g)return a.g.mozResponseArrayBuffer}return null}catch(b){return null}}
	function Vb(a){const b={};a=(a.g&&2<=P(a)?a.g.getAllResponseHeaders()||"":"").split("\r\n");for(let d=0;d<a.length;d++){if(t(a[d]))continue;var c=va(a[d]);const e=c[0];c=c[1];if("string"!==typeof c)continue;c=c.trim();const f=b[e]||[];b[e]=f;f.push(c);}ra(b,function(d){return d.join(", ")});}h.Ba=function(){return this.m};h.Ka=function(){return "string"===typeof this.l?this.l:String(this.l)};function Xc(a,b,c){return c&&c.internalChannelParams?c.internalChannelParams[a]||b:b}
	function Yc(a){this.Aa=0;this.i=[];this.j=new vb;this.ia=this.qa=this.I=this.W=this.g=this.ya=this.D=this.H=this.m=this.S=this.o=null;this.Ya=this.U=0;this.Va=Xc("failFast",!1,a);this.F=this.C=this.u=this.s=this.l=null;this.X=!0;this.za=this.T=-1;this.Y=this.v=this.B=0;this.Ta=Xc("baseRetryDelayMs",5E3,a);this.cb=Xc("retryDelaySeedMs",1E4,a);this.Wa=Xc("forwardChannelMaxRetries",2,a);this.wa=Xc("forwardChannelRequestTimeoutMs",2E4,a);this.pa=a&&a.xmlHttpFactory||void 0;this.Xa=a&&a.Tb||void 0;this.Ca=
	a&&a.useFetchStreams||!1;this.L=void 0;this.J=a&&a.supportsCrossDomainXhr||!1;this.K="";this.h=new ic(a&&a.concurrentRequestLimit);this.Da=new Hc;this.P=a&&a.fastHandshake||!1;this.O=a&&a.encodeInitMessageHeaders||!1;this.P&&this.O&&(this.O=!1);this.Ua=a&&a.Rb||!1;a&&a.xa&&this.j.xa();a&&a.forceLongPolling&&(this.X=!1);this.ba=!this.P&&this.X&&a&&a.detectBufferingProxy||!1;this.ja=void 0;a&&a.longPollingTimeout&&0<a.longPollingTimeout&&(this.ja=a.longPollingTimeout);this.ca=void 0;this.R=0;this.M=
	!1;this.ka=this.A=null;}h=Yc.prototype;h.la=8;h.G=1;h.connect=function(a,b,c,d){K(0);this.W=a;this.H=b||{};c&&void 0!==d&&(this.H.OSID=c,this.H.OAID=d);this.F=this.X;this.I=cc(this,null,this.W);fc(this);};
	function gc(a){Zc(a);if(3==a.G){var b=a.U++,c=N(a.I);S(c,"SID",a.K);S(c,"RID",b);S(c,"TYPE","terminate");$c(a,c);b=new M(a,a.j,b);b.L=2;b.v=Ib(N(c));c=!1;if(k.navigator&&k.navigator.sendBeacon)try{c=k.navigator.sendBeacon(b.v.toString(),"");}catch(d){}!c&&k.Image&&((new Image).src=b.v,c=!0);c||(b.g=Mb(b.j,null),b.g.ea(b.v));b.F=Date.now();Kb(b);}ad(a);}function Zb(a){a.g&&(Tb(a),a.g.cancel(),a.g=null);}
	function Zc(a){Zb(a);a.u&&(k.clearTimeout(a.u),a.u=null);Yb(a);a.h.cancel();a.s&&("number"===typeof a.s&&k.clearTimeout(a.s),a.s=null);}function fc(a){if(!jc(a.h)&&!a.s){a.s=!0;var b=a.Ga;x||Ea();y||(x(),y=!0);za.add(b,a);a.B=0;}}function bd(a,b){if(ac(a.h)>=a.h.j-(a.s?1:0))return !1;if(a.s)return a.i=b.D.concat(a.i),!0;if(1==a.G||2==a.G||a.B>=(a.Va?0:a.Wa))return !1;a.s=ub(p(a.Ga,a,b),cd(a,a.B));a.B++;return !0}
	h.Ga=function(a){if(this.s)if(this.s=null,1==this.G){if(!a){this.U=Math.floor(1E5*Math.random());a=this.U++;const e=new M(this,this.j,a);let f=this.o;this.S&&(f?(f=sa(f),ua(f,this.S)):f=this.S);null!==this.m||this.O||(e.H=f,f=null);if(this.P)a:{var b=0;for(var c=0;c<this.i.length;c++){b:{var d=this.i[c];if("__data__"in d.map&&(d=d.map.__data__,"string"===typeof d)){d=d.length;break b}d=void 0;}if(void 0===d)break;b+=d;if(4096<b){b=c;break a}if(4096===b||c===this.i.length-1){b=c+1;break a}}b=1E3;}else b=
	1E3;b=dd(this,e,b);c=N(this.I);S(c,"RID",a);S(c,"CVER",22);this.D&&S(c,"X-HTTP-Session-Id",this.D);$c(this,c);f&&(this.O?b="headers="+encodeURIComponent(String(Oc(f)))+"&"+b:this.m&&Pc(c,this.m,f));bc(this.h,e);this.Ua&&S(c,"TYPE","init");this.P?(S(c,"$req",b),S(c,"SID","null"),e.T=!0,Hb(e,c,null)):Hb(e,c,b);this.G=2;}}else 3==this.G&&(a?ed(this,a):0==this.i.length||jc(this.h)||ed(this));};
	function ed(a,b){var c;b?c=b.l:c=a.U++;const d=N(a.I);S(d,"SID",a.K);S(d,"RID",c);S(d,"AID",a.T);$c(a,d);a.m&&a.o&&Pc(d,a.m,a.o);c=new M(a,a.j,c,a.B+1);null===a.m&&(c.H=a.o);b&&(a.i=b.D.concat(a.i));b=dd(a,c,1E3);c.I=Math.round(.5*a.wa)+Math.round(.5*a.wa*Math.random());bc(a.h,c);Hb(c,d,b);}function $c(a,b){a.H&&qa(a.H,function(c,d){S(b,d,c);});a.l&&nc({},function(c,d){S(b,d,c);});}
	function dd(a,b,c){c=Math.min(a.i.length,c);var d=a.l?p(a.l.Na,a.l,a):null;a:{var e=a.i;let f=-1;for(;;){const g=["count="+c];-1==f?0<c?(f=e[0].g,g.push("ofs="+f)):f=0:g.push("ofs="+f);let m=!0;for(let q=0;q<c;q++){let l=e[q].g;const v=e[q].map;l-=f;if(0>l)f=Math.max(0,e[q].g-100),m=!1;else try{Ic(v,g,"req"+l+"_");}catch(w){d&&d(v);}}if(m){d=g.join("&");break a}}}a=a.i.splice(0,c);b.D=a;return d}function ec(a){if(!a.g&&!a.u){a.Y=1;var b=a.Fa;x||Ea();y||(x(),y=!0);za.add(b,a);a.v=0;}}
	function $b(a){if(a.g||a.u||3<=a.v)return !1;a.Y++;a.u=ub(p(a.Fa,a),cd(a,a.v));a.v++;return !0}h.Fa=function(){this.u=null;fd(this);if(this.ba&&!(this.M||null==this.g||0>=this.R)){var a=2*this.R;this.j.info("BP detection timer enabled: "+a);this.A=ub(p(this.ab,this),a);}};h.ab=function(){this.A&&(this.A=null,this.j.info("BP detection timeout reached."),this.j.info("Buffering proxy detected and switch to long-polling!"),this.F=!1,this.M=!0,K(10),Zb(this),fd(this));};
	function Tb(a){null!=a.A&&(k.clearTimeout(a.A),a.A=null);}function fd(a){a.g=new M(a,a.j,"rpc",a.Y);null===a.m&&(a.g.H=a.o);a.g.O=0;var b=N(a.qa);S(b,"RID","rpc");S(b,"SID",a.K);S(b,"AID",a.T);S(b,"CI",a.F?"0":"1");!a.F&&a.ja&&S(b,"TO",a.ja);S(b,"TYPE","xmlhttp");$c(a,b);a.m&&a.o&&Pc(b,a.m,a.o);a.L&&(a.g.I=a.L);var c=a.g;a=a.ia;c.L=1;c.v=Ib(N(b));c.m=null;c.P=!0;Jb(c,a);}h.Za=function(){null!=this.C&&(this.C=null,Zb(this),$b(this),K(19));};function Yb(a){null!=a.C&&(k.clearTimeout(a.C),a.C=null);}
	function Ub(a,b){var c=null;if(a.g==b){Yb(a);Tb(a);a.g=null;var d=2;}else if(Xb(a.h,b))c=b.D,dc(a.h,b),d=1;else return;if(0!=a.G)if(b.o)if(1==d){c=b.m?b.m.length:0;b=Date.now()-b.F;var e=a.B;d=qb();F(d,new tb(d,c));fc(a);}else ec(a);else if(e=b.s,3==e||0==e&&0<b.X||!(1==d&&bd(a,b)||2==d&&$b(a)))switch(c&&0<c.length&&(b=a.h,b.i=b.i.concat(c)),e){case 1:R(a,5);break;case 4:R(a,10);break;case 3:R(a,6);break;default:R(a,2);}}
	function cd(a,b){let c=a.Ta+Math.floor(Math.random()*a.cb);a.isActive()||(c*=2);return c*b}function R(a,b){a.j.info("Error code "+b);if(2==b){var c=p(a.fb,a),d=a.Xa;const e=!d;d=new T(d||"//www.google.com/images/cleardot.gif");k.location&&"http"==k.location.protocol||qc(d,"https");Ib(d);e?Fc(d.toString(),c):Gc(d.toString(),c);}else K(2);a.G=0;a.l&&a.l.sa(b);ad(a);Zc(a);}h.fb=function(a){a?(this.j.info("Successfully pinged google.com"),K(2)):(this.j.info("Failed to ping google.com"),K(1));};
	function ad(a){a.G=0;a.ka=[];if(a.l){const b=kc(a.h);if(0!=b.length||0!=a.i.length)ma(a.ka,b),ma(a.ka,a.i),a.h.i.length=0,la(a.i),a.i.length=0;a.l.ra();}}function cc(a,b,c){var d=c instanceof T?N(c):new T(c);if(""!=d.g)b&&(d.g=b+"."+d.g),rc(d,d.s);else {var e=k.location;d=e.protocol;b=b?b+"."+e.hostname:e.hostname;e=+e.port;var f=new T(null);d&&qc(f,d);b&&(f.g=b);e&&rc(f,e);c&&(f.l=c);d=f;}c=a.D;b=a.ya;c&&b&&S(d,c,b);S(d,"VER",a.la);$c(a,d);return d}
	function Mb(a,b,c){if(b&&!a.J)throw Error("Can't create secondary domain capable XhrIo object.");b=a.Ca&&!a.pa?new X(new Jc({eb:c})):new X(a.pa);b.Ha(a.J);return b}h.isActive=function(){return !!this.l&&this.l.isActive(this)};function gd(){}h=gd.prototype;h.ua=function(){};h.ta=function(){};h.sa=function(){};h.ra=function(){};h.isActive=function(){return !0};h.Na=function(){};function hd(){}hd.prototype.g=function(a,b){return new Y(a,b)};
	function Y(a,b){E.call(this);this.g=new Yc(b);this.l=a;this.h=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a["X-Client-Protocol"]="webchannel":a={"X-Client-Protocol":"webchannel"});this.g.o=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a["X-WebChannel-Content-Type"]=b.messageContentType:a={"X-WebChannel-Content-Type":b.messageContentType});b&&b.va&&(a?a["X-WebChannel-Client-Profile"]=b.va:a={"X-WebChannel-Client-Profile":b.va});this.g.S=
	a;(a=b&&b.Sb)&&!t(a)&&(this.g.m=a);this.v=b&&b.supportsCrossDomainXhr||!1;this.u=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!t(b)&&(this.g.D=b,a=this.h,null!==a&&b in a&&(a=this.h,b in a&&delete a[b]));this.j=new Z(this);}r(Y,E);Y.prototype.m=function(){this.g.l=this.j;this.v&&(this.g.J=!0);this.g.connect(this.l,this.h||void 0);};Y.prototype.close=function(){gc(this.g);};
	Y.prototype.o=function(a){var b=this.g;if("string"===typeof a){var c={};c.__data__=a;a=c;}else this.u&&(c={},c.__data__=hb(a),a=c);b.i.push(new hc(b.Ya++,a));3==b.G&&fc(b);};Y.prototype.N=function(){this.g.l=null;delete this.j;gc(this.g);delete this.g;Y.aa.N.call(this);};
	function id(a){nb.call(this);a.__headers__&&(this.headers=a.__headers__,this.statusCode=a.__status__,delete a.__headers__,delete a.__status__);var b=a.__sm__;if(b){a:{for(const c in b){a=c;break a}a=void 0;}if(this.i=a)a=this.i,b=null!==b&&a in b?b[a]:void 0;this.data=b;}else this.data=a;}r(id,nb);function jd(){ob.call(this);this.status=1;}r(jd,ob);function Z(a){this.g=a;}r(Z,gd);Z.prototype.ua=function(){F(this.g,"a");};Z.prototype.ta=function(a){F(this.g,new id(a));};
	Z.prototype.sa=function(a){F(this.g,new jd());};Z.prototype.ra=function(){F(this.g,"b");};hd.prototype.createWebChannel=hd.prototype.g;Y.prototype.send=Y.prototype.o;Y.prototype.open=Y.prototype.m;Y.prototype.close=Y.prototype.close;createWebChannelTransport = function(){return new hd};getStatEventTarget = function(){return qb()};Event = I;Stat = {mb:0,pb:1,qb:2,Jb:3,Ob:4,Lb:5,Mb:6,Kb:7,Ib:8,Nb:9,PROXY:10,NOPROXY:11,Gb:12,Cb:13,Db:14,Bb:15,Eb:16,Fb:17,ib:18,hb:19,jb:20};Ab.NO_ERROR=0;Ab.TIMEOUT=8;Ab.HTTP_ERROR=6;
	ErrorCode = Ab;Bb.COMPLETE="complete";EventType = Bb;mb.EventType=H;H.OPEN="a";H.CLOSE="b";H.ERROR="c";H.MESSAGE="d";E.prototype.listen=E.prototype.K;WebChannel = mb;X.prototype.listenOnce=X.prototype.L;X.prototype.getLastError=X.prototype.Ka;X.prototype.getLastErrorCode=X.prototype.Ba;X.prototype.getStatus=X.prototype.Z;X.prototype.getResponseJson=X.prototype.Oa;X.prototype.getResponseText=X.prototype.oa;
	X.prototype.send=X.prototype.ea;X.prototype.setWithCredentials=X.prototype.Ha;XhrIo = X;}).apply( typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self  : typeof window !== 'undefined' ? window  : {});

	const S = "@firebase/firestore", b = "4.7.8";

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Simple wrapper around a nullable UID. Mostly exists to make code more
	 * readable.
	 */
	class User {
	    constructor(e) {
	        this.uid = e;
	    }
	    isAuthenticated() {
	        return null != this.uid;
	    }
	    /**
	     * Returns a key representing this user, suitable for inclusion in a
	     * dictionary.
	     */    toKey() {
	        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
	    }
	    isEqual(e) {
	        return e.uid === this.uid;
	    }
	}

	/** A user with a null UID. */ User.UNAUTHENTICATED = new User(null), 
	// TODO(mikelehen): Look into getting a proper uid-equivalent for
	// non-FirebaseAuth providers.
	User.GOOGLE_CREDENTIALS = new User("google-credentials-uid"), User.FIRST_PARTY = new User("first-party-uid"), 
	User.MOCK_USER = new User("mock-user");

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	let D = "11.3.1";

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const v = new Logger("@firebase/firestore");

	// Helper methods are needed because variables can't be exported as read/write
	function __PRIVATE_getLogLevel() {
	    return v.logLevel;
	}

	function __PRIVATE_logDebug(e, ...t) {
	    if (v.logLevel <= LogLevel.DEBUG) {
	        const n = t.map(__PRIVATE_argToString);
	        v.debug(`Firestore (${D}): ${e}`, ...n);
	    }
	}

	function __PRIVATE_logError(e, ...t) {
	    if (v.logLevel <= LogLevel.ERROR) {
	        const n = t.map(__PRIVATE_argToString);
	        v.error(`Firestore (${D}): ${e}`, ...n);
	    }
	}

	/**
	 * @internal
	 */ function __PRIVATE_logWarn(e, ...t) {
	    if (v.logLevel <= LogLevel.WARN) {
	        const n = t.map(__PRIVATE_argToString);
	        v.warn(`Firestore (${D}): ${e}`, ...n);
	    }
	}

	/**
	 * Converts an additional log parameter to a string representation.
	 */ function __PRIVATE_argToString(e) {
	    if ("string" == typeof e) return e;
	    try {
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        /** Formats an object as a JSON string, suitable for logging. */
	        return function __PRIVATE_formatJSON(e) {
	            return JSON.stringify(e);
	        }(e);
	    } catch (t) {
	        // Converting to JSON failed, just log the object directly
	        return e;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Unconditionally fails, throwing an Error with the given message.
	 * Messages are stripped in production builds.
	 *
	 * Returns `never` and can be used in expressions:
	 * @example
	 * let futureVar = fail('not implemented yet');
	 */ function fail(e = "Unexpected state") {
	    // Log the failure in addition to throw an exception, just in case the
	    // exception is swallowed.
	    const t = `FIRESTORE (${D}) INTERNAL ASSERTION FAILED: ` + e;
	    // NOTE: We don't use FirestoreError here because these are internal failures
	    // that cannot be handled by the user. (Also it would create a circular
	    // dependency between the error and assert modules which doesn't work.)
	    throw __PRIVATE_logError(t), new Error(t);
	}

	/**
	 * Fails if the given assertion condition is false, throwing an Error with the
	 * given message if it did.
	 *
	 * Messages are stripped in production builds.
	 */ function __PRIVATE_hardAssert(e, t) {
	    e || fail();
	}

	/**
	 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
	 * instance of `T` before casting.
	 */ function __PRIVATE_debugCast(e, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	t) {
	    return e;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const C = {
	    // Causes are copied from:
	    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	    /** Not an error; returned on success. */
	    OK: "ok",
	    /** The operation was cancelled (typically by the caller). */
	    CANCELLED: "cancelled",
	    /** Unknown error or an error from a different error domain. */
	    UNKNOWN: "unknown",
	    /**
	     * Client specified an invalid argument. Note that this differs from
	     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
	     * problematic regardless of the state of the system (e.g., a malformed file
	     * name).
	     */
	    INVALID_ARGUMENT: "invalid-argument",
	    /**
	     * Deadline expired before operation could complete. For operations that
	     * change the state of the system, this error may be returned even if the
	     * operation has completed successfully. For example, a successful response
	     * from a server could have been delayed long enough for the deadline to
	     * expire.
	     */
	    DEADLINE_EXCEEDED: "deadline-exceeded",
	    /** Some requested entity (e.g., file or directory) was not found. */
	    NOT_FOUND: "not-found",
	    /**
	     * Some entity that we attempted to create (e.g., file or directory) already
	     * exists.
	     */
	    ALREADY_EXISTS: "already-exists",
	    /**
	     * The caller does not have permission to execute the specified operation.
	     * PERMISSION_DENIED must not be used for rejections caused by exhausting
	     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
	     * PERMISSION_DENIED must not be used if the caller cannot be identified
	     * (use UNAUTHENTICATED instead for those errors).
	     */
	    PERMISSION_DENIED: "permission-denied",
	    /**
	     * The request does not have valid authentication credentials for the
	     * operation.
	     */
	    UNAUTHENTICATED: "unauthenticated",
	    /**
	     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
	     * entire file system is out of space.
	     */
	    RESOURCE_EXHAUSTED: "resource-exhausted",
	    /**
	     * Operation was rejected because the system is not in a state required for
	     * the operation's execution. For example, directory to be deleted may be
	     * non-empty, an rmdir operation is applied to a non-directory, etc.
	     *
	     * A litmus test that may help a service implementor in deciding
	     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
	     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
	     *  (b) Use ABORTED if the client should retry at a higher-level
	     *      (e.g., restarting a read-modify-write sequence).
	     *  (c) Use FAILED_PRECONDITION if the client should not retry until
	     *      the system state has been explicitly fixed. E.g., if an "rmdir"
	     *      fails because the directory is non-empty, FAILED_PRECONDITION
	     *      should be returned since the client should not retry unless
	     *      they have first fixed up the directory by deleting files from it.
	     *  (d) Use FAILED_PRECONDITION if the client performs conditional
	     *      REST Get/Update/Delete on a resource and the resource on the
	     *      server does not match the condition. E.g., conflicting
	     *      read-modify-write on the same resource.
	     */
	    FAILED_PRECONDITION: "failed-precondition",
	    /**
	     * The operation was aborted, typically due to a concurrency issue like
	     * sequencer check failures, transaction aborts, etc.
	     *
	     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
	     * and UNAVAILABLE.
	     */
	    ABORTED: "aborted",
	    /**
	     * Operation was attempted past the valid range. E.g., seeking or reading
	     * past end of file.
	     *
	     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
	     * if the system state changes. For example, a 32-bit file system will
	     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
	     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
	     * an offset past the current file size.
	     *
	     * There is a fair bit of overlap between FAILED_PRECONDITION and
	     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
	     * when it applies so that callers who are iterating through a space can
	     * easily look for an OUT_OF_RANGE error to detect when they are done.
	     */
	    OUT_OF_RANGE: "out-of-range",
	    /** Operation is not implemented or not supported/enabled in this service. */
	    UNIMPLEMENTED: "unimplemented",
	    /**
	     * Internal errors. Means some invariants expected by underlying System has
	     * been broken. If you see one of these errors, Something is very broken.
	     */
	    INTERNAL: "internal",
	    /**
	     * The service is currently unavailable. This is a most likely a transient
	     * condition and may be corrected by retrying with a backoff.
	     *
	     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
	     * and UNAVAILABLE.
	     */
	    UNAVAILABLE: "unavailable",
	    /** Unrecoverable data loss or corruption. */
	    DATA_LOSS: "data-loss"
	};

	/** An error returned by a Firestore operation. */ class FirestoreError extends FirebaseError {
	    /** @hideconstructor */
	    constructor(
	    /**
	     * The backend error code associated with this error.
	     */
	    e, 
	    /**
	     * A custom error description.
	     */
	    t) {
	        super(e, t), this.code = e, this.message = t, 
	        // HACK: We write a toString property directly because Error is not a real
	        // class and so inheritance does not work correctly. We could alternatively
	        // do the same "back-door inheritance" trick that FirebaseError does.
	        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_Deferred {
	    constructor() {
	        this.promise = new Promise(((e, t) => {
	            this.resolve = e, this.reject = t;
	        }));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_OAuthToken {
	    constructor(e, t) {
	        this.user = t, this.type = "OAuth", this.headers = new Map, this.headers.set("Authorization", `Bearer ${e}`);
	    }
	}

	/**
	 * A CredentialsProvider that always yields an empty token.
	 * @internal
	 */ class __PRIVATE_EmptyAuthCredentialsProvider {
	    getToken() {
	        return Promise.resolve(null);
	    }
	    invalidateToken() {}
	    start(e, t) {
	        // Fire with initial user.
	        e.enqueueRetryable((() => t(User.UNAUTHENTICATED)));
	    }
	    shutdown() {}
	}

	/**
	 * A CredentialsProvider that always returns a constant token. Used for
	 * emulator token mocking.
	 */ class __PRIVATE_EmulatorAuthCredentialsProvider {
	    constructor(e) {
	        this.token = e, 
	        /**
	         * Stores the listener registered with setChangeListener()
	         * This isn't actually necessary since the UID never changes, but we use this
	         * to verify the listen contract is adhered to in tests.
	         */
	        this.changeListener = null;
	    }
	    getToken() {
	        return Promise.resolve(this.token);
	    }
	    invalidateToken() {}
	    start(e, t) {
	        this.changeListener = t, 
	        // Fire with initial user.
	        e.enqueueRetryable((() => t(this.token.user)));
	    }
	    shutdown() {
	        this.changeListener = null;
	    }
	}

	class __PRIVATE_FirebaseAuthCredentialsProvider {
	    constructor(e) {
	        this.t = e, 
	        /** Tracks the current User. */
	        this.currentUser = User.UNAUTHENTICATED, 
	        /**
	         * Counter used to detect if the token changed while a getToken request was
	         * outstanding.
	         */
	        this.i = 0, this.forceRefresh = !1, this.auth = null;
	    }
	    start(e, t) {
	        __PRIVATE_hardAssert(void 0 === this.o);
	        let n = this.i;
	        // A change listener that prevents double-firing for the same token change.
	                const __PRIVATE_guardedChangeListener = e => this.i !== n ? (n = this.i, 
	        t(e)) : Promise.resolve();
	        // A promise that can be waited on to block on the next token change.
	        // This promise is re-created after each change.
	                let r = new __PRIVATE_Deferred;
	        this.o = () => {
	            this.i++, this.currentUser = this.u(), r.resolve(), r = new __PRIVATE_Deferred, 
	            e.enqueueRetryable((() => __PRIVATE_guardedChangeListener(this.currentUser)));
	        };
	        const __PRIVATE_awaitNextToken = () => {
	            const t = r;
	            e.enqueueRetryable((async () => {
	                await t.promise, await __PRIVATE_guardedChangeListener(this.currentUser);
	            }));
	        }, __PRIVATE_registerAuth = e => {
	            __PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = e, 
	            this.o && (this.auth.addAuthTokenListener(this.o), __PRIVATE_awaitNextToken());
	        };
	        this.t.onInit((e => __PRIVATE_registerAuth(e))), 
	        // Our users can initialize Auth right after Firestore, so we give it
	        // a chance to register itself with the component framework before we
	        // determine whether to start up in unauthenticated mode.
	        setTimeout((() => {
	            if (!this.auth) {
	                const e = this.t.getImmediate({
	                    optional: !0
	                });
	                e ? __PRIVATE_registerAuth(e) : (
	                // If auth is still not available, proceed with `null` user
	                __PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "Auth not yet detected"), 
	                r.resolve(), r = new __PRIVATE_Deferred);
	            }
	        }), 0), __PRIVATE_awaitNextToken();
	    }
	    getToken() {
	        // Take note of the current value of the tokenCounter so that this method
	        // can fail (with an ABORTED error) if there is a token change while the
	        // request is outstanding.
	        const e = this.i, t = this.forceRefresh;
	        return this.forceRefresh = !1, this.auth ? this.auth.getToken(t).then((t => 
	        // Cancel the request since the token changed while the request was
	        // outstanding so the response is potentially for a previous user (which
	        // user, we can't be sure).
	        this.i !== e ? (__PRIVATE_logDebug("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), 
	        this.getToken()) : t ? (__PRIVATE_hardAssert("string" == typeof t.accessToken), 
	        new __PRIVATE_OAuthToken(t.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
	    }
	    invalidateToken() {
	        this.forceRefresh = !0;
	    }
	    shutdown() {
	        this.auth && this.o && this.auth.removeAuthTokenListener(this.o), this.o = void 0;
	    }
	    // Auth.getUid() can return null even with a user logged in. It is because
	    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
	    // This method should only be called in the AuthTokenListener callback
	    // to guarantee to get the actual user.
	    u() {
	        const e = this.auth && this.auth.getUid();
	        return __PRIVATE_hardAssert(null === e || "string" == typeof e), new User(e);
	    }
	}

	/*
	 * FirstPartyToken provides a fresh token each time its value
	 * is requested, because if the token is too old, requests will be rejected.
	 * Technically this may no longer be necessary since the SDK should gracefully
	 * recover from unauthenticated errors (see b/33147818 for context), but it's
	 * safer to keep the implementation as-is.
	 */ class __PRIVATE_FirstPartyToken {
	    constructor(e, t, n) {
	        this.l = e, this.h = t, this.P = n, this.type = "FirstParty", this.user = User.FIRST_PARTY, 
	        this.T = new Map;
	    }
	    /**
	     * Gets an authorization token, using a provided factory function, or return
	     * null.
	     */    I() {
	        return this.P ? this.P() : null;
	    }
	    get headers() {
	        this.T.set("X-Goog-AuthUser", this.l);
	        // Use array notation to prevent minification
	        const e = this.I();
	        return e && this.T.set("Authorization", e), this.h && this.T.set("X-Goog-Iam-Authorization-Token", this.h), 
	        this.T;
	    }
	}

	/*
	 * Provides user credentials required for the Firestore JavaScript SDK
	 * to authenticate the user, using technique that is only available
	 * to applications hosted by Google.
	 */ class __PRIVATE_FirstPartyAuthCredentialsProvider {
	    constructor(e, t, n) {
	        this.l = e, this.h = t, this.P = n;
	    }
	    getToken() {
	        return Promise.resolve(new __PRIVATE_FirstPartyToken(this.l, this.h, this.P));
	    }
	    start(e, t) {
	        // Fire with initial uid.
	        e.enqueueRetryable((() => t(User.FIRST_PARTY)));
	    }
	    shutdown() {}
	    invalidateToken() {}
	}

	class AppCheckToken {
	    constructor(e) {
	        this.value = e, this.type = "AppCheck", this.headers = new Map, e && e.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
	    }
	}

	class __PRIVATE_FirebaseAppCheckTokenProvider {
	    constructor(t, n) {
	        this.A = n, this.forceRefresh = !1, this.appCheck = null, this.R = null, this.V = null, 
	        _isFirebaseServerApp(t) && t.settings.appCheckToken && (this.V = t.settings.appCheckToken);
	    }
	    start(e, t) {
	        __PRIVATE_hardAssert(void 0 === this.o);
	        const onTokenChanged = e => {
	            null != e.error && __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);
	            const n = e.token !== this.R;
	            return this.R = e.token, __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", `Received ${n ? "new" : "existing"} token.`), 
	            n ? t(e.token) : Promise.resolve();
	        };
	        this.o = t => {
	            e.enqueueRetryable((() => onTokenChanged(t)));
	        };
	        const __PRIVATE_registerAppCheck = e => {
	            __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = e, 
	            this.o && this.appCheck.addTokenListener(this.o);
	        };
	        this.A.onInit((e => __PRIVATE_registerAppCheck(e))), 
	        // Our users can initialize AppCheck after Firestore, so we give it
	        // a chance to register itself with the component framework.
	        setTimeout((() => {
	            if (!this.appCheck) {
	                const e = this.A.getImmediate({
	                    optional: !0
	                });
	                e ? __PRIVATE_registerAppCheck(e) : 
	                // If AppCheck is still not available, proceed without it.
	                __PRIVATE_logDebug("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
	            }
	        }), 0);
	    }
	    getToken() {
	        if (this.V) return Promise.resolve(new AppCheckToken(this.V));
	        const e = this.forceRefresh;
	        return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(e).then((e => e ? (__PRIVATE_hardAssert("string" == typeof e.token), 
	        this.R = e.token, new AppCheckToken(e.token)) : null)) : Promise.resolve(null);
	    }
	    invalidateToken() {
	        this.forceRefresh = !0;
	    }
	    shutdown() {
	        this.appCheck && this.o && this.appCheck.removeTokenListener(this.o), this.o = void 0;
	    }
	}

	/**
	 * Builds a CredentialsProvider depending on the type of
	 * the credentials passed in.
	 */
	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Generates `nBytes` of random bytes.
	 *
	 * If `nBytes < 0` , an error will be thrown.
	 */
	function __PRIVATE_randomBytes(e) {
	    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
	    const t = 
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(e);
	    if (t && "function" == typeof t.getRandomValues) t.getRandomValues(n); else 
	    // Falls back to Math.random
	    for (let t = 0; t < e; t++) n[t] = Math.floor(256 * Math.random());
	    return n;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A utility class for generating unique alphanumeric IDs of a specified length.
	 *
	 * @internal
	 * Exported internally for testing purposes.
	 */ class __PRIVATE_AutoId {
	    static newId() {
	        // Alphanumeric characters
	        const e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", t = 62 * Math.floor(256 / 62);
	        // The largest byte value that is a multiple of `char.length`.
	                let n = "";
	        for (;n.length < 20; ) {
	            const r = __PRIVATE_randomBytes(40);
	            for (let i = 0; i < r.length; ++i) 
	            // Only accept values that are [0, maxMultiple), this ensures they can
	            // be evenly mapped to indices of `chars` via a modulo operation.
	            n.length < 20 && r[i] < t && (n += e.charAt(r[i] % 62));
	        }
	        return n;
	    }
	}

	function __PRIVATE_primitiveComparator(e, t) {
	    return e < t ? -1 : e > t ? 1 : 0;
	}

	/** Helper to compare arrays using isEqual(). */ function __PRIVATE_arrayEquals(e, t, n) {
	    return e.length === t.length && e.every(((e, r) => n(e, t[r])));
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
	const F = -62135596800, M = 1e6;

	// Number of nanoseconds in a millisecond.
	/**
	 * A `Timestamp` represents a point in time independent of any time zone or
	 * calendar, represented as seconds and fractions of seconds at nanosecond
	 * resolution in UTC Epoch time.
	 *
	 * It is encoded using the Proleptic Gregorian Calendar which extends the
	 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
	 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
	 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
	 * 9999-12-31T23:59:59.999999999Z.
	 *
	 * For examples and further specifications, refer to the
	 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
	 */
	class Timestamp {
	    /**
	     * Creates a new timestamp with the current date, with millisecond precision.
	     *
	     * @returns a new timestamp representing the current date.
	     */
	    static now() {
	        return Timestamp.fromMillis(Date.now());
	    }
	    /**
	     * Creates a new timestamp from the given date.
	     *
	     * @param date - The date to initialize the `Timestamp` from.
	     * @returns A new `Timestamp` representing the same point in time as the given
	     *     date.
	     */    static fromDate(e) {
	        return Timestamp.fromMillis(e.getTime());
	    }
	    /**
	     * Creates a new timestamp from the given number of milliseconds.
	     *
	     * @param milliseconds - Number of milliseconds since Unix epoch
	     *     1970-01-01T00:00:00Z.
	     * @returns A new `Timestamp` representing the same point in time as the given
	     *     number of milliseconds.
	     */    static fromMillis(e) {
	        const t = Math.floor(e / 1e3), n = Math.floor((e - 1e3 * t) * M);
	        return new Timestamp(t, n);
	    }
	    /**
	     * Creates a new timestamp.
	     *
	     * @param seconds - The number of seconds of UTC time since Unix epoch
	     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	     *     9999-12-31T23:59:59Z inclusive.
	     * @param nanoseconds - The non-negative fractions of a second at nanosecond
	     *     resolution. Negative second values with fractions must still have
	     *     non-negative nanoseconds values that count forward in time. Must be
	     *     from 0 to 999,999,999 inclusive.
	     */    constructor(
	    /**
	     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
	     */
	    e, 
	    /**
	     * The fractions of a second at nanosecond resolution.*
	     */
	    t) {
	        if (this.seconds = e, this.nanoseconds = t, t < 0) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t);
	        if (t >= 1e9) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + t);
	        if (e < F) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
	        // This will break in the year 10,000.
	                if (e >= 253402300800) throw new FirestoreError(C.INVALID_ARGUMENT, "Timestamp seconds out of range: " + e);
	    }
	    /**
	     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
	     * causes a loss of precision since `Date` objects only support millisecond
	     * precision.
	     *
	     * @returns JavaScript `Date` object representing the same point in time as
	     *     this `Timestamp`, with millisecond precision.
	     */    toDate() {
	        return new Date(this.toMillis());
	    }
	    /**
	     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
	     * epoch). This operation causes a loss of precision.
	     *
	     * @returns The point in time corresponding to this timestamp, represented as
	     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
	     */    toMillis() {
	        return 1e3 * this.seconds + this.nanoseconds / M;
	    }
	    _compareTo(e) {
	        return this.seconds === e.seconds ? __PRIVATE_primitiveComparator(this.nanoseconds, e.nanoseconds) : __PRIVATE_primitiveComparator(this.seconds, e.seconds);
	    }
	    /**
	     * Returns true if this `Timestamp` is equal to the provided one.
	     *
	     * @param other - The `Timestamp` to compare against.
	     * @returns true if this `Timestamp` is equal to the provided one.
	     */    isEqual(e) {
	        return e.seconds === this.seconds && e.nanoseconds === this.nanoseconds;
	    }
	    /** Returns a textual representation of this `Timestamp`. */    toString() {
	        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
	    }
	    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {
	        return {
	            seconds: this.seconds,
	            nanoseconds: this.nanoseconds
	        };
	    }
	    /**
	     * Converts this object to a primitive string, which allows `Timestamp` objects
	     * to be compared using the `>`, `<=`, `>=` and `>` operators.
	     */    valueOf() {
	        // This method returns a string of the form <seconds>.<nanoseconds> where
	        // <seconds> is translated to have a non-negative value and both <seconds>
	        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
	        // Strings with this format then have a lexicographical ordering that matches
	        // the expected ordering. The <seconds> translation is done to avoid having
	        // a leading negative sign (i.e. a leading '-' character) in its string
	        // representation, which would affect its lexicographical ordering.
	        const e = this.seconds - F;
	        // Note: Up to 12 decimal digits are required to represent all valid
	        // 'seconds' values.
	                return String(e).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A version of a document in Firestore. This corresponds to the version
	 * timestamp, such as update_time or read_time.
	 */ class SnapshotVersion {
	    static fromTimestamp(e) {
	        return new SnapshotVersion(e);
	    }
	    static min() {
	        return new SnapshotVersion(new Timestamp(0, 0));
	    }
	    static max() {
	        return new SnapshotVersion(new Timestamp(253402300799, 999999999));
	    }
	    constructor(e) {
	        this.timestamp = e;
	    }
	    compareTo(e) {
	        return this.timestamp._compareTo(e.timestamp);
	    }
	    isEqual(e) {
	        return this.timestamp.isEqual(e.timestamp);
	    }
	    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {
	        // Convert to microseconds.
	        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
	    }
	    toString() {
	        return "SnapshotVersion(" + this.timestamp.toString() + ")";
	    }
	    toTimestamp() {
	        return this.timestamp;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const x = "__name__";

	/**
	 * Path represents an ordered sequence of string segments.
	 */ class BasePath {
	    constructor(e, t, n) {
	        void 0 === t ? t = 0 : t > e.length && fail(), void 0 === n ? n = e.length - t : n > e.length - t && fail(), 
	        this.segments = e, this.offset = t, this.len = n;
	    }
	    get length() {
	        return this.len;
	    }
	    isEqual(e) {
	        return 0 === BasePath.comparator(this, e);
	    }
	    child(e) {
	        const t = this.segments.slice(this.offset, this.limit());
	        return e instanceof BasePath ? e.forEach((e => {
	            t.push(e);
	        })) : t.push(e), this.construct(t);
	    }
	    /** The index of one past the last segment of the path. */    limit() {
	        return this.offset + this.length;
	    }
	    popFirst(e) {
	        return e = void 0 === e ? 1 : e, this.construct(this.segments, this.offset + e, this.length - e);
	    }
	    popLast() {
	        return this.construct(this.segments, this.offset, this.length - 1);
	    }
	    firstSegment() {
	        return this.segments[this.offset];
	    }
	    lastSegment() {
	        return this.get(this.length - 1);
	    }
	    get(e) {
	        return this.segments[this.offset + e];
	    }
	    isEmpty() {
	        return 0 === this.length;
	    }
	    isPrefixOf(e) {
	        if (e.length < this.length) return !1;
	        for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
	        return !0;
	    }
	    isImmediateParentOf(e) {
	        if (this.length + 1 !== e.length) return !1;
	        for (let t = 0; t < this.length; t++) if (this.get(t) !== e.get(t)) return !1;
	        return !0;
	    }
	    forEach(e) {
	        for (let t = this.offset, n = this.limit(); t < n; t++) e(this.segments[t]);
	    }
	    toArray() {
	        return this.segments.slice(this.offset, this.limit());
	    }
	    /**
	     * Compare 2 paths segment by segment, prioritizing numeric IDs
	     * (e.g., "__id123__") in numeric ascending order, followed by string
	     * segments in lexicographical order.
	     */    static comparator(e, t) {
	        const n = Math.min(e.length, t.length);
	        for (let r = 0; r < n; r++) {
	            const n = BasePath.compareSegments(e.get(r), t.get(r));
	            if (0 !== n) return n;
	        }
	        return Math.sign(e.length - t.length);
	    }
	    static compareSegments(e, t) {
	        const n = BasePath.isNumericId(e), r = BasePath.isNumericId(t);
	        return n && !r ? -1 : !n && r ? 1 : n && r ? BasePath.extractNumericId(e).compare(BasePath.extractNumericId(t)) : 
	        // both non-numeric
	        e < t ? -1 : e > t ? 1 : 0;
	    }
	    // Checks if a segment is a numeric ID (starts with "__id" and ends with "__").
	    static isNumericId(e) {
	        return e.startsWith("__id") && e.endsWith("__");
	    }
	    static extractNumericId(e) {
	        return Integer.fromString(e.substring(4, e.length - 2));
	    }
	}

	/**
	 * A slash-separated path for navigating resources (documents and collections)
	 * within Firestore.
	 *
	 * @internal
	 */ class ResourcePath extends BasePath {
	    construct(e, t, n) {
	        return new ResourcePath(e, t, n);
	    }
	    canonicalString() {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        return this.toArray().join("/");
	    }
	    toString() {
	        return this.canonicalString();
	    }
	    /**
	     * Returns a string representation of this path
	     * where each path segment has been encoded with
	     * `encodeURIComponent`.
	     */    toUriEncodedString() {
	        return this.toArray().map(encodeURIComponent).join("/");
	    }
	    /**
	     * Creates a resource path from the given slash-delimited string. If multiple
	     * arguments are provided, all components are combined. Leading and trailing
	     * slashes from all components are ignored.
	     */    static fromString(...e) {
	        // NOTE: The client is ignorant of any path segments containing escape
	        // sequences (e.g. __id123__) and just passes them through raw (they exist
	        // for legacy reasons and should not be used frequently).
	        const t = [];
	        for (const n of e) {
	            if (n.indexOf("//") >= 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
	            // Strip leading and trailing slashed.
	                        t.push(...n.split("/").filter((e => e.length > 0)));
	        }
	        return new ResourcePath(t);
	    }
	    static emptyPath() {
	        return new ResourcePath([]);
	    }
	}

	const O = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

	/**
	 * A dot-separated path for navigating sub-objects within a document.
	 * @internal
	 */ class FieldPath$1 extends BasePath {
	    construct(e, t, n) {
	        return new FieldPath$1(e, t, n);
	    }
	    /**
	     * Returns true if the string could be used as a segment in a field path
	     * without escaping.
	     */    static isValidIdentifier(e) {
	        return O.test(e);
	    }
	    canonicalString() {
	        return this.toArray().map((e => (e = e.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), 
	        FieldPath$1.isValidIdentifier(e) || (e = "`" + e + "`"), e))).join(".");
	    }
	    toString() {
	        return this.canonicalString();
	    }
	    /**
	     * Returns true if this field references the key of a document.
	     */    isKeyField() {
	        return 1 === this.length && this.get(0) === x;
	    }
	    /**
	     * The field designating the key of a document.
	     */    static keyField() {
	        return new FieldPath$1([ x ]);
	    }
	    /**
	     * Parses a field string from the given server-formatted string.
	     *
	     * - Splitting the empty string is not allowed (for now at least).
	     * - Empty segments within the string (e.g. if there are two consecutive
	     *   separators) are not allowed.
	     *
	     * TODO(b/37244157): we should make this more strict. Right now, it allows
	     * non-identifier path components, even if they aren't escaped.
	     */    static fromServerFormat(e) {
	        const t = [];
	        let n = "", r = 0;
	        const __PRIVATE_addCurrentSegment = () => {
	            if (0 === n.length) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
	            t.push(n), n = "";
	        };
	        let i = !1;
	        for (;r < e.length; ) {
	            const t = e[r];
	            if ("\\" === t) {
	                if (r + 1 === e.length) throw new FirestoreError(C.INVALID_ARGUMENT, "Path has trailing escape character: " + e);
	                const t = e[r + 1];
	                if ("\\" !== t && "." !== t && "`" !== t) throw new FirestoreError(C.INVALID_ARGUMENT, "Path has invalid escape sequence: " + e);
	                n += t, r += 2;
	            } else "`" === t ? (i = !i, r++) : "." !== t || i ? (n += t, r++) : (__PRIVATE_addCurrentSegment(), 
	            r++);
	        }
	        if (__PRIVATE_addCurrentSegment(), i) throw new FirestoreError(C.INVALID_ARGUMENT, "Unterminated ` in path: " + e);
	        return new FieldPath$1(t);
	    }
	    static emptyPath() {
	        return new FieldPath$1([]);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * @internal
	 */ class DocumentKey {
	    constructor(e) {
	        this.path = e;
	    }
	    static fromPath(e) {
	        return new DocumentKey(ResourcePath.fromString(e));
	    }
	    static fromName(e) {
	        return new DocumentKey(ResourcePath.fromString(e).popFirst(5));
	    }
	    static empty() {
	        return new DocumentKey(ResourcePath.emptyPath());
	    }
	    get collectionGroup() {
	        return this.path.popLast().lastSegment();
	    }
	    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(e) {
	        return this.path.length >= 2 && this.path.get(this.path.length - 2) === e;
	    }
	    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {
	        return this.path.get(this.path.length - 2);
	    }
	    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {
	        return this.path.popLast();
	    }
	    isEqual(e) {
	        return null !== e && 0 === ResourcePath.comparator(this.path, e.path);
	    }
	    toString() {
	        return this.path.toString();
	    }
	    static comparator(e, t) {
	        return ResourcePath.comparator(e.path, t.path);
	    }
	    static isDocumentKey(e) {
	        return e.length % 2 == 0;
	    }
	    /**
	     * Creates and returns a new document key with the given segments.
	     *
	     * @param segments - The segments of the path to the document
	     * @returns A new instance of DocumentKey
	     */    static fromSegments(e) {
	        return new DocumentKey(new ResourcePath(e.slice()));
	    }
	}

	/**
	 * @license
	 * Copyright 2021 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The initial mutation batch id for each index. Gets updated during index
	 * backfill.
	 */ const N = -1;

	/**
	 * Creates an offset that matches all documents with a read time higher than
	 * `readTime`.
	 */ function __PRIVATE_newIndexOffsetSuccessorFromReadTime(e, t) {
	    // We want to create an offset that matches all documents with a read time
	    // greater than the provided read time. To do so, we technically need to
	    // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use
	    // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use
	    // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches
	    // all valid document IDs.
	    const n = e.toTimestamp().seconds, r = e.toTimestamp().nanoseconds + 1, i = SnapshotVersion.fromTimestamp(1e9 === r ? new Timestamp(n + 1, 0) : new Timestamp(n, r));
	    return new IndexOffset(i, DocumentKey.empty(), t);
	}

	/** Creates a new offset based on the provided document. */ function __PRIVATE_newIndexOffsetFromDocument(e) {
	    return new IndexOffset(e.readTime, e.key, N);
	}

	/**
	 * Stores the latest read time, document and batch ID that were processed for an
	 * index.
	 */ class IndexOffset {
	    constructor(
	    /**
	     * The latest read time version that has been indexed by Firestore for this
	     * field index.
	     */
	    e, 
	    /**
	     * The key of the last document that was indexed for this query. Use
	     * `DocumentKey.empty()` if no document has been indexed.
	     */
	    t, 
	    /*
	     * The largest mutation batch id that's been processed by Firestore.
	     */
	    n) {
	        this.readTime = e, this.documentKey = t, this.largestBatchId = n;
	    }
	    /** Returns an offset that sorts before all regular offsets. */    static min() {
	        return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), N);
	    }
	    /** Returns an offset that sorts after all regular offsets. */    static max() {
	        return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), N);
	    }
	}

	function __PRIVATE_indexOffsetComparator(e, t) {
	    let n = e.readTime.compareTo(t.readTime);
	    return 0 !== n ? n : (n = DocumentKey.comparator(e.documentKey, t.documentKey), 
	    0 !== n ? n : __PRIVATE_primitiveComparator(e.largestBatchId, t.largestBatchId));
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const B = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";

	/**
	 * A base class representing a persistence transaction, encapsulating both the
	 * transaction's sequence numbers as well as a list of onCommitted listeners.
	 *
	 * When you call Persistence.runTransaction(), it will create a transaction and
	 * pass it to your callback. You then pass it to any method that operates
	 * on persistence.
	 */ class PersistenceTransaction {
	    constructor() {
	        this.onCommittedListeners = [];
	    }
	    addOnCommittedListener(e) {
	        this.onCommittedListeners.push(e);
	    }
	    raiseOnCommittedEvent() {
	        this.onCommittedListeners.forEach((e => e()));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Verifies the error thrown by a LocalStore operation. If a LocalStore
	 * operation fails because the primary lease has been taken by another client,
	 * we ignore the error (the persistence layer will immediately call
	 * `applyPrimaryLease` to propagate the primary state change). All other errors
	 * are re-thrown.
	 *
	 * @param err - An error returned by a LocalStore operation.
	 * @returns A Promise that resolves after we recovered, or the original error.
	 */ async function __PRIVATE_ignoreIfPrimaryLeaseLoss(e) {
	    if (e.code !== C.FAILED_PRECONDITION || e.message !== B) throw e;
	    __PRIVATE_logDebug("LocalStore", "Unexpectedly lost primary lease");
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * PersistencePromise is essentially a re-implementation of Promise except
	 * it has a .next() method instead of .then() and .next() and .catch() callbacks
	 * are executed synchronously when a PersistencePromise resolves rather than
	 * asynchronously (Promise implementations use setImmediate() or similar).
	 *
	 * This is necessary to interoperate with IndexedDB which will automatically
	 * commit transactions if control is returned to the event loop without
	 * synchronously initiating another operation on the transaction.
	 *
	 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
	 * Promises.
	 */ class PersistencePromise {
	    constructor(e) {
	        // NOTE: next/catchCallback will always point to our own wrapper functions,
	        // not the user's raw next() or catch() callbacks.
	        this.nextCallback = null, this.catchCallback = null, 
	        // When the operation resolves, we'll set result or error and mark isDone.
	        this.result = void 0, this.error = void 0, this.isDone = !1, 
	        // Set to true when .then() or .catch() are called and prevents additional
	        // chaining.
	        this.callbackAttached = !1, e((e => {
	            this.isDone = !0, this.result = e, this.nextCallback && 
	            // value should be defined unless T is Void, but we can't express
	            // that in the type system.
	            this.nextCallback(e);
	        }), (e => {
	            this.isDone = !0, this.error = e, this.catchCallback && this.catchCallback(e);
	        }));
	    }
	    catch(e) {
	        return this.next(void 0, e);
	    }
	    next(e, t) {
	        return this.callbackAttached && fail(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(t, this.error) : this.wrapSuccess(e, this.result) : new PersistencePromise(((n, r) => {
	            this.nextCallback = t => {
	                this.wrapSuccess(e, t).next(n, r);
	            }, this.catchCallback = e => {
	                this.wrapFailure(t, e).next(n, r);
	            };
	        }));
	    }
	    toPromise() {
	        return new Promise(((e, t) => {
	            this.next(e, t);
	        }));
	    }
	    wrapUserFunction(e) {
	        try {
	            const t = e();
	            return t instanceof PersistencePromise ? t : PersistencePromise.resolve(t);
	        } catch (e) {
	            return PersistencePromise.reject(e);
	        }
	    }
	    wrapSuccess(e, t) {
	        return e ? this.wrapUserFunction((() => e(t))) : PersistencePromise.resolve(t);
	    }
	    wrapFailure(e, t) {
	        return e ? this.wrapUserFunction((() => e(t))) : PersistencePromise.reject(t);
	    }
	    static resolve(e) {
	        return new PersistencePromise(((t, n) => {
	            t(e);
	        }));
	    }
	    static reject(e) {
	        return new PersistencePromise(((t, n) => {
	            n(e);
	        }));
	    }
	    static waitFor(
	    // Accept all Promise types in waitFor().
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    e) {
	        return new PersistencePromise(((t, n) => {
	            let r = 0, i = 0, s = !1;
	            e.forEach((e => {
	                ++r, e.next((() => {
	                    ++i, s && i === r && t();
	                }), (e => n(e)));
	            })), s = !0, i === r && t();
	        }));
	    }
	    /**
	     * Given an array of predicate functions that asynchronously evaluate to a
	     * boolean, implements a short-circuiting `or` between the results. Predicates
	     * will be evaluated until one of them returns `true`, then stop. The final
	     * result will be whether any of them returned `true`.
	     */    static or(e) {
	        let t = PersistencePromise.resolve(!1);
	        for (const n of e) t = t.next((e => e ? PersistencePromise.resolve(e) : n()));
	        return t;
	    }
	    static forEach(e, t) {
	        const n = [];
	        return e.forEach(((e, r) => {
	            n.push(t.call(this, e, r));
	        })), this.waitFor(n);
	    }
	    /**
	     * Concurrently map all array elements through asynchronous function.
	     */    static mapArray(e, t) {
	        return new PersistencePromise(((n, r) => {
	            const i = e.length, s = new Array(i);
	            let o = 0;
	            for (let _ = 0; _ < i; _++) {
	                const a = _;
	                t(e[a]).next((e => {
	                    s[a] = e, ++o, o === i && n(s);
	                }), (e => r(e)));
	            }
	        }));
	    }
	    /**
	     * An alternative to recursive PersistencePromise calls, that avoids
	     * potential memory problems from unbounded chains of promises.
	     *
	     * The `action` will be called repeatedly while `condition` is true.
	     */    static doWhile(e, t) {
	        return new PersistencePromise(((n, r) => {
	            const process = () => {
	                !0 === e() ? t().next((() => {
	                    process();
	                }), r) : n();
	            };
	            process();
	        }));
	    }
	}

	/** Parse User Agent to determine Android version. Returns -1 if not found. */ function __PRIVATE_getAndroidVersion(e) {
	    const t = e.match(/Android ([\d.]+)/i), n = t ? t[1].split(".").slice(0, 2).join(".") : "-1";
	    return Number(n);
	}

	/** Verifies whether `e` is an IndexedDbTransactionError. */ function __PRIVATE_isIndexedDbTransactionError(e) {
	    // Use name equality, as instanceof checks on errors don't work with errors
	    // that wrap other errors.
	    return "IndexedDbTransactionError" === e.name;
	}

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
	 * exceed. All subsequent calls to next will return increasing values. If provided with a
	 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
	 * well as write out sequence numbers that it produces via `next()`.
	 */ class __PRIVATE_ListenSequence {
	    constructor(e, t) {
	        this.previousValue = e, t && (t.sequenceNumberHandler = e => this.oe(e), this._e = e => t.writeSequenceNumber(e));
	    }
	    oe(e) {
	        return this.previousValue = Math.max(e, this.previousValue), this.previousValue;
	    }
	    next() {
	        const e = ++this.previousValue;
	        return this._e && this._e(e), e;
	    }
	}

	__PRIVATE_ListenSequence.ae = -1;

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Sentinel value that sorts before any Mutation Batch ID. */
	const Q = -1;

	/**
	 * Returns whether a variable is either undefined or null.
	 */ function __PRIVATE_isNullOrUndefined(e) {
	    return null == e;
	}

	/** Returns whether the value represents -0. */ function __PRIVATE_isNegativeZero(e) {
	    // Detect if the value is -0.0. Based on polyfill from
	    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	    return 0 === e && 1 / e == -1 / 0;
	}

	/**
	 * Returns whether a value is an integer and in the safe integer range
	 * @param value - The value to test for being an integer and in the safe range
	 */ function isSafeInteger(e) {
	    return "number" == typeof e && Number.isInteger(e) && !__PRIVATE_isNegativeZero(e) && e <= Number.MAX_SAFE_INTEGER && e >= Number.MIN_SAFE_INTEGER;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const $ = "";

	/**
	 * Encodes a resource path into a IndexedDb-compatible string form.
	 */
	function __PRIVATE_encodeResourcePath(e) {
	    let t = "";
	    for (let n = 0; n < e.length; n++) t.length > 0 && (t = __PRIVATE_encodeSeparator(t)), 
	    t = __PRIVATE_encodeSegment(e.get(n), t);
	    return __PRIVATE_encodeSeparator(t);
	}

	/** Encodes a single segment of a resource path into the given result */ function __PRIVATE_encodeSegment(e, t) {
	    let n = t;
	    const r = e.length;
	    for (let t = 0; t < r; t++) {
	        const r = e.charAt(t);
	        switch (r) {
	          case "\0":
	            n += "";
	            break;

	          case $:
	            n += "";
	            break;

	          default:
	            n += r;
	        }
	    }
	    return n;
	}

	/** Encodes a path separator into the given result */ function __PRIVATE_encodeSeparator(e) {
	    return e + $ + "";
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function __PRIVATE_objectSize(e) {
	    let t = 0;
	    for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t++;
	    return t;
	}

	function forEach(e, t) {
	    for (const n in e) Object.prototype.hasOwnProperty.call(e, n) && t(n, e[n]);
	}

	function isEmpty(e) {
	    for (const t in e) if (Object.prototype.hasOwnProperty.call(e, t)) return !1;
	    return !0;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// An immutable sorted map implementation, based on a Left-leaning Red-Black
	// tree.
	class SortedMap {
	    constructor(e, t) {
	        this.comparator = e, this.root = t || LLRBNode.EMPTY;
	    }
	    // Returns a copy of the map, with the specified key/value added or replaced.
	    insert(e, t) {
	        return new SortedMap(this.comparator, this.root.insert(e, t, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
	    }
	    // Returns a copy of the map, with the specified key removed.
	    remove(e) {
	        return new SortedMap(this.comparator, this.root.remove(e, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
	    }
	    // Returns the value of the node with the given key, or null.
	    get(e) {
	        let t = this.root;
	        for (;!t.isEmpty(); ) {
	            const n = this.comparator(e, t.key);
	            if (0 === n) return t.value;
	            n < 0 ? t = t.left : n > 0 && (t = t.right);
	        }
	        return null;
	    }
	    // Returns the index of the element in this sorted map, or -1 if it doesn't
	    // exist.
	    indexOf(e) {
	        // Number of nodes that were pruned when descending right
	        let t = 0, n = this.root;
	        for (;!n.isEmpty(); ) {
	            const r = this.comparator(e, n.key);
	            if (0 === r) return t + n.left.size;
	            r < 0 ? n = n.left : (
	            // Count all nodes left of the node plus the node itself
	            t += n.left.size + 1, n = n.right);
	        }
	        // Node not found
	                return -1;
	    }
	    isEmpty() {
	        return this.root.isEmpty();
	    }
	    // Returns the total number of nodes in the map.
	    get size() {
	        return this.root.size;
	    }
	    // Returns the minimum key in the map.
	    minKey() {
	        return this.root.minKey();
	    }
	    // Returns the maximum key in the map.
	    maxKey() {
	        return this.root.maxKey();
	    }
	    // Traverses the map in key order and calls the specified action function
	    // for each key/value pair. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    inorderTraversal(e) {
	        return this.root.inorderTraversal(e);
	    }
	    forEach(e) {
	        this.inorderTraversal(((t, n) => (e(t, n), !1)));
	    }
	    toString() {
	        const e = [];
	        return this.inorderTraversal(((t, n) => (e.push(`${t}:${n}`), !1))), `{${e.join(", ")}}`;
	    }
	    // Traverses the map in reverse key order and calls the specified action
	    // function for each key/value pair. If action returns true, traversal is
	    // aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    reverseTraversal(e) {
	        return this.root.reverseTraversal(e);
	    }
	    // Returns an iterator over the SortedMap.
	    getIterator() {
	        return new SortedMapIterator(this.root, null, this.comparator, !1);
	    }
	    getIteratorFrom(e) {
	        return new SortedMapIterator(this.root, e, this.comparator, !1);
	    }
	    getReverseIterator() {
	        return new SortedMapIterator(this.root, null, this.comparator, !0);
	    }
	    getReverseIteratorFrom(e) {
	        return new SortedMapIterator(this.root, e, this.comparator, !0);
	    }
	}

	 // end SortedMap
	// An iterator over an LLRBNode.
	class SortedMapIterator {
	    constructor(e, t, n, r) {
	        this.isReverse = r, this.nodeStack = [];
	        let i = 1;
	        for (;!e.isEmpty(); ) if (i = t ? n(e.key, t) : 1, 
	        // flip the comparison if we're going in reverse
	        t && r && (i *= -1), i < 0) 
	        // This node is less than our start key. ignore it
	        e = this.isReverse ? e.left : e.right; else {
	            if (0 === i) {
	                // This node is exactly equal to our start key. Push it on the stack,
	                // but stop iterating;
	                this.nodeStack.push(e);
	                break;
	            }
	            // This node is greater than our start key, add it to the stack and move
	            // to the next one
	            this.nodeStack.push(e), e = this.isReverse ? e.right : e.left;
	        }
	    }
	    getNext() {
	        let e = this.nodeStack.pop();
	        const t = {
	            key: e.key,
	            value: e.value
	        };
	        if (this.isReverse) for (e = e.left; !e.isEmpty(); ) this.nodeStack.push(e), e = e.right; else for (e = e.right; !e.isEmpty(); ) this.nodeStack.push(e), 
	        e = e.left;
	        return t;
	    }
	    hasNext() {
	        return this.nodeStack.length > 0;
	    }
	    peek() {
	        if (0 === this.nodeStack.length) return null;
	        const e = this.nodeStack[this.nodeStack.length - 1];
	        return {
	            key: e.key,
	            value: e.value
	        };
	    }
	}

	 // end SortedMapIterator
	// Represents a node in a Left-leaning Red-Black tree.
	class LLRBNode {
	    constructor(e, t, n, r, i) {
	        this.key = e, this.value = t, this.color = null != n ? n : LLRBNode.RED, this.left = null != r ? r : LLRBNode.EMPTY, 
	        this.right = null != i ? i : LLRBNode.EMPTY, this.size = this.left.size + 1 + this.right.size;
	    }
	    // Returns a copy of the current node, optionally replacing pieces of it.
	    copy(e, t, n, r, i) {
	        return new LLRBNode(null != e ? e : this.key, null != t ? t : this.value, null != n ? n : this.color, null != r ? r : this.left, null != i ? i : this.right);
	    }
	    isEmpty() {
	        return !1;
	    }
	    // Traverses the tree in key order and calls the specified action function
	    // for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    inorderTraversal(e) {
	        return this.left.inorderTraversal(e) || e(this.key, this.value) || this.right.inorderTraversal(e);
	    }
	    // Traverses the tree in reverse key order and calls the specified action
	    // function for each node. If action returns true, traversal is aborted.
	    // Returns the first truthy value returned by action, or the last falsey
	    // value returned by action.
	    reverseTraversal(e) {
	        return this.right.reverseTraversal(e) || e(this.key, this.value) || this.left.reverseTraversal(e);
	    }
	    // Returns the minimum node in the tree.
	    min() {
	        return this.left.isEmpty() ? this : this.left.min();
	    }
	    // Returns the maximum key in the tree.
	    minKey() {
	        return this.min().key;
	    }
	    // Returns the maximum key in the tree.
	    maxKey() {
	        return this.right.isEmpty() ? this.key : this.right.maxKey();
	    }
	    // Returns new tree, with the key/value added.
	    insert(e, t, n) {
	        let r = this;
	        const i = n(e, r.key);
	        return r = i < 0 ? r.copy(null, null, null, r.left.insert(e, t, n), null) : 0 === i ? r.copy(null, t, null, null, null) : r.copy(null, null, null, null, r.right.insert(e, t, n)), 
	        r.fixUp();
	    }
	    removeMin() {
	        if (this.left.isEmpty()) return LLRBNode.EMPTY;
	        let e = this;
	        return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), e = e.copy(null, null, null, e.left.removeMin(), null), 
	        e.fixUp();
	    }
	    // Returns new tree, with the specified item removed.
	    remove(e, t) {
	        let n, r = this;
	        if (t(e, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), 
	        r = r.copy(null, null, null, r.left.remove(e, t), null); else {
	            if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), 
	            0 === t(e, r.key)) {
	                if (r.right.isEmpty()) return LLRBNode.EMPTY;
	                n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());
	            }
	            r = r.copy(null, null, null, null, r.right.remove(e, t));
	        }
	        return r.fixUp();
	    }
	    isRed() {
	        return this.color;
	    }
	    // Returns new tree after performing any needed rotations.
	    fixUp() {
	        let e = this;
	        return e.right.isRed() && !e.left.isRed() && (e = e.rotateLeft()), e.left.isRed() && e.left.left.isRed() && (e = e.rotateRight()), 
	        e.left.isRed() && e.right.isRed() && (e = e.colorFlip()), e;
	    }
	    moveRedLeft() {
	        let e = this.colorFlip();
	        return e.right.left.isRed() && (e = e.copy(null, null, null, null, e.right.rotateRight()), 
	        e = e.rotateLeft(), e = e.colorFlip()), e;
	    }
	    moveRedRight() {
	        let e = this.colorFlip();
	        return e.left.left.isRed() && (e = e.rotateRight(), e = e.colorFlip()), e;
	    }
	    rotateLeft() {
	        const e = this.copy(null, null, LLRBNode.RED, null, this.right.left);
	        return this.right.copy(null, null, this.color, e, null);
	    }
	    rotateRight() {
	        const e = this.copy(null, null, LLRBNode.RED, this.left.right, null);
	        return this.left.copy(null, null, this.color, null, e);
	    }
	    colorFlip() {
	        const e = this.left.copy(null, null, !this.left.color, null, null), t = this.right.copy(null, null, !this.right.color, null, null);
	        return this.copy(null, null, !this.color, e, t);
	    }
	    // For testing.
	    checkMaxDepth() {
	        const e = this.check();
	        return Math.pow(2, e) <= this.size + 1;
	    }
	    // In a balanced RB tree, the black-depth (number of black nodes) from root to
	    // leaves is equal on both sides.  This function verifies that or asserts.
	    check() {
	        if (this.isRed() && this.left.isRed()) throw fail();
	        if (this.right.isRed()) throw fail();
	        const e = this.left.check();
	        if (e !== this.right.check()) throw fail();
	        return e + (this.isRed() ? 0 : 1);
	    }
	}

	 // end LLRBNode
	// Empty node is shared between all LLRB trees.
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	LLRBNode.EMPTY = null, LLRBNode.RED = !0, LLRBNode.BLACK = !1;

	// end LLRBEmptyNode
	LLRBNode.EMPTY = new 
	// Represents an empty node (a leaf node in the Red-Black Tree).
	class LLRBEmptyNode {
	    constructor() {
	        this.size = 0;
	    }
	    get key() {
	        throw fail();
	    }
	    get value() {
	        throw fail();
	    }
	    get color() {
	        throw fail();
	    }
	    get left() {
	        throw fail();
	    }
	    get right() {
	        throw fail();
	    }
	    // Returns a copy of the current node.
	    copy(e, t, n, r, i) {
	        return this;
	    }
	    // Returns a copy of the tree, with the specified key/value added.
	    insert(e, t, n) {
	        return new LLRBNode(e, t);
	    }
	    // Returns a copy of the tree, with the specified key removed.
	    remove(e, t) {
	        return this;
	    }
	    isEmpty() {
	        return !0;
	    }
	    inorderTraversal(e) {
	        return !1;
	    }
	    reverseTraversal(e) {
	        return !1;
	    }
	    minKey() {
	        return null;
	    }
	    maxKey() {
	        return null;
	    }
	    isRed() {
	        return !1;
	    }
	    // For testing.
	    checkMaxDepth() {
	        return !0;
	    }
	    check() {
	        return 0;
	    }
	};

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * SortedSet is an immutable (copy-on-write) collection that holds elements
	 * in order specified by the provided comparator.
	 *
	 * NOTE: if provided comparator returns 0 for two elements, we consider them to
	 * be equal!
	 */
	class SortedSet {
	    constructor(e) {
	        this.comparator = e, this.data = new SortedMap(this.comparator);
	    }
	    has(e) {
	        return null !== this.data.get(e);
	    }
	    first() {
	        return this.data.minKey();
	    }
	    last() {
	        return this.data.maxKey();
	    }
	    get size() {
	        return this.data.size;
	    }
	    indexOf(e) {
	        return this.data.indexOf(e);
	    }
	    /** Iterates elements in order defined by "comparator" */    forEach(e) {
	        this.data.inorderTraversal(((t, n) => (e(t), !1)));
	    }
	    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(e, t) {
	        const n = this.data.getIteratorFrom(e[0]);
	        for (;n.hasNext(); ) {
	            const r = n.getNext();
	            if (this.comparator(r.key, e[1]) >= 0) return;
	            t(r.key);
	        }
	    }
	    /**
	     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
	     */    forEachWhile(e, t) {
	        let n;
	        for (n = void 0 !== t ? this.data.getIteratorFrom(t) : this.data.getIterator(); n.hasNext(); ) {
	            if (!e(n.getNext().key)) return;
	        }
	    }
	    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(e) {
	        const t = this.data.getIteratorFrom(e);
	        return t.hasNext() ? t.getNext().key : null;
	    }
	    getIterator() {
	        return new SortedSetIterator(this.data.getIterator());
	    }
	    getIteratorFrom(e) {
	        return new SortedSetIterator(this.data.getIteratorFrom(e));
	    }
	    /** Inserts or updates an element */    add(e) {
	        return this.copy(this.data.remove(e).insert(e, !0));
	    }
	    /** Deletes an element */    delete(e) {
	        return this.has(e) ? this.copy(this.data.remove(e)) : this;
	    }
	    isEmpty() {
	        return this.data.isEmpty();
	    }
	    unionWith(e) {
	        let t = this;
	        // Make sure `result` always refers to the larger one of the two sets.
	                return t.size < e.size && (t = e, e = this), e.forEach((e => {
	            t = t.add(e);
	        })), t;
	    }
	    isEqual(e) {
	        if (!(e instanceof SortedSet)) return !1;
	        if (this.size !== e.size) return !1;
	        const t = this.data.getIterator(), n = e.data.getIterator();
	        for (;t.hasNext(); ) {
	            const e = t.getNext().key, r = n.getNext().key;
	            if (0 !== this.comparator(e, r)) return !1;
	        }
	        return !0;
	    }
	    toArray() {
	        const e = [];
	        return this.forEach((t => {
	            e.push(t);
	        })), e;
	    }
	    toString() {
	        const e = [];
	        return this.forEach((t => e.push(t))), "SortedSet(" + e.toString() + ")";
	    }
	    copy(e) {
	        const t = new SortedSet(this.comparator);
	        return t.data = e, t;
	    }
	}

	class SortedSetIterator {
	    constructor(e) {
	        this.iter = e;
	    }
	    getNext() {
	        return this.iter.getNext().key;
	    }
	    hasNext() {
	        return this.iter.hasNext();
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides a set of fields that can be used to partially patch a document.
	 * FieldMask is used in conjunction with ObjectValue.
	 * Examples:
	 *   foo - Overwrites foo entirely with the provided value. If foo is not
	 *         present in the companion ObjectValue, the field is deleted.
	 *   foo.bar - Overwrites only the field bar of the object foo.
	 *             If foo is not an object, foo is replaced with an object
	 *             containing foo
	 */ class FieldMask {
	    constructor(e) {
	        this.fields = e, 
	        // TODO(dimond): validation of FieldMask
	        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
	        e.sort(FieldPath$1.comparator);
	    }
	    static empty() {
	        return new FieldMask([]);
	    }
	    /**
	     * Returns a new FieldMask object that is the result of adding all the given
	     * fields paths to this field mask.
	     */    unionWith(e) {
	        let t = new SortedSet(FieldPath$1.comparator);
	        for (const e of this.fields) t = t.add(e);
	        for (const n of e) t = t.add(n);
	        return new FieldMask(t.toArray());
	    }
	    /**
	     * Verifies that `fieldPath` is included by at least one field in this field
	     * mask.
	     *
	     * This is an O(n) operation, where `n` is the size of the field mask.
	     */    covers(e) {
	        for (const t of this.fields) if (t.isPrefixOf(e)) return !0;
	        return !1;
	    }
	    isEqual(e) {
	        return __PRIVATE_arrayEquals(this.fields, e.fields, ((e, t) => e.isEqual(t)));
	    }
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An error encountered while decoding base64 string.
	 */ class __PRIVATE_Base64DecodeError extends Error {
	    constructor() {
	        super(...arguments), this.name = "Base64DecodeError";
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Immutable class that represents a "proto" byte string.
	 *
	 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
	 * sent on the wire. This class abstracts away this differentiation by holding
	 * the proto byte string in a common class that must be converted into a string
	 * before being sent as a proto.
	 * @internal
	 */ class ByteString {
	    constructor(e) {
	        this.binaryString = e;
	    }
	    static fromBase64String(e) {
	        const t = function __PRIVATE_decodeBase64(e) {
	            try {
	                return atob(e);
	            } catch (e) {
	                // Check that `DOMException` is defined before using it to avoid
	                // "ReferenceError: Property 'DOMException' doesn't exist" in react-native.
	                // (https://github.com/firebase/firebase-js-sdk/issues/7115)
	                throw "undefined" != typeof DOMException && e instanceof DOMException ? new __PRIVATE_Base64DecodeError("Invalid base64 string: " + e) : e;
	            }
	        }
	        /** Converts a binary string to a Base64 encoded string. */ (e);
	        return new ByteString(t);
	    }
	    static fromUint8Array(e) {
	        // TODO(indexing); Remove the copy of the byte string here as this method
	        // is frequently called during indexing.
	        const t = 
	        /**
	 * Helper function to convert an Uint8array to a binary string.
	 */
	        function __PRIVATE_binaryStringFromUint8Array(e) {
	            let t = "";
	            for (let n = 0; n < e.length; ++n) t += String.fromCharCode(e[n]);
	            return t;
	        }
	        /**
	 * Helper function to convert a binary string to an Uint8Array.
	 */ (e);
	        return new ByteString(t);
	    }
	    [Symbol.iterator]() {
	        let e = 0;
	        return {
	            next: () => e < this.binaryString.length ? {
	                value: this.binaryString.charCodeAt(e++),
	                done: !1
	            } : {
	                value: void 0,
	                done: !0
	            }
	        };
	    }
	    toBase64() {
	        return function __PRIVATE_encodeBase64(e) {
	            return btoa(e);
	        }(this.binaryString);
	    }
	    toUint8Array() {
	        return function __PRIVATE_uint8ArrayFromBinaryString(e) {
	            const t = new Uint8Array(e.length);
	            for (let n = 0; n < e.length; n++) t[n] = e.charCodeAt(n);
	            return t;
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
	        (this.binaryString);
	    }
	    approximateByteSize() {
	        return 2 * this.binaryString.length;
	    }
	    compareTo(e) {
	        return __PRIVATE_primitiveComparator(this.binaryString, e.binaryString);
	    }
	    isEqual(e) {
	        return this.binaryString === e.binaryString;
	    }
	}

	ByteString.EMPTY_BYTE_STRING = new ByteString("");

	const Ze = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

	/**
	 * Converts the possible Proto values for a timestamp value into a "seconds and
	 * nanos" representation.
	 */ function __PRIVATE_normalizeTimestamp(e) {
	    // The json interface (for the browser) will return an iso timestamp string,
	    // while the proto js library (for node) will return a
	    // google.protobuf.Timestamp instance.
	    if (__PRIVATE_hardAssert(!!e), "string" == typeof e) {
	        // The date string can have higher precision (nanos) than the Date class
	        // (millis), so we do some custom parsing here.
	        // Parse the nanos right out of the string.
	        let t = 0;
	        const n = Ze.exec(e);
	        if (__PRIVATE_hardAssert(!!n), n[1]) {
	            // Pad the fraction out to 9 digits (nanos).
	            let e = n[1];
	            e = (e + "000000000").substr(0, 9), t = Number(e);
	        }
	        // Parse the date to get the seconds.
	                const r = new Date(e);
	        return {
	            seconds: Math.floor(r.getTime() / 1e3),
	            nanos: t
	        };
	    }
	    return {
	        seconds: __PRIVATE_normalizeNumber(e.seconds),
	        nanos: __PRIVATE_normalizeNumber(e.nanos)
	    };
	}

	/**
	 * Converts the possible Proto types for numbers into a JavaScript number.
	 * Returns 0 if the value is not numeric.
	 */ function __PRIVATE_normalizeNumber(e) {
	    // TODO(bjornick): Handle int64 greater than 53 bits.
	    return "number" == typeof e ? e : "string" == typeof e ? Number(e) : 0;
	}

	/** Converts the possible Proto types for Blobs into a ByteString. */ function __PRIVATE_normalizeByteString(e) {
	    return "string" == typeof e ? ByteString.fromBase64String(e) : ByteString.fromUint8Array(e);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a locally-applied ServerTimestamp.
	 *
	 * Server Timestamps are backed by MapValues that contain an internal field
	 * `__type__` with a value of `server_timestamp`. The previous value and local
	 * write time are stored in its `__previous_value__` and `__local_write_time__`
	 * fields respectively.
	 *
	 * Notes:
	 * - ServerTimestampValue instances are created as the result of applying a
	 *   transform. They can only exist in the local view of a document. Therefore
	 *   they do not need to be parsed or serialized.
	 * - When evaluated locally (e.g. for snapshot.data()), they by default
	 *   evaluate to `null`. This behavior can be configured by passing custom
	 *   FieldValueOptions to value().
	 * - With respect to other ServerTimestampValues, they sort by their
	 *   localWriteTime.
	 */ const Xe = "server_timestamp", et = "__type__", tt = "__previous_value__", nt = "__local_write_time__";

	function __PRIVATE_isServerTimestamp(e) {
	    var t, n;
	    return (null === (n = ((null === (t = null == e ? void 0 : e.mapValue) || void 0 === t ? void 0 : t.fields) || {})[et]) || void 0 === n ? void 0 : n.stringValue) === Xe;
	}

	/**
	 * Creates a new ServerTimestamp proto value (using the internal format).
	 */
	/**
	 * Returns the value of the field before this ServerTimestamp was set.
	 *
	 * Preserving the previous values allows the user to display the last resoled
	 * value until the backend responds with the timestamp.
	 */
	function __PRIVATE_getPreviousValue(e) {
	    const t = e.mapValue.fields[tt];
	    return __PRIVATE_isServerTimestamp(t) ? __PRIVATE_getPreviousValue(t) : t;
	}

	/**
	 * Returns the local time at which this timestamp was first set.
	 */ function __PRIVATE_getLocalWriteTime(e) {
	    const t = __PRIVATE_normalizeTimestamp(e.mapValue.fields[nt].timestampValue);
	    return new Timestamp(t.seconds, t.nanos);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class DatabaseInfo {
	    /**
	     * Constructs a DatabaseInfo using the provided host, databaseId and
	     * persistenceKey.
	     *
	     * @param databaseId - The database to use.
	     * @param appId - The Firebase App Id.
	     * @param persistenceKey - A unique identifier for this Firestore's local
	     * storage (used in conjunction with the databaseId).
	     * @param host - The Firestore backend host to connect to.
	     * @param ssl - Whether to use SSL when connecting.
	     * @param forceLongPolling - Whether to use the forceLongPolling option
	     * when using WebChannel as the network transport.
	     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
	     * option when using WebChannel as the network transport.
	     * @param longPollingOptions Options that configure long-polling.
	     * @param useFetchStreams Whether to use the Fetch API instead of
	     * XMLHTTPRequest
	     */
	    constructor(e, t, n, r, i, s, o, _, a) {
	        this.databaseId = e, this.appId = t, this.persistenceKey = n, this.host = r, this.ssl = i, 
	        this.forceLongPolling = s, this.autoDetectLongPolling = o, this.longPollingOptions = _, 
	        this.useFetchStreams = a;
	    }
	}

	/** The default database name for a project. */ const rt = "(default)";

	/**
	 * Represents the database ID a Firestore client is associated with.
	 * @internal
	 */ class DatabaseId {
	    constructor(e, t) {
	        this.projectId = e, this.database = t || rt;
	    }
	    static empty() {
	        return new DatabaseId("", "");
	    }
	    get isDefaultDatabase() {
	        return this.database === rt;
	    }
	    isEqual(e) {
	        return e instanceof DatabaseId && e.projectId === this.projectId && e.database === this.database;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const it = "__type__", st = "__max__", ot = {
	    mapValue: {
	        fields: {
	            __type__: {
	                stringValue: st
	            }
	        }
	    }
	}, _t = "__vector__", at = "value";

	/** Extracts the backend's type order for the provided value. */
	function __PRIVATE_typeOrder(e) {
	    return "nullValue" in e ? 0 /* TypeOrder.NullValue */ : "booleanValue" in e ? 1 /* TypeOrder.BooleanValue */ : "integerValue" in e || "doubleValue" in e ? 2 /* TypeOrder.NumberValue */ : "timestampValue" in e ? 3 /* TypeOrder.TimestampValue */ : "stringValue" in e ? 5 /* TypeOrder.StringValue */ : "bytesValue" in e ? 6 /* TypeOrder.BlobValue */ : "referenceValue" in e ? 7 /* TypeOrder.RefValue */ : "geoPointValue" in e ? 8 /* TypeOrder.GeoPointValue */ : "arrayValue" in e ? 9 /* TypeOrder.ArrayValue */ : "mapValue" in e ? __PRIVATE_isServerTimestamp(e) ? 4 /* TypeOrder.ServerTimestampValue */ : __PRIVATE_isMaxValue(e) ? 9007199254740991 /* TypeOrder.MaxValue */ : __PRIVATE_isVectorValue(e) ? 10 /* TypeOrder.VectorValue */ : 11 /* TypeOrder.ObjectValue */ : fail();
	}

	/** Tests `left` and `right` for equality based on the backend semantics. */ function __PRIVATE_valueEquals(e, t) {
	    if (e === t) return !0;
	    const n = __PRIVATE_typeOrder(e);
	    if (n !== __PRIVATE_typeOrder(t)) return !1;
	    switch (n) {
	      case 0 /* TypeOrder.NullValue */ :
	      case 9007199254740991 /* TypeOrder.MaxValue */ :
	        return !0;

	      case 1 /* TypeOrder.BooleanValue */ :
	        return e.booleanValue === t.booleanValue;

	      case 4 /* TypeOrder.ServerTimestampValue */ :
	        return __PRIVATE_getLocalWriteTime(e).isEqual(__PRIVATE_getLocalWriteTime(t));

	      case 3 /* TypeOrder.TimestampValue */ :
	        return function __PRIVATE_timestampEquals(e, t) {
	            if ("string" == typeof e.timestampValue && "string" == typeof t.timestampValue && e.timestampValue.length === t.timestampValue.length) 
	            // Use string equality for ISO 8601 timestamps
	            return e.timestampValue === t.timestampValue;
	            const n = __PRIVATE_normalizeTimestamp(e.timestampValue), r = __PRIVATE_normalizeTimestamp(t.timestampValue);
	            return n.seconds === r.seconds && n.nanos === r.nanos;
	        }(e, t);

	      case 5 /* TypeOrder.StringValue */ :
	        return e.stringValue === t.stringValue;

	      case 6 /* TypeOrder.BlobValue */ :
	        return function __PRIVATE_blobEquals(e, t) {
	            return __PRIVATE_normalizeByteString(e.bytesValue).isEqual(__PRIVATE_normalizeByteString(t.bytesValue));
	        }(e, t);

	      case 7 /* TypeOrder.RefValue */ :
	        return e.referenceValue === t.referenceValue;

	      case 8 /* TypeOrder.GeoPointValue */ :
	        return function __PRIVATE_geoPointEquals(e, t) {
	            return __PRIVATE_normalizeNumber(e.geoPointValue.latitude) === __PRIVATE_normalizeNumber(t.geoPointValue.latitude) && __PRIVATE_normalizeNumber(e.geoPointValue.longitude) === __PRIVATE_normalizeNumber(t.geoPointValue.longitude);
	        }(e, t);

	      case 2 /* TypeOrder.NumberValue */ :
	        return function __PRIVATE_numberEquals(e, t) {
	            if ("integerValue" in e && "integerValue" in t) return __PRIVATE_normalizeNumber(e.integerValue) === __PRIVATE_normalizeNumber(t.integerValue);
	            if ("doubleValue" in e && "doubleValue" in t) {
	                const n = __PRIVATE_normalizeNumber(e.doubleValue), r = __PRIVATE_normalizeNumber(t.doubleValue);
	                return n === r ? __PRIVATE_isNegativeZero(n) === __PRIVATE_isNegativeZero(r) : isNaN(n) && isNaN(r);
	            }
	            return !1;
	        }(e, t);

	      case 9 /* TypeOrder.ArrayValue */ :
	        return __PRIVATE_arrayEquals(e.arrayValue.values || [], t.arrayValue.values || [], __PRIVATE_valueEquals);

	      case 10 /* TypeOrder.VectorValue */ :
	      case 11 /* TypeOrder.ObjectValue */ :
	        return function __PRIVATE_objectEquals(e, t) {
	            const n = e.mapValue.fields || {}, r = t.mapValue.fields || {};
	            if (__PRIVATE_objectSize(n) !== __PRIVATE_objectSize(r)) return !1;
	            for (const e in n) if (n.hasOwnProperty(e) && (void 0 === r[e] || !__PRIVATE_valueEquals(n[e], r[e]))) return !1;
	            return !0;
	        }
	        /** Returns true if the ArrayValue contains the specified element. */ (e, t);

	      default:
	        return fail();
	    }
	}

	function __PRIVATE_arrayValueContains(e, t) {
	    return void 0 !== (e.values || []).find((e => __PRIVATE_valueEquals(e, t)));
	}

	function __PRIVATE_valueCompare(e, t) {
	    if (e === t) return 0;
	    const n = __PRIVATE_typeOrder(e), r = __PRIVATE_typeOrder(t);
	    if (n !== r) return __PRIVATE_primitiveComparator(n, r);
	    switch (n) {
	      case 0 /* TypeOrder.NullValue */ :
	      case 9007199254740991 /* TypeOrder.MaxValue */ :
	        return 0;

	      case 1 /* TypeOrder.BooleanValue */ :
	        return __PRIVATE_primitiveComparator(e.booleanValue, t.booleanValue);

	      case 2 /* TypeOrder.NumberValue */ :
	        return function __PRIVATE_compareNumbers(e, t) {
	            const n = __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue), r = __PRIVATE_normalizeNumber(t.integerValue || t.doubleValue);
	            return n < r ? -1 : n > r ? 1 : n === r ? 0 : 
	            // one or both are NaN.
	            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;
	        }(e, t);

	      case 3 /* TypeOrder.TimestampValue */ :
	        return __PRIVATE_compareTimestamps(e.timestampValue, t.timestampValue);

	      case 4 /* TypeOrder.ServerTimestampValue */ :
	        return __PRIVATE_compareTimestamps(__PRIVATE_getLocalWriteTime(e), __PRIVATE_getLocalWriteTime(t));

	      case 5 /* TypeOrder.StringValue */ :
	        return __PRIVATE_primitiveComparator(e.stringValue, t.stringValue);

	      case 6 /* TypeOrder.BlobValue */ :
	        return function __PRIVATE_compareBlobs(e, t) {
	            const n = __PRIVATE_normalizeByteString(e), r = __PRIVATE_normalizeByteString(t);
	            return n.compareTo(r);
	        }(e.bytesValue, t.bytesValue);

	      case 7 /* TypeOrder.RefValue */ :
	        return function __PRIVATE_compareReferences(e, t) {
	            const n = e.split("/"), r = t.split("/");
	            for (let e = 0; e < n.length && e < r.length; e++) {
	                const t = __PRIVATE_primitiveComparator(n[e], r[e]);
	                if (0 !== t) return t;
	            }
	            return __PRIVATE_primitiveComparator(n.length, r.length);
	        }(e.referenceValue, t.referenceValue);

	      case 8 /* TypeOrder.GeoPointValue */ :
	        return function __PRIVATE_compareGeoPoints(e, t) {
	            const n = __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e.latitude), __PRIVATE_normalizeNumber(t.latitude));
	            if (0 !== n) return n;
	            return __PRIVATE_primitiveComparator(__PRIVATE_normalizeNumber(e.longitude), __PRIVATE_normalizeNumber(t.longitude));
	        }(e.geoPointValue, t.geoPointValue);

	      case 9 /* TypeOrder.ArrayValue */ :
	        return __PRIVATE_compareArrays(e.arrayValue, t.arrayValue);

	      case 10 /* TypeOrder.VectorValue */ :
	        return function __PRIVATE_compareVectors(e, t) {
	            var n, r, i, s;
	            const o = e.fields || {}, _ = t.fields || {}, a = null === (n = o[at]) || void 0 === n ? void 0 : n.arrayValue, u = null === (r = _[at]) || void 0 === r ? void 0 : r.arrayValue, c = __PRIVATE_primitiveComparator((null === (i = null == a ? void 0 : a.values) || void 0 === i ? void 0 : i.length) || 0, (null === (s = null == u ? void 0 : u.values) || void 0 === s ? void 0 : s.length) || 0);
	            if (0 !== c) return c;
	            return __PRIVATE_compareArrays(a, u);
	        }(e.mapValue, t.mapValue);

	      case 11 /* TypeOrder.ObjectValue */ :
	        return function __PRIVATE_compareMaps(e, t) {
	            if (e === ot.mapValue && t === ot.mapValue) return 0;
	            if (e === ot.mapValue) return 1;
	            if (t === ot.mapValue) return -1;
	            const n = e.fields || {}, r = Object.keys(n), i = t.fields || {}, s = Object.keys(i);
	            // Even though MapValues are likely sorted correctly based on their insertion
	            // order (e.g. when received from the backend), local modifications can bring
	            // elements out of order. We need to re-sort the elements to ensure that
	            // canonical IDs are independent of insertion order.
	            r.sort(), s.sort();
	            for (let e = 0; e < r.length && e < s.length; ++e) {
	                const t = __PRIVATE_primitiveComparator(r[e], s[e]);
	                if (0 !== t) return t;
	                const o = __PRIVATE_valueCompare(n[r[e]], i[s[e]]);
	                if (0 !== o) return o;
	            }
	            return __PRIVATE_primitiveComparator(r.length, s.length);
	        }
	        /**
	 * Generates the canonical ID for the provided field value (as used in Target
	 * serialization).
	 */ (e.mapValue, t.mapValue);

	      default:
	        throw fail();
	    }
	}

	function __PRIVATE_compareTimestamps(e, t) {
	    if ("string" == typeof e && "string" == typeof t && e.length === t.length) return __PRIVATE_primitiveComparator(e, t);
	    const n = __PRIVATE_normalizeTimestamp(e), r = __PRIVATE_normalizeTimestamp(t), i = __PRIVATE_primitiveComparator(n.seconds, r.seconds);
	    return 0 !== i ? i : __PRIVATE_primitiveComparator(n.nanos, r.nanos);
	}

	function __PRIVATE_compareArrays(e, t) {
	    const n = e.values || [], r = t.values || [];
	    for (let e = 0; e < n.length && e < r.length; ++e) {
	        const t = __PRIVATE_valueCompare(n[e], r[e]);
	        if (t) return t;
	    }
	    return __PRIVATE_primitiveComparator(n.length, r.length);
	}

	function canonicalId(e) {
	    return __PRIVATE_canonifyValue(e);
	}

	function __PRIVATE_canonifyValue(e) {
	    return "nullValue" in e ? "null" : "booleanValue" in e ? "" + e.booleanValue : "integerValue" in e ? "" + e.integerValue : "doubleValue" in e ? "" + e.doubleValue : "timestampValue" in e ? function __PRIVATE_canonifyTimestamp(e) {
	        const t = __PRIVATE_normalizeTimestamp(e);
	        return `time(${t.seconds},${t.nanos})`;
	    }(e.timestampValue) : "stringValue" in e ? e.stringValue : "bytesValue" in e ? function __PRIVATE_canonifyByteString(e) {
	        return __PRIVATE_normalizeByteString(e).toBase64();
	    }(e.bytesValue) : "referenceValue" in e ? function __PRIVATE_canonifyReference(e) {
	        return DocumentKey.fromName(e).toString();
	    }(e.referenceValue) : "geoPointValue" in e ? function __PRIVATE_canonifyGeoPoint(e) {
	        return `geo(${e.latitude},${e.longitude})`;
	    }(e.geoPointValue) : "arrayValue" in e ? function __PRIVATE_canonifyArray(e) {
	        let t = "[", n = !0;
	        for (const r of e.values || []) n ? n = !1 : t += ",", t += __PRIVATE_canonifyValue(r);
	        return t + "]";
	    }
	    /**
	 * Returns an approximate (and wildly inaccurate) in-memory size for the field
	 * value.
	 *
	 * The memory size takes into account only the actual user data as it resides
	 * in memory and ignores object overhead.
	 */ (e.arrayValue) : "mapValue" in e ? function __PRIVATE_canonifyMap(e) {
	        // Iteration order in JavaScript is not guaranteed. To ensure that we generate
	        // matching canonical IDs for identical maps, we need to sort the keys.
	        const t = Object.keys(e.fields || {}).sort();
	        let n = "{", r = !0;
	        for (const i of t) r ? r = !1 : n += ",", n += `${i}:${__PRIVATE_canonifyValue(e.fields[i])}`;
	        return n + "}";
	    }(e.mapValue) : fail();
	}

	function __PRIVATE_estimateByteSize(e) {
	    switch (__PRIVATE_typeOrder(e)) {
	      case 0 /* TypeOrder.NullValue */ :
	      case 1 /* TypeOrder.BooleanValue */ :
	        return 4;

	      case 2 /* TypeOrder.NumberValue */ :
	        return 8;

	      case 3 /* TypeOrder.TimestampValue */ :
	      case 8 /* TypeOrder.GeoPointValue */ :
	        // GeoPoints are made up of two distinct numbers (latitude + longitude)
	        return 16;

	      case 4 /* TypeOrder.ServerTimestampValue */ :
	        const t = __PRIVATE_getPreviousValue(e);
	        return t ? 16 + __PRIVATE_estimateByteSize(t) : 16;

	      case 5 /* TypeOrder.StringValue */ :
	        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:
	        // "JavaScript's String type is [...] a set of elements of 16-bit unsigned
	        // integer values"
	        return 2 * e.stringValue.length;

	      case 6 /* TypeOrder.BlobValue */ :
	        return __PRIVATE_normalizeByteString(e.bytesValue).approximateByteSize();

	      case 7 /* TypeOrder.RefValue */ :
	        return e.referenceValue.length;

	      case 9 /* TypeOrder.ArrayValue */ :
	        return function __PRIVATE_estimateArrayByteSize(e) {
	            return (e.values || []).reduce(((e, t) => e + __PRIVATE_estimateByteSize(t)), 0);
	        }
	        /** Returns a reference value for the provided database and key. */ (e.arrayValue);

	      case 10 /* TypeOrder.VectorValue */ :
	      case 11 /* TypeOrder.ObjectValue */ :
	        return function __PRIVATE_estimateMapByteSize(e) {
	            let t = 0;
	            return forEach(e.fields, ((e, n) => {
	                t += e.length + __PRIVATE_estimateByteSize(n);
	            })), t;
	        }(e.mapValue);

	      default:
	        throw fail();
	    }
	}

	/** Returns true if `value` is an IntegerValue . */ function isInteger(e) {
	    return !!e && "integerValue" in e;
	}

	/** Returns true if `value` is a DoubleValue. */
	/** Returns true if `value` is an ArrayValue. */
	function isArray(e) {
	    return !!e && "arrayValue" in e;
	}

	/** Returns true if `value` is a NullValue. */ function __PRIVATE_isNullValue(e) {
	    return !!e && "nullValue" in e;
	}

	/** Returns true if `value` is NaN. */ function __PRIVATE_isNanValue(e) {
	    return !!e && "doubleValue" in e && isNaN(Number(e.doubleValue));
	}

	/** Returns true if `value` is a MapValue. */ function __PRIVATE_isMapValue(e) {
	    return !!e && "mapValue" in e;
	}

	/** Returns true if `value` is a VetorValue. */ function __PRIVATE_isVectorValue(e) {
	    var t, n;
	    return (null === (n = ((null === (t = null == e ? void 0 : e.mapValue) || void 0 === t ? void 0 : t.fields) || {})[it]) || void 0 === n ? void 0 : n.stringValue) === _t;
	}

	/** Creates a deep copy of `source`. */ function __PRIVATE_deepClone(e) {
	    if (e.geoPointValue) return {
	        geoPointValue: Object.assign({}, e.geoPointValue)
	    };
	    if (e.timestampValue && "object" == typeof e.timestampValue) return {
	        timestampValue: Object.assign({}, e.timestampValue)
	    };
	    if (e.mapValue) {
	        const t = {
	            mapValue: {
	                fields: {}
	            }
	        };
	        return forEach(e.mapValue.fields, ((e, n) => t.mapValue.fields[e] = __PRIVATE_deepClone(n))), 
	        t;
	    }
	    if (e.arrayValue) {
	        const t = {
	            arrayValue: {
	                values: []
	            }
	        };
	        for (let n = 0; n < (e.arrayValue.values || []).length; ++n) t.arrayValue.values[n] = __PRIVATE_deepClone(e.arrayValue.values[n]);
	        return t;
	    }
	    return Object.assign({}, e);
	}

	/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */ function __PRIVATE_isMaxValue(e) {
	    return (((e.mapValue || {}).fields || {}).__type__ || {}).stringValue === st;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
	 * ability to add and remove fields (via the ObjectValueBuilder).
	 */ class ObjectValue {
	    constructor(e) {
	        this.value = e;
	    }
	    static empty() {
	        return new ObjectValue({
	            mapValue: {}
	        });
	    }
	    /**
	     * Returns the value at the given path or null.
	     *
	     * @param path - the path to search
	     * @returns The value at the path or null if the path is not set.
	     */    field(e) {
	        if (e.isEmpty()) return this.value;
	        {
	            let t = this.value;
	            for (let n = 0; n < e.length - 1; ++n) if (t = (t.mapValue.fields || {})[e.get(n)], 
	            !__PRIVATE_isMapValue(t)) return null;
	            return t = (t.mapValue.fields || {})[e.lastSegment()], t || null;
	        }
	    }
	    /**
	     * Sets the field to the provided value.
	     *
	     * @param path - The field path to set.
	     * @param value - The value to set.
	     */    set(e, t) {
	        this.getFieldsMap(e.popLast())[e.lastSegment()] = __PRIVATE_deepClone(t);
	    }
	    /**
	     * Sets the provided fields to the provided values.
	     *
	     * @param data - A map of fields to values (or null for deletes).
	     */    setAll(e) {
	        let t = FieldPath$1.emptyPath(), n = {}, r = [];
	        e.forEach(((e, i) => {
	            if (!t.isImmediateParentOf(i)) {
	                // Insert the accumulated changes at this parent location
	                const e = this.getFieldsMap(t);
	                this.applyChanges(e, n, r), n = {}, r = [], t = i.popLast();
	            }
	            e ? n[i.lastSegment()] = __PRIVATE_deepClone(e) : r.push(i.lastSegment());
	        }));
	        const i = this.getFieldsMap(t);
	        this.applyChanges(i, n, r);
	    }
	    /**
	     * Removes the field at the specified path. If there is no field at the
	     * specified path, nothing is changed.
	     *
	     * @param path - The field path to remove.
	     */    delete(e) {
	        const t = this.field(e.popLast());
	        __PRIVATE_isMapValue(t) && t.mapValue.fields && delete t.mapValue.fields[e.lastSegment()];
	    }
	    isEqual(e) {
	        return __PRIVATE_valueEquals(this.value, e.value);
	    }
	    /**
	     * Returns the map that contains the leaf element of `path`. If the parent
	     * entry does not yet exist, or if it is not a map, a new map will be created.
	     */    getFieldsMap(e) {
	        let t = this.value;
	        t.mapValue.fields || (t.mapValue = {
	            fields: {}
	        });
	        for (let n = 0; n < e.length; ++n) {
	            let r = t.mapValue.fields[e.get(n)];
	            __PRIVATE_isMapValue(r) && r.mapValue.fields || (r = {
	                mapValue: {
	                    fields: {}
	                }
	            }, t.mapValue.fields[e.get(n)] = r), t = r;
	        }
	        return t.mapValue.fields;
	    }
	    /**
	     * Modifies `fieldsMap` by adding, replacing or deleting the specified
	     * entries.
	     */    applyChanges(e, t, n) {
	        forEach(t, ((t, n) => e[t] = n));
	        for (const t of n) delete e[t];
	    }
	    clone() {
	        return new ObjectValue(__PRIVATE_deepClone(this.value));
	    }
	}

	/**
	 * Returns a FieldMask built from all fields in a MapValue.
	 */ function __PRIVATE_extractFieldMask(e) {
	    const t = [];
	    return forEach(e.fields, ((e, n) => {
	        const r = new FieldPath$1([ e ]);
	        if (__PRIVATE_isMapValue(n)) {
	            const e = __PRIVATE_extractFieldMask(n.mapValue).fields;
	            if (0 === e.length) 
	            // Preserve the empty map by adding it to the FieldMask.
	            t.push(r); else 
	            // For nested and non-empty ObjectValues, add the FieldPath of the
	            // leaf nodes.
	            for (const n of e) t.push(r.child(n));
	        } else 
	        // For nested and non-empty ObjectValues, add the FieldPath of the leaf
	        // nodes.
	        t.push(r);
	    })), new FieldMask(t);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a document in Firestore with a key, version, data and whether it
	 * has local mutations applied to it.
	 *
	 * Documents can transition between states via `convertToFoundDocument()`,
	 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
	 * not transition to one of these states even after all mutations have been
	 * applied, `isValidDocument()` returns false and the document should be removed
	 * from all views.
	 */ class MutableDocument {
	    constructor(e, t, n, r, i, s, o) {
	        this.key = e, this.documentType = t, this.version = n, this.readTime = r, this.createTime = i, 
	        this.data = s, this.documentState = o;
	    }
	    /**
	     * Creates a document with no known version or data, but which can serve as
	     * base document for mutations.
	     */    static newInvalidDocument(e) {
	        return new MutableDocument(e, 0 /* DocumentType.INVALID */ , 
	        /* version */ SnapshotVersion.min(), 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);
	    }
	    /**
	     * Creates a new document that is known to exist with the given data at the
	     * given version.
	     */    static newFoundDocument(e, t, n, r) {
	        return new MutableDocument(e, 1 /* DocumentType.FOUND_DOCUMENT */ , 
	        /* version */ t, 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ n, r, 0 /* DocumentState.SYNCED */);
	    }
	    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(e, t) {
	        return new MutableDocument(e, 2 /* DocumentType.NO_DOCUMENT */ , 
	        /* version */ t, 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);
	    }
	    /**
	     * Creates a new document that is known to exist at the given version but
	     * whose data is not known (e.g. a document that was updated without a known
	     * base document).
	     */    static newUnknownDocument(e, t) {
	        return new MutableDocument(e, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , 
	        /* version */ t, 
	        /* readTime */ SnapshotVersion.min(), 
	        /* createTime */ SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);
	    }
	    /**
	     * Changes the document type to indicate that it exists and that its version
	     * and data are known.
	     */    convertToFoundDocument(e, t) {
	        // If a document is switching state from being an invalid or deleted
	        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an
	        // update from Watch or due to applying a local set mutation on top
	        // of a deleted document, our best guess about its createTime would be the
	        // version at which the document transitioned to a FOUND_DOCUMENT.
	        return !this.createTime.isEqual(SnapshotVersion.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = e), 
	        this.version = e, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = t, 
	        this.documentState = 0 /* DocumentState.SYNCED */ , this;
	    }
	    /**
	     * Changes the document type to indicate that it doesn't exist at the given
	     * version.
	     */    convertToNoDocument(e) {
	        return this.version = e, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , 
	        this.data = ObjectValue.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , 
	        this;
	    }
	    /**
	     * Changes the document type to indicate that it exists at a given version but
	     * that its data is not known (e.g. a document that was updated without a known
	     * base document).
	     */    convertToUnknownDocument(e) {
	        return this.version = e, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , 
	        this.data = ObjectValue.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , 
	        this;
	    }
	    setHasCommittedMutations() {
	        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;
	    }
	    setHasLocalMutations() {
	        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = SnapshotVersion.min(), 
	        this;
	    }
	    setReadTime(e) {
	        return this.readTime = e, this;
	    }
	    get hasLocalMutations() {
	        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;
	    }
	    get hasCommittedMutations() {
	        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;
	    }
	    get hasPendingWrites() {
	        return this.hasLocalMutations || this.hasCommittedMutations;
	    }
	    isValidDocument() {
	        return 0 /* DocumentType.INVALID */ !== this.documentType;
	    }
	    isFoundDocument() {
	        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;
	    }
	    isNoDocument() {
	        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;
	    }
	    isUnknownDocument() {
	        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;
	    }
	    isEqual(e) {
	        return e instanceof MutableDocument && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
	    }
	    mutableCopy() {
	        return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);
	    }
	    toString() {
	        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
	    }
	}

	/**
	 * Compares the value for field `field` in the provided documents. Throws if
	 * the field does not exist in both documents.
	 */
	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a bound of a query.
	 *
	 * The bound is specified with the given components representing a position and
	 * whether it's just before or just after the position (relative to whatever the
	 * query order is).
	 *
	 * The position represents a logical index position for a query. It's a prefix
	 * of values for the (potentially implicit) order by clauses of a query.
	 *
	 * Bound provides a function to determine whether a document comes before or
	 * after a bound. This is influenced by whether the position is just before or
	 * just after the provided values.
	 */
	class Bound {
	    constructor(e, t) {
	        this.position = e, this.inclusive = t;
	    }
	}

	function __PRIVATE_boundCompareToDocument(e, t, n) {
	    let r = 0;
	    for (let i = 0; i < e.position.length; i++) {
	        const s = t[i], o = e.position[i];
	        if (s.field.isKeyField()) r = DocumentKey.comparator(DocumentKey.fromName(o.referenceValue), n.key); else {
	            r = __PRIVATE_valueCompare(o, n.data.field(s.field));
	        }
	        if ("desc" /* Direction.DESCENDING */ === s.dir && (r *= -1), 0 !== r) break;
	    }
	    return r;
	}

	/**
	 * Returns true if a document sorts after a bound using the provided sort
	 * order.
	 */ function __PRIVATE_boundEquals(e, t) {
	    if (null === e) return null === t;
	    if (null === t) return !1;
	    if (e.inclusive !== t.inclusive || e.position.length !== t.position.length) return !1;
	    for (let n = 0; n < e.position.length; n++) {
	        if (!__PRIVATE_valueEquals(e.position[n], t.position[n])) return !1;
	    }
	    return !0;
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
	 */ class OrderBy {
	    constructor(e, t = "asc" /* Direction.ASCENDING */) {
	        this.field = e, this.dir = t;
	    }
	}

	function __PRIVATE_orderByEquals(e, t) {
	    return e.dir === t.dir && e.field.isEqual(t.field);
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class Filter {}

	class FieldFilter extends Filter {
	    constructor(e, t, n) {
	        super(), this.field = e, this.op = t, this.value = n;
	    }
	    /**
	     * Creates a filter based on the provided arguments.
	     */    static create(e, t, n) {
	        return e.isKeyField() ? "in" /* Operator.IN */ === t || "not-in" /* Operator.NOT_IN */ === t ? this.createKeyFieldInFilter(e, t, n) : new __PRIVATE_KeyFieldFilter(e, t, n) : "array-contains" /* Operator.ARRAY_CONTAINS */ === t ? new __PRIVATE_ArrayContainsFilter(e, n) : "in" /* Operator.IN */ === t ? new __PRIVATE_InFilter(e, n) : "not-in" /* Operator.NOT_IN */ === t ? new __PRIVATE_NotInFilter(e, n) : "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ === t ? new __PRIVATE_ArrayContainsAnyFilter(e, n) : new FieldFilter(e, t, n);
	    }
	    static createKeyFieldInFilter(e, t, n) {
	        return "in" /* Operator.IN */ === t ? new __PRIVATE_KeyFieldInFilter(e, n) : new __PRIVATE_KeyFieldNotInFilter(e, n);
	    }
	    matches(e) {
	        const t = e.data.field(this.field);
	        // Types do not have to match in NOT_EQUAL filters.
	                return "!=" /* Operator.NOT_EQUAL */ === this.op ? null !== t && this.matchesComparison(__PRIVATE_valueCompare(t, this.value)) : null !== t && __PRIVATE_typeOrder(this.value) === __PRIVATE_typeOrder(t) && this.matchesComparison(__PRIVATE_valueCompare(t, this.value));
	        // Only compare types with matching backend order (such as double and int).
	        }
	    matchesComparison(e) {
	        switch (this.op) {
	          case "<" /* Operator.LESS_THAN */ :
	            return e < 0;

	          case "<=" /* Operator.LESS_THAN_OR_EQUAL */ :
	            return e <= 0;

	          case "==" /* Operator.EQUAL */ :
	            return 0 === e;

	          case "!=" /* Operator.NOT_EQUAL */ :
	            return 0 !== e;

	          case ">" /* Operator.GREATER_THAN */ :
	            return e > 0;

	          case ">=" /* Operator.GREATER_THAN_OR_EQUAL */ :
	            return e >= 0;

	          default:
	            return fail();
	        }
	    }
	    isInequality() {
	        return [ "<" /* Operator.LESS_THAN */ , "<=" /* Operator.LESS_THAN_OR_EQUAL */ , ">" /* Operator.GREATER_THAN */ , ">=" /* Operator.GREATER_THAN_OR_EQUAL */ , "!=" /* Operator.NOT_EQUAL */ , "not-in" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;
	    }
	    getFlattenedFilters() {
	        return [ this ];
	    }
	    getFilters() {
	        return [ this ];
	    }
	}

	class CompositeFilter extends Filter {
	    constructor(e, t) {
	        super(), this.filters = e, this.op = t, this.ce = null;
	    }
	    /**
	     * Creates a filter based on the provided arguments.
	     */    static create(e, t) {
	        return new CompositeFilter(e, t);
	    }
	    matches(e) {
	        return __PRIVATE_compositeFilterIsConjunction(this) ? void 0 === this.filters.find((t => !t.matches(e))) : void 0 !== this.filters.find((t => t.matches(e)));
	    }
	    getFlattenedFilters() {
	        return null !== this.ce || (this.ce = this.filters.reduce(((e, t) => e.concat(t.getFlattenedFilters())), [])), 
	        this.ce;
	    }
	    // Returns a mutable copy of `this.filters`
	    getFilters() {
	        return Object.assign([], this.filters);
	    }
	}

	function __PRIVATE_compositeFilterIsConjunction(e) {
	    return "and" /* CompositeOperator.AND */ === e.op;
	}

	/**
	 * Returns true if this filter is a conjunction of field filters only. Returns false otherwise.
	 */ function __PRIVATE_compositeFilterIsFlatConjunction(e) {
	    return __PRIVATE_compositeFilterIsFlat(e) && __PRIVATE_compositeFilterIsConjunction(e);
	}

	/**
	 * Returns true if this filter does not contain any composite filters. Returns false otherwise.
	 */ function __PRIVATE_compositeFilterIsFlat(e) {
	    for (const t of e.filters) if (t instanceof CompositeFilter) return !1;
	    return !0;
	}

	function __PRIVATE_canonifyFilter(e) {
	    if (e instanceof FieldFilter) 
	    // TODO(b/29183165): Technically, this won't be unique if two values have
	    // the same description, such as the int 3 and the string "3". So we should
	    // add the types in here somehow, too.
	    return e.field.canonicalString() + e.op.toString() + canonicalId(e.value);
	    if (__PRIVATE_compositeFilterIsFlatConjunction(e)) 
	    // Older SDK versions use an implicit AND operation between their filters.
	    // In the new SDK versions, the developer may use an explicit AND filter.
	    // To stay consistent with the old usages, we add a special case to ensure
	    // the canonical ID for these two are the same. For example:
	    // `col.whereEquals("a", 1).whereEquals("b", 2)` should have the same
	    // canonical ID as `col.where(and(equals("a",1), equals("b",2)))`.
	    return e.filters.map((e => __PRIVATE_canonifyFilter(e))).join(",");
	    {
	        // filter instanceof CompositeFilter
	        const t = e.filters.map((e => __PRIVATE_canonifyFilter(e))).join(",");
	        return `${e.op}(${t})`;
	    }
	}

	function __PRIVATE_filterEquals(e, t) {
	    return e instanceof FieldFilter ? function __PRIVATE_fieldFilterEquals(e, t) {
	        return t instanceof FieldFilter && e.op === t.op && e.field.isEqual(t.field) && __PRIVATE_valueEquals(e.value, t.value);
	    }(e, t) : e instanceof CompositeFilter ? function __PRIVATE_compositeFilterEquals(e, t) {
	        if (t instanceof CompositeFilter && e.op === t.op && e.filters.length === t.filters.length) {
	            return e.filters.reduce(((e, n, r) => e && __PRIVATE_filterEquals(n, t.filters[r])), !0);
	        }
	        return !1;
	    }
	    /**
	 * Returns a new composite filter that contains all filter from
	 * `compositeFilter` plus all the given filters in `otherFilters`.
	 */ (e, t) : void fail();
	}

	/** Returns a debug description for `filter`. */ function __PRIVATE_stringifyFilter(e) {
	    return e instanceof FieldFilter ? function __PRIVATE_stringifyFieldFilter(e) {
	        return `${e.field.canonicalString()} ${e.op} ${canonicalId(e.value)}`;
	    }
	    /** Filter that matches on key fields (i.e. '__name__'). */ (e) : e instanceof CompositeFilter ? function __PRIVATE_stringifyCompositeFilter(e) {
	        return e.op.toString() + " {" + e.getFilters().map(__PRIVATE_stringifyFilter).join(" ,") + "}";
	    }(e) : "Filter";
	}

	class __PRIVATE_KeyFieldFilter extends FieldFilter {
	    constructor(e, t, n) {
	        super(e, t, n), this.key = DocumentKey.fromName(n.referenceValue);
	    }
	    matches(e) {
	        const t = DocumentKey.comparator(e.key, this.key);
	        return this.matchesComparison(t);
	    }
	}

	/** Filter that matches on key fields within an array. */ class __PRIVATE_KeyFieldInFilter extends FieldFilter {
	    constructor(e, t) {
	        super(e, "in" /* Operator.IN */ , t), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("in" /* Operator.IN */ , t);
	    }
	    matches(e) {
	        return this.keys.some((t => t.isEqual(e.key)));
	    }
	}

	/** Filter that matches on key fields not present within an array. */ class __PRIVATE_KeyFieldNotInFilter extends FieldFilter {
	    constructor(e, t) {
	        super(e, "not-in" /* Operator.NOT_IN */ , t), this.keys = __PRIVATE_extractDocumentKeysFromArrayValue("not-in" /* Operator.NOT_IN */ , t);
	    }
	    matches(e) {
	        return !this.keys.some((t => t.isEqual(e.key)));
	    }
	}

	function __PRIVATE_extractDocumentKeysFromArrayValue(e, t) {
	    var n;
	    return ((null === (n = t.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((e => DocumentKey.fromName(e.referenceValue)));
	}

	/** A Filter that implements the array-contains operator. */ class __PRIVATE_ArrayContainsFilter extends FieldFilter {
	    constructor(e, t) {
	        super(e, "array-contains" /* Operator.ARRAY_CONTAINS */ , t);
	    }
	    matches(e) {
	        const t = e.data.field(this.field);
	        return isArray(t) && __PRIVATE_arrayValueContains(t.arrayValue, this.value);
	    }
	}

	/** A Filter that implements the IN operator. */ class __PRIVATE_InFilter extends FieldFilter {
	    constructor(e, t) {
	        super(e, "in" /* Operator.IN */ , t);
	    }
	    matches(e) {
	        const t = e.data.field(this.field);
	        return null !== t && __PRIVATE_arrayValueContains(this.value.arrayValue, t);
	    }
	}

	/** A Filter that implements the not-in operator. */ class __PRIVATE_NotInFilter extends FieldFilter {
	    constructor(e, t) {
	        super(e, "not-in" /* Operator.NOT_IN */ , t);
	    }
	    matches(e) {
	        if (__PRIVATE_arrayValueContains(this.value.arrayValue, {
	            nullValue: "NULL_VALUE"
	        })) return !1;
	        const t = e.data.field(this.field);
	        return null !== t && !__PRIVATE_arrayValueContains(this.value.arrayValue, t);
	    }
	}

	/** A Filter that implements the array-contains-any operator. */ class __PRIVATE_ArrayContainsAnyFilter extends FieldFilter {
	    constructor(e, t) {
	        super(e, "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */ , t);
	    }
	    matches(e) {
	        const t = e.data.field(this.field);
	        return !(!isArray(t) || !t.arrayValue.values) && t.arrayValue.values.some((e => __PRIVATE_arrayValueContains(this.value.arrayValue, e)));
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// Visible for testing
	class __PRIVATE_TargetImpl {
	    constructor(e, t = null, n = [], r = [], i = null, s = null, o = null) {
	        this.path = e, this.collectionGroup = t, this.orderBy = n, this.filters = r, this.limit = i, 
	        this.startAt = s, this.endAt = o, this.le = null;
	    }
	}

	/**
	 * Initializes a Target with a path and optional additional query constraints.
	 * Path must currently be empty if this is a collection group query.
	 *
	 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
	 * using this factory method, because `Query` provides an implicit `orderBy`
	 * property.
	 */ function __PRIVATE_newTarget(e, t = null, n = [], r = [], i = null, s = null, o = null) {
	    return new __PRIVATE_TargetImpl(e, t, n, r, i, s, o);
	}

	function __PRIVATE_canonifyTarget(e) {
	    const t = __PRIVATE_debugCast(e);
	    if (null === t.le) {
	        let e = t.path.canonicalString();
	        null !== t.collectionGroup && (e += "|cg:" + t.collectionGroup), e += "|f:", e += t.filters.map((e => __PRIVATE_canonifyFilter(e))).join(","), 
	        e += "|ob:", e += t.orderBy.map((e => function __PRIVATE_canonifyOrderBy(e) {
	            // TODO(b/29183165): Make this collision robust.
	            return e.field.canonicalString() + e.dir;
	        }(e))).join(","), __PRIVATE_isNullOrUndefined(t.limit) || (e += "|l:", e += t.limit), 
	        t.startAt && (e += "|lb:", e += t.startAt.inclusive ? "b:" : "a:", e += t.startAt.position.map((e => canonicalId(e))).join(",")), 
	        t.endAt && (e += "|ub:", e += t.endAt.inclusive ? "a:" : "b:", e += t.endAt.position.map((e => canonicalId(e))).join(",")), 
	        t.le = e;
	    }
	    return t.le;
	}

	function __PRIVATE_targetEquals(e, t) {
	    if (e.limit !== t.limit) return !1;
	    if (e.orderBy.length !== t.orderBy.length) return !1;
	    for (let n = 0; n < e.orderBy.length; n++) if (!__PRIVATE_orderByEquals(e.orderBy[n], t.orderBy[n])) return !1;
	    if (e.filters.length !== t.filters.length) return !1;
	    for (let n = 0; n < e.filters.length; n++) if (!__PRIVATE_filterEquals(e.filters[n], t.filters[n])) return !1;
	    return e.collectionGroup === t.collectionGroup && (!!e.path.isEqual(t.path) && (!!__PRIVATE_boundEquals(e.startAt, t.startAt) && __PRIVATE_boundEquals(e.endAt, t.endAt)));
	}

	function __PRIVATE_targetIsDocumentTarget(e) {
	    return DocumentKey.isDocumentKey(e.path) && null === e.collectionGroup && 0 === e.filters.length;
	}

	/** Returns the number of segments of a perfect index for this target. */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Query encapsulates all the query attributes we support in the SDK. It can
	 * be run against the LocalStore, as well as be converted to a `Target` to
	 * query the RemoteStore results.
	 *
	 * Visible for testing.
	 */
	class __PRIVATE_QueryImpl {
	    /**
	     * Initializes a Query with a path and optional additional query constraints.
	     * Path must currently be empty if this is a collection group query.
	     */
	    constructor(e, t = null, n = [], r = [], i = null, s = "F" /* LimitType.First */ , o = null, _ = null) {
	        this.path = e, this.collectionGroup = t, this.explicitOrderBy = n, this.filters = r, 
	        this.limit = i, this.limitType = s, this.startAt = o, this.endAt = _, this.he = null, 
	        // The corresponding `Target` of this `Query` instance, for use with
	        // non-aggregate queries.
	        this.Pe = null, 
	        // The corresponding `Target` of this `Query` instance, for use with
	        // aggregate queries. Unlike targets for non-aggregate queries,
	        // aggregate query targets do not contain normalized order-bys, they only
	        // contain explicit order-bys.
	        this.Te = null, this.startAt, this.endAt;
	    }
	}

	/** Creates a new Query instance with the options provided. */ function __PRIVATE_newQuery(e, t, n, r, i, s, o, _) {
	    return new __PRIVATE_QueryImpl(e, t, n, r, i, s, o, _);
	}

	/** Creates a new Query for a query that matches all documents at `path` */ function __PRIVATE_newQueryForPath(e) {
	    return new __PRIVATE_QueryImpl(e);
	}

	/**
	 * Helper to convert a collection group query into a collection query at a
	 * specific path. This is used when executing collection group queries, since
	 * we have to split the query into a set of collection queries at multiple
	 * paths.
	 */
	/**
	 * Returns true if this query does not specify any query constraints that
	 * could remove results.
	 */
	function __PRIVATE_queryMatchesAllDocuments(e) {
	    return 0 === e.filters.length && null === e.limit && null == e.startAt && null == e.endAt && (0 === e.explicitOrderBy.length || 1 === e.explicitOrderBy.length && e.explicitOrderBy[0].field.isKeyField());
	}

	// Returns the sorted set of inequality filter fields used in this query.
	/**
	 * Returns whether the query matches a collection group rather than a specific
	 * collection.
	 */
	function __PRIVATE_isCollectionGroupQuery(e) {
	    return null !== e.collectionGroup;
	}

	/**
	 * Returns the normalized order-by constraint that is used to execute the Query,
	 * which can be different from the order-by constraints the user provided (e.g.
	 * the SDK and backend always orders by `__name__`). The normalized order-by
	 * includes implicit order-bys in addition to the explicit user provided
	 * order-bys.
	 */ function __PRIVATE_queryNormalizedOrderBy(e) {
	    const t = __PRIVATE_debugCast(e);
	    if (null === t.he) {
	        t.he = [];
	        const e = new Set;
	        // Any explicit order by fields should be added as is.
	                for (const n of t.explicitOrderBy) t.he.push(n), e.add(n.field.canonicalString());
	        // The order of the implicit ordering always matches the last explicit order by.
	                const n = t.explicitOrderBy.length > 0 ? t.explicitOrderBy[t.explicitOrderBy.length - 1].dir : "asc" /* Direction.ASCENDING */ , r = function __PRIVATE_getInequalityFilterFields(e) {
	            let t = new SortedSet(FieldPath$1.comparator);
	            return e.filters.forEach((e => {
	                e.getFlattenedFilters().forEach((e => {
	                    e.isInequality() && (t = t.add(e.field));
	                }));
	            })), t;
	        }
	        /**
	 * Creates a new Query for a collection group query that matches all documents
	 * within the provided collection group.
	 */ (t);
	        // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical
	        // order. When there are multiple inequality filters on the same field, the field should be added
	        // only once.
	        // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key
	        // field to be sorted last.
	                r.forEach((r => {
	            e.has(r.canonicalString()) || r.isKeyField() || t.he.push(new OrderBy(r, n));
	        })), 
	        // Add the document key field to the last if it is not explicitly ordered.
	        e.has(FieldPath$1.keyField().canonicalString()) || t.he.push(new OrderBy(FieldPath$1.keyField(), n));
	    }
	    return t.he;
	}

	/**
	 * Converts this `Query` instance to its corresponding `Target` representation.
	 */ function __PRIVATE_queryToTarget(e) {
	    const t = __PRIVATE_debugCast(e);
	    return t.Pe || (t.Pe = __PRIVATE__queryToTarget(t, __PRIVATE_queryNormalizedOrderBy(e))), 
	    t.Pe;
	}

	function __PRIVATE__queryToTarget(e, t) {
	    if ("F" /* LimitType.First */ === e.limitType) return __PRIVATE_newTarget(e.path, e.collectionGroup, t, e.filters, e.limit, e.startAt, e.endAt);
	    {
	        // Flip the orderBy directions since we want the last results
	        t = t.map((e => {
	            const t = "desc" /* Direction.DESCENDING */ === e.dir ? "asc" /* Direction.ASCENDING */ : "desc" /* Direction.DESCENDING */;
	            return new OrderBy(e.field, t);
	        }));
	        // We need to swap the cursors to match the now-flipped query ordering.
	        const n = e.endAt ? new Bound(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new Bound(e.startAt.position, e.startAt.inclusive) : null;
	        // Now return as a LimitType.First query.
	        return __PRIVATE_newTarget(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);
	    }
	}

	function __PRIVATE_queryWithLimit(e, t, n) {
	    return new __PRIVATE_QueryImpl(e.path, e.collectionGroup, e.explicitOrderBy.slice(), e.filters.slice(), t, n, e.startAt, e.endAt);
	}

	function __PRIVATE_queryEquals(e, t) {
	    return __PRIVATE_targetEquals(__PRIVATE_queryToTarget(e), __PRIVATE_queryToTarget(t)) && e.limitType === t.limitType;
	}

	// TODO(b/29183165): This is used to get a unique string from a query to, for
	// example, use as a dictionary key, but the implementation is subject to
	// collisions. Make it collision-free.
	function __PRIVATE_canonifyQuery(e) {
	    return `${__PRIVATE_canonifyTarget(__PRIVATE_queryToTarget(e))}|lt:${e.limitType}`;
	}

	function __PRIVATE_stringifyQuery(e) {
	    return `Query(target=${function __PRIVATE_stringifyTarget(e) {
        let t = e.path.canonicalString();
        return null !== e.collectionGroup && (t += " collectionGroup=" + e.collectionGroup), 
        e.filters.length > 0 && (t += `, filters: [${e.filters.map((e => __PRIVATE_stringifyFilter(e))).join(", ")}]`), 
        __PRIVATE_isNullOrUndefined(e.limit) || (t += ", limit: " + e.limit), e.orderBy.length > 0 && (t += `, orderBy: [${e.orderBy.map((e => function __PRIVATE_stringifyOrderBy(e) {
            return `${e.field.canonicalString()} (${e.dir})`;
        }(e))).join(", ")}]`), e.startAt && (t += ", startAt: ", t += e.startAt.inclusive ? "b:" : "a:", 
        t += e.startAt.position.map((e => canonicalId(e))).join(",")), e.endAt && (t += ", endAt: ", 
        t += e.endAt.inclusive ? "a:" : "b:", t += e.endAt.position.map((e => canonicalId(e))).join(",")), 
        `Target(${t})`;
    }(__PRIVATE_queryToTarget(e))}; limitType=${e.limitType})`;
	}

	/** Returns whether `doc` matches the constraints of `query`. */ function __PRIVATE_queryMatches(e, t) {
	    return t.isFoundDocument() && function __PRIVATE_queryMatchesPathAndCollectionGroup(e, t) {
	        const n = t.key.path;
	        return null !== e.collectionGroup ? t.key.hasCollectionId(e.collectionGroup) && e.path.isPrefixOf(n) : DocumentKey.isDocumentKey(e.path) ? e.path.isEqual(n) : e.path.isImmediateParentOf(n);
	    }
	    /**
	 * A document must have a value for every ordering clause in order to show up
	 * in the results.
	 */ (e, t) && function __PRIVATE_queryMatchesOrderBy(e, t) {
	        // We must use `queryNormalizedOrderBy()` to get the list of all orderBys (both implicit and explicit).
	        // Note that for OR queries, orderBy applies to all disjunction terms and implicit orderBys must
	        // be taken into account. For example, the query "a > 1 || b==1" has an implicit "orderBy a" due
	        // to the inequality, and is evaluated as "a > 1 orderBy a || b==1 orderBy a".
	        // A document with content of {b:1} matches the filters, but does not match the orderBy because
	        // it's missing the field 'a'.
	        for (const n of __PRIVATE_queryNormalizedOrderBy(e)) 
	        // order-by key always matches
	        if (!n.field.isKeyField() && null === t.data.field(n.field)) return !1;
	        return !0;
	    }(e, t) && function __PRIVATE_queryMatchesFilters(e, t) {
	        for (const n of e.filters) if (!n.matches(t)) return !1;
	        return !0;
	    }
	    /** Makes sure a document is within the bounds, if provided. */ (e, t) && function __PRIVATE_queryMatchesBounds(e, t) {
	        if (e.startAt && !
	        /**
	 * Returns true if a document sorts before a bound using the provided sort
	 * order.
	 */
	        function __PRIVATE_boundSortsBeforeDocument(e, t, n) {
	            const r = __PRIVATE_boundCompareToDocument(e, t, n);
	            return e.inclusive ? r <= 0 : r < 0;
	        }(e.startAt, __PRIVATE_queryNormalizedOrderBy(e), t)) return !1;
	        if (e.endAt && !function __PRIVATE_boundSortsAfterDocument(e, t, n) {
	            const r = __PRIVATE_boundCompareToDocument(e, t, n);
	            return e.inclusive ? r >= 0 : r > 0;
	        }(e.endAt, __PRIVATE_queryNormalizedOrderBy(e), t)) return !1;
	        return !0;
	    }
	    /**
	 * Returns the collection group that this query targets.
	 *
	 * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab
	 * synchronization for query results.
	 */ (e, t);
	}

	function __PRIVATE_queryCollectionGroup(e) {
	    return e.collectionGroup || (e.path.length % 2 == 1 ? e.path.lastSegment() : e.path.get(e.path.length - 2));
	}

	/**
	 * Returns a new comparator function that can be used to compare two documents
	 * based on the Query's ordering constraint.
	 */ function __PRIVATE_newQueryComparator(e) {
	    return (t, n) => {
	        let r = !1;
	        for (const i of __PRIVATE_queryNormalizedOrderBy(e)) {
	            const e = __PRIVATE_compareDocs(i, t, n);
	            if (0 !== e) return e;
	            r = r || i.field.isKeyField();
	        }
	        return 0;
	    };
	}

	function __PRIVATE_compareDocs(e, t, n) {
	    const r = e.field.isKeyField() ? DocumentKey.comparator(t.key, n.key) : function __PRIVATE_compareDocumentsByField(e, t, n) {
	        const r = t.data.field(e), i = n.data.field(e);
	        return null !== r && null !== i ? __PRIVATE_valueCompare(r, i) : fail();
	    }(e.field, t, n);
	    switch (e.dir) {
	      case "asc" /* Direction.ASCENDING */ :
	        return r;

	      case "desc" /* Direction.DESCENDING */ :
	        return -1 * r;

	      default:
	        return fail();
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A map implementation that uses objects as keys. Objects must have an
	 * associated equals function and must be immutable. Entries in the map are
	 * stored together with the key being produced from the mapKeyFn. This map
	 * automatically handles collisions of keys.
	 */ class ObjectMap {
	    constructor(e, t) {
	        this.mapKeyFn = e, this.equalsFn = t, 
	        /**
	         * The inner map for a key/value pair. Due to the possibility of collisions we
	         * keep a list of entries that we do a linear search through to find an actual
	         * match. Note that collisions should be rare, so we still expect near
	         * constant time lookups in practice.
	         */
	        this.inner = {}, 
	        /** The number of entries stored in the map */
	        this.innerSize = 0;
	    }
	    /** Get a value for this key, or undefined if it does not exist. */    get(e) {
	        const t = this.mapKeyFn(e), n = this.inner[t];
	        if (void 0 !== n) for (const [t, r] of n) if (this.equalsFn(t, e)) return r;
	    }
	    has(e) {
	        return void 0 !== this.get(e);
	    }
	    /** Put this key and value in the map. */    set(e, t) {
	        const n = this.mapKeyFn(e), r = this.inner[n];
	        if (void 0 === r) return this.inner[n] = [ [ e, t ] ], void this.innerSize++;
	        for (let n = 0; n < r.length; n++) if (this.equalsFn(r[n][0], e)) 
	        // This is updating an existing entry and does not increase `innerSize`.
	        return void (r[n] = [ e, t ]);
	        r.push([ e, t ]), this.innerSize++;
	    }
	    /**
	     * Remove this key from the map. Returns a boolean if anything was deleted.
	     */    delete(e) {
	        const t = this.mapKeyFn(e), n = this.inner[t];
	        if (void 0 === n) return !1;
	        for (let r = 0; r < n.length; r++) if (this.equalsFn(n[r][0], e)) return 1 === n.length ? delete this.inner[t] : n.splice(r, 1), 
	        this.innerSize--, !0;
	        return !1;
	    }
	    forEach(e) {
	        forEach(this.inner, ((t, n) => {
	            for (const [t, r] of n) e(t, r);
	        }));
	    }
	    isEmpty() {
	        return isEmpty(this.inner);
	    }
	    size() {
	        return this.innerSize;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const lt = new SortedMap(DocumentKey.comparator);

	function __PRIVATE_mutableDocumentMap() {
	    return lt;
	}

	const ht = new SortedMap(DocumentKey.comparator);

	function documentMap(...e) {
	    let t = ht;
	    for (const n of e) t = t.insert(n.key, n);
	    return t;
	}

	function __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e) {
	    let t = ht;
	    return e.forEach(((e, n) => t = t.insert(e, n.overlayedDocument))), t;
	}

	function __PRIVATE_newOverlayMap() {
	    return __PRIVATE_newDocumentKeyMap();
	}

	function __PRIVATE_newMutationMap() {
	    return __PRIVATE_newDocumentKeyMap();
	}

	function __PRIVATE_newDocumentKeyMap() {
	    return new ObjectMap((e => e.toString()), ((e, t) => e.isEqual(t)));
	}

	const Pt = new SortedMap(DocumentKey.comparator);

	const Tt = new SortedSet(DocumentKey.comparator);

	function __PRIVATE_documentKeySet(...e) {
	    let t = Tt;
	    for (const n of e) t = t.add(n);
	    return t;
	}

	const It = new SortedSet(__PRIVATE_primitiveComparator);

	function __PRIVATE_targetIdSet() {
	    return It;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Returns an DoubleValue for `value` that is encoded based the serializer's
	 * `useProto3Json` setting.
	 */ function __PRIVATE_toDouble(e, t) {
	    if (e.useProto3Json) {
	        if (isNaN(t)) return {
	            doubleValue: "NaN"
	        };
	        if (t === 1 / 0) return {
	            doubleValue: "Infinity"
	        };
	        if (t === -1 / 0) return {
	            doubleValue: "-Infinity"
	        };
	    }
	    return {
	        doubleValue: __PRIVATE_isNegativeZero(t) ? "-0" : t
	    };
	}

	/**
	 * Returns an IntegerValue for `value`.
	 */ function __PRIVATE_toInteger(e) {
	    return {
	        integerValue: "" + e
	    };
	}

	/**
	 * Returns a value for a number that's appropriate to put into a proto.
	 * The return value is an IntegerValue if it can safely represent the value,
	 * otherwise a DoubleValue is returned.
	 */ function toNumber(e, t) {
	    return isSafeInteger(t) ? __PRIVATE_toInteger(t) : __PRIVATE_toDouble(e, t);
	}

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Used to represent a field transform on a mutation. */ class TransformOperation {
	    constructor() {
	        // Make sure that the structural type of `TransformOperation` is unique.
	        // See https://github.com/microsoft/TypeScript/issues/5451
	        this._ = void 0;
	    }
	}

	/**
	 * Computes the local transform result against the provided `previousValue`,
	 * optionally using the provided localWriteTime.
	 */ function __PRIVATE_applyTransformOperationToLocalView(e, t, n) {
	    return e instanceof __PRIVATE_ServerTimestampTransform ? function serverTimestamp$1(e, t) {
	        const n = {
	            fields: {
	                [et]: {
	                    stringValue: Xe
	                },
	                [nt]: {
	                    timestampValue: {
	                        seconds: e.seconds,
	                        nanos: e.nanoseconds
	                    }
	                }
	            }
	        };
	        // We should avoid storing deeply nested server timestamp map values
	        // because we never use the intermediate "previous values".
	        // For example:
	        // previous: 42L, add: t1, result: t1 -> 42L
	        // previous: t1,  add: t2, result: t2 -> 42L (NOT t2 -> t1 -> 42L)
	        // previous: t2,  add: t3, result: t3 -> 42L (NOT t3 -> t2 -> t1 -> 42L)
	        // `getPreviousValue` recursively traverses server timestamps to find the
	        // least recent Value.
	                return t && __PRIVATE_isServerTimestamp(t) && (t = __PRIVATE_getPreviousValue(t)), 
	        t && (n.fields[tt] = t), {
	            mapValue: n
	        };
	    }(n, t) : e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t) : function __PRIVATE_applyNumericIncrementTransformOperationToLocalView(e, t) {
	        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
	        // precision and resolves overflows by reducing precision, we do not
	        // manually cap overflows at 2^63.
	        const n = __PRIVATE_computeTransformOperationBaseValue(e, t), r = asNumber(n) + asNumber(e.Ie);
	        return isInteger(n) && isInteger(e.Ie) ? __PRIVATE_toInteger(r) : __PRIVATE_toDouble(e.serializer, r);
	    }(e, t);
	}

	/**
	 * Computes a final transform result after the transform has been acknowledged
	 * by the server, potentially using the server-provided transformResult.
	 */ function __PRIVATE_applyTransformOperationToRemoteDocument(e, t, n) {
	    // The server just sends null as the transform result for array operations,
	    // so we have to calculate a result the same as we do for local
	    // applications.
	    return e instanceof __PRIVATE_ArrayUnionTransformOperation ? __PRIVATE_applyArrayUnionTransformOperation(e, t) : e instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_applyArrayRemoveTransformOperation(e, t) : n;
	}

	/**
	 * If this transform operation is not idempotent, returns the base value to
	 * persist for this transform. If a base value is returned, the transform
	 * operation is always applied to this base value, even if document has
	 * already been updated.
	 *
	 * Base values provide consistent behavior for non-idempotent transforms and
	 * allow us to return the same latency-compensated value even if the backend
	 * has already applied the transform operation. The base value is null for
	 * idempotent transforms, as they can be re-played even if the backend has
	 * already applied them.
	 *
	 * @returns a base value to store along with the mutation, or null for
	 * idempotent transforms.
	 */ function __PRIVATE_computeTransformOperationBaseValue(e, t) {
	    return e instanceof __PRIVATE_NumericIncrementTransformOperation ? 
	    /** Returns true if `value` is either an IntegerValue or a DoubleValue. */
	    function __PRIVATE_isNumber(e) {
	        return isInteger(e) || function __PRIVATE_isDouble(e) {
	            return !!e && "doubleValue" in e;
	        }(e);
	    }(t) ? t : {
	        integerValue: 0
	    } : null;
	}

	/** Transforms a value into a server-generated timestamp. */
	class __PRIVATE_ServerTimestampTransform extends TransformOperation {}

	/** Transforms an array value via a union operation. */ class __PRIVATE_ArrayUnionTransformOperation extends TransformOperation {
	    constructor(e) {
	        super(), this.elements = e;
	    }
	}

	function __PRIVATE_applyArrayUnionTransformOperation(e, t) {
	    const n = __PRIVATE_coercedFieldValuesArray(t);
	    for (const t of e.elements) n.some((e => __PRIVATE_valueEquals(e, t))) || n.push(t);
	    return {
	        arrayValue: {
	            values: n
	        }
	    };
	}

	/** Transforms an array value via a remove operation. */ class __PRIVATE_ArrayRemoveTransformOperation extends TransformOperation {
	    constructor(e) {
	        super(), this.elements = e;
	    }
	}

	function __PRIVATE_applyArrayRemoveTransformOperation(e, t) {
	    let n = __PRIVATE_coercedFieldValuesArray(t);
	    for (const t of e.elements) n = n.filter((e => !__PRIVATE_valueEquals(e, t)));
	    return {
	        arrayValue: {
	            values: n
	        }
	    };
	}

	/**
	 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
	 * transforms. Converts all field values to integers or doubles, but unlike the
	 * backend does not cap integer values at 2^63. Instead, JavaScript number
	 * arithmetic is used and precision loss can occur for values greater than 2^53.
	 */ class __PRIVATE_NumericIncrementTransformOperation extends TransformOperation {
	    constructor(e, t) {
	        super(), this.serializer = e, this.Ie = t;
	    }
	}

	function asNumber(e) {
	    return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);
	}

	function __PRIVATE_coercedFieldValuesArray(e) {
	    return isArray(e) && e.arrayValue.values ? e.arrayValue.values.slice() : [];
	}

	function __PRIVATE_fieldTransformEquals(e, t) {
	    return e.field.isEqual(t.field) && function __PRIVATE_transformOperationEquals(e, t) {
	        return e instanceof __PRIVATE_ArrayUnionTransformOperation && t instanceof __PRIVATE_ArrayUnionTransformOperation || e instanceof __PRIVATE_ArrayRemoveTransformOperation && t instanceof __PRIVATE_ArrayRemoveTransformOperation ? __PRIVATE_arrayEquals(e.elements, t.elements, __PRIVATE_valueEquals) : e instanceof __PRIVATE_NumericIncrementTransformOperation && t instanceof __PRIVATE_NumericIncrementTransformOperation ? __PRIVATE_valueEquals(e.Ie, t.Ie) : e instanceof __PRIVATE_ServerTimestampTransform && t instanceof __PRIVATE_ServerTimestampTransform;
	    }(e.transform, t.transform);
	}

	/** The result of successfully applying a mutation to the backend. */
	class MutationResult {
	    constructor(
	    /**
	     * The version at which the mutation was committed:
	     *
	     * - For most operations, this is the updateTime in the WriteResult.
	     * - For deletes, the commitTime of the WriteResponse (because deletes are
	     *   not stored and have no updateTime).
	     *
	     * Note that these versions can be different: No-op writes will not change
	     * the updateTime even though the commitTime advances.
	     */
	    e, 
	    /**
	     * The resulting fields returned from the backend after a mutation
	     * containing field transforms has been committed. Contains one FieldValue
	     * for each FieldTransform that was in the mutation.
	     *
	     * Will be empty if the mutation did not contain any field transforms.
	     */
	    t) {
	        this.version = e, this.transformResults = t;
	    }
	}

	/**
	 * Encodes a precondition for a mutation. This follows the model that the
	 * backend accepts with the special case of an explicit "empty" precondition
	 * (meaning no precondition).
	 */ class Precondition {
	    constructor(e, t) {
	        this.updateTime = e, this.exists = t;
	    }
	    /** Creates a new empty Precondition. */    static none() {
	        return new Precondition;
	    }
	    /** Creates a new Precondition with an exists flag. */    static exists(e) {
	        return new Precondition(void 0, e);
	    }
	    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(e) {
	        return new Precondition(e);
	    }
	    /** Returns whether this Precondition is empty. */    get isNone() {
	        return void 0 === this.updateTime && void 0 === this.exists;
	    }
	    isEqual(e) {
	        return this.exists === e.exists && (this.updateTime ? !!e.updateTime && this.updateTime.isEqual(e.updateTime) : !e.updateTime);
	    }
	}

	/** Returns true if the preconditions is valid for the given document. */ function __PRIVATE_preconditionIsValidForDocument(e, t) {
	    return void 0 !== e.updateTime ? t.isFoundDocument() && t.version.isEqual(e.updateTime) : void 0 === e.exists || e.exists === t.isFoundDocument();
	}

	/**
	 * A mutation describes a self-contained change to a document. Mutations can
	 * create, replace, delete, and update subsets of documents.
	 *
	 * Mutations not only act on the value of the document but also its version.
	 *
	 * For local mutations (mutations that haven't been committed yet), we preserve
	 * the existing version for Set and Patch mutations. For Delete mutations, we
	 * reset the version to 0.
	 *
	 * Here's the expected transition table.
	 *
	 * MUTATION           APPLIED TO            RESULTS IN
	 *
	 * SetMutation        Document(v3)          Document(v3)
	 * SetMutation        NoDocument(v3)        Document(v0)
	 * SetMutation        InvalidDocument(v0)   Document(v0)
	 * PatchMutation      Document(v3)          Document(v3)
	 * PatchMutation      NoDocument(v3)        NoDocument(v3)
	 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
	 * DeleteMutation     Document(v3)          NoDocument(v0)
	 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
	 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
	 *
	 * For acknowledged mutations, we use the updateTime of the WriteResponse as
	 * the resulting version for Set and Patch mutations. As deletes have no
	 * explicit update time, we use the commitTime of the WriteResponse for
	 * Delete mutations.
	 *
	 * If a mutation is acknowledged by the backend but fails the precondition check
	 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
	 * the updated version.
	 *
	 * Field transforms are used only with Patch and Set Mutations. We use the
	 * `updateTransforms` message to store transforms, rather than the `transforms`s
	 * messages.
	 *
	 * ## Subclassing Notes
	 *
	 * Every type of mutation needs to implement its own applyToRemoteDocument() and
	 * applyToLocalView() to implement the actual behavior of applying the mutation
	 * to some source document (see `setMutationApplyToRemoteDocument()` for an
	 * example).
	 */ class Mutation {}

	/**
	 * A utility method to calculate a `Mutation` representing the overlay from the
	 * final state of the document, and a `FieldMask` representing the fields that
	 * are mutated by the local mutations.
	 */ function __PRIVATE_calculateOverlayMutation(e, t) {
	    if (!e.hasLocalMutations || t && 0 === t.fields.length) return null;
	    // mask is null when sets or deletes are applied to the current document.
	        if (null === t) return e.isNoDocument() ? new __PRIVATE_DeleteMutation(e.key, Precondition.none()) : new __PRIVATE_SetMutation(e.key, e.data, Precondition.none());
	    {
	        const n = e.data, r = ObjectValue.empty();
	        let i = new SortedSet(FieldPath$1.comparator);
	        for (let e of t.fields) if (!i.has(e)) {
	            let t = n.field(e);
	            // If we are deleting a nested field, we take the immediate parent as
	            // the mask used to construct the resulting mutation.
	            // Justification: Nested fields can create parent fields implicitly. If
	            // only a leaf entry is deleted in later mutations, the parent field
	            // should still remain, but we may have lost this information.
	            // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).
	            // This leaves the final result (foo, {}). Despite the fact that `doc`
	            // has the correct result, `foo` is not in `mask`, and the resulting
	            // mutation would miss `foo`.
	                        null === t && e.length > 1 && (e = e.popLast(), t = n.field(e)), null === t ? r.delete(e) : r.set(e, t), 
	            i = i.add(e);
	        }
	        return new __PRIVATE_PatchMutation(e.key, r, new FieldMask(i.toArray()), Precondition.none());
	    }
	}

	/**
	 * Applies this mutation to the given document for the purposes of computing a
	 * new remote document. If the input document doesn't match the expected state
	 * (e.g. it is invalid or outdated), the document type may transition to
	 * unknown.
	 *
	 * @param mutation - The mutation to apply.
	 * @param document - The document to mutate. The input document can be an
	 *     invalid document if the client has no knowledge of the pre-mutation state
	 *     of the document.
	 * @param mutationResult - The result of applying the mutation from the backend.
	 */ function __PRIVATE_mutationApplyToRemoteDocument(e, t, n) {
	    e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToRemoteDocument(e, t, n) {
	        // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
	        // remote document the server has accepted the mutation so the precondition
	        // must have held.
	        const r = e.value.clone(), i = __PRIVATE_serverTransformResults(e.fieldTransforms, t, n.transformResults);
	        r.setAll(i), t.convertToFoundDocument(n.version, r).setHasCommittedMutations();
	    }(e, t, n) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToRemoteDocument(e, t, n) {
	        if (!__PRIVATE_preconditionIsValidForDocument(e.precondition, t)) 
	        // Since the mutation was not rejected, we know that the precondition
	        // matched on the backend. We therefore must not have the expected version
	        // of the document in our cache and convert to an UnknownDocument with a
	        // known updateTime.
	        return void t.convertToUnknownDocument(n.version);
	        const r = __PRIVATE_serverTransformResults(e.fieldTransforms, t, n.transformResults), i = t.data;
	        i.setAll(__PRIVATE_getPatch(e)), i.setAll(r), t.convertToFoundDocument(n.version, i).setHasCommittedMutations();
	    }(e, t, n) : function __PRIVATE_deleteMutationApplyToRemoteDocument(e, t, n) {
	        // Unlike applyToLocalView, if we're applying a mutation to a remote
	        // document the server has accepted the mutation so the precondition must
	        // have held.
	        t.convertToNoDocument(n.version).setHasCommittedMutations();
	    }(0, t, n);
	}

	/**
	 * Applies this mutation to the given document for the purposes of computing
	 * the new local view of a document. If the input document doesn't match the
	 * expected state, the document is not modified.
	 *
	 * @param mutation - The mutation to apply.
	 * @param document - The document to mutate. The input document can be an
	 *     invalid document if the client has no knowledge of the pre-mutation state
	 *     of the document.
	 * @param previousMask - The fields that have been updated before applying this mutation.
	 * @param localWriteTime - A timestamp indicating the local write time of the
	 *     batch this mutation is a part of.
	 * @returns A `FieldMask` representing the fields that are changed by applying this mutation.
	 */ function __PRIVATE_mutationApplyToLocalView(e, t, n, r) {
	    return e instanceof __PRIVATE_SetMutation ? function __PRIVATE_setMutationApplyToLocalView(e, t, n, r) {
	        if (!__PRIVATE_preconditionIsValidForDocument(e.precondition, t)) 
	        // The mutation failed to apply (e.g. a document ID created with add()
	        // caused a name collision).
	        return n;
	        const i = e.value.clone(), s = __PRIVATE_localTransformResults(e.fieldTransforms, r, t);
	        return i.setAll(s), t.convertToFoundDocument(t.version, i).setHasLocalMutations(), 
	        null;
	 // SetMutation overwrites all fields.
	        }
	    /**
	 * A mutation that modifies fields of the document at the given key with the
	 * given values. The values are applied through a field mask:
	 *
	 *  * When a field is in both the mask and the values, the corresponding field
	 *    is updated.
	 *  * When a field is in neither the mask nor the values, the corresponding
	 *    field is unmodified.
	 *  * When a field is in the mask but not in the values, the corresponding field
	 *    is deleted.
	 *  * When a field is not in the mask but is in the values, the values map is
	 *    ignored.
	 */ (e, t, n, r) : e instanceof __PRIVATE_PatchMutation ? function __PRIVATE_patchMutationApplyToLocalView(e, t, n, r) {
	        if (!__PRIVATE_preconditionIsValidForDocument(e.precondition, t)) return n;
	        const i = __PRIVATE_localTransformResults(e.fieldTransforms, r, t), s = t.data;
	        if (s.setAll(__PRIVATE_getPatch(e)), s.setAll(i), t.convertToFoundDocument(t.version, s).setHasLocalMutations(), 
	        null === n) return null;
	        return n.unionWith(e.fieldMask.fields).unionWith(e.fieldTransforms.map((e => e.field)));
	    }
	    /**
	 * Returns a FieldPath/Value map with the content of the PatchMutation.
	 */ (e, t, n, r) : function __PRIVATE_deleteMutationApplyToLocalView(e, t, n) {
	        if (__PRIVATE_preconditionIsValidForDocument(e.precondition, t)) return t.convertToNoDocument(t.version).setHasLocalMutations(), 
	        null;
	        return n;
	    }
	    /**
	 * A mutation that verifies the existence of the document at the given key with
	 * the provided precondition.
	 *
	 * The `verify` operation is only used in Transactions, and this class serves
	 * primarily to facilitate serialization into protos.
	 */ (e, t, n);
	}

	/**
	 * If this mutation is not idempotent, returns the base value to persist with
	 * this mutation. If a base value is returned, the mutation is always applied
	 * to this base value, even if document has already been updated.
	 *
	 * The base value is a sparse object that consists of only the document
	 * fields for which this mutation contains a non-idempotent transformation
	 * (e.g. a numeric increment). The provided value guarantees consistent
	 * behavior for non-idempotent transforms and allow us to return the same
	 * latency-compensated value even if the backend has already applied the
	 * mutation. The base value is null for idempotent mutations, as they can be
	 * re-played even if the backend has already applied them.
	 *
	 * @returns a base value to store along with the mutation, or null for
	 * idempotent mutations.
	 */ function __PRIVATE_mutationExtractBaseValue(e, t) {
	    let n = null;
	    for (const r of e.fieldTransforms) {
	        const e = t.data.field(r.field), i = __PRIVATE_computeTransformOperationBaseValue(r.transform, e || null);
	        null != i && (null === n && (n = ObjectValue.empty()), n.set(r.field, i));
	    }
	    return n || null;
	}

	function __PRIVATE_mutationEquals(e, t) {
	    return e.type === t.type && (!!e.key.isEqual(t.key) && (!!e.precondition.isEqual(t.precondition) && (!!function __PRIVATE_fieldTransformsAreEqual(e, t) {
	        return void 0 === e && void 0 === t || !(!e || !t) && __PRIVATE_arrayEquals(e, t, ((e, t) => __PRIVATE_fieldTransformEquals(e, t)));
	    }(e.fieldTransforms, t.fieldTransforms) && (0 /* MutationType.Set */ === e.type ? e.value.isEqual(t.value) : 1 /* MutationType.Patch */ !== e.type || e.data.isEqual(t.data) && e.fieldMask.isEqual(t.fieldMask)))));
	}

	/**
	 * A mutation that creates or replaces the document at the given key with the
	 * object value contents.
	 */ class __PRIVATE_SetMutation extends Mutation {
	    constructor(e, t, n, r = []) {
	        super(), this.key = e, this.value = t, this.precondition = n, this.fieldTransforms = r, 
	        this.type = 0 /* MutationType.Set */;
	    }
	    getFieldMask() {
	        return null;
	    }
	}

	class __PRIVATE_PatchMutation extends Mutation {
	    constructor(e, t, n, r, i = []) {
	        super(), this.key = e, this.data = t, this.fieldMask = n, this.precondition = r, 
	        this.fieldTransforms = i, this.type = 1 /* MutationType.Patch */;
	    }
	    getFieldMask() {
	        return this.fieldMask;
	    }
	}

	function __PRIVATE_getPatch(e) {
	    const t = new Map;
	    return e.fieldMask.fields.forEach((n => {
	        if (!n.isEmpty()) {
	            const r = e.data.field(n);
	            t.set(n, r);
	        }
	    })), t;
	}

	/**
	 * Creates a list of "transform results" (a transform result is a field value
	 * representing the result of applying a transform) for use after a mutation
	 * containing transforms has been acknowledged by the server.
	 *
	 * @param fieldTransforms - The field transforms to apply the result to.
	 * @param mutableDocument - The current state of the document after applying all
	 * previous mutations.
	 * @param serverTransformResults - The transform results received by the server.
	 * @returns The transform results list.
	 */ function __PRIVATE_serverTransformResults(e, t, n) {
	    const r = new Map;
	    __PRIVATE_hardAssert(e.length === n.length);
	    for (let i = 0; i < n.length; i++) {
	        const s = e[i], o = s.transform, _ = t.data.field(s.field);
	        r.set(s.field, __PRIVATE_applyTransformOperationToRemoteDocument(o, _, n[i]));
	    }
	    return r;
	}

	/**
	 * Creates a list of "transform results" (a transform result is a field value
	 * representing the result of applying a transform) for use when applying a
	 * transform locally.
	 *
	 * @param fieldTransforms - The field transforms to apply the result to.
	 * @param localWriteTime - The local time of the mutation (used to
	 *     generate ServerTimestampValues).
	 * @param mutableDocument - The document to apply transforms on.
	 * @returns The transform results list.
	 */ function __PRIVATE_localTransformResults(e, t, n) {
	    const r = new Map;
	    for (const i of e) {
	        const e = i.transform, s = n.data.field(i.field);
	        r.set(i.field, __PRIVATE_applyTransformOperationToLocalView(e, s, t));
	    }
	    return r;
	}

	/** A mutation that deletes the document at the given key. */ class __PRIVATE_DeleteMutation extends Mutation {
	    constructor(e, t) {
	        super(), this.key = e, this.precondition = t, this.type = 2 /* MutationType.Delete */ , 
	        this.fieldTransforms = [];
	    }
	    getFieldMask() {
	        return null;
	    }
	}

	class __PRIVATE_VerifyMutation extends Mutation {
	    constructor(e, t) {
	        super(), this.key = e, this.precondition = t, this.type = 3 /* MutationType.Verify */ , 
	        this.fieldTransforms = [];
	    }
	    getFieldMask() {
	        return null;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A batch of mutations that will be sent as one unit to the backend.
	 */ class MutationBatch {
	    /**
	     * @param batchId - The unique ID of this mutation batch.
	     * @param localWriteTime - The original write time of this mutation.
	     * @param baseMutations - Mutations that are used to populate the base
	     * values when this mutation is applied locally. This can be used to locally
	     * overwrite values that are persisted in the remote document cache. Base
	     * mutations are never sent to the backend.
	     * @param mutations - The user-provided mutations in this mutation batch.
	     * User-provided mutations are applied both locally and remotely on the
	     * backend.
	     */
	    constructor(e, t, n, r) {
	        this.batchId = e, this.localWriteTime = t, this.baseMutations = n, this.mutations = r;
	    }
	    /**
	     * Applies all the mutations in this MutationBatch to the specified document
	     * to compute the state of the remote document
	     *
	     * @param document - The document to apply mutations to.
	     * @param batchResult - The result of applying the MutationBatch to the
	     * backend.
	     */    applyToRemoteDocument(e, t) {
	        const n = t.mutationResults;
	        for (let t = 0; t < this.mutations.length; t++) {
	            const r = this.mutations[t];
	            if (r.key.isEqual(e.key)) {
	                __PRIVATE_mutationApplyToRemoteDocument(r, e, n[t]);
	            }
	        }
	    }
	    /**
	     * Computes the local view of a document given all the mutations in this
	     * batch.
	     *
	     * @param document - The document to apply mutations to.
	     * @param mutatedFields - Fields that have been updated before applying this mutation batch.
	     * @returns A `FieldMask` representing all the fields that are mutated.
	     */    applyToLocalView(e, t) {
	        // First, apply the base state. This allows us to apply non-idempotent
	        // transform against a consistent set of values.
	        for (const n of this.baseMutations) n.key.isEqual(e.key) && (t = __PRIVATE_mutationApplyToLocalView(n, e, t, this.localWriteTime));
	        // Second, apply all user-provided mutations.
	                for (const n of this.mutations) n.key.isEqual(e.key) && (t = __PRIVATE_mutationApplyToLocalView(n, e, t, this.localWriteTime));
	        return t;
	    }
	    /**
	     * Computes the local view for all provided documents given the mutations in
	     * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
	     * replace all the mutation applications.
	     */    applyToLocalDocumentSet(e, t) {
	        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
	        // directly (as done in `applyToLocalView()`), we can reduce the complexity
	        // to O(n).
	        const n = __PRIVATE_newMutationMap();
	        return this.mutations.forEach((r => {
	            const i = e.get(r.key), s = i.overlayedDocument;
	            // TODO(mutabledocuments): This method should take a MutableDocumentMap
	            // and we should remove this cast.
	                        let o = this.applyToLocalView(s, i.mutatedFields);
	            // Set mutatedFields to null if the document is only from local mutations.
	            // This creates a Set or Delete mutation, instead of trying to create a
	            // patch mutation as the overlay.
	                        o = t.has(r.key) ? null : o;
	            const _ = __PRIVATE_calculateOverlayMutation(s, o);
	            null !== _ && n.set(r.key, _), s.isValidDocument() || s.convertToNoDocument(SnapshotVersion.min());
	        })), n;
	    }
	    keys() {
	        return this.mutations.reduce(((e, t) => e.add(t.key)), __PRIVATE_documentKeySet());
	    }
	    isEqual(e) {
	        return this.batchId === e.batchId && __PRIVATE_arrayEquals(this.mutations, e.mutations, ((e, t) => __PRIVATE_mutationEquals(e, t))) && __PRIVATE_arrayEquals(this.baseMutations, e.baseMutations, ((e, t) => __PRIVATE_mutationEquals(e, t)));
	    }
	}

	/** The result of applying a mutation batch to the backend. */ class MutationBatchResult {
	    constructor(e, t, n, 
	    /**
	     * A pre-computed mapping from each mutated document to the resulting
	     * version.
	     */
	    r) {
	        this.batch = e, this.commitVersion = t, this.mutationResults = n, this.docVersions = r;
	    }
	    /**
	     * Creates a new MutationBatchResult for the given batch and results. There
	     * must be one result for each mutation in the batch. This static factory
	     * caches a document=&gt;version mapping (docVersions).
	     */    static from(e, t, n) {
	        __PRIVATE_hardAssert(e.mutations.length === n.length);
	        let r = function __PRIVATE_documentVersionMap() {
	            return Pt;
	        }();
	        const i = e.mutations;
	        for (let e = 0; e < i.length; e++) r = r.insert(i[e].key, n[e].version);
	        return new MutationBatchResult(e, t, n, r);
	    }
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Representation of an overlay computed by Firestore.
	 *
	 * Holds information about a mutation and the largest batch id in Firestore when
	 * the mutation was created.
	 */ class Overlay {
	    constructor(e, t) {
	        this.largestBatchId = e, this.mutation = t;
	    }
	    getKey() {
	        return this.mutation.key;
	    }
	    isEqual(e) {
	        return null !== e && this.mutation === e.mutation;
	    }
	    toString() {
	        return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class ExistenceFilter {
	    constructor(e, t) {
	        this.count = e, this.unchangedNames = t;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Error Codes describing the different ways GRPC can fail. These are copied
	 * directly from GRPC's sources here:
	 *
	 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
	 *
	 * Important! The names of these identifiers matter because the string forms
	 * are used for reverse lookups from the webchannel stream. Do NOT change the
	 * names of these identifiers or change this into a const enum.
	 */ var Et, dt;

	/**
	 * Determines whether an error code represents a permanent error when received
	 * in response to a non-write operation.
	 *
	 * See isPermanentWriteError for classifying write errors.
	 */
	function __PRIVATE_isPermanentError(e) {
	    switch (e) {
	      case C.OK:
	        return fail();

	      case C.CANCELLED:
	      case C.UNKNOWN:
	      case C.DEADLINE_EXCEEDED:
	      case C.RESOURCE_EXHAUSTED:
	      case C.INTERNAL:
	      case C.UNAVAILABLE:
	 // Unauthenticated means something went wrong with our token and we need
	        // to retry with new credentials which will happen automatically.
	              case C.UNAUTHENTICATED:
	        return !1;

	      case C.INVALID_ARGUMENT:
	      case C.NOT_FOUND:
	      case C.ALREADY_EXISTS:
	      case C.PERMISSION_DENIED:
	      case C.FAILED_PRECONDITION:
	 // Aborted might be retried in some scenarios, but that is dependent on
	        // the context and should handled individually by the calling code.
	        // See https://cloud.google.com/apis/design/errors.
	              case C.ABORTED:
	      case C.OUT_OF_RANGE:
	      case C.UNIMPLEMENTED:
	      case C.DATA_LOSS:
	        return !0;

	      default:
	        return fail();
	    }
	}

	/**
	 * Determines whether an error code represents a permanent error when received
	 * in response to a write operation.
	 *
	 * Write operations must be handled specially because as of b/119437764, ABORTED
	 * errors on the write stream should be retried too (even though ABORTED errors
	 * are not generally retryable).
	 *
	 * Note that during the initial handshake on the write stream an ABORTED error
	 * signals that we should discard our stream token (i.e. it is permanent). This
	 * means a handshake error should be classified with isPermanentError, above.
	 */
	/**
	 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
	 * are not the same as HTTP status codes.
	 *
	 * @returns The Code equivalent to the given GRPC status code. Fails if there
	 *     is no match.
	 */
	function __PRIVATE_mapCodeFromRpcCode(e) {
	    if (void 0 === e) 
	    // This shouldn't normally happen, but in certain error cases (like trying
	    // to send invalid proto messages) we may get an error with no GRPC code.
	    return __PRIVATE_logError("GRPC error has no .code"), C.UNKNOWN;
	    switch (e) {
	      case Et.OK:
	        return C.OK;

	      case Et.CANCELLED:
	        return C.CANCELLED;

	      case Et.UNKNOWN:
	        return C.UNKNOWN;

	      case Et.DEADLINE_EXCEEDED:
	        return C.DEADLINE_EXCEEDED;

	      case Et.RESOURCE_EXHAUSTED:
	        return C.RESOURCE_EXHAUSTED;

	      case Et.INTERNAL:
	        return C.INTERNAL;

	      case Et.UNAVAILABLE:
	        return C.UNAVAILABLE;

	      case Et.UNAUTHENTICATED:
	        return C.UNAUTHENTICATED;

	      case Et.INVALID_ARGUMENT:
	        return C.INVALID_ARGUMENT;

	      case Et.NOT_FOUND:
	        return C.NOT_FOUND;

	      case Et.ALREADY_EXISTS:
	        return C.ALREADY_EXISTS;

	      case Et.PERMISSION_DENIED:
	        return C.PERMISSION_DENIED;

	      case Et.FAILED_PRECONDITION:
	        return C.FAILED_PRECONDITION;

	      case Et.ABORTED:
	        return C.ABORTED;

	      case Et.OUT_OF_RANGE:
	        return C.OUT_OF_RANGE;

	      case Et.UNIMPLEMENTED:
	        return C.UNIMPLEMENTED;

	      case Et.DATA_LOSS:
	        return C.DATA_LOSS;

	      default:
	        return fail();
	    }
	}

	/**
	 * Converts an HTTP response's error status to the equivalent error code.
	 *
	 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
	 * "UNKNOWN", etc.)
	 * @returns The equivalent Code. Non-matching responses are mapped to
	 *     Code.UNKNOWN.
	 */ (dt = Et || (Et = {}))[dt.OK = 0] = "OK", dt[dt.CANCELLED = 1] = "CANCELLED", 
	dt[dt.UNKNOWN = 2] = "UNKNOWN", dt[dt.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
	dt[dt.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", dt[dt.NOT_FOUND = 5] = "NOT_FOUND", 
	dt[dt.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", dt[dt.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
	dt[dt.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", dt[dt.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
	dt[dt.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", dt[dt.ABORTED = 10] = "ABORTED", 
	dt[dt.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", dt[dt.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
	dt[dt.INTERNAL = 13] = "INTERNAL", dt[dt.UNAVAILABLE = 14] = "UNAVAILABLE", dt[dt.DATA_LOSS = 15] = "DATA_LOSS";

	/**
	 * Sets the value of the `testingHooksSpi` object.
	 * @param instance the instance to set.
	 */
	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An instance of the Platform's 'TextEncoder' implementation.
	 */
	function __PRIVATE_newTextEncoder() {
	    return new TextEncoder;
	}

	/**
	 * An instance of the Platform's 'TextDecoder' implementation.
	 */
	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const Rt = new Integer([ 4294967295, 4294967295 ], 0);

	// Hash a string using md5 hashing algorithm.
	function __PRIVATE_getMd5HashValue(e) {
	    const t = __PRIVATE_newTextEncoder().encode(e), n = new Md5;
	    return n.update(t), new Uint8Array(n.digest());
	}

	// Interpret the 16 bytes array as two 64-bit unsigned integers, encoded using
	// 2’s complement using little endian.
	function __PRIVATE_get64BitUints(e) {
	    const t = new DataView(e.buffer), n = t.getUint32(0, /* littleEndian= */ !0), r = t.getUint32(4, /* littleEndian= */ !0), i = t.getUint32(8, /* littleEndian= */ !0), s = t.getUint32(12, /* littleEndian= */ !0);
	    return [ new Integer([ n, r ], 0), new Integer([ i, s ], 0) ];
	}

	class BloomFilter {
	    constructor(e, t, n) {
	        if (this.bitmap = e, this.padding = t, this.hashCount = n, t < 0 || t >= 8) throw new __PRIVATE_BloomFilterError(`Invalid padding: ${t}`);
	        if (n < 0) throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n}`);
	        if (e.length > 0 && 0 === this.hashCount) 
	        // Only empty bloom filter can have 0 hash count.
	        throw new __PRIVATE_BloomFilterError(`Invalid hash count: ${n}`);
	        if (0 === e.length && 0 !== t) 
	        // Empty bloom filter should have 0 padding.
	        throw new __PRIVATE_BloomFilterError(`Invalid padding when bitmap length is 0: ${t}`);
	        this.Ee = 8 * e.length - t, 
	        // Set the bit count in Integer to avoid repetition in mightContain().
	        this.de = Integer.fromNumber(this.Ee);
	    }
	    // Calculate the ith hash value based on the hashed 64bit integers,
	    // and calculate its corresponding bit index in the bitmap to be checked.
	    Ae(e, t, n) {
	        // Calculate hashed value h(i) = h1 + (i * h2).
	        let r = e.add(t.multiply(Integer.fromNumber(n)));
	        // Wrap if hash value overflow 64bit.
	                return 1 === r.compare(Rt) && (r = new Integer([ r.getBits(0), r.getBits(1) ], 0)), 
	        r.modulo(this.de).toNumber();
	    }
	    // Return whether the bit on the given index in the bitmap is set to 1.
	    Re(e) {
	        return !!(this.bitmap[Math.floor(e / 8)] & 1 << e % 8);
	    }
	    mightContain(e) {
	        // Empty bitmap should always return false on membership check.
	        if (0 === this.Ee) return !1;
	        const t = __PRIVATE_getMd5HashValue(e), [n, r] = __PRIVATE_get64BitUints(t);
	        for (let e = 0; e < this.hashCount; e++) {
	            const t = this.Ae(n, r, e);
	            if (!this.Re(t)) return !1;
	        }
	        return !0;
	    }
	    /** Create bloom filter for testing purposes only. */    static create(e, t, n) {
	        const r = e % 8 == 0 ? 0 : 8 - e % 8, i = new Uint8Array(Math.ceil(e / 8)), s = new BloomFilter(i, r, t);
	        return n.forEach((e => s.insert(e))), s;
	    }
	    insert(e) {
	        if (0 === this.Ee) return;
	        const t = __PRIVATE_getMd5HashValue(e), [n, r] = __PRIVATE_get64BitUints(t);
	        for (let e = 0; e < this.hashCount; e++) {
	            const t = this.Ae(n, r, e);
	            this.Ve(t);
	        }
	    }
	    Ve(e) {
	        const t = Math.floor(e / 8), n = e % 8;
	        this.bitmap[t] |= 1 << n;
	    }
	}

	class __PRIVATE_BloomFilterError extends Error {
	    constructor() {
	        super(...arguments), this.name = "BloomFilterError";
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An event from the RemoteStore. It is split into targetChanges (changes to the
	 * state or the set of documents in our watched targets) and documentUpdates
	 * (changes to the actual documents).
	 */ class RemoteEvent {
	    constructor(
	    /**
	     * The snapshot version this event brings us up to, or MIN if not set.
	     */
	    e, 
	    /**
	     * A map from target to changes to the target. See TargetChange.
	     */
	    t, 
	    /**
	     * A map of targets that is known to be inconsistent, and the purpose for
	     * re-listening. Listens for these targets should be re-established without
	     * resume tokens.
	     */
	    n, 
	    /**
	     * A set of which documents have changed or been deleted, along with the
	     * doc's new values (if not deleted).
	     */
	    r, 
	    /**
	     * A set of which document updates are due only to limbo resolution targets.
	     */
	    i) {
	        this.snapshotVersion = e, this.targetChanges = t, this.targetMismatches = n, this.documentUpdates = r, 
	        this.resolvedLimboDocuments = i;
	    }
	    /**
	     * HACK: Views require RemoteEvents in order to determine whether the view is
	     * CURRENT, but secondary tabs don't receive remote events. So this method is
	     * used to create a synthesized RemoteEvent that can be used to apply a
	     * CURRENT status change to a View, for queries executed in a different tab.
	     */
	    // PORTING NOTE: Multi-tab only
	    static createSynthesizedRemoteEventForCurrentChange(e, t, n) {
	        const r = new Map;
	        return r.set(e, TargetChange.createSynthesizedTargetChangeForCurrentChange(e, t, n)), 
	        new RemoteEvent(SnapshotVersion.min(), r, new SortedMap(__PRIVATE_primitiveComparator), __PRIVATE_mutableDocumentMap(), __PRIVATE_documentKeySet());
	    }
	}

	/**
	 * A TargetChange specifies the set of changes for a specific target as part of
	 * a RemoteEvent. These changes track which documents are added, modified or
	 * removed, as well as the target's resume token and whether the target is
	 * marked CURRENT.
	 * The actual changes *to* documents are not part of the TargetChange since
	 * documents may be part of multiple targets.
	 */ class TargetChange {
	    constructor(
	    /**
	     * An opaque, server-assigned token that allows watching a query to be resumed
	     * after disconnecting without retransmitting all the data that matches the
	     * query. The resume token essentially identifies a point in time from which
	     * the server should resume sending results.
	     */
	    e, 
	    /**
	     * The "current" (synced) status of this target. Note that "current"
	     * has special meaning in the RPC protocol that implies that a target is
	     * both up-to-date and consistent with the rest of the watch stream.
	     */
	    t, 
	    /**
	     * The set of documents that were newly assigned to this target as part of
	     * this remote event.
	     */
	    n, 
	    /**
	     * The set of documents that were already assigned to this target but received
	     * an update during this remote event.
	     */
	    r, 
	    /**
	     * The set of documents that were removed from this target as part of this
	     * remote event.
	     */
	    i) {
	        this.resumeToken = e, this.current = t, this.addedDocuments = n, this.modifiedDocuments = r, 
	        this.removedDocuments = i;
	    }
	    /**
	     * This method is used to create a synthesized TargetChanges that can be used to
	     * apply a CURRENT status change to a View (for queries executed in a different
	     * tab) or for new queries (to raise snapshots with correct CURRENT status).
	     */    static createSynthesizedTargetChangeForCurrentChange(e, t, n) {
	        return new TargetChange(n, t, __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet(), __PRIVATE_documentKeySet());
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a changed document and a list of target ids to which this change
	 * applies.
	 *
	 * If document has been deleted NoDocument will be provided.
	 */ class __PRIVATE_DocumentWatchChange {
	    constructor(
	    /** The new document applies to all of these targets. */
	    e, 
	    /** The new document is removed from all of these targets. */
	    t, 
	    /** The key of the document for this change. */
	    n, 
	    /**
	     * The new document or NoDocument if it was deleted. Is null if the
	     * document went out of view without the server sending a new document.
	     */
	    r) {
	        this.me = e, this.removedTargetIds = t, this.key = n, this.fe = r;
	    }
	}

	class __PRIVATE_ExistenceFilterChange {
	    constructor(e, t) {
	        this.targetId = e, this.ge = t;
	    }
	}

	class __PRIVATE_WatchTargetChange {
	    constructor(
	    /** What kind of change occurred to the watch target. */
	    e, 
	    /** The target IDs that were added/removed/set. */
	    t, 
	    /**
	     * An opaque, server-assigned token that allows watching a target to be
	     * resumed after disconnecting without retransmitting all the data that
	     * matches the target. The resume token essentially identifies a point in
	     * time from which the server should resume sending results.
	     */
	    n = ByteString.EMPTY_BYTE_STRING
	    /** An RPC error indicating why the watch failed. */ , r = null) {
	        this.state = e, this.targetIds = t, this.resumeToken = n, this.cause = r;
	    }
	}

	/** Tracks the internal state of a Watch target. */ class __PRIVATE_TargetState {
	    constructor() {
	        /**
	         * The number of pending responses (adds or removes) that we are waiting on.
	         * We only consider targets active that have no pending responses.
	         */
	        this.pe = 0, 
	        /**
	         * Keeps track of the document changes since the last raised snapshot.
	         *
	         * These changes are continuously updated as we receive document updates and
	         * always reflect the current set of changes against the last issued snapshot.
	         */
	        this.ye = __PRIVATE_snapshotChangesMap(), 
	        /** See public getters for explanations of these fields. */
	        this.we = ByteString.EMPTY_BYTE_STRING, this.Se = !1, 
	        /**
	         * Whether this target state should be included in the next snapshot. We
	         * initialize to true so that newly-added targets are included in the next
	         * RemoteEvent.
	         */
	        this.be = !0;
	    }
	    /**
	     * Whether this target has been marked 'current'.
	     *
	     * 'Current' has special meaning in the RPC protocol: It implies that the
	     * Watch backend has sent us all changes up to the point at which the target
	     * was added and that the target is consistent with the rest of the watch
	     * stream.
	     */    get current() {
	        return this.Se;
	    }
	    /** The last resume token sent to us for this target. */    get resumeToken() {
	        return this.we;
	    }
	    /** Whether this target has pending target adds or target removes. */    get De() {
	        return 0 !== this.pe;
	    }
	    /** Whether we have modified any state that should trigger a snapshot. */    get ve() {
	        return this.be;
	    }
	    /**
	     * Applies the resume token to the TargetChange, but only when it has a new
	     * value. Empty resumeTokens are discarded.
	     */    Ce(e) {
	        e.approximateByteSize() > 0 && (this.be = !0, this.we = e);
	    }
	    /**
	     * Creates a target change from the current set of changes.
	     *
	     * To reset the document changes after raising this snapshot, call
	     * `clearPendingChanges()`.
	     */    Fe() {
	        let e = __PRIVATE_documentKeySet(), t = __PRIVATE_documentKeySet(), n = __PRIVATE_documentKeySet();
	        return this.ye.forEach(((r, i) => {
	            switch (i) {
	              case 0 /* ChangeType.Added */ :
	                e = e.add(r);
	                break;

	              case 2 /* ChangeType.Modified */ :
	                t = t.add(r);
	                break;

	              case 1 /* ChangeType.Removed */ :
	                n = n.add(r);
	                break;

	              default:
	                fail();
	            }
	        })), new TargetChange(this.we, this.Se, e, t, n);
	    }
	    /**
	     * Resets the document changes and sets `hasPendingChanges` to false.
	     */    Me() {
	        this.be = !1, this.ye = __PRIVATE_snapshotChangesMap();
	    }
	    xe(e, t) {
	        this.be = !0, this.ye = this.ye.insert(e, t);
	    }
	    Oe(e) {
	        this.be = !0, this.ye = this.ye.remove(e);
	    }
	    Ne() {
	        this.pe += 1;
	    }
	    Be() {
	        this.pe -= 1, __PRIVATE_hardAssert(this.pe >= 0);
	    }
	    Le() {
	        this.be = !0, this.Se = !0;
	    }
	}

	/**
	 * A helper class to accumulate watch changes into a RemoteEvent.
	 */
	class __PRIVATE_WatchChangeAggregator {
	    constructor(e) {
	        this.ke = e, 
	        /** The internal state of all tracked targets. */
	        this.qe = new Map, 
	        /** Keeps track of the documents to update since the last raised snapshot. */
	        this.Qe = __PRIVATE_mutableDocumentMap(), this.$e = __PRIVATE_documentTargetMap(), 
	        /** A mapping of document keys to their set of target IDs. */
	        this.Ke = __PRIVATE_documentTargetMap(), 
	        /**
	         * A map of targets with existence filter mismatches. These targets are
	         * known to be inconsistent and their listens needs to be re-established by
	         * RemoteStore.
	         */
	        this.Ue = new SortedMap(__PRIVATE_primitiveComparator);
	    }
	    /**
	     * Processes and adds the DocumentWatchChange to the current set of changes.
	     */    We(e) {
	        for (const t of e.me) e.fe && e.fe.isFoundDocument() ? this.Ge(t, e.fe) : this.ze(t, e.key, e.fe);
	        for (const t of e.removedTargetIds) this.ze(t, e.key, e.fe);
	    }
	    /** Processes and adds the WatchTargetChange to the current set of changes. */    je(e) {
	        this.forEachTarget(e, (t => {
	            const n = this.He(t);
	            switch (e.state) {
	              case 0 /* WatchTargetChangeState.NoChange */ :
	                this.Je(t) && n.Ce(e.resumeToken);
	                break;

	              case 1 /* WatchTargetChangeState.Added */ :
	                // We need to decrement the number of pending acks needed from watch
	                // for this targetId.
	                n.Be(), n.De || 
	                // We have a freshly added target, so we need to reset any state
	                // that we had previously. This can happen e.g. when remove and add
	                // back a target for existence filter mismatches.
	                n.Me(), n.Ce(e.resumeToken);
	                break;

	              case 2 /* WatchTargetChangeState.Removed */ :
	                // We need to keep track of removed targets to we can post-filter and
	                // remove any target changes.
	                // We need to decrement the number of pending acks needed from watch
	                // for this targetId.
	                n.Be(), n.De || this.removeTarget(t);
	                break;

	              case 3 /* WatchTargetChangeState.Current */ :
	                this.Je(t) && (n.Le(), n.Ce(e.resumeToken));
	                break;

	              case 4 /* WatchTargetChangeState.Reset */ :
	                this.Je(t) && (
	                // Reset the target and synthesizes removes for all existing
	                // documents. The backend will re-add any documents that still
	                // match the target before it sends the next global snapshot.
	                this.Ye(t), n.Ce(e.resumeToken));
	                break;

	              default:
	                fail();
	            }
	        }));
	    }
	    /**
	     * Iterates over all targetIds that the watch change applies to: either the
	     * targetIds explicitly listed in the change or the targetIds of all currently
	     * active targets.
	     */    forEachTarget(e, t) {
	        e.targetIds.length > 0 ? e.targetIds.forEach(t) : this.qe.forEach(((e, n) => {
	            this.Je(n) && t(n);
	        }));
	    }
	    /**
	     * Handles existence filters and synthesizes deletes for filter mismatches.
	     * Targets that are invalidated by filter mismatches are added to
	     * `pendingTargetResets`.
	     */    Ze(e) {
	        const t = e.targetId, n = e.ge.count, r = this.Xe(t);
	        if (r) {
	            const i = r.target;
	            if (__PRIVATE_targetIsDocumentTarget(i)) if (0 === n) {
	                // The existence filter told us the document does not exist. We deduce
	                // that this document does not exist and apply a deleted document to
	                // our updates. Without applying this deleted document there might be
	                // another query that will raise this document as part of a snapshot
	                // until it is resolved, essentially exposing inconsistency between
	                // queries.
	                const e = new DocumentKey(i.path);
	                this.ze(t, e, MutableDocument.newNoDocument(e, SnapshotVersion.min()));
	            } else __PRIVATE_hardAssert(1 === n); else {
	                const r = this.et(t);
	                // Existence filter mismatch. Mark the documents as being in limbo, and
	                // raise a snapshot with `isFromCache:true`.
	                                if (r !== n) {
	                    // Apply bloom filter to identify and mark removed documents.
	                    const n = this.tt(e), i = n ? this.nt(n, e, r) : 1 /* BloomFilterApplicationStatus.Skipped */;
	                    if (0 /* BloomFilterApplicationStatus.Success */ !== i) {
	                        // If bloom filter application fails, we reset the mapping and
	                        // trigger re-run of the query.
	                        this.Ye(t);
	                        const e = 2 /* BloomFilterApplicationStatus.FalsePositive */ === i ? "TargetPurposeExistenceFilterMismatchBloom" /* TargetPurpose.ExistenceFilterMismatchBloom */ : "TargetPurposeExistenceFilterMismatch" /* TargetPurpose.ExistenceFilterMismatch */;
	                        this.Ue = this.Ue.insert(t, e);
	                    }
	                }
	            }
	        }
	    }
	    /**
	     * Parse the bloom filter from the "unchanged_names" field of an existence
	     * filter.
	     */    tt(e) {
	        const t = e.ge.unchangedNames;
	        if (!t || !t.bits) return null;
	        const {bits: {bitmap: n = "", padding: r = 0}, hashCount: i = 0} = t;
	        let s, o;
	        try {
	            s = __PRIVATE_normalizeByteString(n).toUint8Array();
	        } catch (e) {
	            if (e instanceof __PRIVATE_Base64DecodeError) return __PRIVATE_logWarn("Decoding the base64 bloom filter in existence filter failed (" + e.message + "); ignoring the bloom filter and falling back to full re-query."), 
	            null;
	            throw e;
	        }
	        try {
	            // BloomFilter throws error if the inputs are invalid.
	            o = new BloomFilter(s, r, i);
	        } catch (e) {
	            return __PRIVATE_logWarn(e instanceof __PRIVATE_BloomFilterError ? "BloomFilter error: " : "Applying bloom filter failed: ", e), 
	            null;
	        }
	        return 0 === o.Ee ? null : o;
	    }
	    /**
	     * Apply bloom filter to remove the deleted documents, and return the
	     * application status.
	     */    nt(e, t, n) {
	        return t.ge.count === n - this.st(e, t.targetId) ? 0 /* BloomFilterApplicationStatus.Success */ : 2 /* BloomFilterApplicationStatus.FalsePositive */;
	    }
	    /**
	     * Filter out removed documents based on bloom filter membership result and
	     * return number of documents removed.
	     */    st(e, t) {
	        const n = this.ke.getRemoteKeysForTarget(t);
	        let r = 0;
	        return n.forEach((n => {
	            const i = this.ke.it(), s = `projects/${i.projectId}/databases/${i.database}/documents/${n.path.canonicalString()}`;
	            e.mightContain(s) || (this.ze(t, n, /*updatedDocument=*/ null), r++);
	        })), r;
	    }
	    /**
	     * Converts the currently accumulated state into a remote event at the
	     * provided snapshot version. Resets the accumulated changes before returning.
	     */    ot(e) {
	        const t = new Map;
	        this.qe.forEach(((n, r) => {
	            const i = this.Xe(r);
	            if (i) {
	                if (n.current && __PRIVATE_targetIsDocumentTarget(i.target)) {
	                    // Document queries for document that don't exist can produce an empty
	                    // result set. To update our local cache, we synthesize a document
	                    // delete if we have not previously received the document for this
	                    // target. This resolves the limbo state of the document, removing it
	                    // from limboDocumentRefs.
	                    // TODO(dimond): Ideally we would have an explicit lookup target
	                    // instead resulting in an explicit delete message and we could
	                    // remove this special logic.
	                    const t = new DocumentKey(i.target.path);
	                    this._t(t).has(r) || this.ut(r, t) || this.ze(r, t, MutableDocument.newNoDocument(t, e));
	                }
	                n.ve && (t.set(r, n.Fe()), n.Me());
	            }
	        }));
	        let n = __PRIVATE_documentKeySet();
	        // We extract the set of limbo-only document updates as the GC logic
	        // special-cases documents that do not appear in the target cache.
	        
	        // TODO(gsoltis): Expand on this comment once GC is available in the JS
	        // client.
	                this.Ke.forEach(((e, t) => {
	            let r = !0;
	            t.forEachWhile((e => {
	                const t = this.Xe(e);
	                return !t || "TargetPurposeLimboResolution" /* TargetPurpose.LimboResolution */ === t.purpose || (r = !1, 
	                !1);
	            })), r && (n = n.add(e));
	        })), this.Qe.forEach(((t, n) => n.setReadTime(e)));
	        const r = new RemoteEvent(e, t, this.Ue, this.Qe, n);
	        return this.Qe = __PRIVATE_mutableDocumentMap(), this.$e = __PRIVATE_documentTargetMap(), 
	        this.Ke = __PRIVATE_documentTargetMap(), this.Ue = new SortedMap(__PRIVATE_primitiveComparator), 
	        r;
	    }
	    /**
	     * Adds the provided document to the internal list of document updates and
	     * its document key to the given target's mapping.
	     */
	    // Visible for testing.
	    Ge(e, t) {
	        if (!this.Je(e)) return;
	        const n = this.ut(e, t.key) ? 2 /* ChangeType.Modified */ : 0 /* ChangeType.Added */;
	        this.He(e).xe(t.key, n), this.Qe = this.Qe.insert(t.key, t), this.$e = this.$e.insert(t.key, this._t(t.key).add(e)), 
	        this.Ke = this.Ke.insert(t.key, this.ct(t.key).add(e));
	    }
	    /**
	     * Removes the provided document from the target mapping. If the
	     * document no longer matches the target, but the document's state is still
	     * known (e.g. we know that the document was deleted or we received the change
	     * that caused the filter mismatch), the new document can be provided
	     * to update the remote document cache.
	     */
	    // Visible for testing.
	    ze(e, t, n) {
	        if (!this.Je(e)) return;
	        const r = this.He(e);
	        this.ut(e, t) ? r.xe(t, 1 /* ChangeType.Removed */) : 
	        // The document may have entered and left the target before we raised a
	        // snapshot, so we can just ignore the change.
	        r.Oe(t), this.Ke = this.Ke.insert(t, this.ct(t).delete(e)), this.Ke = this.Ke.insert(t, this.ct(t).add(e)), 
	        n && (this.Qe = this.Qe.insert(t, n));
	    }
	    removeTarget(e) {
	        this.qe.delete(e);
	    }
	    /**
	     * Returns the current count of documents in the target. This includes both
	     * the number of documents that the LocalStore considers to be part of the
	     * target as well as any accumulated changes.
	     */    et(e) {
	        const t = this.He(e).Fe();
	        return this.ke.getRemoteKeysForTarget(e).size + t.addedDocuments.size - t.removedDocuments.size;
	    }
	    /**
	     * Increment the number of acks needed from watch before we can consider the
	     * server to be 'in-sync' with the client's active targets.
	     */    Ne(e) {
	        this.He(e).Ne();
	    }
	    He(e) {
	        let t = this.qe.get(e);
	        return t || (t = new __PRIVATE_TargetState, this.qe.set(e, t)), t;
	    }
	    ct(e) {
	        let t = this.Ke.get(e);
	        return t || (t = new SortedSet(__PRIVATE_primitiveComparator), this.Ke = this.Ke.insert(e, t)), 
	        t;
	    }
	    _t(e) {
	        let t = this.$e.get(e);
	        return t || (t = new SortedSet(__PRIVATE_primitiveComparator), this.$e = this.$e.insert(e, t)), 
	        t;
	    }
	    /**
	     * Verifies that the user is still interested in this target (by calling
	     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
	     * from watch.
	     */    Je(e) {
	        const t = null !== this.Xe(e);
	        return t || __PRIVATE_logDebug("WatchChangeAggregator", "Detected inactive target", e), 
	        t;
	    }
	    /**
	     * Returns the TargetData for an active target (i.e. a target that the user
	     * is still interested in that has no outstanding target change requests).
	     */    Xe(e) {
	        const t = this.qe.get(e);
	        return t && t.De ? null : this.ke.lt(e);
	    }
	    /**
	     * Resets the state of a Watch target to its initial state (e.g. sets
	     * 'current' to false, clears the resume token and removes its target mapping
	     * from all documents).
	     */    Ye(e) {
	        this.qe.set(e, new __PRIVATE_TargetState);
	        this.ke.getRemoteKeysForTarget(e).forEach((t => {
	            this.ze(e, t, /*updatedDocument=*/ null);
	        }));
	    }
	    /**
	     * Returns whether the LocalStore considers the document to be part of the
	     * specified target.
	     */    ut(e, t) {
	        return this.ke.getRemoteKeysForTarget(e).has(t);
	    }
	}

	function __PRIVATE_documentTargetMap() {
	    return new SortedMap(DocumentKey.comparator);
	}

	function __PRIVATE_snapshotChangesMap() {
	    return new SortedMap(DocumentKey.comparator);
	}

	const Vt = (() => {
	    const e = {
	        asc: "ASCENDING",
	        desc: "DESCENDING"
	    };
	    return e;
	})(), mt = (() => {
	    const e = {
	        "<": "LESS_THAN",
	        "<=": "LESS_THAN_OR_EQUAL",
	        ">": "GREATER_THAN",
	        ">=": "GREATER_THAN_OR_EQUAL",
	        "==": "EQUAL",
	        "!=": "NOT_EQUAL",
	        "array-contains": "ARRAY_CONTAINS",
	        in: "IN",
	        "not-in": "NOT_IN",
	        "array-contains-any": "ARRAY_CONTAINS_ANY"
	    };
	    return e;
	})(), ft = (() => {
	    const e = {
	        and: "AND",
	        or: "OR"
	    };
	    return e;
	})();

	/**
	 * This class generates JsonObject values for the Datastore API suitable for
	 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
	 *
	 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
	 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
	 * format.
	 *
	 * For a description of the Proto3 JSON format check
	 * https://developers.google.com/protocol-buffers/docs/proto3#json
	 *
	 * TODO(klimt): We can remove the databaseId argument if we keep the full
	 * resource name in documents.
	 */
	class JsonProtoSerializer {
	    constructor(e, t) {
	        this.databaseId = e, this.useProto3Json = t;
	    }
	}

	/**
	 * Returns a value for a number (or null) that's appropriate to put into
	 * a google.protobuf.Int32Value proto.
	 * DO NOT USE THIS FOR ANYTHING ELSE.
	 * This method cheats. It's typed as returning "number" because that's what
	 * our generated proto interfaces say Int32Value must be. But GRPC actually
	 * expects a { value: <number> } struct.
	 */
	function __PRIVATE_toInt32Proto(e, t) {
	    return e.useProto3Json || __PRIVATE_isNullOrUndefined(t) ? t : {
	        value: t
	    };
	}

	/**
	 * Returns a number (or null) from a google.protobuf.Int32Value proto.
	 */
	/**
	 * Returns a value for a Date that's appropriate to put into a proto.
	 */
	function toTimestamp(e, t) {
	    if (e.useProto3Json) {
	        return `${new Date(1e3 * t.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + t.nanoseconds).slice(-9)}Z`;
	    }
	    return {
	        seconds: "" + t.seconds,
	        nanos: t.nanoseconds
	    };
	}

	/**
	 * Returns a value for bytes that's appropriate to put in a proto.
	 *
	 * Visible for testing.
	 */
	function __PRIVATE_toBytes(e, t) {
	    return e.useProto3Json ? t.toBase64() : t.toUint8Array();
	}

	/**
	 * Returns a ByteString based on the proto string value.
	 */ function __PRIVATE_toVersion(e, t) {
	    return toTimestamp(e, t.toTimestamp());
	}

	function __PRIVATE_fromVersion(e) {
	    return __PRIVATE_hardAssert(!!e), SnapshotVersion.fromTimestamp(function fromTimestamp(e) {
	        const t = __PRIVATE_normalizeTimestamp(e);
	        return new Timestamp(t.seconds, t.nanos);
	    }(e));
	}

	function __PRIVATE_toResourceName(e, t) {
	    return __PRIVATE_toResourcePath(e, t).canonicalString();
	}

	function __PRIVATE_toResourcePath(e, t) {
	    const n = function __PRIVATE_fullyQualifiedPrefixPath(e) {
	        return new ResourcePath([ "projects", e.projectId, "databases", e.database ]);
	    }(e).child("documents");
	    return void 0 === t ? n : n.child(t);
	}

	function __PRIVATE_fromResourceName(e) {
	    const t = ResourcePath.fromString(e);
	    return __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(t)), t;
	}

	function __PRIVATE_toName(e, t) {
	    return __PRIVATE_toResourceName(e.databaseId, t.path);
	}

	function fromName(e, t) {
	    const n = __PRIVATE_fromResourceName(t);
	    if (n.get(1) !== e.databaseId.projectId) throw new FirestoreError(C.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + e.databaseId.projectId);
	    if (n.get(3) !== e.databaseId.database) throw new FirestoreError(C.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + e.databaseId.database);
	    return new DocumentKey(__PRIVATE_extractLocalPathFromResourceName(n));
	}

	function __PRIVATE_toQueryPath(e, t) {
	    return __PRIVATE_toResourceName(e.databaseId, t);
	}

	function __PRIVATE_fromQueryPath(e) {
	    const t = __PRIVATE_fromResourceName(e);
	    // In v1beta1 queries for collections at the root did not have a trailing
	    // "/documents". In v1 all resource paths contain "/documents". Preserve the
	    // ability to read the v1beta1 form for compatibility with queries persisted
	    // in the local target cache.
	        return 4 === t.length ? ResourcePath.emptyPath() : __PRIVATE_extractLocalPathFromResourceName(t);
	}

	function __PRIVATE_getEncodedDatabaseId(e) {
	    return new ResourcePath([ "projects", e.databaseId.projectId, "databases", e.databaseId.database ]).canonicalString();
	}

	function __PRIVATE_extractLocalPathFromResourceName(e) {
	    return __PRIVATE_hardAssert(e.length > 4 && "documents" === e.get(4)), e.popFirst(5);
	}

	/** Creates a Document proto from key and fields (but no create/update time) */ function __PRIVATE_toMutationDocument(e, t, n) {
	    return {
	        name: __PRIVATE_toName(e, t),
	        fields: n.value.mapValue.fields
	    };
	}

	function __PRIVATE_fromWatchChange(e, t) {
	    let n;
	    if ("targetChange" in t) {
	        t.targetChange;
	        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
	        // if unset
	        const r = function __PRIVATE_fromWatchTargetChangeState(e) {
	            return "NO_CHANGE" === e ? 0 /* WatchTargetChangeState.NoChange */ : "ADD" === e ? 1 /* WatchTargetChangeState.Added */ : "REMOVE" === e ? 2 /* WatchTargetChangeState.Removed */ : "CURRENT" === e ? 3 /* WatchTargetChangeState.Current */ : "RESET" === e ? 4 /* WatchTargetChangeState.Reset */ : fail();
	        }(t.targetChange.targetChangeType || "NO_CHANGE"), i = t.targetChange.targetIds || [], s = function __PRIVATE_fromBytes(e, t) {
	            return e.useProto3Json ? (__PRIVATE_hardAssert(void 0 === t || "string" == typeof t), 
	            ByteString.fromBase64String(t || "")) : (__PRIVATE_hardAssert(void 0 === t || 
	            // Check if the value is an instance of both Buffer and Uint8Array,
	            // despite the fact that Buffer extends Uint8Array. In some
	            // environments, such as jsdom, the prototype chain of Buffer
	            // does not indicate that it extends Uint8Array.
	            t instanceof Buffer || t instanceof Uint8Array), ByteString.fromUint8Array(t || new Uint8Array));
	        }(e, t.targetChange.resumeToken), o = t.targetChange.cause, _ = o && function __PRIVATE_fromRpcStatus(e) {
	            const t = void 0 === e.code ? C.UNKNOWN : __PRIVATE_mapCodeFromRpcCode(e.code);
	            return new FirestoreError(t, e.message || "");
	        }(o);
	        n = new __PRIVATE_WatchTargetChange(r, i, s, _ || null);
	    } else if ("documentChange" in t) {
	        t.documentChange;
	        const r = t.documentChange;
	        r.document, r.document.name, r.document.updateTime;
	        const i = fromName(e, r.document.name), s = __PRIVATE_fromVersion(r.document.updateTime), o = r.document.createTime ? __PRIVATE_fromVersion(r.document.createTime) : SnapshotVersion.min(), _ = new ObjectValue({
	            mapValue: {
	                fields: r.document.fields
	            }
	        }), a = MutableDocument.newFoundDocument(i, s, o, _), u = r.targetIds || [], c = r.removedTargetIds || [];
	        n = new __PRIVATE_DocumentWatchChange(u, c, a.key, a);
	    } else if ("documentDelete" in t) {
	        t.documentDelete;
	        const r = t.documentDelete;
	        r.document;
	        const i = fromName(e, r.document), s = r.readTime ? __PRIVATE_fromVersion(r.readTime) : SnapshotVersion.min(), o = MutableDocument.newNoDocument(i, s), _ = r.removedTargetIds || [];
	        n = new __PRIVATE_DocumentWatchChange([], _, o.key, o);
	    } else if ("documentRemove" in t) {
	        t.documentRemove;
	        const r = t.documentRemove;
	        r.document;
	        const i = fromName(e, r.document), s = r.removedTargetIds || [];
	        n = new __PRIVATE_DocumentWatchChange([], s, i, null);
	    } else {
	        if (!("filter" in t)) return fail();
	        {
	            t.filter;
	            const e = t.filter;
	            e.targetId;
	            const {count: r = 0, unchangedNames: i} = e, s = new ExistenceFilter(r, i), o = e.targetId;
	            n = new __PRIVATE_ExistenceFilterChange(o, s);
	        }
	    }
	    return n;
	}

	function toMutation(e, t) {
	    let n;
	    if (t instanceof __PRIVATE_SetMutation) n = {
	        update: __PRIVATE_toMutationDocument(e, t.key, t.value)
	    }; else if (t instanceof __PRIVATE_DeleteMutation) n = {
	        delete: __PRIVATE_toName(e, t.key)
	    }; else if (t instanceof __PRIVATE_PatchMutation) n = {
	        update: __PRIVATE_toMutationDocument(e, t.key, t.data),
	        updateMask: __PRIVATE_toDocumentMask(t.fieldMask)
	    }; else {
	        if (!(t instanceof __PRIVATE_VerifyMutation)) return fail();
	        n = {
	            verify: __PRIVATE_toName(e, t.key)
	        };
	    }
	    return t.fieldTransforms.length > 0 && (n.updateTransforms = t.fieldTransforms.map((e => function __PRIVATE_toFieldTransform(e, t) {
	        const n = t.transform;
	        if (n instanceof __PRIVATE_ServerTimestampTransform) return {
	            fieldPath: t.field.canonicalString(),
	            setToServerValue: "REQUEST_TIME"
	        };
	        if (n instanceof __PRIVATE_ArrayUnionTransformOperation) return {
	            fieldPath: t.field.canonicalString(),
	            appendMissingElements: {
	                values: n.elements
	            }
	        };
	        if (n instanceof __PRIVATE_ArrayRemoveTransformOperation) return {
	            fieldPath: t.field.canonicalString(),
	            removeAllFromArray: {
	                values: n.elements
	            }
	        };
	        if (n instanceof __PRIVATE_NumericIncrementTransformOperation) return {
	            fieldPath: t.field.canonicalString(),
	            increment: n.Ie
	        };
	        throw fail();
	    }(0, e)))), t.precondition.isNone || (n.currentDocument = function __PRIVATE_toPrecondition(e, t) {
	        return void 0 !== t.updateTime ? {
	            updateTime: __PRIVATE_toVersion(e, t.updateTime)
	        } : void 0 !== t.exists ? {
	            exists: t.exists
	        } : fail();
	    }(e, t.precondition)), n;
	}

	function __PRIVATE_fromWriteResults(e, t) {
	    return e && e.length > 0 ? (__PRIVATE_hardAssert(void 0 !== t), e.map((e => function __PRIVATE_fromWriteResult(e, t) {
	        // NOTE: Deletes don't have an updateTime.
	        let n = e.updateTime ? __PRIVATE_fromVersion(e.updateTime) : __PRIVATE_fromVersion(t);
	        return n.isEqual(SnapshotVersion.min()) && (
	        // The Firestore Emulator currently returns an update time of 0 for
	        // deletes of non-existing documents (rather than null). This breaks the
	        // test "get deleted doc while offline with source=cache" as NoDocuments
	        // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
	        // TODO(#2149): Remove this when Emulator is fixed
	        n = __PRIVATE_fromVersion(t)), new MutationResult(n, e.transformResults || []);
	    }(e, t)))) : [];
	}

	function __PRIVATE_toDocumentsTarget(e, t) {
	    return {
	        documents: [ __PRIVATE_toQueryPath(e, t.path) ]
	    };
	}

	function __PRIVATE_toQueryTarget(e, t) {
	    // Dissect the path into parent, collectionId, and optional key filter.
	    const n = {
	        structuredQuery: {}
	    }, r = t.path;
	    let i;
	    null !== t.collectionGroup ? (i = r, n.structuredQuery.from = [ {
	        collectionId: t.collectionGroup,
	        allDescendants: !0
	    } ]) : (i = r.popLast(), n.structuredQuery.from = [ {
	        collectionId: r.lastSegment()
	    } ]), n.parent = __PRIVATE_toQueryPath(e, i);
	    const s = function __PRIVATE_toFilters(e) {
	        if (0 === e.length) return;
	        return __PRIVATE_toFilter(CompositeFilter.create(e, "and" /* CompositeOperator.AND */));
	    }(t.filters);
	    s && (n.structuredQuery.where = s);
	    const o = function __PRIVATE_toOrder(e) {
	        if (0 === e.length) return;
	        return e.map((e => 
	        // visible for testing
	        function __PRIVATE_toPropertyOrder(e) {
	            return {
	                field: __PRIVATE_toFieldPathReference(e.field),
	                direction: __PRIVATE_toDirection(e.dir)
	            };
	        }(e)));
	    }(t.orderBy);
	    o && (n.structuredQuery.orderBy = o);
	    const _ = __PRIVATE_toInt32Proto(e, t.limit);
	    return null !== _ && (n.structuredQuery.limit = _), t.startAt && (n.structuredQuery.startAt = function __PRIVATE_toStartAtCursor(e) {
	        return {
	            before: e.inclusive,
	            values: e.position
	        };
	    }(t.startAt)), t.endAt && (n.structuredQuery.endAt = function __PRIVATE_toEndAtCursor(e) {
	        return {
	            before: !e.inclusive,
	            values: e.position
	        };
	    }(t.endAt)), {
	        ht: n,
	        parent: i
	    };
	}

	function __PRIVATE_convertQueryTargetToQuery(e) {
	    let t = __PRIVATE_fromQueryPath(e.parent);
	    const n = e.structuredQuery, r = n.from ? n.from.length : 0;
	    let i = null;
	    if (r > 0) {
	        __PRIVATE_hardAssert(1 === r);
	        const e = n.from[0];
	        e.allDescendants ? i = e.collectionId : t = t.child(e.collectionId);
	    }
	    let s = [];
	    n.where && (s = function __PRIVATE_fromFilters(e) {
	        const t = __PRIVATE_fromFilter(e);
	        if (t instanceof CompositeFilter && __PRIVATE_compositeFilterIsFlatConjunction(t)) return t.getFilters();
	        return [ t ];
	    }(n.where));
	    let o = [];
	    n.orderBy && (o = function __PRIVATE_fromOrder(e) {
	        return e.map((e => function __PRIVATE_fromPropertyOrder(e) {
	            return new OrderBy(__PRIVATE_fromFieldPathReference(e.field), 
	            // visible for testing
	            function __PRIVATE_fromDirection(e) {
	                switch (e) {
	                  case "ASCENDING":
	                    return "asc" /* Direction.ASCENDING */;

	                  case "DESCENDING":
	                    return "desc" /* Direction.DESCENDING */;

	                  default:
	                    return;
	                }
	            }
	            // visible for testing
	            (e.direction));
	        }
	        // visible for testing
	        (e)));
	    }(n.orderBy));
	    let _ = null;
	    n.limit && (_ = function __PRIVATE_fromInt32Proto(e) {
	        let t;
	        return t = "object" == typeof e ? e.value : e, __PRIVATE_isNullOrUndefined(t) ? null : t;
	    }(n.limit));
	    let a = null;
	    n.startAt && (a = function __PRIVATE_fromStartAtCursor(e) {
	        const t = !!e.before, n = e.values || [];
	        return new Bound(n, t);
	    }(n.startAt));
	    let u = null;
	    return n.endAt && (u = function __PRIVATE_fromEndAtCursor(e) {
	        const t = !e.before, n = e.values || [];
	        return new Bound(n, t);
	    }
	    // visible for testing
	    (n.endAt)), __PRIVATE_newQuery(t, i, o, s, _, "F" /* LimitType.First */ , a, u);
	}

	function __PRIVATE_toListenRequestLabels(e, t) {
	    const n = function __PRIVATE_toLabel(e) {
	        switch (e) {
	          case "TargetPurposeListen" /* TargetPurpose.Listen */ :
	            return null;

	          case "TargetPurposeExistenceFilterMismatch" /* TargetPurpose.ExistenceFilterMismatch */ :
	            return "existence-filter-mismatch";

	          case "TargetPurposeExistenceFilterMismatchBloom" /* TargetPurpose.ExistenceFilterMismatchBloom */ :
	            return "existence-filter-mismatch-bloom";

	          case "TargetPurposeLimboResolution" /* TargetPurpose.LimboResolution */ :
	            return "limbo-document";

	          default:
	            return fail();
	        }
	    }(t.purpose);
	    return null == n ? null : {
	        "goog-listen-tags": n
	    };
	}

	function __PRIVATE_fromFilter(e) {
	    return void 0 !== e.unaryFilter ? function __PRIVATE_fromUnaryFilter(e) {
	        switch (e.unaryFilter.op) {
	          case "IS_NAN":
	            const t = __PRIVATE_fromFieldPathReference(e.unaryFilter.field);
	            return FieldFilter.create(t, "==" /* Operator.EQUAL */ , {
	                doubleValue: NaN
	            });

	          case "IS_NULL":
	            const n = __PRIVATE_fromFieldPathReference(e.unaryFilter.field);
	            return FieldFilter.create(n, "==" /* Operator.EQUAL */ , {
	                nullValue: "NULL_VALUE"
	            });

	          case "IS_NOT_NAN":
	            const r = __PRIVATE_fromFieldPathReference(e.unaryFilter.field);
	            return FieldFilter.create(r, "!=" /* Operator.NOT_EQUAL */ , {
	                doubleValue: NaN
	            });

	          case "IS_NOT_NULL":
	            const i = __PRIVATE_fromFieldPathReference(e.unaryFilter.field);
	            return FieldFilter.create(i, "!=" /* Operator.NOT_EQUAL */ , {
	                nullValue: "NULL_VALUE"
	            });

	          default:
	            return fail();
	        }
	    }(e) : void 0 !== e.fieldFilter ? function __PRIVATE_fromFieldFilter(e) {
	        return FieldFilter.create(__PRIVATE_fromFieldPathReference(e.fieldFilter.field), function __PRIVATE_fromOperatorName(e) {
	            switch (e) {
	              case "EQUAL":
	                return "==" /* Operator.EQUAL */;

	              case "NOT_EQUAL":
	                return "!=" /* Operator.NOT_EQUAL */;

	              case "GREATER_THAN":
	                return ">" /* Operator.GREATER_THAN */;

	              case "GREATER_THAN_OR_EQUAL":
	                return ">=" /* Operator.GREATER_THAN_OR_EQUAL */;

	              case "LESS_THAN":
	                return "<" /* Operator.LESS_THAN */;

	              case "LESS_THAN_OR_EQUAL":
	                return "<=" /* Operator.LESS_THAN_OR_EQUAL */;

	              case "ARRAY_CONTAINS":
	                return "array-contains" /* Operator.ARRAY_CONTAINS */;

	              case "IN":
	                return "in" /* Operator.IN */;

	              case "NOT_IN":
	                return "not-in" /* Operator.NOT_IN */;

	              case "ARRAY_CONTAINS_ANY":
	                return "array-contains-any" /* Operator.ARRAY_CONTAINS_ANY */;

	              default:
	                return fail();
	            }
	        }(e.fieldFilter.op), e.fieldFilter.value);
	    }(e) : void 0 !== e.compositeFilter ? function __PRIVATE_fromCompositeFilter(e) {
	        return CompositeFilter.create(e.compositeFilter.filters.map((e => __PRIVATE_fromFilter(e))), function __PRIVATE_fromCompositeOperatorName(e) {
	            switch (e) {
	              case "AND":
	                return "and" /* CompositeOperator.AND */;

	              case "OR":
	                return "or" /* CompositeOperator.OR */;

	              default:
	                return fail();
	            }
	        }(e.compositeFilter.op));
	    }(e) : fail();
	}

	function __PRIVATE_toDirection(e) {
	    return Vt[e];
	}

	function __PRIVATE_toOperatorName(e) {
	    return mt[e];
	}

	function __PRIVATE_toCompositeOperatorName(e) {
	    return ft[e];
	}

	function __PRIVATE_toFieldPathReference(e) {
	    return {
	        fieldPath: e.canonicalString()
	    };
	}

	function __PRIVATE_fromFieldPathReference(e) {
	    return FieldPath$1.fromServerFormat(e.fieldPath);
	}

	function __PRIVATE_toFilter(e) {
	    return e instanceof FieldFilter ? function __PRIVATE_toUnaryOrFieldFilter(e) {
	        if ("==" /* Operator.EQUAL */ === e.op) {
	            if (__PRIVATE_isNanValue(e.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(e.field),
	                    op: "IS_NAN"
	                }
	            };
	            if (__PRIVATE_isNullValue(e.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(e.field),
	                    op: "IS_NULL"
	                }
	            };
	        } else if ("!=" /* Operator.NOT_EQUAL */ === e.op) {
	            if (__PRIVATE_isNanValue(e.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(e.field),
	                    op: "IS_NOT_NAN"
	                }
	            };
	            if (__PRIVATE_isNullValue(e.value)) return {
	                unaryFilter: {
	                    field: __PRIVATE_toFieldPathReference(e.field),
	                    op: "IS_NOT_NULL"
	                }
	            };
	        }
	        return {
	            fieldFilter: {
	                field: __PRIVATE_toFieldPathReference(e.field),
	                op: __PRIVATE_toOperatorName(e.op),
	                value: e.value
	            }
	        };
	    }(e) : e instanceof CompositeFilter ? function __PRIVATE_toCompositeFilter(e) {
	        const t = e.getFilters().map((e => __PRIVATE_toFilter(e)));
	        if (1 === t.length) return t[0];
	        return {
	            compositeFilter: {
	                op: __PRIVATE_toCompositeOperatorName(e.op),
	                filters: t
	            }
	        };
	    }(e) : fail();
	}

	function __PRIVATE_toDocumentMask(e) {
	    const t = [];
	    return e.fields.forEach((e => t.push(e.canonicalString()))), {
	        fieldPaths: t
	    };
	}

	function __PRIVATE_isValidResourceName(e) {
	    // Resource names have at least 4 components (project ID, database ID)
	    return e.length >= 4 && "projects" === e.get(0) && "databases" === e.get(2);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable set of metadata that the local store tracks for each target.
	 */ class TargetData {
	    constructor(
	    /** The target being listened to. */
	    e, 
	    /**
	     * The target ID to which the target corresponds; Assigned by the
	     * LocalStore for user listens and by the SyncEngine for limbo watches.
	     */
	    t, 
	    /** The purpose of the target. */
	    n, 
	    /**
	     * The sequence number of the last transaction during which this target data
	     * was modified.
	     */
	    r, 
	    /** The latest snapshot version seen for this target. */
	    i = SnapshotVersion.min()
	    /**
	     * The maximum snapshot version at which the associated view
	     * contained no limbo documents.
	     */ , s = SnapshotVersion.min()
	    /**
	     * An opaque, server-assigned token that allows watching a target to be
	     * resumed after disconnecting without retransmitting all the data that
	     * matches the target. The resume token essentially identifies a point in
	     * time from which the server should resume sending results.
	     */ , o = ByteString.EMPTY_BYTE_STRING
	    /**
	     * The number of documents that last matched the query at the resume token or
	     * read time. Documents are counted only when making a listen request with
	     * resume token or read time, otherwise, keep it null.
	     */ , _ = null) {
	        this.target = e, this.targetId = t, this.purpose = n, this.sequenceNumber = r, this.snapshotVersion = i, 
	        this.lastLimboFreeSnapshotVersion = s, this.resumeToken = o, this.expectedCount = _;
	    }
	    /** Creates a new target data instance with an updated sequence number. */    withSequenceNumber(e) {
	        return new TargetData(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);
	    }
	    /**
	     * Creates a new target data instance with an updated resume token and
	     * snapshot version.
	     */    withResumeToken(e, t) {
	        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, t, this.lastLimboFreeSnapshotVersion, e, 
	        /* expectedCount= */ null);
	    }
	    /**
	     * Creates a new target data instance with an updated expected count.
	     */    withExpectedCount(e) {
	        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, e);
	    }
	    /**
	     * Creates a new target data instance with an updated last limbo free
	     * snapshot version number.
	     */    withLastLimboFreeSnapshotVersion(e) {
	        return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken, this.expectedCount);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Serializer for values stored in the LocalStore. */ class __PRIVATE_LocalSerializer {
	    constructor(e) {
	        this.Tt = e;
	    }
	}

	/**
	 * Encodes a `BundledQuery` from bundle proto to a Query object.
	 *
	 * This reconstructs the original query used to build the bundle being loaded,
	 * including features exists only in SDKs (for example: limit-to-last).
	 */
	function __PRIVATE_fromBundledQuery(e) {
	    const t = __PRIVATE_convertQueryTargetToQuery({
	        parent: e.parent,
	        structuredQuery: e.structuredQuery
	    });
	    return "LAST" === e.limitType ? __PRIVATE_queryWithLimit(t, t.limit, "L" /* LimitType.Last */) : t;
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory implementation of IndexManager.
	 */ class __PRIVATE_MemoryIndexManager {
	    constructor() {
	        this.Tn = new __PRIVATE_MemoryCollectionParentIndex;
	    }
	    addToCollectionParentIndex(e, t) {
	        return this.Tn.add(t), PersistencePromise.resolve();
	    }
	    getCollectionParents(e, t) {
	        return PersistencePromise.resolve(this.Tn.getEntries(t));
	    }
	    addFieldIndex(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve();
	    }
	    deleteFieldIndex(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve();
	    }
	    deleteAllFieldIndexes(e) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve();
	    }
	    createTargetIndexes(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve();
	    }
	    getDocumentsMatchingTarget(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve(null);
	    }
	    getIndexType(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve(0 /* IndexType.NONE */);
	    }
	    getFieldIndexes(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve([]);
	    }
	    getNextCollectionGroupToUpdate(e) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve(null);
	    }
	    getMinOffset(e, t) {
	        return PersistencePromise.resolve(IndexOffset.min());
	    }
	    getMinOffsetFromCollectionGroup(e, t) {
	        return PersistencePromise.resolve(IndexOffset.min());
	    }
	    updateCollectionGroup(e, t, n) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve();
	    }
	    updateIndexEntries(e, t) {
	        // Field indices are not supported with memory persistence.
	        return PersistencePromise.resolve();
	    }
	}

	/**
	 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
	 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
	 * in indexeddb_schema.ts
	 */ class __PRIVATE_MemoryCollectionParentIndex {
	    constructor() {
	        this.index = {};
	    }
	    // Returns false if the entry already existed.
	    add(e) {
	        const t = e.lastSegment(), n = e.popLast(), r = this.index[t] || new SortedSet(ResourcePath.comparator), i = !r.has(n);
	        return this.index[t] = r.add(n), i;
	    }
	    has(e) {
	        const t = e.lastSegment(), n = e.popLast(), r = this.index[t];
	        return r && r.has(n);
	    }
	    getEntries(e) {
	        return (this.index[e] || new SortedSet(ResourcePath.comparator)).toArray();
	    }
	}

	/**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const wt = {
	    didRun: !1,
	    sequenceNumbersCollected: 0,
	    targetsRemoved: 0,
	    documentsRemoved: 0
	}, St = 41943040;

	class LruParams {
	    static withCacheSize(e) {
	        return new LruParams(e, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
	    }
	    constructor(
	    // When we attempt to collect, we will only do so if the cache size is greater than this
	    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
	    e, 
	    // The percentage of sequence numbers that we will attempt to collect
	    t, 
	    // A cap on the total number of sequence numbers that will be collected. This prevents
	    // us from collecting a huge number of sequence numbers if the cache has grown very large.
	    n) {
	        this.cacheSizeCollectionThreshold = e, this.percentileToCollect = t, this.maximumSequenceNumbersToCollect = n;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** A mutation queue for a specific user, backed by IndexedDB. */ LruParams.DEFAULT_COLLECTION_PERCENTILE = 10, 
	LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, LruParams.DEFAULT = new LruParams(St, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), 
	LruParams.DISABLED = new LruParams(-1, 0, 0);

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/** Offset to ensure non-overlapping target ids. */
	/**
	 * Generates monotonically increasing target IDs for sending targets to the
	 * watch stream.
	 *
	 * The client constructs two generators, one for the target cache, and one for
	 * for the sync engine (to generate limbo documents targets). These
	 * generators produce non-overlapping IDs (by using even and odd IDs
	 * respectively).
	 *
	 * By separating the target ID space, the query cache can generate target IDs
	 * that persist across client restarts, while sync engine can independently
	 * generate in-memory target IDs that are transient and can be reused after a
	 * restart.
	 */
	class __PRIVATE_TargetIdGenerator {
	    constructor(e) {
	        this.$n = e;
	    }
	    next() {
	        return this.$n += 2, this.$n;
	    }
	    static Kn() {
	        // The target cache generator must return '2' in its first call to `next()`
	        // as there is no differentiation in the protocol layer between an unset
	        // number and the number '0'. If we were to sent a target with target ID
	        // '0', the backend would consider it unset and replace it with its own ID.
	        return new __PRIVATE_TargetIdGenerator(0);
	    }
	    static Un() {
	        // Sync engine assigns target IDs for limbo document detection.
	        return new __PRIVATE_TargetIdGenerator(-1);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const bt = "LruGarbageCollector", Dt = 1048576;

	function __PRIVATE_bufferEntryComparator([e, t], [n, r]) {
	    const i = __PRIVATE_primitiveComparator(e, n);
	    return 0 === i ? __PRIVATE_primitiveComparator(t, r) : i;
	}

	/**
	 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
	 * lowest n values passed to `addElement`, and finally reports the largest of
	 * them in `maxValue`.
	 */ class __PRIVATE_RollingSequenceNumberBuffer {
	    constructor(e) {
	        this.Hn = e, this.buffer = new SortedSet(__PRIVATE_bufferEntryComparator), this.Jn = 0;
	    }
	    Yn() {
	        return ++this.Jn;
	    }
	    Zn(e) {
	        const t = [ e, this.Yn() ];
	        if (this.buffer.size < this.Hn) this.buffer = this.buffer.add(t); else {
	            const e = this.buffer.last();
	            __PRIVATE_bufferEntryComparator(t, e) < 0 && (this.buffer = this.buffer.delete(e).add(t));
	        }
	    }
	    get maxValue() {
	        // Guaranteed to be non-empty. If we decide we are not collecting any
	        // sequence numbers, nthSequenceNumber below short-circuits. If we have
	        // decided that we are collecting n sequence numbers, it's because n is some
	        // percentage of the existing sequence numbers. That means we should never
	        // be in a situation where we are collecting sequence numbers but don't
	        // actually have any.
	        return this.buffer.last()[0];
	    }
	}

	/**
	 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
	 * whether or not GC is enabled, as well as which delay to use before the next run.
	 */ class __PRIVATE_LruScheduler {
	    constructor(e, t, n) {
	        this.garbageCollector = e, this.asyncQueue = t, this.localStore = n, this.Xn = null;
	    }
	    start() {
	        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.er(6e4);
	    }
	    stop() {
	        this.Xn && (this.Xn.cancel(), this.Xn = null);
	    }
	    get started() {
	        return null !== this.Xn;
	    }
	    er(e) {
	        __PRIVATE_logDebug(bt, `Garbage collection scheduled in ${e}ms`), this.Xn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* TimerId.LruGarbageCollection */ , e, (async () => {
	            this.Xn = null;
	            try {
	                await this.localStore.collectGarbage(this.garbageCollector);
	            } catch (e) {
	                __PRIVATE_isIndexedDbTransactionError(e) ? __PRIVATE_logDebug(bt, "Ignoring IndexedDB error during garbage collection: ", e) : await __PRIVATE_ignoreIfPrimaryLeaseLoss(e);
	            }
	            await this.er(3e5);
	        }));
	    }
	}

	/**
	 * Implements the steps for LRU garbage collection.
	 */ class __PRIVATE_LruGarbageCollectorImpl {
	    constructor(e, t) {
	        this.tr = e, this.params = t;
	    }
	    calculateTargetCount(e, t) {
	        return this.tr.nr(e).next((e => Math.floor(t / 100 * e)));
	    }
	    nthSequenceNumber(e, t) {
	        if (0 === t) return PersistencePromise.resolve(__PRIVATE_ListenSequence.ae);
	        const n = new __PRIVATE_RollingSequenceNumberBuffer(t);
	        return this.tr.forEachTarget(e, (e => n.Zn(e.sequenceNumber))).next((() => this.tr.rr(e, (e => n.Zn(e))))).next((() => n.maxValue));
	    }
	    removeTargets(e, t, n) {
	        return this.tr.removeTargets(e, t, n);
	    }
	    removeOrphanedDocuments(e, t) {
	        return this.tr.removeOrphanedDocuments(e, t);
	    }
	    collect(e, t) {
	        return -1 === this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", "Garbage collection skipped; disabled"), 
	        PersistencePromise.resolve(wt)) : this.getCacheSize(e).next((n => n < this.params.cacheSizeCollectionThreshold ? (__PRIVATE_logDebug("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), 
	        wt) : this.ir(e, t)));
	    }
	    getCacheSize(e) {
	        return this.tr.getCacheSize(e);
	    }
	    ir(e, t) {
	        let n, r, i, s, o, _, u;
	        const c = Date.now();
	        return this.calculateTargetCount(e, this.params.percentileToCollect).next((t => (
	        // Cap at the configured max
	        t > this.params.maximumSequenceNumbersToCollect ? (__PRIVATE_logDebug("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${t}`), 
	        r = this.params.maximumSequenceNumbersToCollect) : r = t, s = Date.now(), this.nthSequenceNumber(e, r)))).next((r => (n = r, 
	        o = Date.now(), this.removeTargets(e, n, t)))).next((t => (i = t, _ = Date.now(), 
	        this.removeOrphanedDocuments(e, n)))).next((e => {
	            if (u = Date.now(), __PRIVATE_getLogLevel() <= LogLevel.DEBUG) {
	                __PRIVATE_logDebug("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${s - c}ms\n\tDetermined least recently used ${r} in ` + (o - s) + "ms\n" + `\tRemoved ${i} targets in ` + (_ - o) + "ms\n" + `\tRemoved ${e} documents in ` + (u - _) + "ms\n" + `Total Duration: ${u - c}ms`);
	            }
	            return PersistencePromise.resolve({
	                didRun: !0,
	                sequenceNumbersCollected: r,
	                targetsRemoved: i,
	                documentsRemoved: e
	            });
	        }));
	    }
	}

	function __PRIVATE_newLruGarbageCollector(e, t) {
	    return new __PRIVATE_LruGarbageCollectorImpl(e, t);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
	 * It can be used to batch up a set of changes to be written to the cache, but
	 * additionally supports reading entries back with the `getEntry()` method,
	 * falling back to the underlying RemoteDocumentCache if no entry is
	 * buffered.
	 *
	 * Entries added to the cache *must* be read first. This is to facilitate
	 * calculating the size delta of the pending changes.
	 *
	 * PORTING NOTE: This class was implemented then removed from other platforms.
	 * If byte-counting ends up being needed on the other platforms, consider
	 * porting this class as part of that implementation work.
	 */ class RemoteDocumentChangeBuffer {
	    constructor() {
	        // A mapping of document key to the new cache entry that should be written.
	        this.changes = new ObjectMap((e => e.toString()), ((e, t) => e.isEqual(t))), this.changesApplied = !1;
	    }
	    /**
	     * Buffers a `RemoteDocumentCache.addEntry()` call.
	     *
	     * You can only modify documents that have already been retrieved via
	     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
	     */    addEntry(e) {
	        this.assertNotApplied(), this.changes.set(e.key, e);
	    }
	    /**
	     * Buffers a `RemoteDocumentCache.removeEntry()` call.
	     *
	     * You can only remove documents that have already been retrieved via
	     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
	     */    removeEntry(e, t) {
	        this.assertNotApplied(), this.changes.set(e, MutableDocument.newInvalidDocument(e).setReadTime(t));
	    }
	    /**
	     * Looks up an entry in the cache. The buffered changes will first be checked,
	     * and if no buffered change applies, this will forward to
	     * `RemoteDocumentCache.getEntry()`.
	     *
	     * @param transaction - The transaction in which to perform any persistence
	     *     operations.
	     * @param documentKey - The key of the entry to look up.
	     * @returns The cached document or an invalid document if we have nothing
	     * cached.
	     */    getEntry(e, t) {
	        this.assertNotApplied();
	        const n = this.changes.get(t);
	        return void 0 !== n ? PersistencePromise.resolve(n) : this.getFromCache(e, t);
	    }
	    /**
	     * Looks up several entries in the cache, forwarding to
	     * `RemoteDocumentCache.getEntry()`.
	     *
	     * @param transaction - The transaction in which to perform any persistence
	     *     operations.
	     * @param documentKeys - The keys of the entries to look up.
	     * @returns A map of cached documents, indexed by key. If an entry cannot be
	     *     found, the corresponding key will be mapped to an invalid document.
	     */    getEntries(e, t) {
	        return this.getAllFromCache(e, t);
	    }
	    /**
	     * Applies buffered changes to the underlying RemoteDocumentCache, using
	     * the provided transaction.
	     */    apply(e) {
	        return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(e);
	    }
	    /** Helper to assert this.changes is not null  */    assertNotApplied() {}
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Schema Version for the Web client:
	 * 1.  Initial version including Mutation Queue, Query Cache, and Remote
	 *     Document Cache
	 * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
	 *     longer required because migration 3 unconditionally clears it.
	 * 3.  Dropped and re-created Query Cache to deal with cache corruption related
	 *     to limbo resolution. Addresses
	 *     https://github.com/firebase/firebase-ios-sdk/issues/1548
	 * 4.  Multi-Tab Support.
	 * 5.  Removal of held write acks.
	 * 6.  Create document global for tracking document cache size.
	 * 7.  Ensure every cached document has a sentinel row with a sequence number.
	 * 8.  Add collection-parent index for Collection Group queries.
	 * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
	 *     an auto-incrementing ID. This is required for Index-Free queries.
	 * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
	 * 11. Add bundles and named_queries for bundle support.
	 * 12. Add document overlays.
	 * 13. Rewrite the keys of the remote document cache to allow for efficient
	 *     document lookup via `getAll()`.
	 * 14. Add overlays.
	 * 15. Add indexing support.
	 * 16. Parse timestamp strings before creating index entries.
	 */
	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a local view (overlay) of a document, and the fields that are
	 * locally mutated.
	 */
	class OverlayedDocument {
	    constructor(e, 
	    /**
	     * The fields that are locally mutated by patch mutations.
	     *
	     * If the overlayed	document is from set or delete mutations, this is `null`.
	     * If there is no overlay (mutation) for the document, this is an empty `FieldMask`.
	     */
	    t) {
	        this.overlayedDocument = e, this.mutatedFields = t;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A readonly view of the local state of all documents we're tracking (i.e. we
	 * have a cached version in remoteDocumentCache or local mutations for the
	 * document). The view is computed by applying the mutations in the
	 * MutationQueue to the RemoteDocumentCache.
	 */ class LocalDocumentsView {
	    constructor(e, t, n, r) {
	        this.remoteDocumentCache = e, this.mutationQueue = t, this.documentOverlayCache = n, 
	        this.indexManager = r;
	    }
	    /**
	     * Get the local view of the document identified by `key`.
	     *
	     * @returns Local view of the document or null if we don't have any cached
	     * state for it.
	     */    getDocument(e, t) {
	        let n = null;
	        return this.documentOverlayCache.getOverlay(e, t).next((r => (n = r, this.remoteDocumentCache.getEntry(e, t)))).next((e => (null !== n && __PRIVATE_mutationApplyToLocalView(n.mutation, e, FieldMask.empty(), Timestamp.now()), 
	        e)));
	    }
	    /**
	     * Gets the local view of the documents identified by `keys`.
	     *
	     * If we don't have cached state for a document in `keys`, a NoDocument will
	     * be stored for that key in the resulting set.
	     */    getDocuments(e, t) {
	        return this.remoteDocumentCache.getEntries(e, t).next((t => this.getLocalViewOfDocuments(e, t, __PRIVATE_documentKeySet()).next((() => t))));
	    }
	    /**
	     * Similar to `getDocuments`, but creates the local view from the given
	     * `baseDocs` without retrieving documents from the local store.
	     *
	     * @param transaction - The transaction this operation is scoped to.
	     * @param docs - The documents to apply local mutations to get the local views.
	     * @param existenceStateChanged - The set of document keys whose existence state
	     *   is changed. This is useful to determine if some documents overlay needs
	     *   to be recalculated.
	     */    getLocalViewOfDocuments(e, t, n = __PRIVATE_documentKeySet()) {
	        const r = __PRIVATE_newOverlayMap();
	        return this.populateOverlays(e, r, t).next((() => this.computeViews(e, t, r, n).next((e => {
	            let t = documentMap();
	            return e.forEach(((e, n) => {
	                t = t.insert(e, n.overlayedDocument);
	            })), t;
	        }))));
	    }
	    /**
	     * Gets the overlayed documents for the given document map, which will include
	     * the local view of those documents and a `FieldMask` indicating which fields
	     * are mutated locally, `null` if overlay is a Set or Delete mutation.
	     */    getOverlayedDocuments(e, t) {
	        const n = __PRIVATE_newOverlayMap();
	        return this.populateOverlays(e, n, t).next((() => this.computeViews(e, t, n, __PRIVATE_documentKeySet())));
	    }
	    /**
	     * Fetches the overlays for {@code docs} and adds them to provided overlay map
	     * if the map does not already contain an entry for the given document key.
	     */    populateOverlays(e, t, n) {
	        const r = [];
	        return n.forEach((e => {
	            t.has(e) || r.push(e);
	        })), this.documentOverlayCache.getOverlays(e, r).next((e => {
	            e.forEach(((e, n) => {
	                t.set(e, n);
	            }));
	        }));
	    }
	    /**
	     * Computes the local view for the given documents.
	     *
	     * @param docs - The documents to compute views for. It also has the base
	     *   version of the documents.
	     * @param overlays - The overlays that need to be applied to the given base
	     *   version of the documents.
	     * @param existenceStateChanged - A set of documents whose existence states
	     *   might have changed. This is used to determine if we need to re-calculate
	     *   overlays from mutation queues.
	     * @return A map represents the local documents view.
	     */    computeViews(e, t, n, r) {
	        let i = __PRIVATE_mutableDocumentMap();
	        const s = __PRIVATE_newDocumentKeyMap(), o = function __PRIVATE_newOverlayedDocumentMap() {
	            return __PRIVATE_newDocumentKeyMap();
	        }();
	        return t.forEach(((e, t) => {
	            const o = n.get(t.key);
	            // Recalculate an overlay if the document's existence state changed due to
	            // a remote event *and* the overlay is a PatchMutation. This is because
	            // document existence state can change if some patch mutation's
	            // preconditions are met.
	            // NOTE: we recalculate when `overlay` is undefined as well, because there
	            // might be a patch mutation whose precondition does not match before the
	            // change (hence overlay is undefined), but would now match.
	                        r.has(t.key) && (void 0 === o || o.mutation instanceof __PRIVATE_PatchMutation) ? i = i.insert(t.key, t) : void 0 !== o ? (s.set(t.key, o.mutation.getFieldMask()), 
	            __PRIVATE_mutationApplyToLocalView(o.mutation, t, o.mutation.getFieldMask(), Timestamp.now())) : 
	            // no overlay exists
	            // Using EMPTY to indicate there is no overlay for the document.
	            s.set(t.key, FieldMask.empty());
	        })), this.recalculateAndSaveOverlays(e, i).next((e => (e.forEach(((e, t) => s.set(e, t))), 
	        t.forEach(((e, t) => {
	            var n;
	            return o.set(e, new OverlayedDocument(t, null !== (n = s.get(e)) && void 0 !== n ? n : null));
	        })), o)));
	    }
	    recalculateAndSaveOverlays(e, t) {
	        const n = __PRIVATE_newDocumentKeyMap();
	        // A reverse lookup map from batch id to the documents within that batch.
	                let r = new SortedMap(((e, t) => e - t)), i = __PRIVATE_documentKeySet();
	        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e, t).next((e => {
	            for (const i of e) i.keys().forEach((e => {
	                const s = t.get(e);
	                if (null === s) return;
	                let o = n.get(e) || FieldMask.empty();
	                o = i.applyToLocalView(s, o), n.set(e, o);
	                const _ = (r.get(i.batchId) || __PRIVATE_documentKeySet()).add(e);
	                r = r.insert(i.batchId, _);
	            }));
	        })).next((() => {
	            const s = [], o = r.getReverseIterator();
	            // Iterate in descending order of batch IDs, and skip documents that are
	            // already saved.
	                        for (;o.hasNext(); ) {
	                const r = o.getNext(), _ = r.key, a = r.value, u = __PRIVATE_newMutationMap();
	                a.forEach((e => {
	                    if (!i.has(e)) {
	                        const r = __PRIVATE_calculateOverlayMutation(t.get(e), n.get(e));
	                        null !== r && u.set(e, r), i = i.add(e);
	                    }
	                })), s.push(this.documentOverlayCache.saveOverlays(e, _, u));
	            }
	            return PersistencePromise.waitFor(s);
	        })).next((() => n));
	    }
	    /**
	     * Recalculates overlays by reading the documents from remote document cache
	     * first, and saves them after they are calculated.
	     */    recalculateAndSaveOverlaysForDocumentKeys(e, t) {
	        return this.remoteDocumentCache.getEntries(e, t).next((t => this.recalculateAndSaveOverlays(e, t)));
	    }
	    /**
	     * Performs a query against the local view of all documents.
	     *
	     * @param transaction - The persistence transaction.
	     * @param query - The query to match documents against.
	     * @param offset - Read time and key to start scanning by (exclusive).
	     * @param context - A optional tracker to keep a record of important details
	     *   during database local query execution.
	     */    getDocumentsMatchingQuery(e, t, n, r) {
	        /**
	 * Returns whether the query matches a single document by path (rather than a
	 * collection).
	 */
	        return function __PRIVATE_isDocumentQuery$1(e) {
	            return DocumentKey.isDocumentKey(e.path) && null === e.collectionGroup && 0 === e.filters.length;
	        }(t) ? this.getDocumentsMatchingDocumentQuery(e, t.path) : __PRIVATE_isCollectionGroupQuery(t) ? this.getDocumentsMatchingCollectionGroupQuery(e, t, n, r) : this.getDocumentsMatchingCollectionQuery(e, t, n, r);
	    }
	    /**
	     * Given a collection group, returns the next documents that follow the provided offset, along
	     * with an updated batch ID.
	     *
	     * <p>The documents returned by this method are ordered by remote version from the provided
	     * offset. If there are no more remote documents after the provided offset, documents with
	     * mutations in order of batch id from the offset are returned. Since all documents in a batch are
	     * returned together, the total number of documents returned can exceed {@code count}.
	     *
	     * @param transaction
	     * @param collectionGroup The collection group for the documents.
	     * @param offset The offset to index into.
	     * @param count The number of documents to return
	     * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
	     */    getNextDocuments(e, t, n, r) {
	        return this.remoteDocumentCache.getAllFromCollectionGroup(e, t, n, r).next((i => {
	            const s = r - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(e, t, n.largestBatchId, r - i.size) : PersistencePromise.resolve(__PRIVATE_newOverlayMap());
	            // The callsite will use the largest batch ID together with the latest read time to create
	            // a new index offset. Since we only process batch IDs if all remote documents have been read,
	            // no overlay will increase the overall read time. This is why we only need to special case
	            // the batch id.
	                        let o = N, _ = i;
	            return s.next((t => PersistencePromise.forEach(t, ((t, n) => (o < n.largestBatchId && (o = n.largestBatchId), 
	            i.get(t) ? PersistencePromise.resolve() : this.remoteDocumentCache.getEntry(e, t).next((e => {
	                _ = _.insert(t, e);
	            }))))).next((() => this.populateOverlays(e, t, i))).next((() => this.computeViews(e, _, t, __PRIVATE_documentKeySet()))).next((e => ({
	                batchId: o,
	                changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(e)
	            })))));
	        }));
	    }
	    getDocumentsMatchingDocumentQuery(e, t) {
	        // Just do a simple document lookup.
	        return this.getDocument(e, new DocumentKey(t)).next((e => {
	            let t = documentMap();
	            return e.isFoundDocument() && (t = t.insert(e.key, e)), t;
	        }));
	    }
	    getDocumentsMatchingCollectionGroupQuery(e, t, n, r) {
	        const i = t.collectionGroup;
	        let s = documentMap();
	        return this.indexManager.getCollectionParents(e, i).next((o => PersistencePromise.forEach(o, (o => {
	            const _ = function __PRIVATE_asCollectionQueryAtPath(e, t) {
	                return new __PRIVATE_QueryImpl(t, 
	                /*collectionGroup=*/ null, e.explicitOrderBy.slice(), e.filters.slice(), e.limit, e.limitType, e.startAt, e.endAt);
	            }(t, o.child(i));
	            return this.getDocumentsMatchingCollectionQuery(e, _, n, r).next((e => {
	                e.forEach(((e, t) => {
	                    s = s.insert(e, t);
	                }));
	            }));
	        })).next((() => s))));
	    }
	    getDocumentsMatchingCollectionQuery(e, t, n, r) {
	        // Query the remote documents and overlay mutations.
	        let i;
	        return this.documentOverlayCache.getOverlaysForCollection(e, t.path, n.largestBatchId).next((s => (i = s, 
	        this.remoteDocumentCache.getDocumentsMatchingQuery(e, t, n, i, r)))).next((e => {
	            // As documents might match the query because of their overlay we need to
	            // include documents for all overlays in the initial document set.
	            i.forEach(((t, n) => {
	                const r = n.getKey();
	                null === e.get(r) && (e = e.insert(r, MutableDocument.newInvalidDocument(r)));
	            }));
	            // Apply the overlays and match against the query.
	            let n = documentMap();
	            return e.forEach(((e, r) => {
	                const s = i.get(e);
	                void 0 !== s && __PRIVATE_mutationApplyToLocalView(s.mutation, r, FieldMask.empty(), Timestamp.now()), 
	                // Finally, insert the documents that still match the query
	                __PRIVATE_queryMatches(t, r) && (n = n.insert(e, r));
	            })), n;
	        }));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_MemoryBundleCache {
	    constructor(e) {
	        this.serializer = e, this.dr = new Map, this.Ar = new Map;
	    }
	    getBundleMetadata(e, t) {
	        return PersistencePromise.resolve(this.dr.get(t));
	    }
	    saveBundleMetadata(e, t) {
	        return this.dr.set(t.id, 
	        /** Decodes a BundleMetadata proto into a BundleMetadata object. */
	        function __PRIVATE_fromBundleMetadata(e) {
	            return {
	                id: e.id,
	                version: e.version,
	                createTime: __PRIVATE_fromVersion(e.createTime)
	            };
	        }(t)), PersistencePromise.resolve();
	    }
	    getNamedQuery(e, t) {
	        return PersistencePromise.resolve(this.Ar.get(t));
	    }
	    saveNamedQuery(e, t) {
	        return this.Ar.set(t.name, function __PRIVATE_fromProtoNamedQuery(e) {
	            return {
	                name: e.name,
	                query: __PRIVATE_fromBundledQuery(e.bundledQuery),
	                readTime: __PRIVATE_fromVersion(e.readTime)
	            };
	        }(t)), PersistencePromise.resolve();
	    }
	}

	/**
	 * @license
	 * Copyright 2022 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An in-memory implementation of DocumentOverlayCache.
	 */ class __PRIVATE_MemoryDocumentOverlayCache {
	    constructor() {
	        // A map sorted by DocumentKey, whose value is a pair of the largest batch id
	        // for the overlay and the overlay itself.
	        this.overlays = new SortedMap(DocumentKey.comparator), this.Rr = new Map;
	    }
	    getOverlay(e, t) {
	        return PersistencePromise.resolve(this.overlays.get(t));
	    }
	    getOverlays(e, t) {
	        const n = __PRIVATE_newOverlayMap();
	        return PersistencePromise.forEach(t, (t => this.getOverlay(e, t).next((e => {
	            null !== e && n.set(t, e);
	        })))).next((() => n));
	    }
	    saveOverlays(e, t, n) {
	        return n.forEach(((n, r) => {
	            this.Et(e, t, r);
	        })), PersistencePromise.resolve();
	    }
	    removeOverlaysForBatchId(e, t, n) {
	        const r = this.Rr.get(n);
	        return void 0 !== r && (r.forEach((e => this.overlays = this.overlays.remove(e))), 
	        this.Rr.delete(n)), PersistencePromise.resolve();
	    }
	    getOverlaysForCollection(e, t, n) {
	        const r = __PRIVATE_newOverlayMap(), i = t.length + 1, s = new DocumentKey(t.child("")), o = this.overlays.getIteratorFrom(s);
	        for (;o.hasNext(); ) {
	            const e = o.getNext().value, s = e.getKey();
	            if (!t.isPrefixOf(s.path)) break;
	            // Documents from sub-collections
	                        s.path.length === i && (e.largestBatchId > n && r.set(e.getKey(), e));
	        }
	        return PersistencePromise.resolve(r);
	    }
	    getOverlaysForCollectionGroup(e, t, n, r) {
	        let i = new SortedMap(((e, t) => e - t));
	        const s = this.overlays.getIterator();
	        for (;s.hasNext(); ) {
	            const e = s.getNext().value;
	            if (e.getKey().getCollectionGroup() === t && e.largestBatchId > n) {
	                let t = i.get(e.largestBatchId);
	                null === t && (t = __PRIVATE_newOverlayMap(), i = i.insert(e.largestBatchId, t)), 
	                t.set(e.getKey(), e);
	            }
	        }
	        const o = __PRIVATE_newOverlayMap(), _ = i.getIterator();
	        for (;_.hasNext(); ) {
	            if (_.getNext().value.forEach(((e, t) => o.set(e, t))), o.size() >= r) break;
	        }
	        return PersistencePromise.resolve(o);
	    }
	    Et(e, t, n) {
	        // Remove the association of the overlay to its batch id.
	        const r = this.overlays.get(n.key);
	        if (null !== r) {
	            const e = this.Rr.get(r.largestBatchId).delete(n.key);
	            this.Rr.set(r.largestBatchId, e);
	        }
	        this.overlays = this.overlays.insert(n.key, new Overlay(t, n));
	        // Create the association of this overlay to the given largestBatchId.
	        let i = this.Rr.get(t);
	        void 0 === i && (i = __PRIVATE_documentKeySet(), this.Rr.set(t, i)), this.Rr.set(t, i.add(n.key));
	    }
	}

	/**
	 * @license
	 * Copyright 2024 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_MemoryGlobalsCache {
	    constructor() {
	        this.sessionToken = ByteString.EMPTY_BYTE_STRING;
	    }
	    getSessionToken(e) {
	        return PersistencePromise.resolve(this.sessionToken);
	    }
	    setSessionToken(e, t) {
	        return this.sessionToken = t, PersistencePromise.resolve();
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A collection of references to a document from some kind of numbered entity
	 * (either a target ID or batch ID). As references are added to or removed from
	 * the set corresponding events are emitted to a registered garbage collector.
	 *
	 * Each reference is represented by a DocumentReference object. Each of them
	 * contains enough information to uniquely identify the reference. They are all
	 * stored primarily in a set sorted by key. A document is considered garbage if
	 * there's no references in that set (this can be efficiently checked thanks to
	 * sorting by key).
	 *
	 * ReferenceSet also keeps a secondary set that contains references sorted by
	 * IDs. This one is used to efficiently implement removal of all references by
	 * some target ID.
	 */ class __PRIVATE_ReferenceSet {
	    constructor() {
	        // A set of outstanding references to a document sorted by key.
	        this.Vr = new SortedSet(__PRIVATE_DocReference.mr), 
	        // A set of outstanding references to a document sorted by target id.
	        this.gr = new SortedSet(__PRIVATE_DocReference.pr);
	    }
	    /** Returns true if the reference set contains no references. */    isEmpty() {
	        return this.Vr.isEmpty();
	    }
	    /** Adds a reference to the given document key for the given ID. */    addReference(e, t) {
	        const n = new __PRIVATE_DocReference(e, t);
	        this.Vr = this.Vr.add(n), this.gr = this.gr.add(n);
	    }
	    /** Add references to the given document keys for the given ID. */    yr(e, t) {
	        e.forEach((e => this.addReference(e, t)));
	    }
	    /**
	     * Removes a reference to the given document key for the given
	     * ID.
	     */    removeReference(e, t) {
	        this.wr(new __PRIVATE_DocReference(e, t));
	    }
	    Sr(e, t) {
	        e.forEach((e => this.removeReference(e, t)));
	    }
	    /**
	     * Clears all references with a given ID. Calls removeRef() for each key
	     * removed.
	     */    br(e) {
	        const t = new DocumentKey(new ResourcePath([])), n = new __PRIVATE_DocReference(t, e), r = new __PRIVATE_DocReference(t, e + 1), i = [];
	        return this.gr.forEachInRange([ n, r ], (e => {
	            this.wr(e), i.push(e.key);
	        })), i;
	    }
	    Dr() {
	        this.Vr.forEach((e => this.wr(e)));
	    }
	    wr(e) {
	        this.Vr = this.Vr.delete(e), this.gr = this.gr.delete(e);
	    }
	    vr(e) {
	        const t = new DocumentKey(new ResourcePath([])), n = new __PRIVATE_DocReference(t, e), r = new __PRIVATE_DocReference(t, e + 1);
	        let i = __PRIVATE_documentKeySet();
	        return this.gr.forEachInRange([ n, r ], (e => {
	            i = i.add(e.key);
	        })), i;
	    }
	    containsKey(e) {
	        const t = new __PRIVATE_DocReference(e, 0), n = this.Vr.firstAfterOrEqual(t);
	        return null !== n && e.isEqual(n.key);
	    }
	}

	class __PRIVATE_DocReference {
	    constructor(e, t) {
	        this.key = e, this.Cr = t;
	    }
	    /** Compare by key then by ID */    static mr(e, t) {
	        return DocumentKey.comparator(e.key, t.key) || __PRIVATE_primitiveComparator(e.Cr, t.Cr);
	    }
	    /** Compare by ID then by key */    static pr(e, t) {
	        return __PRIVATE_primitiveComparator(e.Cr, t.Cr) || DocumentKey.comparator(e.key, t.key);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_MemoryMutationQueue {
	    constructor(e, t) {
	        this.indexManager = e, this.referenceDelegate = t, 
	        /**
	         * The set of all mutations that have been sent but not yet been applied to
	         * the backend.
	         */
	        this.mutationQueue = [], 
	        /** Next value to use when assigning sequential IDs to each mutation batch. */
	        this.Fr = 1, 
	        /** An ordered mapping between documents and the mutations batch IDs. */
	        this.Mr = new SortedSet(__PRIVATE_DocReference.mr);
	    }
	    checkEmpty(e) {
	        return PersistencePromise.resolve(0 === this.mutationQueue.length);
	    }
	    addMutationBatch(e, t, n, r) {
	        const i = this.Fr;
	        this.Fr++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
	        const s = new MutationBatch(i, t, n, r);
	        this.mutationQueue.push(s);
	        // Track references by document key and index collection parents.
	        for (const t of r) this.Mr = this.Mr.add(new __PRIVATE_DocReference(t.key, i)), 
	        this.indexManager.addToCollectionParentIndex(e, t.key.path.popLast());
	        return PersistencePromise.resolve(s);
	    }
	    lookupMutationBatch(e, t) {
	        return PersistencePromise.resolve(this.Or(t));
	    }
	    getNextMutationBatchAfterBatchId(e, t) {
	        const n = t + 1, r = this.Nr(n), i = r < 0 ? 0 : r;
	        // The requested batchId may still be out of range so normalize it to the
	        // start of the queue.
	                return PersistencePromise.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
	    }
	    getHighestUnacknowledgedBatchId() {
	        return PersistencePromise.resolve(0 === this.mutationQueue.length ? Q : this.Fr - 1);
	    }
	    getAllMutationBatches(e) {
	        return PersistencePromise.resolve(this.mutationQueue.slice());
	    }
	    getAllMutationBatchesAffectingDocumentKey(e, t) {
	        const n = new __PRIVATE_DocReference(t, 0), r = new __PRIVATE_DocReference(t, Number.POSITIVE_INFINITY), i = [];
	        return this.Mr.forEachInRange([ n, r ], (e => {
	            const t = this.Or(e.Cr);
	            i.push(t);
	        })), PersistencePromise.resolve(i);
	    }
	    getAllMutationBatchesAffectingDocumentKeys(e, t) {
	        let n = new SortedSet(__PRIVATE_primitiveComparator);
	        return t.forEach((e => {
	            const t = new __PRIVATE_DocReference(e, 0), r = new __PRIVATE_DocReference(e, Number.POSITIVE_INFINITY);
	            this.Mr.forEachInRange([ t, r ], (e => {
	                n = n.add(e.Cr);
	            }));
	        })), PersistencePromise.resolve(this.Br(n));
	    }
	    getAllMutationBatchesAffectingQuery(e, t) {
	        // Use the query path as a prefix for testing if a document matches the
	        // query.
	        const n = t.path, r = n.length + 1;
	        // Construct a document reference for actually scanning the index. Unlike
	        // the prefix the document key in this reference must have an even number of
	        // segments. The empty segment can be used a suffix of the query path
	        // because it precedes all other segments in an ordered traversal.
	        let i = n;
	        DocumentKey.isDocumentKey(i) || (i = i.child(""));
	        const s = new __PRIVATE_DocReference(new DocumentKey(i), 0);
	        // Find unique batchIDs referenced by all documents potentially matching the
	        // query.
	                let o = new SortedSet(__PRIVATE_primitiveComparator);
	        return this.Mr.forEachWhile((e => {
	            const t = e.key.path;
	            return !!n.isPrefixOf(t) && (
	            // Rows with document keys more than one segment longer than the query
	            // path can't be matches. For example, a query on 'rooms' can't match
	            // the document /rooms/abc/messages/xyx.
	            // TODO(mcg): we'll need a different scanner when we implement
	            // ancestor queries.
	            t.length === r && (o = o.add(e.Cr)), !0);
	        }), s), PersistencePromise.resolve(this.Br(o));
	    }
	    Br(e) {
	        // Construct an array of matching batches, sorted by batchID to ensure that
	        // multiple mutations affecting the same document key are applied in order.
	        const t = [];
	        return e.forEach((e => {
	            const n = this.Or(e);
	            null !== n && t.push(n);
	        })), t;
	    }
	    removeMutationBatch(e, t) {
	        __PRIVATE_hardAssert(0 === this.Lr(t.batchId, "removed")), this.mutationQueue.shift();
	        let n = this.Mr;
	        return PersistencePromise.forEach(t.mutations, (r => {
	            const i = new __PRIVATE_DocReference(r.key, t.batchId);
	            return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(e, r.key);
	        })).next((() => {
	            this.Mr = n;
	        }));
	    }
	    qn(e) {
	        // No-op since the memory mutation queue does not maintain a separate cache.
	    }
	    containsKey(e, t) {
	        const n = new __PRIVATE_DocReference(t, 0), r = this.Mr.firstAfterOrEqual(n);
	        return PersistencePromise.resolve(t.isEqual(r && r.key));
	    }
	    performConsistencyCheck(e) {
	        return this.mutationQueue.length, PersistencePromise.resolve();
	    }
	    /**
	     * Finds the index of the given batchId in the mutation queue and asserts that
	     * the resulting index is within the bounds of the queue.
	     *
	     * @param batchId - The batchId to search for
	     * @param action - A description of what the caller is doing, phrased in passive
	     * form (e.g. "acknowledged" in a routine that acknowledges batches).
	     */    Lr(e, t) {
	        return this.Nr(e);
	    }
	    /**
	     * Finds the index of the given batchId in the mutation queue. This operation
	     * is O(1).
	     *
	     * @returns The computed index of the batch with the given batchId, based on
	     * the state of the queue. Note this index can be negative if the requested
	     * batchId has already been removed from the queue or past the end of the
	     * queue if the batchId is larger than the last added batch.
	     */    Nr(e) {
	        if (0 === this.mutationQueue.length) 
	        // As an index this is past the end of the queue
	        return 0;
	        // Examine the front of the queue to figure out the difference between the
	        // batchId and indexes in the array. Note that since the queue is ordered
	        // by batchId, if the first batch has a larger batchId then the requested
	        // batchId doesn't exist in the queue.
	                return e - this.mutationQueue[0].batchId;
	    }
	    /**
	     * A version of lookupMutationBatch that doesn't return a promise, this makes
	     * other functions that uses this code easier to read and more efficient.
	     */    Or(e) {
	        const t = this.Nr(e);
	        if (t < 0 || t >= this.mutationQueue.length) return null;
	        return this.mutationQueue[t];
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The smallest value representable by a 64-bit signed integer (long).
	 */
	/**
	 * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
	 * `newMemoryRemoteDocumentCache()`.
	 */
	class __PRIVATE_MemoryRemoteDocumentCacheImpl {
	    /**
	     * @param sizer - Used to assess the size of a document. For eager GC, this is
	     * expected to just return 0 to avoid unnecessarily doing the work of
	     * calculating the size.
	     */
	    constructor(e) {
	        this.kr = e, 
	        /** Underlying cache of documents and their read times. */
	        this.docs = function __PRIVATE_documentEntryMap() {
	            return new SortedMap(DocumentKey.comparator);
	        }(), 
	        /** Size of all cached documents. */
	        this.size = 0;
	    }
	    setIndexManager(e) {
	        this.indexManager = e;
	    }
	    /**
	     * Adds the supplied entry to the cache and updates the cache size as appropriate.
	     *
	     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
	     * returned by `newChangeBuffer()`.
	     */    addEntry(e, t) {
	        const n = t.key, r = this.docs.get(n), i = r ? r.size : 0, s = this.kr(t);
	        return this.docs = this.docs.insert(n, {
	            document: t.mutableCopy(),
	            size: s
	        }), this.size += s - i, this.indexManager.addToCollectionParentIndex(e, n.path.popLast());
	    }
	    /**
	     * Removes the specified entry from the cache and updates the cache size as appropriate.
	     *
	     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
	     * returned by `newChangeBuffer()`.
	     */    removeEntry(e) {
	        const t = this.docs.get(e);
	        t && (this.docs = this.docs.remove(e), this.size -= t.size);
	    }
	    getEntry(e, t) {
	        const n = this.docs.get(t);
	        return PersistencePromise.resolve(n ? n.document.mutableCopy() : MutableDocument.newInvalidDocument(t));
	    }
	    getEntries(e, t) {
	        let n = __PRIVATE_mutableDocumentMap();
	        return t.forEach((e => {
	            const t = this.docs.get(e);
	            n = n.insert(e, t ? t.document.mutableCopy() : MutableDocument.newInvalidDocument(e));
	        })), PersistencePromise.resolve(n);
	    }
	    getDocumentsMatchingQuery(e, t, n, r) {
	        let i = __PRIVATE_mutableDocumentMap();
	        // Documents are ordered by key, so we can use a prefix scan to narrow down
	        // the documents we need to match the query against.
	                const s = t.path, o = new DocumentKey(s.child("__id-9223372036854775808__")), _ = this.docs.getIteratorFrom(o);
	        // Document keys are ordered first by numeric value ("__id<Long>__"),
	        // then lexicographically by string value. Start the iterator at the minimum
	        // possible Document key value.
	                for (;_.hasNext(); ) {
	            const {key: e, value: {document: o}} = _.getNext();
	            if (!s.isPrefixOf(e.path)) break;
	            e.path.length > s.length + 1 || (__PRIVATE_indexOffsetComparator(__PRIVATE_newIndexOffsetFromDocument(o), n) <= 0 || (r.has(o.key) || __PRIVATE_queryMatches(t, o)) && (i = i.insert(o.key, o.mutableCopy())));
	        }
	        return PersistencePromise.resolve(i);
	    }
	    getAllFromCollectionGroup(e, t, n, r) {
	        // This method should only be called from the IndexBackfiller if persistence
	        // is enabled.
	        fail();
	    }
	    qr(e, t) {
	        return PersistencePromise.forEach(this.docs, (e => t(e)));
	    }
	    newChangeBuffer(e) {
	        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
	        // a separate changelog and does not need special handling for removals.
	        return new __PRIVATE_MemoryRemoteDocumentChangeBuffer(this);
	    }
	    getSize(e) {
	        return PersistencePromise.resolve(this.size);
	    }
	}

	/**
	 * Creates a new memory-only RemoteDocumentCache.
	 *
	 * @param sizer - Used to assess the size of a document. For eager GC, this is
	 * expected to just return 0 to avoid unnecessarily doing the work of
	 * calculating the size.
	 */
	/**
	 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
	 */
	class __PRIVATE_MemoryRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {
	    constructor(e) {
	        super(), this.Ir = e;
	    }
	    applyChanges(e) {
	        const t = [];
	        return this.changes.forEach(((n, r) => {
	            r.isValidDocument() ? t.push(this.Ir.addEntry(e, r)) : this.Ir.removeEntry(n);
	        })), PersistencePromise.waitFor(t);
	    }
	    getFromCache(e, t) {
	        return this.Ir.getEntry(e, t);
	    }
	    getAllFromCache(e, t) {
	        return this.Ir.getEntries(e, t);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_MemoryTargetCache {
	    constructor(e) {
	        this.persistence = e, 
	        /**
	         * Maps a target to the data about that target
	         */
	        this.Qr = new ObjectMap((e => __PRIVATE_canonifyTarget(e)), __PRIVATE_targetEquals), 
	        /** The last received snapshot version. */
	        this.lastRemoteSnapshotVersion = SnapshotVersion.min(), 
	        /** The highest numbered target ID encountered. */
	        this.highestTargetId = 0, 
	        /** The highest sequence number encountered. */
	        this.$r = 0, 
	        /**
	         * A ordered bidirectional mapping between documents and the remote target
	         * IDs.
	         */
	        this.Kr = new __PRIVATE_ReferenceSet, this.targetCount = 0, this.Ur = __PRIVATE_TargetIdGenerator.Kn();
	    }
	    forEachTarget(e, t) {
	        return this.Qr.forEach(((e, n) => t(n))), PersistencePromise.resolve();
	    }
	    getLastRemoteSnapshotVersion(e) {
	        return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
	    }
	    getHighestSequenceNumber(e) {
	        return PersistencePromise.resolve(this.$r);
	    }
	    allocateTargetId(e) {
	        return this.highestTargetId = this.Ur.next(), PersistencePromise.resolve(this.highestTargetId);
	    }
	    setTargetsMetadata(e, t, n) {
	        return n && (this.lastRemoteSnapshotVersion = n), t > this.$r && (this.$r = t), 
	        PersistencePromise.resolve();
	    }
	    zn(e) {
	        this.Qr.set(e.target, e);
	        const t = e.targetId;
	        t > this.highestTargetId && (this.Ur = new __PRIVATE_TargetIdGenerator(t), this.highestTargetId = t), 
	        e.sequenceNumber > this.$r && (this.$r = e.sequenceNumber);
	    }
	    addTargetData(e, t) {
	        return this.zn(t), this.targetCount += 1, PersistencePromise.resolve();
	    }
	    updateTargetData(e, t) {
	        return this.zn(t), PersistencePromise.resolve();
	    }
	    removeTargetData(e, t) {
	        return this.Qr.delete(t.target), this.Kr.br(t.targetId), this.targetCount -= 1, 
	        PersistencePromise.resolve();
	    }
	    removeTargets(e, t, n) {
	        let r = 0;
	        const i = [];
	        return this.Qr.forEach(((s, o) => {
	            o.sequenceNumber <= t && null === n.get(o.targetId) && (this.Qr.delete(s), i.push(this.removeMatchingKeysForTargetId(e, o.targetId)), 
	            r++);
	        })), PersistencePromise.waitFor(i).next((() => r));
	    }
	    getTargetCount(e) {
	        return PersistencePromise.resolve(this.targetCount);
	    }
	    getTargetData(e, t) {
	        const n = this.Qr.get(t) || null;
	        return PersistencePromise.resolve(n);
	    }
	    addMatchingKeys(e, t, n) {
	        return this.Kr.yr(t, n), PersistencePromise.resolve();
	    }
	    removeMatchingKeys(e, t, n) {
	        this.Kr.Sr(t, n);
	        const r = this.persistence.referenceDelegate, i = [];
	        return r && t.forEach((t => {
	            i.push(r.markPotentiallyOrphaned(e, t));
	        })), PersistencePromise.waitFor(i);
	    }
	    removeMatchingKeysForTargetId(e, t) {
	        return this.Kr.br(t), PersistencePromise.resolve();
	    }
	    getMatchingKeysForTargetId(e, t) {
	        const n = this.Kr.vr(t);
	        return PersistencePromise.resolve(n);
	    }
	    containsKey(e, t) {
	        return PersistencePromise.resolve(this.Kr.containsKey(t));
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A memory-backed instance of Persistence. Data is stored only in RAM and
	 * not persisted across sessions.
	 */
	class __PRIVATE_MemoryPersistence {
	    /**
	     * The constructor accepts a factory for creating a reference delegate. This
	     * allows both the delegate and this instance to have strong references to
	     * each other without having nullable fields that would then need to be
	     * checked or asserted on every access.
	     */
	    constructor(e, t) {
	        this.Wr = {}, this.overlays = {}, this.Gr = new __PRIVATE_ListenSequence(0), this.zr = !1, 
	        this.zr = !0, this.jr = new __PRIVATE_MemoryGlobalsCache, this.referenceDelegate = e(this), 
	        this.Hr = new __PRIVATE_MemoryTargetCache(this);
	        this.indexManager = new __PRIVATE_MemoryIndexManager, this.remoteDocumentCache = function __PRIVATE_newMemoryRemoteDocumentCache(e) {
	            return new __PRIVATE_MemoryRemoteDocumentCacheImpl(e);
	        }((e => this.referenceDelegate.Jr(e))), this.serializer = new __PRIVATE_LocalSerializer(t), 
	        this.Yr = new __PRIVATE_MemoryBundleCache(this.serializer);
	    }
	    start() {
	        return Promise.resolve();
	    }
	    shutdown() {
	        // No durable state to ensure is closed on shutdown.
	        return this.zr = !1, Promise.resolve();
	    }
	    get started() {
	        return this.zr;
	    }
	    setDatabaseDeletedListener() {
	        // No op.
	    }
	    setNetworkEnabled() {
	        // No op.
	    }
	    getIndexManager(e) {
	        // We do not currently support indices for memory persistence, so we can
	        // return the same shared instance of the memory index manager.
	        return this.indexManager;
	    }
	    getDocumentOverlayCache(e) {
	        let t = this.overlays[e.toKey()];
	        return t || (t = new __PRIVATE_MemoryDocumentOverlayCache, this.overlays[e.toKey()] = t), 
	        t;
	    }
	    getMutationQueue(e, t) {
	        let n = this.Wr[e.toKey()];
	        return n || (n = new __PRIVATE_MemoryMutationQueue(t, this.referenceDelegate), this.Wr[e.toKey()] = n), 
	        n;
	    }
	    getGlobalsCache() {
	        return this.jr;
	    }
	    getTargetCache() {
	        return this.Hr;
	    }
	    getRemoteDocumentCache() {
	        return this.remoteDocumentCache;
	    }
	    getBundleCache() {
	        return this.Yr;
	    }
	    runTransaction(e, t, n) {
	        __PRIVATE_logDebug("MemoryPersistence", "Starting transaction:", e);
	        const r = new __PRIVATE_MemoryTransaction(this.Gr.next());
	        return this.referenceDelegate.Zr(), n(r).next((e => this.referenceDelegate.Xr(r).next((() => e)))).toPromise().then((e => (r.raiseOnCommittedEvent(), 
	        e)));
	    }
	    ei(e, t) {
	        return PersistencePromise.or(Object.values(this.Wr).map((n => () => n.containsKey(e, t))));
	    }
	}

	/**
	 * Memory persistence is not actually transactional, but future implementations
	 * may have transaction-scoped state.
	 */ class __PRIVATE_MemoryTransaction extends PersistenceTransaction {
	    constructor(e) {
	        super(), this.currentSequenceNumber = e;
	    }
	}

	class __PRIVATE_MemoryEagerDelegate {
	    constructor(e) {
	        this.persistence = e, 
	        /** Tracks all documents that are active in Query views. */
	        this.ti = new __PRIVATE_ReferenceSet, 
	        /** The list of documents that are potentially GCed after each transaction. */
	        this.ni = null;
	    }
	    static ri(e) {
	        return new __PRIVATE_MemoryEagerDelegate(e);
	    }
	    get ii() {
	        if (this.ni) return this.ni;
	        throw fail();
	    }
	    addReference(e, t, n) {
	        return this.ti.addReference(n, t), this.ii.delete(n.toString()), PersistencePromise.resolve();
	    }
	    removeReference(e, t, n) {
	        return this.ti.removeReference(n, t), this.ii.add(n.toString()), PersistencePromise.resolve();
	    }
	    markPotentiallyOrphaned(e, t) {
	        return this.ii.add(t.toString()), PersistencePromise.resolve();
	    }
	    removeTarget(e, t) {
	        this.ti.br(t.targetId).forEach((e => this.ii.add(e.toString())));
	        const n = this.persistence.getTargetCache();
	        return n.getMatchingKeysForTargetId(e, t.targetId).next((e => {
	            e.forEach((e => this.ii.add(e.toString())));
	        })).next((() => n.removeTargetData(e, t)));
	    }
	    Zr() {
	        this.ni = new Set;
	    }
	    Xr(e) {
	        // Remove newly orphaned documents.
	        const t = this.persistence.getRemoteDocumentCache().newChangeBuffer();
	        return PersistencePromise.forEach(this.ii, (n => {
	            const r = DocumentKey.fromPath(n);
	            return this.si(e, r).next((e => {
	                e || t.removeEntry(r, SnapshotVersion.min());
	            }));
	        })).next((() => (this.ni = null, t.apply(e))));
	    }
	    updateLimboDocument(e, t) {
	        return this.si(e, t).next((e => {
	            e ? this.ii.delete(t.toString()) : this.ii.add(t.toString());
	        }));
	    }
	    Jr(e) {
	        // For eager GC, we don't care about the document size, there are no size thresholds.
	        return 0;
	    }
	    si(e, t) {
	        return PersistencePromise.or([ () => PersistencePromise.resolve(this.ti.containsKey(t)), () => this.persistence.getTargetCache().containsKey(e, t), () => this.persistence.ei(e, t) ]);
	    }
	}

	class __PRIVATE_MemoryLruDelegate {
	    constructor(e, t) {
	        this.persistence = e, this.oi = new ObjectMap((e => __PRIVATE_encodeResourcePath(e.path)), ((e, t) => e.isEqual(t))), 
	        this.garbageCollector = __PRIVATE_newLruGarbageCollector(this, t);
	    }
	    static ri(e, t) {
	        return new __PRIVATE_MemoryLruDelegate(e, t);
	    }
	    // No-ops, present so memory persistence doesn't have to care which delegate
	    // it has.
	    Zr() {}
	    Xr(e) {
	        return PersistencePromise.resolve();
	    }
	    forEachTarget(e, t) {
	        return this.persistence.getTargetCache().forEachTarget(e, t);
	    }
	    nr(e) {
	        const t = this.sr(e);
	        return this.persistence.getTargetCache().getTargetCount(e).next((e => t.next((t => e + t))));
	    }
	    sr(e) {
	        let t = 0;
	        return this.rr(e, (e => {
	            t++;
	        })).next((() => t));
	    }
	    rr(e, t) {
	        return PersistencePromise.forEach(this.oi, ((n, r) => this.ar(e, n, r).next((e => e ? PersistencePromise.resolve() : t(r)))));
	    }
	    removeTargets(e, t, n) {
	        return this.persistence.getTargetCache().removeTargets(e, t, n);
	    }
	    removeOrphanedDocuments(e, t) {
	        let n = 0;
	        const r = this.persistence.getRemoteDocumentCache(), i = r.newChangeBuffer();
	        return r.qr(e, (r => this.ar(e, r, t).next((e => {
	            e || (n++, i.removeEntry(r, SnapshotVersion.min()));
	        })))).next((() => i.apply(e))).next((() => n));
	    }
	    markPotentiallyOrphaned(e, t) {
	        return this.oi.set(t, e.currentSequenceNumber), PersistencePromise.resolve();
	    }
	    removeTarget(e, t) {
	        const n = t.withSequenceNumber(e.currentSequenceNumber);
	        return this.persistence.getTargetCache().updateTargetData(e, n);
	    }
	    addReference(e, t, n) {
	        return this.oi.set(n, e.currentSequenceNumber), PersistencePromise.resolve();
	    }
	    removeReference(e, t, n) {
	        return this.oi.set(n, e.currentSequenceNumber), PersistencePromise.resolve();
	    }
	    updateLimboDocument(e, t) {
	        return this.oi.set(t, e.currentSequenceNumber), PersistencePromise.resolve();
	    }
	    Jr(e) {
	        let t = e.key.toString().length;
	        return e.isFoundDocument() && (t += __PRIVATE_estimateByteSize(e.data.value)), t;
	    }
	    ar(e, t, n) {
	        return PersistencePromise.or([ () => this.persistence.ei(e, t), () => this.persistence.getTargetCache().containsKey(e, t), () => {
	            const e = this.oi.get(t);
	            return PersistencePromise.resolve(void 0 !== e && e > n);
	        } ]);
	    }
	    getCacheSize(e) {
	        return this.persistence.getRemoteDocumentCache().getSize(e);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A set of changes to what documents are currently in view and out of view for
	 * a given query. These changes are sent to the LocalStore by the View (via
	 * the SyncEngine) and are used to pin / unpin documents as appropriate.
	 */
	class __PRIVATE_LocalViewChanges {
	    constructor(e, t, n, r) {
	        this.targetId = e, this.fromCache = t, this.Hi = n, this.Ji = r;
	    }
	    static Yi(e, t) {
	        let n = __PRIVATE_documentKeySet(), r = __PRIVATE_documentKeySet();
	        for (const e of t.docChanges) switch (e.type) {
	          case 0 /* ChangeType.Added */ :
	            n = n.add(e.doc.key);
	            break;

	          case 1 /* ChangeType.Removed */ :
	            r = r.add(e.doc.key);
	 // do nothing
	                }
	        return new __PRIVATE_LocalViewChanges(e, t.fromCache, n, r);
	    }
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A tracker to keep a record of important details during database local query
	 * execution.
	 */ class QueryContext {
	    constructor() {
	        /**
	         * Counts the number of documents passed through during local query execution.
	         */
	        this._documentReadCount = 0;
	    }
	    get documentReadCount() {
	        return this._documentReadCount;
	    }
	    incrementDocumentReadCount(e) {
	        this._documentReadCount += e;
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The Firestore query engine.
	 *
	 * Firestore queries can be executed in three modes. The Query Engine determines
	 * what mode to use based on what data is persisted. The mode only determines
	 * the runtime complexity of the query - the result set is equivalent across all
	 * implementations.
	 *
	 * The Query engine will use indexed-based execution if a user has configured
	 * any index that can be used to execute query (via `setIndexConfiguration()`).
	 * Otherwise, the engine will try to optimize the query by re-using a previously
	 * persisted query result. If that is not possible, the query will be executed
	 * via a full collection scan.
	 *
	 * Index-based execution is the default when available. The query engine
	 * supports partial indexed execution and merges the result from the index
	 * lookup with documents that have not yet been indexed. The index evaluation
	 * matches the backend's format and as such, the SDK can use indexing for all
	 * queries that the backend supports.
	 *
	 * If no index exists, the query engine tries to take advantage of the target
	 * document mapping in the TargetCache. These mappings exists for all queries
	 * that have been synced with the backend at least once and allow the query
	 * engine to only read documents that previously matched a query plus any
	 * documents that were edited after the query was last listened to.
	 *
	 * There are some cases when this optimization is not guaranteed to produce
	 * the same results as full collection scans. In these cases, query
	 * processing falls back to full scans. These cases are:
	 *
	 * - Limit queries where a document that matched the query previously no longer
	 *   matches the query.
	 *
	 * - Limit queries where a document edit may cause the document to sort below
	 *   another document that is in the local cache.
	 *
	 * - Queries that have never been CURRENT or free of limbo documents.
	 */
	class __PRIVATE_QueryEngine {
	    constructor() {
	        this.Zi = !1, this.Xi = !1, 
	        /**
	         * SDK only decides whether it should create index when collection size is
	         * larger than this.
	         */
	        this.es = 100, this.ts = 
	        /**
	 * This cost represents the evaluation result of
	 * (([index, docKey] + [docKey, docContent]) per document in the result set)
	 * / ([docKey, docContent] per documents in full collection scan) coming from
	 * experiment [enter PR experiment URL here].
	 */
	        function __PRIVATE_getDefaultRelativeIndexReadCostPerDocument() {
	            // These values were derived from an experiment where several members of the
	            // Firestore SDK team ran a performance test in various environments.
	            // Googlers can see b/299284287 for details.
	            return isSafari() ? 8 : __PRIVATE_getAndroidVersion(getUA()) > 0 ? 6 : 4;
	        }();
	    }
	    /** Sets the document view to query against. */    initialize(e, t) {
	        this.ns = e, this.indexManager = t, this.Zi = !0;
	    }
	    /** Returns all local documents matching the specified query. */    getDocumentsMatchingQuery(e, t, n, r) {
	        // Stores the result from executing the query; using this object is more
	        // convenient than passing the result between steps of the persistence
	        // transaction and improves readability comparatively.
	        const i = {
	            result: null
	        };
	        return this.rs(e, t).next((e => {
	            i.result = e;
	        })).next((() => {
	            if (!i.result) return this.ss(e, t, r, n).next((e => {
	                i.result = e;
	            }));
	        })).next((() => {
	            if (i.result) return;
	            const n = new QueryContext;
	            return this._s(e, t, n).next((r => {
	                if (i.result = r, this.Xi) return this.us(e, t, n, r.size);
	            }));
	        })).next((() => i.result));
	    }
	    us(e, t, n, r) {
	        return n.documentReadCount < this.es ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "SDK will not create cache indexes for query:", __PRIVATE_stringifyQuery(t), "since it only creates cache indexes for collection contains", "more than or equal to", this.es, "documents"), 
	        PersistencePromise.resolve()) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Query:", __PRIVATE_stringifyQuery(t), "scans", n.documentReadCount, "local documents and returns", r, "documents as results."), 
	        n.documentReadCount > this.ts * r ? (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "The SDK decides to create cache indexes for query:", __PRIVATE_stringifyQuery(t), "as using cache indexes may help improve performance."), 
	        this.indexManager.createTargetIndexes(e, __PRIVATE_queryToTarget(t))) : PersistencePromise.resolve());
	    }
	    /**
	     * Performs an indexed query that evaluates the query based on a collection's
	     * persisted index values. Returns `null` if an index is not available.
	     */    rs(e, t) {
	        if (__PRIVATE_queryMatchesAllDocuments(t)) 
	        // Queries that match all documents don't benefit from using
	        // key-based lookups. It is more efficient to scan all documents in a
	        // collection, rather than to perform individual lookups.
	        return PersistencePromise.resolve(null);
	        let n = __PRIVATE_queryToTarget(t);
	        return this.indexManager.getIndexType(e, n).next((r => 0 /* IndexType.NONE */ === r ? null : (null !== t.limit && 1 /* IndexType.PARTIAL */ === r && (
	        // We cannot apply a limit for targets that are served using a partial
	        // index. If a partial index will be used to serve the target, the
	        // query may return a superset of documents that match the target
	        // (e.g. if the index doesn't include all the target's filters), or
	        // may return the correct set of documents in the wrong order (e.g. if
	        // the index doesn't include a segment for one of the orderBys).
	        // Therefore, a limit should not be applied in such cases.
	        t = __PRIVATE_queryWithLimit(t, null, "F" /* LimitType.First */), n = __PRIVATE_queryToTarget(t)), 
	        this.indexManager.getDocumentsMatchingTarget(e, n).next((r => {
	            const i = __PRIVATE_documentKeySet(...r);
	            return this.ns.getDocuments(e, i).next((r => this.indexManager.getMinOffset(e, n).next((n => {
	                const s = this.cs(t, r);
	                return this.ls(t, s, i, n.readTime) ? this.rs(e, __PRIVATE_queryWithLimit(t, null, "F" /* LimitType.First */)) : this.hs(e, s, t, n);
	            }))));
	        })))));
	    }
	    /**
	     * Performs a query based on the target's persisted query mapping. Returns
	     * `null` if the mapping is not available or cannot be used.
	     */    ss(e, t, n, r) {
	        return __PRIVATE_queryMatchesAllDocuments(t) || r.isEqual(SnapshotVersion.min()) ? PersistencePromise.resolve(null) : this.ns.getDocuments(e, n).next((i => {
	            const s = this.cs(t, i);
	            return this.ls(t, s, n, r) ? PersistencePromise.resolve(null) : (__PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", r.toString(), __PRIVATE_stringifyQuery(t)), 
	            this.hs(e, s, t, __PRIVATE_newIndexOffsetSuccessorFromReadTime(r, N)).next((e => e)));
	        }));
	        // Queries that have never seen a snapshot without limbo free documents
	        // should also be run as a full collection scan.
	        }
	    /** Applies the query filter and sorting to the provided documents.  */    cs(e, t) {
	        // Sort the documents and re-apply the query filter since previously
	        // matching documents do not necessarily still match the query.
	        let n = new SortedSet(__PRIVATE_newQueryComparator(e));
	        return t.forEach(((t, r) => {
	            __PRIVATE_queryMatches(e, r) && (n = n.add(r));
	        })), n;
	    }
	    /**
	     * Determines if a limit query needs to be refilled from cache, making it
	     * ineligible for index-free execution.
	     *
	     * @param query - The query.
	     * @param sortedPreviousResults - The documents that matched the query when it
	     * was last synchronized, sorted by the query's comparator.
	     * @param remoteKeys - The document keys that matched the query at the last
	     * snapshot.
	     * @param limboFreeSnapshotVersion - The version of the snapshot when the
	     * query was last synchronized.
	     */    ls(e, t, n, r) {
	        if (null === e.limit) 
	        // Queries without limits do not need to be refilled.
	        return !1;
	        if (n.size !== t.size) 
	        // The query needs to be refilled if a previously matching document no
	        // longer matches.
	        return !0;
	        // Limit queries are not eligible for index-free query execution if there is
	        // a potential that an older document from cache now sorts before a document
	        // that was previously part of the limit. This, however, can only happen if
	        // the document at the edge of the limit goes out of limit.
	        // If a document that is not the limit boundary sorts differently,
	        // the boundary of the limit itself did not change and documents from cache
	        // will continue to be "rejected" by this boundary. Therefore, we can ignore
	        // any modifications that don't affect the last document.
	                const i = "F" /* LimitType.First */ === e.limitType ? t.last() : t.first();
	        return !!i && (i.hasPendingWrites || i.version.compareTo(r) > 0);
	    }
	    _s(e, t, n) {
	        return __PRIVATE_getLogLevel() <= LogLevel.DEBUG && __PRIVATE_logDebug("QueryEngine", "Using full collection scan to execute query:", __PRIVATE_stringifyQuery(t)), 
	        this.ns.getDocumentsMatchingQuery(e, t, IndexOffset.min(), n);
	    }
	    /**
	     * Combines the results from an indexed execution with the remaining documents
	     * that have not yet been indexed.
	     */    hs(e, t, n, r) {
	        // Retrieve all results for documents that were updated since the offset.
	        return this.ns.getDocumentsMatchingQuery(e, n, r).next((e => (
	        // Merge with existing results
	        t.forEach((t => {
	            e = e.insert(t.key, t);
	        })), e)));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Ot = "LocalStore", Nt = 3e8;

	/**
	 * The maximum time to leave a resume token buffered without writing it out.
	 * This value is arbitrary: it's long enough to avoid several writes
	 * (possibly indefinitely if updates come more frequently than this) but
	 * short enough that restarting after crashing will still have a pretty
	 * recent resume token.
	 */
	/**
	 * Implements `LocalStore` interface.
	 *
	 * Note: some field defined in this class might have public access level, but
	 * the class is not exported so they are only accessible from this module.
	 * This is useful to implement optional features (like bundles) in free
	 * functions, such that they are tree-shakeable.
	 */
	class __PRIVATE_LocalStoreImpl {
	    constructor(
	    /** Manages our in-memory or durable persistence. */
	    e, t, n, r) {
	        this.persistence = e, this.Ps = t, this.serializer = r, 
	        /**
	         * Maps a targetID to data about its target.
	         *
	         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
	         * of `applyRemoteEvent()` idempotent.
	         */
	        this.Ts = new SortedMap(__PRIVATE_primitiveComparator), 
	        /** Maps a target to its targetID. */
	        // TODO(wuandy): Evaluate if TargetId can be part of Target.
	        this.Is = new ObjectMap((e => __PRIVATE_canonifyTarget(e)), __PRIVATE_targetEquals), 
	        /**
	         * A per collection group index of the last read time processed by
	         * `getNewDocumentChanges()`.
	         *
	         * PORTING NOTE: This is only used for multi-tab synchronization.
	         */
	        this.Es = new Map, this.ds = e.getRemoteDocumentCache(), this.Hr = e.getTargetCache(), 
	        this.Yr = e.getBundleCache(), this.As(n);
	    }
	    As(e) {
	        // TODO(indexing): Add spec tests that test these components change after a
	        // user change
	        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(e), this.indexManager = this.persistence.getIndexManager(e), 
	        this.mutationQueue = this.persistence.getMutationQueue(e, this.indexManager), this.localDocuments = new LocalDocumentsView(this.ds, this.mutationQueue, this.documentOverlayCache, this.indexManager), 
	        this.ds.setIndexManager(this.indexManager), this.Ps.initialize(this.localDocuments, this.indexManager);
	    }
	    collectGarbage(e) {
	        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (t => e.collect(t, this.Ts)));
	    }
	}

	function __PRIVATE_newLocalStore(
	/** Manages our in-memory or durable persistence. */
	e, t, n, r) {
	    return new __PRIVATE_LocalStoreImpl(e, t, n, r);
	}

	/**
	 * Tells the LocalStore that the currently authenticated user has changed.
	 *
	 * In response the local store switches the mutation queue to the new user and
	 * returns any resulting document changes.
	 */
	// PORTING NOTE: Android and iOS only return the documents affected by the
	// change.
	async function __PRIVATE_localStoreHandleUserChange(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    return await n.persistence.runTransaction("Handle user change", "readonly", (e => {
	        // Swap out the mutation queue, grabbing the pending mutation batches
	        // before and after.
	        let r;
	        return n.mutationQueue.getAllMutationBatches(e).next((i => (r = i, n.As(t), n.mutationQueue.getAllMutationBatches(e)))).next((t => {
	            const i = [], s = [];
	            // Union the old/new changed keys.
	            let o = __PRIVATE_documentKeySet();
	            for (const e of r) {
	                i.push(e.batchId);
	                for (const t of e.mutations) o = o.add(t.key);
	            }
	            for (const e of t) {
	                s.push(e.batchId);
	                for (const t of e.mutations) o = o.add(t.key);
	            }
	            // Return the set of all (potentially) changed documents and the list
	            // of mutation batch IDs that were affected by change.
	                        return n.localDocuments.getDocuments(e, o).next((e => ({
	                Rs: e,
	                removedBatchIds: i,
	                addedBatchIds: s
	            })));
	        }));
	    }));
	}

	/* Accepts locally generated Mutations and commit them to storage. */
	/**
	 * Acknowledges the given batch.
	 *
	 * On the happy path when a batch is acknowledged, the local store will
	 *
	 *  + remove the batch from the mutation queue;
	 *  + apply the changes to the remote document cache;
	 *  + recalculate the latency compensated view implied by those changes (there
	 *    may be mutations in the queue that affect the documents but haven't been
	 *    acknowledged yet); and
	 *  + give the changed documents back the sync engine
	 *
	 * @returns The resulting (modified) documents.
	 */
	function __PRIVATE_localStoreAcknowledgeBatch(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (e => {
	        const r = t.batch.keys(), i = n.ds.newChangeBuffer({
	            trackRemovals: !0
	        });
	        return function __PRIVATE_applyWriteToRemoteDocuments(e, t, n, r) {
	            const i = n.batch, s = i.keys();
	            let o = PersistencePromise.resolve();
	            return s.forEach((e => {
	                o = o.next((() => r.getEntry(t, e))).next((t => {
	                    const s = n.docVersions.get(e);
	                    __PRIVATE_hardAssert(null !== s), t.version.compareTo(s) < 0 && (i.applyToRemoteDocument(t, n), 
	                    t.isValidDocument() && (
	                    // We use the commitVersion as the readTime rather than the
	                    // document's updateTime since the updateTime is not advanced
	                    // for updates that do not modify the underlying document.
	                    t.setReadTime(n.commitVersion), r.addEntry(t)));
	                }));
	            })), o.next((() => e.mutationQueue.removeMutationBatch(t, i)));
	        }
	        /** Returns the local view of the documents affected by a mutation batch. */
	        // PORTING NOTE: Multi-Tab only.
	        (n, e, t, i).next((() => i.apply(e))).next((() => n.mutationQueue.performConsistencyCheck(e))).next((() => n.documentOverlayCache.removeOverlaysForBatchId(e, r, t.batch.batchId))).next((() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e, function __PRIVATE_getKeysWithTransformResults(e) {
	            let t = __PRIVATE_documentKeySet();
	            for (let n = 0; n < e.mutationResults.length; ++n) {
	                e.mutationResults[n].transformResults.length > 0 && (t = t.add(e.batch.mutations[n].key));
	            }
	            return t;
	        }
	        /**
	 * Removes mutations from the MutationQueue for the specified batch;
	 * LocalDocuments will be recalculated.
	 *
	 * @returns The resulting modified documents.
	 */ (t)))).next((() => n.localDocuments.getDocuments(e, r)));
	    }));
	}

	/**
	 * Returns the last consistent snapshot processed (used by the RemoteStore to
	 * determine whether to buffer incoming snapshots from the backend).
	 */
	function __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e) {
	    const t = __PRIVATE_debugCast(e);
	    return t.persistence.runTransaction("Get last remote snapshot version", "readonly", (e => t.Hr.getLastRemoteSnapshotVersion(e)));
	}

	/**
	 * Updates the "ground-state" (remote) documents. We assume that the remote
	 * event reflects any write batches that have been acknowledged or rejected
	 * (i.e. we do not re-apply local mutations to updates from this event).
	 *
	 * LocalDocuments are re-calculated if there are remaining mutations in the
	 * queue.
	 */ function __PRIVATE_localStoreApplyRemoteEventToLocalCache(e, t) {
	    const n = __PRIVATE_debugCast(e), r = t.snapshotVersion;
	    let i = n.Ts;
	    return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (e => {
	        const s = n.ds.newChangeBuffer({
	            trackRemovals: !0
	        });
	        // Reset newTargetDataByTargetMap in case this transaction gets re-run.
	                i = n.Ts;
	        const o = [];
	        t.targetChanges.forEach(((s, _) => {
	            const a = i.get(_);
	            if (!a) return;
	            // Only update the remote keys if the target is still active. This
	            // ensures that we can persist the updated target data along with
	            // the updated assignment.
	                        o.push(n.Hr.removeMatchingKeys(e, s.removedDocuments, _).next((() => n.Hr.addMatchingKeys(e, s.addedDocuments, _))));
	            let u = a.withSequenceNumber(e.currentSequenceNumber);
	            null !== t.targetMismatches.get(_) ? u = u.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min()) : s.resumeToken.approximateByteSize() > 0 && (u = u.withResumeToken(s.resumeToken, r)), 
	            i = i.insert(_, u), 
	            // Update the target data if there are target changes (or if
	            // sufficient time has passed since the last update).
	            /**
	 * Returns true if the newTargetData should be persisted during an update of
	 * an active target. TargetData should always be persisted when a target is
	 * being released and should not call this function.
	 *
	 * While the target is active, TargetData updates can be omitted when nothing
	 * about the target has changed except metadata like the resume token or
	 * snapshot version. Occasionally it's worth the extra write to prevent these
	 * values from getting too stale after a crash, but this doesn't have to be
	 * too frequent.
	 */
	            function __PRIVATE_shouldPersistTargetData(e, t, n) {
	                // Always persist target data if we don't already have a resume token.
	                if (0 === e.resumeToken.approximateByteSize()) return !0;
	                // Don't allow resume token changes to be buffered indefinitely. This
	                // allows us to be reasonably up-to-date after a crash and avoids needing
	                // to loop over all active queries on shutdown. Especially in the browser
	                // we may not get time to do anything interesting while the current tab is
	                // closing.
	                                const r = t.snapshotVersion.toMicroseconds() - e.snapshotVersion.toMicroseconds();
	                if (r >= Nt) return !0;
	                // Otherwise if the only thing that has changed about a target is its resume
	                // token it's not worth persisting. Note that the RemoteStore keeps an
	                // in-memory view of the currently active targets which includes the current
	                // resume token, so stream failure or user changes will still use an
	                // up-to-date resume token regardless of what we do here.
	                                const i = n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size;
	                return i > 0;
	            }
	            /**
	 * Notifies local store of the changed views to locally pin documents.
	 */ (a, u, s) && o.push(n.Hr.updateTargetData(e, u));
	        }));
	        let _ = __PRIVATE_mutableDocumentMap(), a = __PRIVATE_documentKeySet();
	        // HACK: The only reason we allow a null snapshot version is so that we
	        // can synthesize remote events when we get permission denied errors while
	        // trying to resolve the state of a locally cached document that is in
	        // limbo.
	        if (t.documentUpdates.forEach((r => {
	            t.resolvedLimboDocuments.has(r) && o.push(n.persistence.referenceDelegate.updateLimboDocument(e, r));
	        })), 
	        // Each loop iteration only affects its "own" doc, so it's safe to get all
	        // the remote documents in advance in a single call.
	        o.push(__PRIVATE_populateDocumentChangeBuffer(e, s, t.documentUpdates).next((e => {
	            _ = e.Vs, a = e.fs;
	        }))), !r.isEqual(SnapshotVersion.min())) {
	            const t = n.Hr.getLastRemoteSnapshotVersion(e).next((t => n.Hr.setTargetsMetadata(e, e.currentSequenceNumber, r)));
	            o.push(t);
	        }
	        return PersistencePromise.waitFor(o).next((() => s.apply(e))).next((() => n.localDocuments.getLocalViewOfDocuments(e, _, a))).next((() => _));
	    })).then((e => (n.Ts = i, e)));
	}

	/**
	 * Populates document change buffer with documents from backend or a bundle.
	 * Returns the document changes resulting from applying those documents, and
	 * also a set of documents whose existence state are changed as a result.
	 *
	 * @param txn - Transaction to use to read existing documents from storage.
	 * @param documentBuffer - Document buffer to collect the resulted changes to be
	 *        applied to storage.
	 * @param documents - Documents to be applied.
	 */ function __PRIVATE_populateDocumentChangeBuffer(e, t, n) {
	    let r = __PRIVATE_documentKeySet(), i = __PRIVATE_documentKeySet();
	    return n.forEach((e => r = r.add(e))), t.getEntries(e, r).next((e => {
	        let r = __PRIVATE_mutableDocumentMap();
	        return n.forEach(((n, s) => {
	            const o = e.get(n);
	            // Check if see if there is a existence state change for this document.
	                        s.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n)), 
	            // Note: The order of the steps below is important, since we want
	            // to ensure that rejected limbo resolutions (which fabricate
	            // NoDocuments with SnapshotVersion.min()) never add documents to
	            // cache.
	            s.isNoDocument() && s.version.isEqual(SnapshotVersion.min()) ? (
	            // NoDocuments with SnapshotVersion.min() are used in manufactured
	            // events. We remove these documents from cache since we lost
	            // access.
	            t.removeEntry(n, s.readTime), r = r.insert(n, s)) : !o.isValidDocument() || s.version.compareTo(o.version) > 0 || 0 === s.version.compareTo(o.version) && o.hasPendingWrites ? (t.addEntry(s), 
	            r = r.insert(n, s)) : __PRIVATE_logDebug(Ot, "Ignoring outdated watch update for ", n, ". Current version:", o.version, " Watch version:", s.version);
	        })), {
	            Vs: r,
	            fs: i
	        };
	    }));
	}

	/**
	 * Gets the mutation batch after the passed in batchId in the mutation queue
	 * or null if empty.
	 * @param afterBatchId - If provided, the batch to search after.
	 * @returns The next mutation or null if there wasn't one.
	 */
	function __PRIVATE_localStoreGetNextMutationBatch(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    return n.persistence.runTransaction("Get next mutation batch", "readonly", (e => (void 0 === t && (t = Q), 
	    n.mutationQueue.getNextMutationBatchAfterBatchId(e, t))));
	}

	/**
	 * Reads the current value of a Document with a given key or null if not
	 * found - used for testing.
	 */
	/**
	 * Assigns the given target an internal ID so that its results can be pinned so
	 * they don't get GC'd. A target must be allocated in the local store before
	 * the store can be used to manage its view.
	 *
	 * Allocating an already allocated `Target` will return the existing `TargetData`
	 * for that `Target`.
	 */
	function __PRIVATE_localStoreAllocateTarget(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    return n.persistence.runTransaction("Allocate target", "readwrite", (e => {
	        let r;
	        return n.Hr.getTargetData(e, t).next((i => i ? (
	        // This target has been listened to previously, so reuse the
	        // previous targetID.
	        // TODO(mcg): freshen last accessed date?
	        r = i, PersistencePromise.resolve(r)) : n.Hr.allocateTargetId(e).next((i => (r = new TargetData(t, i, "TargetPurposeListen" /* TargetPurpose.Listen */ , e.currentSequenceNumber), 
	        n.Hr.addTargetData(e, r).next((() => r)))))));
	    })).then((e => {
	        // If Multi-Tab is enabled, the existing target data may be newer than
	        // the in-memory data
	        const r = n.Ts.get(e.targetId);
	        return (null === r || e.snapshotVersion.compareTo(r.snapshotVersion) > 0) && (n.Ts = n.Ts.insert(e.targetId, e), 
	        n.Is.set(t, e.targetId)), e;
	    }));
	}

	/**
	 * Returns the TargetData as seen by the LocalStore, including updates that may
	 * have not yet been persisted to the TargetCache.
	 */
	// Visible for testing.
	/**
	 * Unpins all the documents associated with the given target. If
	 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
	 * directly removes the associated target data from the target cache.
	 *
	 * Releasing a non-existing `Target` is a no-op.
	 */
	// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
	async function __PRIVATE_localStoreReleaseTarget(e, t, n) {
	    const r = __PRIVATE_debugCast(e), i = r.Ts.get(t), s = n ? "readwrite" : "readwrite-primary";
	    try {
	        n || await r.persistence.runTransaction("Release target", s, (e => r.persistence.referenceDelegate.removeTarget(e, i)));
	    } catch (e) {
	        if (!__PRIVATE_isIndexedDbTransactionError(e)) throw e;
	        // All `releaseTarget` does is record the final metadata state for the
	        // target, but we've been recording this periodically during target
	        // activity. If we lose this write this could cause a very slight
	        // difference in the order of target deletion during GC, but we
	        // don't define exact LRU semantics so this is acceptable.
	        __PRIVATE_logDebug(Ot, `Failed to update sequence numbers for target ${t}: ${e}`);
	    }
	    r.Ts = r.Ts.remove(t), r.Is.delete(i.target);
	}

	/**
	 * Runs the specified query against the local store and returns the results,
	 * potentially taking advantage of query data from previous executions (such
	 * as the set of remote keys).
	 *
	 * @param usePreviousResults - Whether results from previous executions can
	 * be used to optimize this query execution.
	 */ function __PRIVATE_localStoreExecuteQuery(e, t, n) {
	    const r = __PRIVATE_debugCast(e);
	    let i = SnapshotVersion.min(), s = __PRIVATE_documentKeySet();
	    return r.persistence.runTransaction("Execute query", "readwrite", (// Use readwrite instead of readonly so indexes can be created
	    // Use readwrite instead of readonly so indexes can be created
	    e => function __PRIVATE_localStoreGetTargetData(e, t, n) {
	        const r = __PRIVATE_debugCast(e), i = r.Is.get(n);
	        return void 0 !== i ? PersistencePromise.resolve(r.Ts.get(i)) : r.Hr.getTargetData(t, n);
	    }(r, e, __PRIVATE_queryToTarget(t)).next((t => {
	        if (t) return i = t.lastLimboFreeSnapshotVersion, r.Hr.getMatchingKeysForTargetId(e, t.targetId).next((e => {
	            s = e;
	        }));
	    })).next((() => r.Ps.getDocumentsMatchingQuery(e, t, n ? i : SnapshotVersion.min(), n ? s : __PRIVATE_documentKeySet()))).next((e => (__PRIVATE_setMaxReadTime(r, __PRIVATE_queryCollectionGroup(t), e), 
	    {
	        documents: e,
	        gs: s
	    })))));
	}

	/** Sets the collection group's maximum read time from the given documents. */
	// PORTING NOTE: Multi-Tab only.
	function __PRIVATE_setMaxReadTime(e, t, n) {
	    let r = e.Es.get(t) || SnapshotVersion.min();
	    n.forEach(((e, t) => {
	        t.readTime.compareTo(r) > 0 && (r = t.readTime);
	    })), e.Es.set(t, r);
	}

	/**
	 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
	 * mutable and keeps track of all pending mutations, which allows us to
	 * update the range of pending mutation batch IDs as new mutations are added or
	 * removed.
	 *
	 * The data in `LocalClientState` is not read from WebStorage and instead
	 * updated via its instance methods. The updated state can be serialized via
	 * `toWebStorageJSON()`.
	 */
	// Visible for testing.
	class __PRIVATE_LocalClientState {
	    constructor() {
	        this.activeTargetIds = __PRIVATE_targetIdSet();
	    }
	    Ds(e) {
	        this.activeTargetIds = this.activeTargetIds.add(e);
	    }
	    vs(e) {
	        this.activeTargetIds = this.activeTargetIds.delete(e);
	    }
	    /**
	     * Converts this entry into a JSON-encoded format we can use for WebStorage.
	     * Does not encode `clientId` as it is part of the key in WebStorage.
	     */    bs() {
	        const e = {
	            activeTargetIds: this.activeTargetIds.toArray(),
	            updateTimeMs: Date.now()
	        };
	        return JSON.stringify(e);
	    }
	}

	class __PRIVATE_MemorySharedClientState {
	    constructor() {
	        this.ho = new __PRIVATE_LocalClientState, this.Po = {}, this.onlineStateHandler = null, 
	        this.sequenceNumberHandler = null;
	    }
	    addPendingMutation(e) {
	        // No op.
	    }
	    updateMutationState(e, t, n) {
	        // No op.
	    }
	    addLocalQueryTarget(e, t = !0) {
	        return t && this.ho.Ds(e), this.Po[e] || "not-current";
	    }
	    updateQueryState(e, t, n) {
	        this.Po[e] = t;
	    }
	    removeLocalQueryTarget(e) {
	        this.ho.vs(e);
	    }
	    isLocalQueryTarget(e) {
	        return this.ho.activeTargetIds.has(e);
	    }
	    clearQueryState(e) {
	        delete this.Po[e];
	    }
	    getAllActiveQueryTargets() {
	        return this.ho.activeTargetIds;
	    }
	    isActiveQueryTarget(e) {
	        return this.ho.activeTargetIds.has(e);
	    }
	    start() {
	        return this.ho = new __PRIVATE_LocalClientState, Promise.resolve();
	    }
	    handleUserChange(e, t, n) {
	        // No op.
	    }
	    setOnlineState(e) {
	        // No op.
	    }
	    shutdown() {}
	    writeSequenceNumber(e) {}
	    notifyBundleLoaded(e) {
	        // No op.
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ class __PRIVATE_NoopConnectivityMonitor {
	    To(e) {
	        // No-op.
	    }
	    shutdown() {
	        // No-op.
	    }
	}

	/**
	 * @license
	 * Copyright 2019 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
	/* eslint-disable no-restricted-globals */ const Qt = "ConnectivityMonitor";

	/**
	 * Browser implementation of ConnectivityMonitor.
	 */ class __PRIVATE_BrowserConnectivityMonitor {
	    constructor() {
	        this.Io = () => this.Eo(), this.Ao = () => this.Ro(), this.Vo = [], this.mo();
	    }
	    To(e) {
	        this.Vo.push(e);
	    }
	    shutdown() {
	        window.removeEventListener("online", this.Io), window.removeEventListener("offline", this.Ao);
	    }
	    mo() {
	        window.addEventListener("online", this.Io), window.addEventListener("offline", this.Ao);
	    }
	    Eo() {
	        __PRIVATE_logDebug(Qt, "Network connectivity changed: AVAILABLE");
	        for (const e of this.Vo) e(0 /* NetworkStatus.AVAILABLE */);
	    }
	    Ro() {
	        __PRIVATE_logDebug(Qt, "Network connectivity changed: UNAVAILABLE");
	        for (const e of this.Vo) e(1 /* NetworkStatus.UNAVAILABLE */);
	    }
	    // TODO(chenbrian): Consider passing in window either into this component or
	    // here for testing via FakeWindow.
	    /** Checks that all used attributes of window are available. */
	    static D() {
	        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
	    }
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * The value returned from the most recent invocation of
	 * `generateUniqueDebugId()`, or null if it has never been invoked.
	 */ let $t = null;

	/**
	 * Generates and returns an initial value for `lastUniqueDebugId`.
	 *
	 * The returned value is randomly selected from a range of integers that are
	 * represented as 8 hexadecimal digits. This means that (within reason) any
	 * numbers generated by incrementing the returned number by 1 will also be
	 * represented by 8 hexadecimal digits. This leads to all "IDs" having the same
	 * length when converted to a hexadecimal string, making reading logs containing
	 * these IDs easier to follow. And since the return value is randomly selected
	 * it will help to differentiate between logs from different executions.
	 */
	/**
	 * Generates and returns a unique ID as a hexadecimal string.
	 *
	 * The returned ID is intended to be used in debug logging messages to help
	 * correlate log messages that may be spatially separated in the logs, but
	 * logically related. For example, a network connection could include the same
	 * "debug ID" string in all of its log messages to help trace a specific
	 * connection over time.
	 *
	 * @return the 10-character generated ID (e.g. "0xa1b2c3d4").
	 */
	function __PRIVATE_generateUniqueDebugId() {
	    return null === $t ? $t = function __PRIVATE_generateInitialUniqueDebugId() {
	        return 268435456 + Math.round(2147483648 * Math.random());
	    }() : $t++, "0x" + $t.toString(16);
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Kt = "RestConnection", Ut = {
	    BatchGetDocuments: "batchGet",
	    Commit: "commit",
	    RunQuery: "runQuery",
	    RunAggregationQuery: "runAggregationQuery"
	};

	/**
	 * Maps RPC names to the corresponding REST endpoint name.
	 *
	 * We use array notation to avoid mangling.
	 */
	/**
	 * Base class for all Rest-based connections to the backend (WebChannel and
	 * HTTP).
	 */
	class __PRIVATE_RestConnection {
	    get fo() {
	        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine
	        // where to run the query, and expect the `request` to NOT specify the "path".
	        return !1;
	    }
	    constructor(e) {
	        this.databaseInfo = e, this.databaseId = e.databaseId;
	        const t = e.ssl ? "https" : "http", n = encodeURIComponent(this.databaseId.projectId), r = encodeURIComponent(this.databaseId.database);
	        this.po = t + "://" + e.host, this.yo = `projects/${n}/databases/${r}`, this.wo = this.databaseId.database === rt ? `project_id=${n}` : `project_id=${n}&database_id=${r}`;
	    }
	    So(e, t, n, r, i) {
	        const s = __PRIVATE_generateUniqueDebugId(), o = this.bo(e, t.toUriEncodedString());
	        __PRIVATE_logDebug(Kt, `Sending RPC '${e}' ${s}:`, o, n);
	        const _ = {
	            "google-cloud-resource-prefix": this.yo,
	            "x-goog-request-params": this.wo
	        };
	        return this.Do(_, r, i), this.vo(e, o, _, n).then((t => (__PRIVATE_logDebug(Kt, `Received RPC '${e}' ${s}: `, t), 
	        t)), (t => {
	            throw __PRIVATE_logWarn(Kt, `RPC '${e}' ${s} failed with error: `, t, "url: ", o, "request:", n), 
	            t;
	        }));
	    }
	    Co(e, t, n, r, i, s) {
	        // The REST API automatically aggregates all of the streamed results, so we
	        // can just use the normal invoke() method.
	        return this.So(e, t, n, r, i);
	    }
	    /**
	     * Modifies the headers for a request, adding any authorization token if
	     * present and any additional headers for the request.
	     */    Do(e, t, n) {
	        e["X-Goog-Api-Client"] = 
	        // SDK_VERSION is updated to different value at runtime depending on the entry point,
	        // so we need to get its value when we need it in a function.
	        function __PRIVATE_getGoogApiClientValue() {
	            return "gl-js/ fire/" + D;
	        }(), 
	        // Content-Type: text/plain will avoid preflight requests which might
	        // mess with CORS and redirects by proxies. If we add custom headers
	        // we will need to change this code to potentially use the $httpOverwrite
	        // parameter supported by ESF to avoid triggering preflight requests.
	        e["Content-Type"] = "text/plain", this.databaseInfo.appId && (e["X-Firebase-GMPID"] = this.databaseInfo.appId), 
	        t && t.headers.forEach(((t, n) => e[n] = t)), n && n.headers.forEach(((t, n) => e[n] = t));
	    }
	    bo(e, t) {
	        const n = Ut[e];
	        return `${this.po}/v1/${t}:${n}`;
	    }
	    /**
	     * Closes and cleans up any resources associated with the connection. This
	     * implementation is a no-op because there are no resources associated
	     * with the RestConnection that need to be cleaned up.
	     */    terminate() {
	        // No-op
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Provides a simple helper class that implements the Stream interface to
	 * bridge to other implementations that are streams but do not implement the
	 * interface. The stream callbacks are invoked with the callOn... methods.
	 */ class __PRIVATE_StreamBridge {
	    constructor(e) {
	        this.Fo = e.Fo, this.Mo = e.Mo;
	    }
	    xo(e) {
	        this.Oo = e;
	    }
	    No(e) {
	        this.Bo = e;
	    }
	    Lo(e) {
	        this.ko = e;
	    }
	    onMessage(e) {
	        this.qo = e;
	    }
	    close() {
	        this.Mo();
	    }
	    send(e) {
	        this.Fo(e);
	    }
	    Qo() {
	        this.Oo();
	    }
	    $o() {
	        this.Bo();
	    }
	    Ko(e) {
	        this.ko(e);
	    }
	    Uo(e) {
	        this.qo(e);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Wt = "WebChannelConnection";

	class __PRIVATE_WebChannelConnection extends __PRIVATE_RestConnection {
	    constructor(e) {
	        super(e), this.forceLongPolling = e.forceLongPolling, this.autoDetectLongPolling = e.autoDetectLongPolling, 
	        this.useFetchStreams = e.useFetchStreams, this.longPollingOptions = e.longPollingOptions;
	    }
	    vo(e, t, n, r) {
	        const i = __PRIVATE_generateUniqueDebugId();
	        return new Promise(((s, o) => {
	            const _ = new XhrIo;
	            _.setWithCredentials(!0), _.listenOnce(EventType.COMPLETE, (() => {
	                try {
	                    switch (_.getLastErrorCode()) {
	                      case ErrorCode.NO_ERROR:
	                        const t = _.getResponseJson();
	                        __PRIVATE_logDebug(Wt, `XHR for RPC '${e}' ${i} received:`, JSON.stringify(t)), 
	                        s(t);
	                        break;

	                      case ErrorCode.TIMEOUT:
	                        __PRIVATE_logDebug(Wt, `RPC '${e}' ${i} timed out`), o(new FirestoreError(C.DEADLINE_EXCEEDED, "Request time out"));
	                        break;

	                      case ErrorCode.HTTP_ERROR:
	                        const n = _.getStatus();
	                        if (__PRIVATE_logDebug(Wt, `RPC '${e}' ${i} failed with status:`, n, "response text:", _.getResponseText()), 
	                        n > 0) {
	                            let e = _.getResponseJson();
	                            Array.isArray(e) && (e = e[0]);
	                            const t = null == e ? void 0 : e.error;
	                            if (t && t.status && t.message) {
	                                const e = function __PRIVATE_mapCodeFromHttpResponseErrorStatus(e) {
	                                    const t = e.toLowerCase().replace(/_/g, "-");
	                                    return Object.values(C).indexOf(t) >= 0 ? t : C.UNKNOWN;
	                                }(t.status);
	                                o(new FirestoreError(e, t.message));
	                            } else o(new FirestoreError(C.UNKNOWN, "Server responded with status " + _.getStatus()));
	                        } else 
	                        // If we received an HTTP_ERROR but there's no status code,
	                        // it's most probably a connection issue
	                        o(new FirestoreError(C.UNAVAILABLE, "Connection failed."));
	                        break;

	                      default:
	                        fail();
	                    }
	                } finally {
	                    __PRIVATE_logDebug(Wt, `RPC '${e}' ${i} completed.`);
	                }
	            }));
	            const a = JSON.stringify(r);
	            __PRIVATE_logDebug(Wt, `RPC '${e}' ${i} sending request:`, r), _.send(t, "POST", a, n, 15);
	        }));
	    }
	    Wo(e, t, n) {
	        const r = __PRIVATE_generateUniqueDebugId(), i = [ this.po, "/", "google.firestore.v1.Firestore", "/", e, "/channel" ], s = createWebChannelTransport(), o = getStatEventTarget(), _ = {
	            // Required for backend stickiness, routing behavior is based on this
	            // parameter.
	            httpSessionIdParam: "gsessionid",
	            initMessageHeaders: {},
	            messageUrlParams: {
	                // This param is used to improve routing and project isolation by the
	                // backend and must be included in every request.
	                database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
	            },
	            sendRawJson: !0,
	            supportsCrossDomainXhr: !0,
	            internalChannelParams: {
	                // Override the default timeout (randomized between 10-20 seconds) since
	                // a large write batch on a slow internet connection may take a long
	                // time to send to the backend. Rather than have WebChannel impose a
	                // tight timeout which could lead to infinite timeouts and retries, we
	                // set it very large (5-10 minutes) and rely on the browser's builtin
	                // timeouts to kick in if the request isn't working.
	                forwardChannelRequestTimeoutMs: 6e5
	            },
	            forceLongPolling: this.forceLongPolling,
	            detectBufferingProxy: this.autoDetectLongPolling
	        }, a = this.longPollingOptions.timeoutSeconds;
	        void 0 !== a && (_.longPollingTimeout = Math.round(1e3 * a)), this.useFetchStreams && (_.useFetchStreams = !0), 
	        this.Do(_.initMessageHeaders, t, n), 
	        // Sending the custom headers we just added to request.initMessageHeaders
	        // (Authorization, etc.) will trigger the browser to make a CORS preflight
	        // request because the XHR will no longer meet the criteria for a "simple"
	        // CORS request:
	        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
	        // Therefore to avoid the CORS preflight request (an extra network
	        // roundtrip), we use the encodeInitMessageHeaders option to specify that
	        // the headers should instead be encoded in the request's POST payload,
	        // which is recognized by the webchannel backend.
	        _.encodeInitMessageHeaders = !0;
	        const u = i.join("");
	        __PRIVATE_logDebug(Wt, `Creating RPC '${e}' stream ${r}: ${u}`, _);
	        const c = s.createWebChannel(u, _);
	        // WebChannel supports sending the first message with the handshake - saving
	        // a network round trip. However, it will have to call send in the same
	        // JS event loop as open. In order to enforce this, we delay actually
	        // opening the WebChannel until send is called. Whether we have called
	        // open is tracked with this variable.
	                let l = !1, h = !1;
	        // A flag to determine whether the stream was closed (by us or through an
	        // error/close event) to avoid delivering multiple close events or sending
	        // on a closed stream
	                const P = new __PRIVATE_StreamBridge({
	            Fo: t => {
	                h ? __PRIVATE_logDebug(Wt, `Not sending because RPC '${e}' stream ${r} is closed:`, t) : (l || (__PRIVATE_logDebug(Wt, `Opening RPC '${e}' stream ${r} transport.`), 
	                c.open(), l = !0), __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} sending:`, t), 
	                c.send(t));
	            },
	            Mo: () => c.close()
	        }), __PRIVATE_unguardedEventListen = (e, t, n) => {
	            // TODO(dimond): closure typing seems broken because WebChannel does
	            // not implement goog.events.Listenable
	            e.listen(t, (e => {
	                try {
	                    n(e);
	                } catch (e) {
	                    setTimeout((() => {
	                        throw e;
	                    }), 0);
	                }
	            }));
	        };
	        // Closure events are guarded and exceptions are swallowed, so catch any
	        // exception and rethrow using a setTimeout so they become visible again.
	        // Note that eventually this function could go away if we are confident
	        // enough the code is exception free.
	                return __PRIVATE_unguardedEventListen(c, WebChannel.EventType.OPEN, (() => {
	            h || (__PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} transport opened.`), P.Qo());
	        })), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.CLOSE, (() => {
	            h || (h = !0, __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} transport closed`), 
	            P.Ko());
	        })), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.ERROR, (t => {
	            h || (h = !0, __PRIVATE_logWarn(Wt, `RPC '${e}' stream ${r} transport errored:`, t), 
	            P.Ko(new FirestoreError(C.UNAVAILABLE, "The operation could not be completed")));
	        })), __PRIVATE_unguardedEventListen(c, WebChannel.EventType.MESSAGE, (t => {
	            var n;
	            if (!h) {
	                const i = t.data[0];
	                __PRIVATE_hardAssert(!!i);
	                // TODO(b/35143891): There is a bug in One Platform that caused errors
	                // (and only errors) to be wrapped in an extra array. To be forward
	                // compatible with the bug we need to check either condition. The latter
	                // can be removed once the fix has been rolled out.
	                // Use any because msgData.error is not typed.
	                const s = i, o = (null == s ? void 0 : s.error) || (null === (n = s[0]) || void 0 === n ? void 0 : n.error);
	                if (o) {
	                    __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} received error:`, o);
	                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
	                    const t = o.status;
	                    let n = 
	                    /**
	 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
	 *
	 * @returns The Code equivalent to the given status string or undefined if
	 *     there is no match.
	 */
	                    function __PRIVATE_mapCodeFromRpcStatus(e) {
	                        // lookup by string
	                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
	                        const t = Et[e];
	                        if (void 0 !== t) return __PRIVATE_mapCodeFromRpcCode(t);
	                    }(t), i = o.message;
	                    void 0 === n && (n = C.INTERNAL, i = "Unknown error status: " + t + " with message " + o.message), 
	                    // Mark closed so no further events are propagated
	                    h = !0, P.Ko(new FirestoreError(n, i)), c.close();
	                } else __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} received:`, i), P.Uo(i);
	            }
	        })), __PRIVATE_unguardedEventListen(o, Event.STAT_EVENT, (t => {
	            t.stat === Stat.PROXY ? __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} detected buffering proxy`) : t.stat === Stat.NOPROXY && __PRIVATE_logDebug(Wt, `RPC '${e}' stream ${r} detected no buffering proxy`);
	        })), setTimeout((() => {
	            // Technically we could/should wait for the WebChannel opened event,
	            // but because we want to send the first message with the WebChannel
	            // handshake we pretend the channel opened here (asynchronously), and
	            // then delay the actual open until the first message is sent.
	            P.$o();
	        }), 0), P;
	    }
	}

	/** The Platform's 'document' implementation or null if not available. */ function getDocument() {
	    // `document` is not always available, e.g. in ReactNative and WebWorkers.
	    // eslint-disable-next-line no-restricted-globals
	    return "undefined" != typeof document ? document : null;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ function __PRIVATE_newSerializer(e) {
	    return new JsonProtoSerializer(e, /* useProto3Json= */ !0);
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A helper for running delayed tasks following an exponential backoff curve
	 * between attempts.
	 *
	 * Each delay is made up of a "base" delay which follows the exponential
	 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
	 * base delay. This prevents clients from accidentally synchronizing their
	 * delays causing spikes of load to the backend.
	 */
	class __PRIVATE_ExponentialBackoff {
	    constructor(
	    /**
	     * The AsyncQueue to run backoff operations on.
	     */
	    e, 
	    /**
	     * The ID to use when scheduling backoff operations on the AsyncQueue.
	     */
	    t, 
	    /**
	     * The initial delay (used as the base delay on the first retry attempt).
	     * Note that jitter will still be applied, so the actual delay could be as
	     * little as 0.5*initialDelayMs.
	     */
	    n = 1e3
	    /**
	     * The multiplier to use to determine the extended base delay after each
	     * attempt.
	     */ , r = 1.5
	    /**
	     * The maximum base delay after which no further backoff is performed.
	     * Note that jitter will still be applied, so the actual delay could be as
	     * much as 1.5*maxDelayMs.
	     */ , i = 6e4) {
	        this.Ti = e, this.timerId = t, this.Go = n, this.zo = r, this.jo = i, this.Ho = 0, 
	        this.Jo = null, 
	        /** The last backoff attempt, as epoch milliseconds. */
	        this.Yo = Date.now(), this.reset();
	    }
	    /**
	     * Resets the backoff delay.
	     *
	     * The very next backoffAndWait() will have no delay. If it is called again
	     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
	     * subsequent ones will increase according to the backoffFactor.
	     */    reset() {
	        this.Ho = 0;
	    }
	    /**
	     * Resets the backoff delay to the maximum delay (e.g. for use after a
	     * RESOURCE_EXHAUSTED error).
	     */    Zo() {
	        this.Ho = this.jo;
	    }
	    /**
	     * Returns a promise that resolves after currentDelayMs, and increases the
	     * delay for any subsequent attempts. If there was a pending backoff operation
	     * already, it will be canceled.
	     */    Xo(e) {
	        // Cancel any pending backoff operation.
	        this.cancel();
	        // First schedule using the current base (which may be 0 and should be
	        // honored as such).
	        const t = Math.floor(this.Ho + this.e_()), n = Math.max(0, Date.now() - this.Yo), r = Math.max(0, t - n);
	        // Guard against lastAttemptTime being in the future due to a clock change.
	                r > 0 && __PRIVATE_logDebug("ExponentialBackoff", `Backing off for ${r} ms (base delay: ${this.Ho} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`), 
	        this.Jo = this.Ti.enqueueAfterDelay(this.timerId, r, (() => (this.Yo = Date.now(), 
	        e()))), 
	        // Apply backoff factor to determine next delay and ensure it is within
	        // bounds.
	        this.Ho *= this.zo, this.Ho < this.Go && (this.Ho = this.Go), this.Ho > this.jo && (this.Ho = this.jo);
	    }
	    t_() {
	        null !== this.Jo && (this.Jo.skipDelay(), this.Jo = null);
	    }
	    cancel() {
	        null !== this.Jo && (this.Jo.cancel(), this.Jo = null);
	    }
	    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    e_() {
	        return (Math.random() - .5) * this.Ho;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Gt = "PersistentStream";

	/** The time a stream stays open after it is marked idle. */
	/**
	 * A PersistentStream is an abstract base class that represents a streaming RPC
	 * to the Firestore backend. It's built on top of the connections own support
	 * for streaming RPCs, and adds several critical features for our clients:
	 *
	 *   - Exponential backoff on failure
	 *   - Authentication via CredentialsProvider
	 *   - Dispatching all callbacks into the shared worker queue
	 *   - Closing idle streams after 60 seconds of inactivity
	 *
	 * Subclasses of PersistentStream implement serialization of models to and
	 * from the JSON representation of the protocol buffers for a specific
	 * streaming RPC.
	 *
	 * ## Starting and Stopping
	 *
	 * Streaming RPCs are stateful and need to be start()ed before messages can
	 * be sent and received. The PersistentStream will call the onOpen() function
	 * of the listener once the stream is ready to accept requests.
	 *
	 * Should a start() fail, PersistentStream will call the registered onClose()
	 * listener with a FirestoreError indicating what went wrong.
	 *
	 * A PersistentStream can be started and stopped repeatedly.
	 *
	 * Generic types:
	 *  SendType: The type of the outgoing message of the underlying
	 *    connection stream
	 *  ReceiveType: The type of the incoming message of the underlying
	 *    connection stream
	 *  ListenerType: The type of the listener that will be used for callbacks
	 */
	class __PRIVATE_PersistentStream {
	    constructor(e, t, n, r, i, s, o, _) {
	        this.Ti = e, this.n_ = n, this.r_ = r, this.connection = i, this.authCredentialsProvider = s, 
	        this.appCheckCredentialsProvider = o, this.listener = _, this.state = 0 /* PersistentStreamState.Initial */ , 
	        /**
	         * A close count that's incremented every time the stream is closed; used by
	         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
	         * close.
	         */
	        this.i_ = 0, this.s_ = null, this.o_ = null, this.stream = null, 
	        /**
	         * Count of response messages received.
	         */
	        this.__ = 0, this.a_ = new __PRIVATE_ExponentialBackoff(e, t);
	    }
	    /**
	     * Returns true if start() has been called and no error has occurred. True
	     * indicates the stream is open or in the process of opening (which
	     * encompasses respecting backoff, getting auth tokens, and starting the
	     * actual RPC). Use isOpen() to determine if the stream is open and ready for
	     * outbound requests.
	     */    u_() {
	        return 1 /* PersistentStreamState.Starting */ === this.state || 5 /* PersistentStreamState.Backoff */ === this.state || this.c_();
	    }
	    /**
	     * Returns true if the underlying RPC is open (the onOpen() listener has been
	     * called) and the stream is ready for outbound requests.
	     */    c_() {
	        return 2 /* PersistentStreamState.Open */ === this.state || 3 /* PersistentStreamState.Healthy */ === this.state;
	    }
	    /**
	     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
	     * not immediately ready for use: onOpen() will be invoked when the RPC is
	     * ready for outbound requests, at which point isOpen() will return true.
	     *
	     * When start returns, isStarted() will return true.
	     */    start() {
	        this.__ = 0, 4 /* PersistentStreamState.Error */ !== this.state ? this.auth() : this.l_();
	    }
	    /**
	     * Stops the RPC. This call is idempotent and allowed regardless of the
	     * current isStarted() state.
	     *
	     * When stop returns, isStarted() and isOpen() will both return false.
	     */    async stop() {
	        this.u_() && await this.close(0 /* PersistentStreamState.Initial */);
	    }
	    /**
	     * After an error the stream will usually back off on the next attempt to
	     * start it. If the error warrants an immediate restart of the stream, the
	     * sender can use this to indicate that the receiver should not back off.
	     *
	     * Each error will call the onClose() listener. That function can decide to
	     * inhibit backoff if required.
	     */    h_() {
	        this.state = 0 /* PersistentStreamState.Initial */ , this.a_.reset();
	    }
	    /**
	     * Marks this stream as idle. If no further actions are performed on the
	     * stream for one minute, the stream will automatically close itself and
	     * notify the stream's onClose() handler with Status.OK. The stream will then
	     * be in a !isStarted() state, requiring the caller to start the stream again
	     * before further use.
	     *
	     * Only streams that are in state 'Open' can be marked idle, as all other
	     * states imply pending network operations.
	     */    P_() {
	        // Starts the idle time if we are in state 'Open' and are not yet already
	        // running a timer (in which case the previous idle timeout still applies).
	        this.c_() && null === this.s_ && (this.s_ = this.Ti.enqueueAfterDelay(this.n_, 6e4, (() => this.T_())));
	    }
	    /** Sends a message to the underlying stream. */    I_(e) {
	        this.E_(), this.stream.send(e);
	    }
	    /** Called by the idle timer when the stream should close due to inactivity. */    async T_() {
	        if (this.c_()) 
	        // When timing out an idle stream there's no reason to force the stream into backoff when
	        // it restarts so set the stream state to Initial instead of Error.
	        return this.close(0 /* PersistentStreamState.Initial */);
	    }
	    /** Marks the stream as active again. */    E_() {
	        this.s_ && (this.s_.cancel(), this.s_ = null);
	    }
	    /** Cancels the health check delayed operation. */    d_() {
	        this.o_ && (this.o_.cancel(), this.o_ = null);
	    }
	    /**
	     * Closes the stream and cleans up as necessary:
	     *
	     * * closes the underlying GRPC stream;
	     * * calls the onClose handler with the given 'error';
	     * * sets internal stream state to 'finalState';
	     * * adjusts the backoff timer based on the error
	     *
	     * A new stream can be opened by calling start().
	     *
	     * @param finalState - the intended state of the stream after closing.
	     * @param error - the error the connection was closed with.
	     */    async close(e, t) {
	        // Cancel any outstanding timers (they're guaranteed not to execute).
	        this.E_(), this.d_(), this.a_.cancel(), 
	        // Invalidates any stream-related callbacks (e.g. from auth or the
	        // underlying stream), guaranteeing they won't execute.
	        this.i_++, 4 /* PersistentStreamState.Error */ !== e ? 
	        // If this is an intentional close ensure we don't delay our next connection attempt.
	        this.a_.reset() : t && t.code === C.RESOURCE_EXHAUSTED ? (
	        // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
	        __PRIVATE_logError(t.toString()), __PRIVATE_logError("Using maximum backoff delay to prevent overloading the backend."), 
	        this.a_.Zo()) : t && t.code === C.UNAUTHENTICATED && 3 /* PersistentStreamState.Healthy */ !== this.state && (
	        // "unauthenticated" error means the token was rejected. This should rarely
	        // happen since both Auth and AppCheck ensure a sufficient TTL when we
	        // request a token. If a user manually resets their system clock this can
	        // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
	        // before we received the first message and we need to invalidate the token
	        // to ensure that we fetch a new token.
	        this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), 
	        // Clean up the underlying stream because we are no longer interested in events.
	        null !== this.stream && (this.A_(), this.stream.close(), this.stream = null), 
	        // This state must be assigned before calling onClose() to allow the callback to
	        // inhibit backoff or otherwise manipulate the state in its non-started state.
	        this.state = e, 
	        // Notify the listener that the stream closed.
	        await this.listener.Lo(t);
	    }
	    /**
	     * Can be overridden to perform additional cleanup before the stream is closed.
	     * Calling super.tearDown() is not required.
	     */    A_() {}
	    auth() {
	        this.state = 1 /* PersistentStreamState.Starting */;
	        const e = this.R_(this.i_), t = this.i_;
	        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
	                Promise.all([ this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken() ]).then((([e, n]) => {
	            // Stream can be stopped while waiting for authentication.
	            // TODO(mikelehen): We really should just use dispatchIfNotClosed
	            // and let this dispatch onto the queue, but that opened a spec test can
	            // of worms that I don't want to deal with in this PR.
	            this.i_ === t && 
	            // Normally we'd have to schedule the callback on the AsyncQueue.
	            // However, the following calls are safe to be called outside the
	            // AsyncQueue since they don't chain asynchronous calls
	            this.V_(e, n);
	        }), (t => {
	            e((() => {
	                const e = new FirestoreError(C.UNKNOWN, "Fetching auth token failed: " + t.message);
	                return this.m_(e);
	            }));
	        }));
	    }
	    V_(e, t) {
	        const n = this.R_(this.i_);
	        this.stream = this.f_(e, t), this.stream.xo((() => {
	            n((() => this.listener.xo()));
	        })), this.stream.No((() => {
	            n((() => (this.state = 2 /* PersistentStreamState.Open */ , this.o_ = this.Ti.enqueueAfterDelay(this.r_, 1e4, (() => (this.c_() && (this.state = 3 /* PersistentStreamState.Healthy */), 
	            Promise.resolve()))), this.listener.No())));
	        })), this.stream.Lo((e => {
	            n((() => this.m_(e)));
	        })), this.stream.onMessage((e => {
	            n((() => 1 == ++this.__ ? this.g_(e) : this.onNext(e)));
	        }));
	    }
	    l_() {
	        this.state = 5 /* PersistentStreamState.Backoff */ , this.a_.Xo((async () => {
	            this.state = 0 /* PersistentStreamState.Initial */ , this.start();
	        }));
	    }
	    // Visible for tests
	    m_(e) {
	        // In theory the stream could close cleanly, however, in our current model
	        // we never expect this to happen because if we stop a stream ourselves,
	        // this callback will never be called. To prevent cases where we retry
	        // without a backoff accidentally, we set the stream to error in all cases.
	        return __PRIVATE_logDebug(Gt, `close with error: ${e}`), this.stream = null, this.close(4 /* PersistentStreamState.Error */ , e);
	    }
	    /**
	     * Returns a "dispatcher" function that dispatches operations onto the
	     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
	     * us to turn auth / stream callbacks into no-ops if the stream is closed /
	     * re-opened, etc.
	     */    R_(e) {
	        return t => {
	            this.Ti.enqueueAndForget((() => this.i_ === e ? t() : (__PRIVATE_logDebug(Gt, "stream callback skipped by getCloseGuardedDispatcher."), 
	            Promise.resolve())));
	        };
	    }
	}

	/**
	 * A PersistentStream that implements the Listen RPC.
	 *
	 * Once the Listen stream has called the onOpen() listener, any number of
	 * listen() and unlisten() calls can be made to control what changes will be
	 * sent from the server for ListenResponses.
	 */ class __PRIVATE_PersistentListenStream extends __PRIVATE_PersistentStream {
	    constructor(e, t, n, r, i, s) {
	        super(e, "listen_stream_connection_backoff" /* TimerId.ListenStreamConnectionBackoff */ , "listen_stream_idle" /* TimerId.ListenStreamIdle */ , "health_check_timeout" /* TimerId.HealthCheckTimeout */ , t, n, r, s), 
	        this.serializer = i;
	    }
	    f_(e, t) {
	        return this.connection.Wo("Listen", e, t);
	    }
	    g_(e) {
	        return this.onNext(e);
	    }
	    onNext(e) {
	        // A successful response means the stream is healthy
	        this.a_.reset();
	        const t = __PRIVATE_fromWatchChange(this.serializer, e), n = function __PRIVATE_versionFromListenResponse(e) {
	            // We have only reached a consistent snapshot for the entire stream if there
	            // is a read_time set and it applies to all targets (i.e. the list of
	            // targets is empty). The backend is guaranteed to send such responses.
	            if (!("targetChange" in e)) return SnapshotVersion.min();
	            const t = e.targetChange;
	            return t.targetIds && t.targetIds.length ? SnapshotVersion.min() : t.readTime ? __PRIVATE_fromVersion(t.readTime) : SnapshotVersion.min();
	        }(e);
	        return this.listener.p_(t, n);
	    }
	    /**
	     * Registers interest in the results of the given target. If the target
	     * includes a resumeToken it will be included in the request. Results that
	     * affect the target will be streamed back as WatchChange messages that
	     * reference the targetId.
	     */    y_(e) {
	        const t = {};
	        t.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t.addTarget = function __PRIVATE_toTarget(e, t) {
	            let n;
	            const r = t.target;
	            if (n = __PRIVATE_targetIsDocumentTarget(r) ? {
	                documents: __PRIVATE_toDocumentsTarget(e, r)
	            } : {
	                query: __PRIVATE_toQueryTarget(e, r).ht
	            }, n.targetId = t.targetId, t.resumeToken.approximateByteSize() > 0) {
	                n.resumeToken = __PRIVATE_toBytes(e, t.resumeToken);
	                const r = __PRIVATE_toInt32Proto(e, t.expectedCount);
	                null !== r && (n.expectedCount = r);
	            } else if (t.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
	                // TODO(wuandy): Consider removing above check because it is most likely true.
	                // Right now, many tests depend on this behaviour though (leaving min() out
	                // of serialization).
	                n.readTime = toTimestamp(e, t.snapshotVersion.toTimestamp());
	                const r = __PRIVATE_toInt32Proto(e, t.expectedCount);
	                null !== r && (n.expectedCount = r);
	            }
	            return n;
	        }(this.serializer, e);
	        const n = __PRIVATE_toListenRequestLabels(this.serializer, e);
	        n && (t.labels = n), this.I_(t);
	    }
	    /**
	     * Unregisters interest in the results of the target associated with the
	     * given targetId.
	     */    w_(e) {
	        const t = {};
	        t.database = __PRIVATE_getEncodedDatabaseId(this.serializer), t.removeTarget = e, 
	        this.I_(t);
	    }
	}

	/**
	 * A Stream that implements the Write RPC.
	 *
	 * The Write RPC requires the caller to maintain special streamToken
	 * state in between calls, to help the server understand which responses the
	 * client has processed by the time the next request is made. Every response
	 * will contain a streamToken; this value must be passed to the next
	 * request.
	 *
	 * After calling start() on this stream, the next request must be a handshake,
	 * containing whatever streamToken is on hand. Once a response to this
	 * request is received, all pending mutations may be submitted. When
	 * submitting multiple batches of mutations at the same time, it's
	 * okay to use the same streamToken for the calls to writeMutations.
	 *
	 * TODO(b/33271235): Use proto types
	 */ class __PRIVATE_PersistentWriteStream extends __PRIVATE_PersistentStream {
	    constructor(e, t, n, r, i, s) {
	        super(e, "write_stream_connection_backoff" /* TimerId.WriteStreamConnectionBackoff */ , "write_stream_idle" /* TimerId.WriteStreamIdle */ , "health_check_timeout" /* TimerId.HealthCheckTimeout */ , t, n, r, s), 
	        this.serializer = i;
	    }
	    /**
	     * Tracks whether or not a handshake has been successfully exchanged and
	     * the stream is ready to accept mutations.
	     */    get S_() {
	        return this.__ > 0;
	    }
	    // Override of PersistentStream.start
	    start() {
	        this.lastStreamToken = void 0, super.start();
	    }
	    A_() {
	        this.S_ && this.b_([]);
	    }
	    f_(e, t) {
	        return this.connection.Wo("Write", e, t);
	    }
	    g_(e) {
	        // Always capture the last stream token.
	        return __PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, 
	        // The first response is always the handshake response
	        __PRIVATE_hardAssert(!e.writeResults || 0 === e.writeResults.length), this.listener.D_();
	    }
	    onNext(e) {
	        // Always capture the last stream token.
	        __PRIVATE_hardAssert(!!e.streamToken), this.lastStreamToken = e.streamToken, 
	        // A successful first write response means the stream is healthy,
	        // Note, that we could consider a successful handshake healthy, however,
	        // the write itself might be causing an error we want to back off from.
	        this.a_.reset();
	        const t = __PRIVATE_fromWriteResults(e.writeResults, e.commitTime), n = __PRIVATE_fromVersion(e.commitTime);
	        return this.listener.v_(n, t);
	    }
	    /**
	     * Sends an initial streamToken to the server, performing the handshake
	     * required to make the StreamingWrite RPC work. Subsequent
	     * calls should wait until onHandshakeComplete was called.
	     */    C_() {
	        // TODO(dimond): Support stream resumption. We intentionally do not set the
	        // stream token on the handshake, ignoring any stream token we might have.
	        const e = {};
	        e.database = __PRIVATE_getEncodedDatabaseId(this.serializer), this.I_(e);
	    }
	    /** Sends a group of mutations to the Firestore backend to apply. */    b_(e) {
	        const t = {
	            streamToken: this.lastStreamToken,
	            writes: e.map((e => toMutation(this.serializer, e)))
	        };
	        this.I_(t);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Datastore and its related methods are a wrapper around the external Google
	 * Cloud Datastore grpc API, which provides an interface that is more convenient
	 * for the rest of the client SDK architecture to consume.
	 */ class Datastore {}

	/**
	 * An implementation of Datastore that exposes additional state for internal
	 * consumption.
	 */ class __PRIVATE_DatastoreImpl extends Datastore {
	    constructor(e, t, n, r) {
	        super(), this.authCredentials = e, this.appCheckCredentials = t, this.connection = n, 
	        this.serializer = r, this.F_ = !1;
	    }
	    M_() {
	        if (this.F_) throw new FirestoreError(C.FAILED_PRECONDITION, "The client has already been terminated.");
	    }
	    /** Invokes the provided RPC with auth and AppCheck tokens. */    So(e, t, n, r) {
	        return this.M_(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([i, s]) => this.connection.So(e, __PRIVATE_toResourcePath(t, n), r, i, s))).catch((e => {
	            throw "FirebaseError" === e.name ? (e.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), 
	            this.appCheckCredentials.invalidateToken()), e) : new FirestoreError(C.UNKNOWN, e.toString());
	        }));
	    }
	    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    Co(e, t, n, r, i) {
	        return this.M_(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, o]) => this.connection.Co(e, __PRIVATE_toResourcePath(t, n), r, s, o, i))).catch((e => {
	            throw "FirebaseError" === e.name ? (e.code === C.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), 
	            this.appCheckCredentials.invalidateToken()), e) : new FirestoreError(C.UNKNOWN, e.toString());
	        }));
	    }
	    terminate() {
	        this.F_ = !0, this.connection.terminate();
	    }
	}

	// TODO(firestorexp): Make sure there is only one Datastore instance per
	// firestore-exp client.
	/**
	 * A component used by the RemoteStore to track the OnlineState (that is,
	 * whether or not the client as a whole should be considered to be online or
	 * offline), implementing the appropriate heuristics.
	 *
	 * In particular, when the client is trying to connect to the backend, we
	 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
	 * a connection to succeed. If we have too many failures or the timeout elapses,
	 * then we set the OnlineState to Offline, and the client will behave as if
	 * it is offline (get()s will return cached data, etc.).
	 */
	class __PRIVATE_OnlineStateTracker {
	    constructor(e, t) {
	        this.asyncQueue = e, this.onlineStateHandler = t, 
	        /** The current OnlineState. */
	        this.state = "Unknown" /* OnlineState.Unknown */ , 
	        /**
	         * A count of consecutive failures to open the stream. If it reaches the
	         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
	         * Offline.
	         */
	        this.x_ = 0, 
	        /**
	         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
	         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
	         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
	         */
	        this.O_ = null, 
	        /**
	         * Whether the client should log a warning message if it fails to connect to
	         * the backend (initially true, cleared after a successful stream, or if we've
	         * logged the message already).
	         */
	        this.N_ = !0;
	    }
	    /**
	     * Called by RemoteStore when a watch stream is started (including on each
	     * backoff attempt).
	     *
	     * If this is the first attempt, it sets the OnlineState to Unknown and starts
	     * the onlineStateTimer.
	     */    B_() {
	        0 === this.x_ && (this.L_("Unknown" /* OnlineState.Unknown */), this.O_ = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* TimerId.OnlineStateTimeout */ , 1e4, (() => (this.O_ = null, 
	        this.k_("Backend didn't respond within 10 seconds."), this.L_("Offline" /* OnlineState.Offline */), 
	        Promise.resolve()))));
	    }
	    /**
	     * Updates our OnlineState as appropriate after the watch stream reports a
	     * failure. The first failure moves us to the 'Unknown' state. We then may
	     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
	     * actually transition to the 'Offline' state.
	     */    q_(e) {
	        "Online" /* OnlineState.Online */ === this.state ? this.L_("Unknown" /* OnlineState.Unknown */) : (this.x_++, 
	        this.x_ >= 1 && (this.Q_(), this.k_(`Connection failed 1 times. Most recent error: ${e.toString()}`), 
	        this.L_("Offline" /* OnlineState.Offline */)));
	    }
	    /**
	     * Explicitly sets the OnlineState to the specified state.
	     *
	     * Note that this resets our timers / failure counters, etc. used by our
	     * Offline heuristics, so must not be used in place of
	     * handleWatchStreamStart() and handleWatchStreamFailure().
	     */    set(e) {
	        this.Q_(), this.x_ = 0, "Online" /* OnlineState.Online */ === e && (
	        // We've connected to watch at least once. Don't warn the developer
	        // about being offline going forward.
	        this.N_ = !1), this.L_(e);
	    }
	    L_(e) {
	        e !== this.state && (this.state = e, this.onlineStateHandler(e));
	    }
	    k_(e) {
	        const t = `Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
	        this.N_ ? (__PRIVATE_logError(t), this.N_ = !1) : __PRIVATE_logDebug("OnlineStateTracker", t);
	    }
	    Q_() {
	        null !== this.O_ && (this.O_.cancel(), this.O_ = null);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const zt = "RemoteStore";

	// TODO(b/35853402): Negotiate this with the stream.
	class __PRIVATE_RemoteStoreImpl {
	    constructor(
	    /**
	     * The local store, used to fill the write pipeline with outbound mutations.
	     */
	    e, 
	    /** The client-side proxy for interacting with the backend. */
	    t, n, r, i) {
	        this.localStore = e, this.datastore = t, this.asyncQueue = n, this.remoteSyncer = {}, 
	        /**
	         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
	         * LocalStore via fillWritePipeline() and have or will send to the write
	         * stream.
	         *
	         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
	         * restart the write stream. When the stream is established the writes in the
	         * pipeline will be sent in order.
	         *
	         * Writes remain in writePipeline until they are acknowledged by the backend
	         * and thus will automatically be re-sent if the stream is interrupted /
	         * restarted before they're acknowledged.
	         *
	         * Write responses from the backend are linked to their originating request
	         * purely based on order, and so we can just shift() writes from the front of
	         * the writePipeline as we receive responses.
	         */
	        this.K_ = [], 
	        /**
	         * A mapping of watched targets that the client cares about tracking and the
	         * user has explicitly called a 'listen' for this target.
	         *
	         * These targets may or may not have been sent to or acknowledged by the
	         * server. On re-establishing the listen stream, these targets should be sent
	         * to the server. The targets removed with unlistens are removed eagerly
	         * without waiting for confirmation from the listen stream.
	         */
	        this.U_ = new Map, 
	        /**
	         * A set of reasons for why the RemoteStore may be offline. If empty, the
	         * RemoteStore may start its network connections.
	         */
	        this.W_ = new Set, 
	        /**
	         * Event handlers that get called when the network is disabled or enabled.
	         *
	         * PORTING NOTE: These functions are used on the Web client to create the
	         * underlying streams (to support tree-shakeable streams). On Android and iOS,
	         * the streams are created during construction of RemoteStore.
	         */
	        this.G_ = [], this.z_ = i, this.z_.To((e => {
	            n.enqueueAndForget((async () => {
	                // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
	                // network becomes unreachable as we don't have any other way to tear
	                // down our streams.
	                __PRIVATE_canUseNetwork(this) && (__PRIVATE_logDebug(zt, "Restarting streams for network reachability change."), 
	                await async function __PRIVATE_restartNetwork(e) {
	                    const t = __PRIVATE_debugCast(e);
	                    t.W_.add(4 /* OfflineCause.ConnectivityChange */), await __PRIVATE_disableNetworkInternal(t), 
	                    t.j_.set("Unknown" /* OnlineState.Unknown */), t.W_.delete(4 /* OfflineCause.ConnectivityChange */), 
	                    await __PRIVATE_enableNetworkInternal(t);
	                }(this));
	            }));
	        })), this.j_ = new __PRIVATE_OnlineStateTracker(n, r);
	    }
	}

	async function __PRIVATE_enableNetworkInternal(e) {
	    if (__PRIVATE_canUseNetwork(e)) for (const t of e.G_) await t(/* enabled= */ !0);
	}

	/**
	 * Temporarily disables the network. The network can be re-enabled using
	 * enableNetwork().
	 */ async function __PRIVATE_disableNetworkInternal(e) {
	    for (const t of e.G_) await t(/* enabled= */ !1);
	}

	/**
	 * Starts new listen for the given target. Uses resume token if provided. It
	 * is a no-op if the target of given `TargetData` is already being listened to.
	 */
	function __PRIVATE_remoteStoreListen(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    n.U_.has(t.targetId) || (
	    // Mark this as something the client is currently listening for.
	    n.U_.set(t.targetId, t), __PRIVATE_shouldStartWatchStream(n) ? 
	    // The listen will be sent in onWatchStreamOpen
	    __PRIVATE_startWatchStream(n) : __PRIVATE_ensureWatchStream(n).c_() && __PRIVATE_sendWatchRequest(n, t));
	}

	/**
	 * Removes the listen from server. It is a no-op if the given target id is
	 * not being listened to.
	 */ function __PRIVATE_remoteStoreUnlisten(e, t) {
	    const n = __PRIVATE_debugCast(e), r = __PRIVATE_ensureWatchStream(n);
	    n.U_.delete(t), r.c_() && __PRIVATE_sendUnwatchRequest(n, t), 0 === n.U_.size && (r.c_() ? r.P_() : __PRIVATE_canUseNetwork(n) && 
	    // Revert to OnlineState.Unknown if the watch stream is not open and we
	    // have no listeners, since without any listens to send we cannot
	    // confirm if the stream is healthy and upgrade to OnlineState.Online.
	    n.j_.set("Unknown" /* OnlineState.Unknown */));
	}

	/**
	 * We need to increment the expected number of pending responses we're due
	 * from watch so we wait for the ack to process any messages from this target.
	 */ function __PRIVATE_sendWatchRequest(e, t) {
	    if (e.H_.Ne(t.targetId), t.resumeToken.approximateByteSize() > 0 || t.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
	        const n = e.remoteSyncer.getRemoteKeysForTarget(t.targetId).size;
	        t = t.withExpectedCount(n);
	    }
	    __PRIVATE_ensureWatchStream(e).y_(t);
	}

	/**
	 * We need to increment the expected number of pending responses we're due
	 * from watch so we wait for the removal on the server before we process any
	 * messages from this target.
	 */ function __PRIVATE_sendUnwatchRequest(e, t) {
	    e.H_.Ne(t), __PRIVATE_ensureWatchStream(e).w_(t);
	}

	function __PRIVATE_startWatchStream(e) {
	    e.H_ = new __PRIVATE_WatchChangeAggregator({
	        getRemoteKeysForTarget: t => e.remoteSyncer.getRemoteKeysForTarget(t),
	        lt: t => e.U_.get(t) || null,
	        it: () => e.datastore.serializer.databaseId
	    }), __PRIVATE_ensureWatchStream(e).start(), e.j_.B_();
	}

	/**
	 * Returns whether the watch stream should be started because it's necessary
	 * and has not yet been started.
	 */ function __PRIVATE_shouldStartWatchStream(e) {
	    return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWatchStream(e).u_() && e.U_.size > 0;
	}

	function __PRIVATE_canUseNetwork(e) {
	    return 0 === __PRIVATE_debugCast(e).W_.size;
	}

	function __PRIVATE_cleanUpWatchStreamState(e) {
	    e.H_ = void 0;
	}

	async function __PRIVATE_onWatchStreamConnected(e) {
	    // Mark the client as online since we got a "connected" notification.
	    e.j_.set("Online" /* OnlineState.Online */);
	}

	async function __PRIVATE_onWatchStreamOpen(e) {
	    e.U_.forEach(((t, n) => {
	        __PRIVATE_sendWatchRequest(e, t);
	    }));
	}

	async function __PRIVATE_onWatchStreamClose(e, t) {
	    __PRIVATE_cleanUpWatchStreamState(e), 
	    // If we still need the watch stream, retry the connection.
	    __PRIVATE_shouldStartWatchStream(e) ? (e.j_.q_(t), __PRIVATE_startWatchStream(e)) : 
	    // No need to restart watch stream because there are no active targets.
	    // The online state is set to unknown because there is no active attempt
	    // at establishing a connection
	    e.j_.set("Unknown" /* OnlineState.Unknown */);
	}

	async function __PRIVATE_onWatchStreamChange(e, t, n) {
	    if (
	    // Mark the client as online since we got a message from the server
	    e.j_.set("Online" /* OnlineState.Online */), t instanceof __PRIVATE_WatchTargetChange && 2 /* WatchTargetChangeState.Removed */ === t.state && t.cause) 
	    // There was an error on a target, don't wait for a consistent snapshot
	    // to raise events
	    try {
	        /** Handles an error on a target */
	        await async function __PRIVATE_handleTargetError(e, t) {
	            const n = t.cause;
	            for (const r of t.targetIds) 
	            // A watched target might have been removed already.
	            e.U_.has(r) && (await e.remoteSyncer.rejectListen(r, n), e.U_.delete(r), e.H_.removeTarget(r));
	        }
	        /**
	 * Attempts to fill our write pipeline with writes from the LocalStore.
	 *
	 * Called internally to bootstrap or refill the write pipeline and by
	 * SyncEngine whenever there are new mutations to process.
	 *
	 * Starts the write stream if necessary.
	 */ (e, t);
	    } catch (n) {
	        __PRIVATE_logDebug(zt, "Failed to remove targets %s: %s ", t.targetIds.join(","), n), 
	        await __PRIVATE_disableNetworkUntilRecovery(e, n);
	    } else if (t instanceof __PRIVATE_DocumentWatchChange ? e.H_.We(t) : t instanceof __PRIVATE_ExistenceFilterChange ? e.H_.Ze(t) : e.H_.je(t), 
	    !n.isEqual(SnapshotVersion.min())) try {
	        const t = await __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore);
	        n.compareTo(t) >= 0 && 
	        // We have received a target change with a global snapshot if the snapshot
	        // version is not equal to SnapshotVersion.min().
	        /**
	 * Takes a batch of changes from the Datastore, repackages them as a
	 * RemoteEvent, and passes that on to the listener, which is typically the
	 * SyncEngine.
	 */
	        await function __PRIVATE_raiseWatchSnapshot(e, t) {
	            const n = e.H_.ot(t);
	            // Update in-memory resume tokens. LocalStore will update the
	            // persistent view of these when applying the completed RemoteEvent.
	                        return n.targetChanges.forEach(((n, r) => {
	                if (n.resumeToken.approximateByteSize() > 0) {
	                    const i = e.U_.get(r);
	                    // A watched target might have been removed already.
	                                        i && e.U_.set(r, i.withResumeToken(n.resumeToken, t));
	                }
	            })), 
	            // Re-establish listens for the targets that have been invalidated by
	            // existence filter mismatches.
	            n.targetMismatches.forEach(((t, n) => {
	                const r = e.U_.get(t);
	                if (!r) 
	                // A watched target might have been removed already.
	                return;
	                // Clear the resume token for the target, since we're in a known mismatch
	                // state.
	                                e.U_.set(t, r.withResumeToken(ByteString.EMPTY_BYTE_STRING, r.snapshotVersion)), 
	                // Cause a hard reset by unwatching and rewatching immediately, but
	                // deliberately don't send a resume token so that we get a full update.
	                __PRIVATE_sendUnwatchRequest(e, t);
	                // Mark the target we send as being on behalf of an existence filter
	                // mismatch, but don't actually retain that in listenTargets. This ensures
	                // that we flag the first re-listen this way without impacting future
	                // listens of this target (that might happen e.g. on reconnect).
	                const i = new TargetData(r.target, t, n, r.sequenceNumber);
	                __PRIVATE_sendWatchRequest(e, i);
	            })), e.remoteSyncer.applyRemoteEvent(n);
	        }(e, n);
	    } catch (t) {
	        __PRIVATE_logDebug(zt, "Failed to raise snapshot:", t), await __PRIVATE_disableNetworkUntilRecovery(e, t);
	    }
	}

	/**
	 * Recovery logic for IndexedDB errors that takes the network offline until
	 * `op` succeeds. Retries are scheduled with backoff using
	 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
	 * validated via a generic operation.
	 *
	 * The returned Promise is resolved once the network is disabled and before
	 * any retry attempt.
	 */ async function __PRIVATE_disableNetworkUntilRecovery(e, t, n) {
	    if (!__PRIVATE_isIndexedDbTransactionError(t)) throw t;
	    e.W_.add(1 /* OfflineCause.IndexedDbFailed */), 
	    // Disable network and raise offline snapshots
	    await __PRIVATE_disableNetworkInternal(e), e.j_.set("Offline" /* OnlineState.Offline */), 
	    n || (
	    // Use a simple read operation to determine if IndexedDB recovered.
	    // Ideally, we would expose a health check directly on SimpleDb, but
	    // RemoteStore only has access to persistence through LocalStore.
	    n = () => __PRIVATE_localStoreGetLastRemoteSnapshotVersion(e.localStore)), 
	    // Probe IndexedDB periodically and re-enable network
	    e.asyncQueue.enqueueRetryable((async () => {
	        __PRIVATE_logDebug(zt, "Retrying IndexedDB access"), await n(), e.W_.delete(1 /* OfflineCause.IndexedDbFailed */), 
	        await __PRIVATE_enableNetworkInternal(e);
	    }));
	}

	/**
	 * Executes `op`. If `op` fails, takes the network offline until `op`
	 * succeeds. Returns after the first attempt.
	 */ function __PRIVATE_executeWithRecovery(e, t) {
	    return t().catch((n => __PRIVATE_disableNetworkUntilRecovery(e, n, t)));
	}

	async function __PRIVATE_fillWritePipeline(e) {
	    const t = __PRIVATE_debugCast(e), n = __PRIVATE_ensureWriteStream(t);
	    let r = t.K_.length > 0 ? t.K_[t.K_.length - 1].batchId : Q;
	    for (;__PRIVATE_canAddToWritePipeline(t); ) try {
	        const e = await __PRIVATE_localStoreGetNextMutationBatch(t.localStore, r);
	        if (null === e) {
	            0 === t.K_.length && n.P_();
	            break;
	        }
	        r = e.batchId, __PRIVATE_addToWritePipeline(t, e);
	    } catch (e) {
	        await __PRIVATE_disableNetworkUntilRecovery(t, e);
	    }
	    __PRIVATE_shouldStartWriteStream(t) && __PRIVATE_startWriteStream(t);
	}

	/**
	 * Returns true if we can add to the write pipeline (i.e. the network is
	 * enabled and the write pipeline is not full).
	 */ function __PRIVATE_canAddToWritePipeline(e) {
	    return __PRIVATE_canUseNetwork(e) && e.K_.length < 10;
	}

	/**
	 * Queues additional writes to be sent to the write stream, sending them
	 * immediately if the write stream is established.
	 */ function __PRIVATE_addToWritePipeline(e, t) {
	    e.K_.push(t);
	    const n = __PRIVATE_ensureWriteStream(e);
	    n.c_() && n.S_ && n.b_(t.mutations);
	}

	function __PRIVATE_shouldStartWriteStream(e) {
	    return __PRIVATE_canUseNetwork(e) && !__PRIVATE_ensureWriteStream(e).u_() && e.K_.length > 0;
	}

	function __PRIVATE_startWriteStream(e) {
	    __PRIVATE_ensureWriteStream(e).start();
	}

	async function __PRIVATE_onWriteStreamOpen(e) {
	    __PRIVATE_ensureWriteStream(e).C_();
	}

	async function __PRIVATE_onWriteHandshakeComplete(e) {
	    const t = __PRIVATE_ensureWriteStream(e);
	    // Send the write pipeline now that the stream is established.
	        for (const n of e.K_) t.b_(n.mutations);
	}

	async function __PRIVATE_onMutationResult(e, t, n) {
	    const r = e.K_.shift(), i = MutationBatchResult.from(r, t, n);
	    await __PRIVATE_executeWithRecovery(e, (() => e.remoteSyncer.applySuccessfulWrite(i))), 
	    // It's possible that with the completion of this mutation another
	    // slot has freed up.
	    await __PRIVATE_fillWritePipeline(e);
	}

	async function __PRIVATE_onWriteStreamClose(e, t) {
	    // If the write stream closed after the write handshake completes, a write
	    // operation failed and we fail the pending operation.
	    t && __PRIVATE_ensureWriteStream(e).S_ && 
	    // This error affects the actual write.
	    await async function __PRIVATE_handleWriteError(e, t) {
	        // Only handle permanent errors here. If it's transient, just let the retry
	        // logic kick in.
	        if (function __PRIVATE_isPermanentWriteError(e) {
	            return __PRIVATE_isPermanentError(e) && e !== C.ABORTED;
	        }(t.code)) {
	            // This was a permanent error, the request itself was the problem
	            // so it's not going to succeed if we resend it.
	            const n = e.K_.shift();
	            // In this case it's also unlikely that the server itself is melting
	            // down -- this was just a bad request so inhibit backoff on the next
	            // restart.
	                        __PRIVATE_ensureWriteStream(e).h_(), await __PRIVATE_executeWithRecovery(e, (() => e.remoteSyncer.rejectFailedWrite(n.batchId, t))), 
	            // It's possible that with the completion of this mutation
	            // another slot has freed up.
	            await __PRIVATE_fillWritePipeline(e);
	        }
	    }(e, t), 
	    // The write stream might have been started by refilling the write
	    // pipeline for failed writes
	    __PRIVATE_shouldStartWriteStream(e) && __PRIVATE_startWriteStream(e);
	}

	async function __PRIVATE_remoteStoreHandleCredentialChange(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    n.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(zt, "RemoteStore received new credentials");
	    const r = __PRIVATE_canUseNetwork(n);
	    // Tear down and re-create our network streams. This will ensure we get a
	    // fresh auth token for the new user and re-fill the write pipeline with
	    // new mutations from the LocalStore (since mutations are per-user).
	        n.W_.add(3 /* OfflineCause.CredentialChange */), await __PRIVATE_disableNetworkInternal(n), 
	    r && 
	    // Don't set the network status to Unknown if we are offline.
	    n.j_.set("Unknown" /* OnlineState.Unknown */), await n.remoteSyncer.handleCredentialChange(t), 
	    n.W_.delete(3 /* OfflineCause.CredentialChange */), await __PRIVATE_enableNetworkInternal(n);
	}

	/**
	 * Toggles the network state when the client gains or loses its primary lease.
	 */ async function __PRIVATE_remoteStoreApplyPrimaryState(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    t ? (n.W_.delete(2 /* OfflineCause.IsSecondary */), await __PRIVATE_enableNetworkInternal(n)) : t || (n.W_.add(2 /* OfflineCause.IsSecondary */), 
	    await __PRIVATE_disableNetworkInternal(n), n.j_.set("Unknown" /* OnlineState.Unknown */));
	}

	/**
	 * If not yet initialized, registers the WatchStream and its network state
	 * callback with `remoteStoreImpl`. Returns the existing stream if one is
	 * already available.
	 *
	 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
	 * This is not done on Web to allow it to be tree-shaken.
	 */ function __PRIVATE_ensureWatchStream(e) {
	    return e.J_ || (
	    // Create stream (but note that it is not started yet).
	    e.J_ = function __PRIVATE_newPersistentWatchStream(e, t, n) {
	        const r = __PRIVATE_debugCast(e);
	        return r.M_(), new __PRIVATE_PersistentListenStream(t, r.connection, r.authCredentials, r.appCheckCredentials, r.serializer, n);
	    }
	    /**
	 * @license
	 * Copyright 2018 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (e.datastore, e.asyncQueue, {
	        xo: __PRIVATE_onWatchStreamConnected.bind(null, e),
	        No: __PRIVATE_onWatchStreamOpen.bind(null, e),
	        Lo: __PRIVATE_onWatchStreamClose.bind(null, e),
	        p_: __PRIVATE_onWatchStreamChange.bind(null, e)
	    }), e.G_.push((async t => {
	        t ? (e.J_.h_(), __PRIVATE_shouldStartWatchStream(e) ? __PRIVATE_startWatchStream(e) : e.j_.set("Unknown" /* OnlineState.Unknown */)) : (await e.J_.stop(), 
	        __PRIVATE_cleanUpWatchStreamState(e));
	    }))), e.J_;
	}

	/**
	 * If not yet initialized, registers the WriteStream and its network state
	 * callback with `remoteStoreImpl`. Returns the existing stream if one is
	 * already available.
	 *
	 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
	 * This is not done on Web to allow it to be tree-shaken.
	 */ function __PRIVATE_ensureWriteStream(e) {
	    return e.Y_ || (
	    // Create stream (but note that it is not started yet).
	    e.Y_ = function __PRIVATE_newPersistentWriteStream(e, t, n) {
	        const r = __PRIVATE_debugCast(e);
	        return r.M_(), new __PRIVATE_PersistentWriteStream(t, r.connection, r.authCredentials, r.appCheckCredentials, r.serializer, n);
	    }(e.datastore, e.asyncQueue, {
	        xo: () => Promise.resolve(),
	        No: __PRIVATE_onWriteStreamOpen.bind(null, e),
	        Lo: __PRIVATE_onWriteStreamClose.bind(null, e),
	        D_: __PRIVATE_onWriteHandshakeComplete.bind(null, e),
	        v_: __PRIVATE_onMutationResult.bind(null, e)
	    }), e.G_.push((async t => {
	        t ? (e.Y_.h_(), 
	        // This will start the write stream if necessary.
	        await __PRIVATE_fillWritePipeline(e)) : (await e.Y_.stop(), e.K_.length > 0 && (__PRIVATE_logDebug(zt, `Stopping write stream with ${e.K_.length} pending writes`), 
	        e.K_ = []));
	    }))), e.Y_;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents an operation scheduled to be run in the future on an AsyncQueue.
	 *
	 * It is created via DelayedOperation.createAndSchedule().
	 *
	 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
	 *
	 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
	 * in newer versions of TypeScript defines `finally`, which is not available in
	 * IE.
	 */
	class DelayedOperation {
	    constructor(e, t, n, r, i) {
	        this.asyncQueue = e, this.timerId = t, this.targetTimeMs = n, this.op = r, this.removalCallback = i, 
	        this.deferred = new __PRIVATE_Deferred, this.then = this.deferred.promise.then.bind(this.deferred.promise), 
	        // It's normal for the deferred promise to be canceled (due to cancellation)
	        // and so we attach a dummy catch callback to avoid
	        // 'UnhandledPromiseRejectionWarning' log spam.
	        this.deferred.promise.catch((e => {}));
	    }
	    get promise() {
	        return this.deferred.promise;
	    }
	    /**
	     * Creates and returns a DelayedOperation that has been scheduled to be
	     * executed on the provided asyncQueue after the provided delayMs.
	     *
	     * @param asyncQueue - The queue to schedule the operation on.
	     * @param id - A Timer ID identifying the type of operation this is.
	     * @param delayMs - The delay (ms) before the operation should be scheduled.
	     * @param op - The operation to run.
	     * @param removalCallback - A callback to be called synchronously once the
	     *   operation is executed or canceled, notifying the AsyncQueue to remove it
	     *   from its delayedOperations list.
	     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
	     *   the DelayedOperation class public.
	     */    static createAndSchedule(e, t, n, r, i) {
	        const s = Date.now() + n, o = new DelayedOperation(e, t, s, r, i);
	        return o.start(n), o;
	    }
	    /**
	     * Starts the timer. This is called immediately after construction by
	     * createAndSchedule().
	     */    start(e) {
	        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), e);
	    }
	    /**
	     * Queues the operation to run immediately (if it hasn't already been run or
	     * canceled).
	     */    skipDelay() {
	        return this.handleDelayElapsed();
	    }
	    /**
	     * Cancels the operation if it hasn't already been executed or canceled. The
	     * promise will be rejected.
	     *
	     * As long as the operation has not yet been run, calling cancel() provides a
	     * guarantee that the operation will not be run.
	     */    cancel(e) {
	        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new FirestoreError(C.CANCELLED, "Operation cancelled" + (e ? ": " + e : ""))));
	    }
	    handleDelayElapsed() {
	        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), 
	        this.op().then((e => this.deferred.resolve(e)))) : Promise.resolve()));
	    }
	    clearTimeout() {
	        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), 
	        this.timerHandle = null);
	    }
	}

	/**
	 * Returns a FirestoreError that can be surfaced to the user if the provided
	 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
	 */ function __PRIVATE_wrapInUserErrorIfRecoverable(e, t) {
	    if (__PRIVATE_logError("AsyncQueue", `${t}: ${e}`), __PRIVATE_isIndexedDbTransactionError(e)) return new FirestoreError(C.UNAVAILABLE, `${t}: ${e}`);
	    throw e;
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * DocumentSet is an immutable (copy-on-write) collection that holds documents
	 * in order specified by the provided comparator. We always add a document key
	 * comparator on top of what is provided to guarantee document equality based on
	 * the key.
	 */ class DocumentSet {
	    /**
	     * Returns an empty copy of the existing DocumentSet, using the same
	     * comparator.
	     */
	    static emptySet(e) {
	        return new DocumentSet(e.comparator);
	    }
	    /** The default ordering is by key if the comparator is omitted */    constructor(e) {
	        // We are adding document key comparator to the end as it's the only
	        // guaranteed unique property of a document.
	        this.comparator = e ? (t, n) => e(t, n) || DocumentKey.comparator(t.key, n.key) : (e, t) => DocumentKey.comparator(e.key, t.key), 
	        this.keyedMap = documentMap(), this.sortedSet = new SortedMap(this.comparator);
	    }
	    has(e) {
	        return null != this.keyedMap.get(e);
	    }
	    get(e) {
	        return this.keyedMap.get(e);
	    }
	    first() {
	        return this.sortedSet.minKey();
	    }
	    last() {
	        return this.sortedSet.maxKey();
	    }
	    isEmpty() {
	        return this.sortedSet.isEmpty();
	    }
	    /**
	     * Returns the index of the provided key in the document set, or -1 if the
	     * document key is not present in the set;
	     */    indexOf(e) {
	        const t = this.keyedMap.get(e);
	        return t ? this.sortedSet.indexOf(t) : -1;
	    }
	    get size() {
	        return this.sortedSet.size;
	    }
	    /** Iterates documents in order defined by "comparator" */    forEach(e) {
	        this.sortedSet.inorderTraversal(((t, n) => (e(t), !1)));
	    }
	    /** Inserts or updates a document with the same key */    add(e) {
	        // First remove the element if we have it.
	        const t = this.delete(e.key);
	        return t.copy(t.keyedMap.insert(e.key, e), t.sortedSet.insert(e, null));
	    }
	    /** Deletes a document with a given key */    delete(e) {
	        const t = this.get(e);
	        return t ? this.copy(this.keyedMap.remove(e), this.sortedSet.remove(t)) : this;
	    }
	    isEqual(e) {
	        if (!(e instanceof DocumentSet)) return !1;
	        if (this.size !== e.size) return !1;
	        const t = this.sortedSet.getIterator(), n = e.sortedSet.getIterator();
	        for (;t.hasNext(); ) {
	            const e = t.getNext().key, r = n.getNext().key;
	            if (!e.isEqual(r)) return !1;
	        }
	        return !0;
	    }
	    toString() {
	        const e = [];
	        return this.forEach((t => {
	            e.push(t.toString());
	        })), 0 === e.length ? "DocumentSet ()" : "DocumentSet (\n  " + e.join("  \n") + "\n)";
	    }
	    copy(e, t) {
	        const n = new DocumentSet;
	        return n.comparator = this.comparator, n.keyedMap = e, n.sortedSet = t, n;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
	 * duplicate events for the same doc.
	 */ class __PRIVATE_DocumentChangeSet {
	    constructor() {
	        this.Z_ = new SortedMap(DocumentKey.comparator);
	    }
	    track(e) {
	        const t = e.doc.key, n = this.Z_.get(t);
	        n ? 
	        // Merge the new change with the existing change.
	        0 /* ChangeType.Added */ !== e.type && 3 /* ChangeType.Metadata */ === n.type ? this.Z_ = this.Z_.insert(t, e) : 3 /* ChangeType.Metadata */ === e.type && 1 /* ChangeType.Removed */ !== n.type ? this.Z_ = this.Z_.insert(t, {
	            type: n.type,
	            doc: e.doc
	        }) : 2 /* ChangeType.Modified */ === e.type && 2 /* ChangeType.Modified */ === n.type ? this.Z_ = this.Z_.insert(t, {
	            type: 2 /* ChangeType.Modified */ ,
	            doc: e.doc
	        }) : 2 /* ChangeType.Modified */ === e.type && 0 /* ChangeType.Added */ === n.type ? this.Z_ = this.Z_.insert(t, {
	            type: 0 /* ChangeType.Added */ ,
	            doc: e.doc
	        }) : 1 /* ChangeType.Removed */ === e.type && 0 /* ChangeType.Added */ === n.type ? this.Z_ = this.Z_.remove(t) : 1 /* ChangeType.Removed */ === e.type && 2 /* ChangeType.Modified */ === n.type ? this.Z_ = this.Z_.insert(t, {
	            type: 1 /* ChangeType.Removed */ ,
	            doc: n.doc
	        }) : 0 /* ChangeType.Added */ === e.type && 1 /* ChangeType.Removed */ === n.type ? this.Z_ = this.Z_.insert(t, {
	            type: 2 /* ChangeType.Modified */ ,
	            doc: e.doc
	        }) : 
	        // This includes these cases, which don't make sense:
	        // Added->Added
	        // Removed->Removed
	        // Modified->Added
	        // Removed->Modified
	        // Metadata->Added
	        // Removed->Metadata
	        fail() : this.Z_ = this.Z_.insert(t, e);
	    }
	    X_() {
	        const e = [];
	        return this.Z_.inorderTraversal(((t, n) => {
	            e.push(n);
	        })), e;
	    }
	}

	class ViewSnapshot {
	    constructor(e, t, n, r, i, s, o, _, a) {
	        this.query = e, this.docs = t, this.oldDocs = n, this.docChanges = r, this.mutatedKeys = i, 
	        this.fromCache = s, this.syncStateChanged = o, this.excludesMetadataChanges = _, 
	        this.hasCachedResults = a;
	    }
	    /** Returns a view snapshot as if all documents in the snapshot were added. */    static fromInitialDocuments(e, t, n, r, i) {
	        const s = [];
	        return t.forEach((e => {
	            s.push({
	                type: 0 /* ChangeType.Added */ ,
	                doc: e
	            });
	        })), new ViewSnapshot(e, t, DocumentSet.emptySet(t), s, n, r, 
	        /* syncStateChanged= */ !0, 
	        /* excludesMetadataChanges= */ !1, i);
	    }
	    get hasPendingWrites() {
	        return !this.mutatedKeys.isEmpty();
	    }
	    isEqual(e) {
	        if (!(this.fromCache === e.fromCache && this.hasCachedResults === e.hasCachedResults && this.syncStateChanged === e.syncStateChanged && this.mutatedKeys.isEqual(e.mutatedKeys) && __PRIVATE_queryEquals(this.query, e.query) && this.docs.isEqual(e.docs) && this.oldDocs.isEqual(e.oldDocs))) return !1;
	        const t = this.docChanges, n = e.docChanges;
	        if (t.length !== n.length) return !1;
	        for (let e = 0; e < t.length; e++) if (t[e].type !== n[e].type || !t[e].doc.isEqual(n[e].doc)) return !1;
	        return !0;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Holds the listeners and the last received ViewSnapshot for a query being
	 * tracked by EventManager.
	 */ class __PRIVATE_QueryListenersInfo {
	    constructor() {
	        this.ea = void 0, this.ta = [];
	    }
	    // Helper methods that checks if the query has listeners that listening to remote store
	    na() {
	        return this.ta.some((e => e.ra()));
	    }
	}

	class __PRIVATE_EventManagerImpl {
	    constructor() {
	        this.queries = __PRIVATE_newQueriesObjectMap(), this.onlineState = "Unknown" /* OnlineState.Unknown */ , 
	        this.ia = new Set;
	    }
	    terminate() {
	        !function __PRIVATE_errorAllTargets(e, t) {
	            const n = __PRIVATE_debugCast(e), r = n.queries;
	            // Prevent further access by clearing ObjectMap.
	            n.queries = __PRIVATE_newQueriesObjectMap(), r.forEach(((e, n) => {
	                for (const e of n.ta) e.onError(t);
	            }));
	        }
	        // Call all global snapshot listeners that have been set.
	        (this, new FirestoreError(C.ABORTED, "Firestore shutting down"));
	    }
	}

	function __PRIVATE_newQueriesObjectMap() {
	    return new ObjectMap((e => __PRIVATE_canonifyQuery(e)), __PRIVATE_queryEquals);
	}

	async function __PRIVATE_eventManagerListen(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    let r = 3 /* ListenerSetupAction.NoActionRequired */;
	    const i = t.query;
	    let s = n.queries.get(i);
	    s ? !s.na() && t.ra() && (
	    // Query has been listening to local cache, and tries to add a new listener sourced from watch.
	    r = 2 /* ListenerSetupAction.RequireWatchConnectionOnly */) : (s = new __PRIVATE_QueryListenersInfo, 
	    r = t.ra() ? 0 /* ListenerSetupAction.InitializeLocalListenAndRequireWatchConnection */ : 1 /* ListenerSetupAction.InitializeLocalListenOnly */);
	    try {
	        switch (r) {
	          case 0 /* ListenerSetupAction.InitializeLocalListenAndRequireWatchConnection */ :
	            s.ea = await n.onListen(i, 
	            /** enableRemoteListen= */ !0);
	            break;

	          case 1 /* ListenerSetupAction.InitializeLocalListenOnly */ :
	            s.ea = await n.onListen(i, 
	            /** enableRemoteListen= */ !1);
	            break;

	          case 2 /* ListenerSetupAction.RequireWatchConnectionOnly */ :
	            await n.onFirstRemoteStoreListen(i);
	        }
	    } catch (e) {
	        const n = __PRIVATE_wrapInUserErrorIfRecoverable(e, `Initialization of query '${__PRIVATE_stringifyQuery(t.query)}' failed`);
	        return void t.onError(n);
	    }
	    if (n.queries.set(i, s), s.ta.push(t), 
	    // Run global snapshot listeners if a consistent snapshot has been emitted.
	    t.sa(n.onlineState), s.ea) {
	        t.oa(s.ea) && __PRIVATE_raiseSnapshotsInSyncEvent(n);
	    }
	}

	async function __PRIVATE_eventManagerUnlisten(e, t) {
	    const n = __PRIVATE_debugCast(e), r = t.query;
	    let i = 3 /* ListenerRemovalAction.NoActionRequired */;
	    const s = n.queries.get(r);
	    if (s) {
	        const e = s.ta.indexOf(t);
	        e >= 0 && (s.ta.splice(e, 1), 0 === s.ta.length ? i = t.ra() ? 0 /* ListenerRemovalAction.TerminateLocalListenAndRequireWatchDisconnection */ : 1 /* ListenerRemovalAction.TerminateLocalListenOnly */ : !s.na() && t.ra() && (
	        // The removed listener is the last one that sourced from watch.
	        i = 2 /* ListenerRemovalAction.RequireWatchDisconnectionOnly */));
	    }
	    switch (i) {
	      case 0 /* ListenerRemovalAction.TerminateLocalListenAndRequireWatchDisconnection */ :
	        return n.queries.delete(r), n.onUnlisten(r, 
	        /** disableRemoteListen= */ !0);

	      case 1 /* ListenerRemovalAction.TerminateLocalListenOnly */ :
	        return n.queries.delete(r), n.onUnlisten(r, 
	        /** disableRemoteListen= */ !1);

	      case 2 /* ListenerRemovalAction.RequireWatchDisconnectionOnly */ :
	        return n.onLastRemoteStoreUnlisten(r);

	      default:
	        return;
	    }
	}

	function __PRIVATE_eventManagerOnWatchChange(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    let r = !1;
	    for (const e of t) {
	        const t = e.query, i = n.queries.get(t);
	        if (i) {
	            for (const t of i.ta) t.oa(e) && (r = !0);
	            i.ea = e;
	        }
	    }
	    r && __PRIVATE_raiseSnapshotsInSyncEvent(n);
	}

	function __PRIVATE_eventManagerOnWatchError(e, t, n) {
	    const r = __PRIVATE_debugCast(e), i = r.queries.get(t);
	    if (i) for (const e of i.ta) e.onError(n);
	    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
	    // after an error.
	        r.queries.delete(t);
	}

	function __PRIVATE_raiseSnapshotsInSyncEvent(e) {
	    e.ia.forEach((e => {
	        e.next();
	    }));
	}

	var jt, Ht;

	/** Listen to both cache and server changes */
	(Ht = jt || (jt = {}))._a = "default", 
	/** Listen to changes in cache only */
	Ht.Cache = "cache";

	/**
	 * QueryListener takes a series of internal view snapshots and determines
	 * when to raise the event.
	 *
	 * It uses an Observer to dispatch events.
	 */
	class __PRIVATE_QueryListener {
	    constructor(e, t, n) {
	        this.query = e, this.aa = t, 
	        /**
	         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
	         * observer. This flag is set to true once we've actually raised an event.
	         */
	        this.ua = !1, this.ca = null, this.onlineState = "Unknown" /* OnlineState.Unknown */ , 
	        this.options = n || {};
	    }
	    /**
	     * Applies the new ViewSnapshot to this listener, raising a user-facing event
	     * if applicable (depending on what changed, whether the user has opted into
	     * metadata-only changes, etc.). Returns true if a user-facing event was
	     * indeed raised.
	     */    oa(e) {
	        if (!this.options.includeMetadataChanges) {
	            // Remove the metadata only changes.
	            const t = [];
	            for (const n of e.docChanges) 3 /* ChangeType.Metadata */ !== n.type && t.push(n);
	            e = new ViewSnapshot(e.query, e.docs, e.oldDocs, t, e.mutatedKeys, e.fromCache, e.syncStateChanged, 
	            /* excludesMetadataChanges= */ !0, e.hasCachedResults);
	        }
	        let t = !1;
	        return this.ua ? this.la(e) && (this.aa.next(e), t = !0) : this.ha(e, this.onlineState) && (this.Pa(e), 
	        t = !0), this.ca = e, t;
	    }
	    onError(e) {
	        this.aa.error(e);
	    }
	    /** Returns whether a snapshot was raised. */    sa(e) {
	        this.onlineState = e;
	        let t = !1;
	        return this.ca && !this.ua && this.ha(this.ca, e) && (this.Pa(this.ca), t = !0), 
	        t;
	    }
	    ha(e, t) {
	        // Always raise the first event when we're synced
	        if (!e.fromCache) return !0;
	        // Always raise event if listening to cache
	                if (!this.ra()) return !0;
	        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
	        // or Online if we wait long enough).
	                const n = "Offline" /* OnlineState.Offline */ !== t;
	        // Don't raise the event if we're online, aren't synced yet (checked
	        // above) and are waiting for a sync.
	                return (!this.options.Ta || !n) && (!e.docs.isEmpty() || e.hasCachedResults || "Offline" /* OnlineState.Offline */ === t);
	        // Raise data from cache if we have any documents, have cached results before,
	        // or we are offline.
	        }
	    la(e) {
	        // We don't need to handle includeDocumentMetadataChanges here because
	        // the Metadata only changes have already been stripped out if needed.
	        // At this point the only changes we will see are the ones we should
	        // propagate.
	        if (e.docChanges.length > 0) return !0;
	        const t = this.ca && this.ca.hasPendingWrites !== e.hasPendingWrites;
	        return !(!e.syncStateChanged && !t) && !0 === this.options.includeMetadataChanges;
	        // Generally we should have hit one of the cases above, but it's possible
	        // to get here if there were only metadata docChanges and they got
	        // stripped out.
	        }
	    Pa(e) {
	        e = ViewSnapshot.fromInitialDocuments(e.query, e.docs, e.mutatedKeys, e.fromCache, e.hasCachedResults), 
	        this.ua = !0, this.aa.next(e);
	    }
	    ra() {
	        return this.options.source !== jt.Cache;
	    }
	}

	/**
	 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
	 * has succeeded.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	class __PRIVATE_AddedLimboDocument {
	    constructor(e) {
	        this.key = e;
	    }
	}

	class __PRIVATE_RemovedLimboDocument {
	    constructor(e) {
	        this.key = e;
	    }
	}

	/**
	 * View is responsible for computing the final merged truth of what docs are in
	 * a query. It gets notified of local and remote changes to docs, and applies
	 * the query filters and limits to determine the most correct possible results.
	 */ class __PRIVATE_View {
	    constructor(e, 
	    /** Documents included in the remote target */
	    t) {
	        this.query = e, this.fa = t, this.ga = null, this.hasCachedResults = !1, 
	        /**
	         * A flag whether the view is current with the backend. A view is considered
	         * current after it has seen the current flag from the backend and did not
	         * lose consistency within the watch stream (e.g. because of an existence
	         * filter mismatch).
	         */
	        this.current = !1, 
	        /** Documents in the view but not in the remote target */
	        this.pa = __PRIVATE_documentKeySet(), 
	        /** Document Keys that have local changes */
	        this.mutatedKeys = __PRIVATE_documentKeySet(), this.ya = __PRIVATE_newQueryComparator(e), 
	        this.wa = new DocumentSet(this.ya);
	    }
	    /**
	     * The set of remote documents that the server has told us belongs to the target associated with
	     * this view.
	     */    get Sa() {
	        return this.fa;
	    }
	    /**
	     * Iterates over a set of doc changes, applies the query limit, and computes
	     * what the new results should be, what the changes were, and whether we may
	     * need to go back to the local cache for more results. Does not make any
	     * changes to the view.
	     * @param docChanges - The doc changes to apply to this view.
	     * @param previousChanges - If this is being called with a refill, then start
	     *        with this set of docs and changes instead of the current view.
	     * @returns a new set of docs, changes, and refill flag.
	     */    ba(e, t) {
	        const n = t ? t.Da : new __PRIVATE_DocumentChangeSet, r = t ? t.wa : this.wa;
	        let i = t ? t.mutatedKeys : this.mutatedKeys, s = r, o = !1;
	        // Track the last doc in a (full) limit. This is necessary, because some
	        // update (a delete, or an update moving a doc past the old limit) might
	        // mean there is some other document in the local cache that either should
	        // come (1) between the old last limit doc and the new last document, in the
	        // case of updates, or (2) after the new last document, in the case of
	        // deletes. So we keep this doc at the old limit to compare the updates to.
	        // Note that this should never get used in a refill (when previousChanges is
	        // set), because there will only be adds -- no deletes or updates.
	        const _ = "F" /* LimitType.First */ === this.query.limitType && r.size === this.query.limit ? r.last() : null, a = "L" /* LimitType.Last */ === this.query.limitType && r.size === this.query.limit ? r.first() : null;
	        // Drop documents out to meet limit/limitToLast requirement.
	        if (e.inorderTraversal(((e, t) => {
	            const u = r.get(e), c = __PRIVATE_queryMatches(this.query, t) ? t : null, l = !!u && this.mutatedKeys.has(u.key), h = !!c && (c.hasLocalMutations || 
	            // We only consider committed mutations for documents that were
	            // mutated during the lifetime of the view.
	            this.mutatedKeys.has(c.key) && c.hasCommittedMutations);
	            let P = !1;
	            // Calculate change
	                        if (u && c) {
	                u.data.isEqual(c.data) ? l !== h && (n.track({
	                    type: 3 /* ChangeType.Metadata */ ,
	                    doc: c
	                }), P = !0) : this.va(u, c) || (n.track({
	                    type: 2 /* ChangeType.Modified */ ,
	                    doc: c
	                }), P = !0, (_ && this.ya(c, _) > 0 || a && this.ya(c, a) < 0) && (
	                // This doc moved from inside the limit to outside the limit.
	                // That means there may be some other doc in the local cache
	                // that should be included instead.
	                o = !0));
	            } else !u && c ? (n.track({
	                type: 0 /* ChangeType.Added */ ,
	                doc: c
	            }), P = !0) : u && !c && (n.track({
	                type: 1 /* ChangeType.Removed */ ,
	                doc: u
	            }), P = !0, (_ || a) && (
	            // A doc was removed from a full limit query. We'll need to
	            // requery from the local cache to see if we know about some other
	            // doc that should be in the results.
	            o = !0));
	            P && (c ? (s = s.add(c), i = h ? i.add(e) : i.delete(e)) : (s = s.delete(e), i = i.delete(e)));
	        })), null !== this.query.limit) for (;s.size > this.query.limit; ) {
	            const e = "F" /* LimitType.First */ === this.query.limitType ? s.last() : s.first();
	            s = s.delete(e.key), i = i.delete(e.key), n.track({
	                type: 1 /* ChangeType.Removed */ ,
	                doc: e
	            });
	        }
	        return {
	            wa: s,
	            Da: n,
	            ls: o,
	            mutatedKeys: i
	        };
	    }
	    va(e, t) {
	        // We suppress the initial change event for documents that were modified as
	        // part of a write acknowledgment (e.g. when the value of a server transform
	        // is applied) as Watch will send us the same document again.
	        // By suppressing the event, we only raise two user visible events (one with
	        // `hasPendingWrites` and the final state of the document) instead of three
	        // (one with `hasPendingWrites`, the modified document with
	        // `hasPendingWrites` and the final state of the document).
	        return e.hasLocalMutations && t.hasCommittedMutations && !t.hasLocalMutations;
	    }
	    /**
	     * Updates the view with the given ViewDocumentChanges and optionally updates
	     * limbo docs and sync state from the provided target change.
	     * @param docChanges - The set of changes to make to the view's docs.
	     * @param limboResolutionEnabled - Whether to update limbo documents based on
	     *        this change.
	     * @param targetChange - A target change to apply for computing limbo docs and
	     *        sync state.
	     * @param targetIsPendingReset - Whether the target is pending to reset due to
	     *        existence filter mismatch. If not explicitly specified, it is treated
	     *        equivalently to `false`.
	     * @returns A new ViewChange with the given docs, changes, and sync state.
	     */
	    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
	    applyChanges(e, t, n, r) {
	        const i = this.wa;
	        this.wa = e.wa, this.mutatedKeys = e.mutatedKeys;
	        // Sort changes based on type and query comparator
	        const s = e.Da.X_();
	        s.sort(((e, t) => function __PRIVATE_compareChangeType(e, t) {
	            const order = e => {
	                switch (e) {
	                  case 0 /* ChangeType.Added */ :
	                    return 1;

	                  case 2 /* ChangeType.Modified */ :
	                  case 3 /* ChangeType.Metadata */ :
	                    // A metadata change is converted to a modified change at the public
	                    // api layer.  Since we sort by document key and then change type,
	                    // metadata and modified changes must be sorted equivalently.
	                    return 2;

	                  case 1 /* ChangeType.Removed */ :
	                    return 0;

	                  default:
	                    return fail();
	                }
	            };
	            return order(e) - order(t);
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (e.type, t.type) || this.ya(e.doc, t.doc))), this.Ca(n), r = null != r && r;
	        const o = t && !r ? this.Fa() : [], _ = 0 === this.pa.size && this.current && !r ? 1 /* SyncState.Synced */ : 0 /* SyncState.Local */ , a = _ !== this.ga;
	        // We are at synced state if there is no limbo docs are waiting to be resolved, view is current
	        // with the backend, and the query is not pending to reset due to existence filter mismatch.
	                if (this.ga = _, 0 !== s.length || a) {
	            return {
	                snapshot: new ViewSnapshot(this.query, e.wa, i, s, e.mutatedKeys, 0 /* SyncState.Local */ === _, a, 
	                /* excludesMetadataChanges= */ !1, !!n && n.resumeToken.approximateByteSize() > 0),
	                Ma: o
	            };
	        }
	        // no changes
	        return {
	            Ma: o
	        };
	    }
	    /**
	     * Applies an OnlineState change to the view, potentially generating a
	     * ViewChange if the view's syncState changes as a result.
	     */    sa(e) {
	        return this.current && "Offline" /* OnlineState.Offline */ === e ? (
	        // If we're offline, set `current` to false and then call applyChanges()
	        // to refresh our syncState and generate a ViewChange as appropriate. We
	        // are guaranteed to get a new TargetChange that sets `current` back to
	        // true once the client is back online.
	        this.current = !1, this.applyChanges({
	            wa: this.wa,
	            Da: new __PRIVATE_DocumentChangeSet,
	            mutatedKeys: this.mutatedKeys,
	            ls: !1
	        }, 
	        /* limboResolutionEnabled= */ !1)) : {
	            Ma: []
	        };
	    }
	    /**
	     * Returns whether the doc for the given key should be in limbo.
	     */    xa(e) {
	        // If the remote end says it's part of this query, it's not in limbo.
	        return !this.fa.has(e) && (
	        // The local store doesn't think it's a result, so it shouldn't be in limbo.
	        !!this.wa.has(e) && !this.wa.get(e).hasLocalMutations);
	    }
	    /**
	     * Updates syncedDocuments, current, and limbo docs based on the given change.
	     * Returns the list of changes to which docs are in limbo.
	     */    Ca(e) {
	        e && (e.addedDocuments.forEach((e => this.fa = this.fa.add(e))), e.modifiedDocuments.forEach((e => {})), 
	        e.removedDocuments.forEach((e => this.fa = this.fa.delete(e))), this.current = e.current);
	    }
	    Fa() {
	        // We can only determine limbo documents when we're in-sync with the server.
	        if (!this.current) return [];
	        // TODO(klimt): Do this incrementally so that it's not quadratic when
	        // updating many documents.
	                const e = this.pa;
	        this.pa = __PRIVATE_documentKeySet(), this.wa.forEach((e => {
	            this.xa(e.key) && (this.pa = this.pa.add(e.key));
	        }));
	        // Diff the new limbo docs with the old limbo docs.
	        const t = [];
	        return e.forEach((e => {
	            this.pa.has(e) || t.push(new __PRIVATE_RemovedLimboDocument(e));
	        })), this.pa.forEach((n => {
	            e.has(n) || t.push(new __PRIVATE_AddedLimboDocument(n));
	        })), t;
	    }
	    /**
	     * Update the in-memory state of the current view with the state read from
	     * persistence.
	     *
	     * We update the query view whenever a client's primary status changes:
	     * - When a client transitions from primary to secondary, it can miss
	     *   LocalStorage updates and its query views may temporarily not be
	     *   synchronized with the state on disk.
	     * - For secondary to primary transitions, the client needs to update the list
	     *   of `syncedDocuments` since secondary clients update their query views
	     *   based purely on synthesized RemoteEvents.
	     *
	     * @param queryResult.documents - The documents that match the query according
	     * to the LocalStore.
	     * @param queryResult.remoteKeys - The keys of the documents that match the
	     * query according to the backend.
	     *
	     * @returns The ViewChange that resulted from this synchronization.
	     */
	    // PORTING NOTE: Multi-tab only.
	    Oa(e) {
	        this.fa = e.gs, this.pa = __PRIVATE_documentKeySet();
	        const t = this.ba(e.documents);
	        return this.applyChanges(t, /* limboResolutionEnabled= */ !0);
	    }
	    /**
	     * Returns a view snapshot as if this query was just listened to. Contains
	     * a document add for every existing document and the `fromCache` and
	     * `hasPendingWrites` status of the already established view.
	     */
	    // PORTING NOTE: Multi-tab only.
	    Na() {
	        return ViewSnapshot.fromInitialDocuments(this.query, this.wa, this.mutatedKeys, 0 /* SyncState.Local */ === this.ga, this.hasCachedResults);
	    }
	}

	const Jt = "SyncEngine";

	/**
	 * QueryView contains all of the data that SyncEngine needs to keep track of for
	 * a particular query.
	 */ class __PRIVATE_QueryView {
	    constructor(
	    /**
	     * The query itself.
	     */
	    e, 
	    /**
	     * The target number created by the client that is used in the watch
	     * stream to identify this query.
	     */
	    t, 
	    /**
	     * The view is responsible for computing the final merged truth of what
	     * docs are in the query. It gets notified of local and remote changes,
	     * and applies the query filters and limits to determine the most correct
	     * possible results.
	     */
	    n) {
	        this.query = e, this.targetId = t, this.view = n;
	    }
	}

	/** Tracks a limbo resolution. */ class LimboResolution {
	    constructor(e) {
	        this.key = e, 
	        /**
	         * Set to true once we've received a document. This is used in
	         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
	         * decide whether it needs to manufacture a delete event for the target once
	         * the target is CURRENT.
	         */
	        this.Ba = !1;
	    }
	}

	/**
	 * An implementation of `SyncEngine` coordinating with other parts of SDK.
	 *
	 * The parts of SyncEngine that act as a callback to RemoteStore need to be
	 * registered individually. This is done in `syncEngineWrite()` and
	 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
	 * serve as entry points to RemoteStore's functionality.
	 *
	 * Note: some field defined in this class might have public access level, but
	 * the class is not exported so they are only accessible from this module.
	 * This is useful to implement optional features (like bundles) in free
	 * functions, such that they are tree-shakeable.
	 */ class __PRIVATE_SyncEngineImpl {
	    constructor(e, t, n, 
	    // PORTING NOTE: Manages state synchronization in multi-tab environments.
	    r, i, s) {
	        this.localStore = e, this.remoteStore = t, this.eventManager = n, this.sharedClientState = r, 
	        this.currentUser = i, this.maxConcurrentLimboResolutions = s, this.La = {}, this.ka = new ObjectMap((e => __PRIVATE_canonifyQuery(e)), __PRIVATE_queryEquals), 
	        this.qa = new Map, 
	        /**
	         * The keys of documents that are in limbo for which we haven't yet started a
	         * limbo resolution query. The strings in this set are the result of calling
	         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
	         *
	         * The `Set` type was chosen because it provides efficient lookup and removal
	         * of arbitrary elements and it also maintains insertion order, providing the
	         * desired queue-like FIFO semantics.
	         */
	        this.Qa = new Set, 
	        /**
	         * Keeps track of the target ID for each document that is in limbo with an
	         * active target.
	         */
	        this.$a = new SortedMap(DocumentKey.comparator), 
	        /**
	         * Keeps track of the information about an active limbo resolution for each
	         * active target ID that was started for the purpose of limbo resolution.
	         */
	        this.Ka = new Map, this.Ua = new __PRIVATE_ReferenceSet, 
	        /** Stores user completion handlers, indexed by User and BatchId. */
	        this.Wa = {}, 
	        /** Stores user callbacks waiting for all pending writes to be acknowledged. */
	        this.Ga = new Map, this.za = __PRIVATE_TargetIdGenerator.Un(), this.onlineState = "Unknown" /* OnlineState.Unknown */ , 
	        // The primary state is set to `true` or `false` immediately after Firestore
	        // startup. In the interim, a client should only be considered primary if
	        // `isPrimary` is true.
	        this.ja = void 0;
	    }
	    get isPrimaryClient() {
	        return !0 === this.ja;
	    }
	}

	/**
	 * Initiates the new listen, resolves promise when listen enqueued to the
	 * server. All the subsequent view snapshots or errors are sent to the
	 * subscribed handlers. Returns the initial snapshot.
	 */
	async function __PRIVATE_syncEngineListen(e, t, n = !0) {
	    const r = __PRIVATE_ensureWatchCallbacks(e);
	    let i;
	    const s = r.ka.get(t);
	    return s ? (
	    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
	    // already exists when EventManager calls us for the first time. This
	    // happens when the primary tab is already listening to this query on
	    // behalf of another tab and the user of the primary also starts listening
	    // to the query. EventManager will not have an assigned target ID in this
	    // case and calls `listen` to obtain this ID.
	    r.sharedClientState.addLocalQueryTarget(s.targetId), i = s.view.Na()) : i = await __PRIVATE_allocateTargetAndMaybeListen(r, t, n, 
	    /** shouldInitializeView= */ !0), i;
	}

	/** Query has been listening to the cache, and tries to initiate the remote store listen */ async function __PRIVATE_triggerRemoteStoreListen(e, t) {
	    const n = __PRIVATE_ensureWatchCallbacks(e);
	    await __PRIVATE_allocateTargetAndMaybeListen(n, t, 
	    /** shouldListenToRemote= */ !0, 
	    /** shouldInitializeView= */ !1);
	}

	async function __PRIVATE_allocateTargetAndMaybeListen(e, t, n, r) {
	    const i = await __PRIVATE_localStoreAllocateTarget(e.localStore, __PRIVATE_queryToTarget(t)), s = i.targetId, o = e.sharedClientState.addLocalQueryTarget(s, n);
	    let _;
	    return r && (_ = await __PRIVATE_initializeViewAndComputeSnapshot(e, t, s, "current" === o, i.resumeToken)), 
	    e.isPrimaryClient && n && __PRIVATE_remoteStoreListen(e.remoteStore, i), _;
	}

	/**
	 * Registers a view for a previously unknown query and computes its initial
	 * snapshot.
	 */ async function __PRIVATE_initializeViewAndComputeSnapshot(e, t, n, r, i) {
	    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
	    // targets based on view changes. This allows us to only depend on Limbo
	    // changes when user code includes queries.
	    e.Ha = (t, n, r) => async function __PRIVATE_applyDocChanges(e, t, n, r) {
	        let i = t.view.ba(n);
	        i.ls && (
	        // The query has a limit and some docs were removed, so we need
	        // to re-run the query against the local store to make sure we
	        // didn't lose any good docs that had been past the limit.
	        i = await __PRIVATE_localStoreExecuteQuery(e.localStore, t.query, 
	        /* usePreviousResults= */ !1).then((({documents: e}) => t.view.ba(e, i))));
	        const s = r && r.targetChanges.get(t.targetId), o = r && null != r.targetMismatches.get(t.targetId), _ = t.view.applyChanges(i, 
	        /* limboResolutionEnabled= */ e.isPrimaryClient, s, o);
	        return __PRIVATE_updateTrackedLimbos(e, t.targetId, _.Ma), _.snapshot;
	    }(e, t, n, r);
	    const s = await __PRIVATE_localStoreExecuteQuery(e.localStore, t, 
	    /* usePreviousResults= */ !0), o = new __PRIVATE_View(t, s.gs), _ = o.ba(s.documents), a = TargetChange.createSynthesizedTargetChangeForCurrentChange(n, r && "Offline" /* OnlineState.Offline */ !== e.onlineState, i), u = o.applyChanges(_, 
	    /* limboResolutionEnabled= */ e.isPrimaryClient, a);
	    __PRIVATE_updateTrackedLimbos(e, n, u.Ma);
	    const c = new __PRIVATE_QueryView(t, n, o);
	    return e.ka.set(t, c), e.qa.has(n) ? e.qa.get(n).push(t) : e.qa.set(n, [ t ]), u.snapshot;
	}

	/** Stops listening to the query. */ async function __PRIVATE_syncEngineUnlisten(e, t, n) {
	    const r = __PRIVATE_debugCast(e), i = r.ka.get(t), s = r.qa.get(i.targetId);
	    if (s.length > 1) return r.qa.set(i.targetId, s.filter((e => !__PRIVATE_queryEquals(e, t)))), 
	    void r.ka.delete(t);
	    // No other queries are mapped to the target, clean up the query and the target.
	        if (r.isPrimaryClient) {
	        // We need to remove the local query target first to allow us to verify
	        // whether any other client is still interested in this target.
	        r.sharedClientState.removeLocalQueryTarget(i.targetId);
	        r.sharedClientState.isActiveQueryTarget(i.targetId) || await __PRIVATE_localStoreReleaseTarget(r.localStore, i.targetId, 
	        /*keepPersistedTargetData=*/ !1).then((() => {
	            r.sharedClientState.clearQueryState(i.targetId), n && __PRIVATE_remoteStoreUnlisten(r.remoteStore, i.targetId), 
	            __PRIVATE_removeAndCleanupTarget(r, i.targetId);
	        })).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
	    } else __PRIVATE_removeAndCleanupTarget(r, i.targetId), await __PRIVATE_localStoreReleaseTarget(r.localStore, i.targetId, 
	    /*keepPersistedTargetData=*/ !0);
	}

	/** Unlistens to the remote store while still listening to the cache. */ async function __PRIVATE_triggerRemoteStoreUnlisten(e, t) {
	    const n = __PRIVATE_debugCast(e), r = n.ka.get(t), i = n.qa.get(r.targetId);
	    n.isPrimaryClient && 1 === i.length && (
	    // PORTING NOTE: Unregister the target ID with local Firestore client as
	    // watch target.
	    n.sharedClientState.removeLocalQueryTarget(r.targetId), __PRIVATE_remoteStoreUnlisten(n.remoteStore, r.targetId));
	}

	/**
	 * Initiates the write of local mutation batch which involves adding the
	 * writes to the mutation queue, notifying the remote store about new
	 * mutations and raising events for any changes this write caused.
	 *
	 * The promise returned by this call is resolved when the above steps
	 * have completed, *not* when the write was acked by the backend. The
	 * userCallback is resolved once the write was acked/rejected by the
	 * backend (or failed locally for any other reason).
	 */ async function __PRIVATE_syncEngineWrite(e, t, n) {
	    const r = __PRIVATE_syncEngineEnsureWriteCallbacks(e);
	    try {
	        const e = await function __PRIVATE_localStoreWriteLocally(e, t) {
	            const n = __PRIVATE_debugCast(e), r = Timestamp.now(), i = t.reduce(((e, t) => e.add(t.key)), __PRIVATE_documentKeySet());
	            let s, o;
	            return n.persistence.runTransaction("Locally write mutations", "readwrite", (e => {
	                // Figure out which keys do not have a remote version in the cache, this
	                // is needed to create the right overlay mutation: if no remote version
	                // presents, we do not need to create overlays as patch mutations.
	                // TODO(Overlay): Is there a better way to determine this? Using the
	                //  document version does not work because local mutations set them back
	                //  to 0.
	                let _ = __PRIVATE_mutableDocumentMap(), a = __PRIVATE_documentKeySet();
	                return n.ds.getEntries(e, i).next((e => {
	                    _ = e, _.forEach(((e, t) => {
	                        t.isValidDocument() || (a = a.add(e));
	                    }));
	                })).next((() => n.localDocuments.getOverlayedDocuments(e, _))).next((i => {
	                    s = i;
	                    // For non-idempotent mutations (such as `FieldValue.increment()`),
	                    // we record the base state in a separate patch mutation. This is
	                    // later used to guarantee consistent values and prevents flicker
	                    // even if the backend sends us an update that already includes our
	                    // transform.
	                    const o = [];
	                    for (const e of t) {
	                        const t = __PRIVATE_mutationExtractBaseValue(e, s.get(e.key).overlayedDocument);
	                        null != t && 
	                        // NOTE: The base state should only be applied if there's some
	                        // existing document to override, so use a Precondition of
	                        // exists=true
	                        o.push(new __PRIVATE_PatchMutation(e.key, t, __PRIVATE_extractFieldMask(t.value.mapValue), Precondition.exists(!0)));
	                    }
	                    return n.mutationQueue.addMutationBatch(e, r, o, t);
	                })).next((t => {
	                    o = t;
	                    const r = t.applyToLocalDocumentSet(s, a);
	                    return n.documentOverlayCache.saveOverlays(e, t.batchId, r);
	                }));
	            })).then((() => ({
	                batchId: o.batchId,
	                changes: __PRIVATE_convertOverlayedDocumentMapToDocumentMap(s)
	            })));
	        }(r.localStore, t);
	        r.sharedClientState.addPendingMutation(e.batchId), function __PRIVATE_addMutationCallback(e, t, n) {
	            let r = e.Wa[e.currentUser.toKey()];
	            r || (r = new SortedMap(__PRIVATE_primitiveComparator));
	            r = r.insert(t, n), e.Wa[e.currentUser.toKey()] = r;
	        }
	        /**
	 * Resolves or rejects the user callback for the given batch and then discards
	 * it.
	 */ (r, e.batchId, n), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r, e.changes), 
	        await __PRIVATE_fillWritePipeline(r.remoteStore);
	    } catch (e) {
	        // If we can't persist the mutation, we reject the user callback and
	        // don't send the mutation. The user can then retry the write.
	        const t = __PRIVATE_wrapInUserErrorIfRecoverable(e, "Failed to persist write");
	        n.reject(t);
	    }
	}

	/**
	 * Applies one remote event to the sync engine, notifying any views of the
	 * changes, and releasing any pending mutation batches that would become
	 * visible because of the snapshot version the remote event contains.
	 */ async function __PRIVATE_syncEngineApplyRemoteEvent(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    try {
	        const e = await __PRIVATE_localStoreApplyRemoteEventToLocalCache(n.localStore, t);
	        // Update `receivedDocument` as appropriate for any limbo targets.
	                t.targetChanges.forEach(((e, t) => {
	            const r = n.Ka.get(t);
	            r && (
	            // Since this is a limbo resolution lookup, it's for a single document
	            // and it could be added, modified, or removed, but not a combination.
	            __PRIVATE_hardAssert(e.addedDocuments.size + e.modifiedDocuments.size + e.removedDocuments.size <= 1), 
	            e.addedDocuments.size > 0 ? r.Ba = !0 : e.modifiedDocuments.size > 0 ? __PRIVATE_hardAssert(r.Ba) : e.removedDocuments.size > 0 && (__PRIVATE_hardAssert(r.Ba), 
	            r.Ba = !1));
	        })), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e, t);
	    } catch (e) {
	        await __PRIVATE_ignoreIfPrimaryLeaseLoss(e);
	    }
	}

	/**
	 * Applies an OnlineState change to the sync engine and notifies any views of
	 * the change.
	 */ function __PRIVATE_syncEngineApplyOnlineStateChange(e, t, n) {
	    const r = __PRIVATE_debugCast(e);
	    // If we are the secondary client, we explicitly ignore the remote store's
	    // online state (the local client may go offline, even though the primary
	    // tab remains online) and only apply the primary tab's online state from
	    // SharedClientState.
	        if (r.isPrimaryClient && 0 /* OnlineStateSource.RemoteStore */ === n || !r.isPrimaryClient && 1 /* OnlineStateSource.SharedClientState */ === n) {
	        const e = [];
	        r.ka.forEach(((n, r) => {
	            const i = r.view.sa(t);
	            i.snapshot && e.push(i.snapshot);
	        })), function __PRIVATE_eventManagerOnOnlineStateChange(e, t) {
	            const n = __PRIVATE_debugCast(e);
	            n.onlineState = t;
	            let r = !1;
	            n.queries.forEach(((e, n) => {
	                for (const e of n.ta) 
	                // Run global snapshot listeners if a consistent snapshot has been emitted.
	                e.sa(t) && (r = !0);
	            })), r && __PRIVATE_raiseSnapshotsInSyncEvent(n);
	        }(r.eventManager, t), e.length && r.La.p_(e), r.onlineState = t, r.isPrimaryClient && r.sharedClientState.setOnlineState(t);
	    }
	}

	/**
	 * Rejects the listen for the given targetID. This can be triggered by the
	 * backend for any active target.
	 *
	 * @param syncEngine - The sync engine implementation.
	 * @param targetId - The targetID corresponds to one previously initiated by the
	 * user as part of TargetData passed to listen() on RemoteStore.
	 * @param err - A description of the condition that has forced the rejection.
	 * Nearly always this will be an indication that the user is no longer
	 * authorized to see the data matching the target.
	 */ async function __PRIVATE_syncEngineRejectListen(e, t, n) {
	    const r = __PRIVATE_debugCast(e);
	    // PORTING NOTE: Multi-tab only.
	        r.sharedClientState.updateQueryState(t, "rejected", n);
	    const i = r.Ka.get(t), s = i && i.key;
	    if (s) {
	        // TODO(klimt): We really only should do the following on permission
	        // denied errors, but we don't have the cause code here.
	        // It's a limbo doc. Create a synthetic event saying it was deleted.
	        // This is kind of a hack. Ideally, we would have a method in the local
	        // store to purge a document. However, it would be tricky to keep all of
	        // the local store's invariants with another method.
	        let e = new SortedMap(DocumentKey.comparator);
	        // TODO(b/217189216): This limbo document should ideally have a read time,
	        // so that it is picked up by any read-time based scans. The backend,
	        // however, does not send a read time for target removals.
	                e = e.insert(s, MutableDocument.newNoDocument(s, SnapshotVersion.min()));
	        const n = __PRIVATE_documentKeySet().add(s), i = new RemoteEvent(SnapshotVersion.min(), 
	        /* targetChanges= */ new Map, 
	        /* targetMismatches= */ new SortedMap(__PRIVATE_primitiveComparator), e, n);
	        await __PRIVATE_syncEngineApplyRemoteEvent(r, i), 
	        // Since this query failed, we won't want to manually unlisten to it.
	        // We only remove it from bookkeeping after we successfully applied the
	        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
	        // this query when the RemoteStore restarts the Watch stream, which should
	        // re-trigger the target failure.
	        r.$a = r.$a.remove(s), r.Ka.delete(t), __PRIVATE_pumpEnqueuedLimboResolutions(r);
	    } else await __PRIVATE_localStoreReleaseTarget(r.localStore, t, 
	    /* keepPersistedTargetData */ !1).then((() => __PRIVATE_removeAndCleanupTarget(r, t, n))).catch(__PRIVATE_ignoreIfPrimaryLeaseLoss);
	}

	async function __PRIVATE_syncEngineApplySuccessfulWrite(e, t) {
	    const n = __PRIVATE_debugCast(e), r = t.batch.batchId;
	    try {
	        const e = await __PRIVATE_localStoreAcknowledgeBatch(n.localStore, t);
	        // The local store may or may not be able to apply the write result and
	        // raise events immediately (depending on whether the watcher is caught
	        // up), so we raise user callbacks first so that they consistently happen
	        // before listen events.
	                __PRIVATE_processUserCallback(n, r, /*error=*/ null), __PRIVATE_triggerPendingWritesCallbacks(n, r), 
	        n.sharedClientState.updateMutationState(r, "acknowledged"), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e);
	    } catch (e) {
	        await __PRIVATE_ignoreIfPrimaryLeaseLoss(e);
	    }
	}

	async function __PRIVATE_syncEngineRejectFailedWrite(e, t, n) {
	    const r = __PRIVATE_debugCast(e);
	    try {
	        const e = await function __PRIVATE_localStoreRejectBatch(e, t) {
	            const n = __PRIVATE_debugCast(e);
	            return n.persistence.runTransaction("Reject batch", "readwrite-primary", (e => {
	                let r;
	                return n.mutationQueue.lookupMutationBatch(e, t).next((t => (__PRIVATE_hardAssert(null !== t), 
	                r = t.keys(), n.mutationQueue.removeMutationBatch(e, t)))).next((() => n.mutationQueue.performConsistencyCheck(e))).next((() => n.documentOverlayCache.removeOverlaysForBatchId(e, r, t))).next((() => n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e, r))).next((() => n.localDocuments.getDocuments(e, r)));
	            }));
	        }
	        /**
	 * Returns the largest (latest) batch id in mutation queue that is pending
	 * server response.
	 *
	 * Returns `BATCHID_UNKNOWN` if the queue is empty.
	 */ (r.localStore, t);
	        // The local store may or may not be able to apply the write result and
	        // raise events immediately (depending on whether the watcher is caught up),
	        // so we raise user callbacks first so that they consistently happen before
	        // listen events.
	                __PRIVATE_processUserCallback(r, t, n), __PRIVATE_triggerPendingWritesCallbacks(r, t), 
	        r.sharedClientState.updateMutationState(t, "rejected", n), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(r, e);
	    } catch (n) {
	        await __PRIVATE_ignoreIfPrimaryLeaseLoss(n);
	    }
	}

	/**
	 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
	 * if there are any.
	 */ function __PRIVATE_triggerPendingWritesCallbacks(e, t) {
	    (e.Ga.get(t) || []).forEach((e => {
	        e.resolve();
	    })), e.Ga.delete(t);
	}

	/** Reject all outstanding callbacks waiting for pending writes to complete. */ function __PRIVATE_processUserCallback(e, t, n) {
	    const r = __PRIVATE_debugCast(e);
	    let i = r.Wa[r.currentUser.toKey()];
	    // NOTE: Mutations restored from persistence won't have callbacks, so it's
	    // okay for there to be no callback for this ID.
	        if (i) {
	        const e = i.get(t);
	        e && (n ? e.reject(n) : e.resolve(), i = i.remove(t)), r.Wa[r.currentUser.toKey()] = i;
	    }
	}

	function __PRIVATE_removeAndCleanupTarget(e, t, n = null) {
	    e.sharedClientState.removeLocalQueryTarget(t);
	    for (const r of e.qa.get(t)) e.ka.delete(r), n && e.La.Ja(r, n);
	    if (e.qa.delete(t), e.isPrimaryClient) {
	        e.Ua.br(t).forEach((t => {
	            e.Ua.containsKey(t) || 
	            // We removed the last reference for this key
	            __PRIVATE_removeLimboTarget(e, t);
	        }));
	    }
	}

	function __PRIVATE_removeLimboTarget(e, t) {
	    e.Qa.delete(t.path.canonicalString());
	    // It's possible that the target already got removed because the query failed. In that case,
	    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
	    const n = e.$a.get(t);
	    null !== n && (__PRIVATE_remoteStoreUnlisten(e.remoteStore, n), e.$a = e.$a.remove(t), 
	    e.Ka.delete(n), __PRIVATE_pumpEnqueuedLimboResolutions(e));
	}

	function __PRIVATE_updateTrackedLimbos(e, t, n) {
	    for (const r of n) if (r instanceof __PRIVATE_AddedLimboDocument) e.Ua.addReference(r.key, t), 
	    __PRIVATE_trackLimboChange(e, r); else if (r instanceof __PRIVATE_RemovedLimboDocument) {
	        __PRIVATE_logDebug(Jt, "Document no longer in limbo: " + r.key), e.Ua.removeReference(r.key, t);
	        e.Ua.containsKey(r.key) || 
	        // We removed the last reference for this key
	        __PRIVATE_removeLimboTarget(e, r.key);
	    } else fail();
	}

	function __PRIVATE_trackLimboChange(e, t) {
	    const n = t.key, r = n.path.canonicalString();
	    e.$a.get(n) || e.Qa.has(r) || (__PRIVATE_logDebug(Jt, "New document in limbo: " + n), 
	    e.Qa.add(r), __PRIVATE_pumpEnqueuedLimboResolutions(e));
	}

	/**
	 * Starts listens for documents in limbo that are enqueued for resolution,
	 * subject to a maximum number of concurrent resolutions.
	 *
	 * Without bounding the number of concurrent resolutions, the server can fail
	 * with "resource exhausted" errors which can lead to pathological client
	 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
	 */ function __PRIVATE_pumpEnqueuedLimboResolutions(e) {
	    for (;e.Qa.size > 0 && e.$a.size < e.maxConcurrentLimboResolutions; ) {
	        const t = e.Qa.values().next().value;
	        e.Qa.delete(t);
	        const n = new DocumentKey(ResourcePath.fromString(t)), r = e.za.next();
	        e.Ka.set(r, new LimboResolution(n)), e.$a = e.$a.insert(n, r), __PRIVATE_remoteStoreListen(e.remoteStore, new TargetData(__PRIVATE_queryToTarget(__PRIVATE_newQueryForPath(n.path)), r, "TargetPurposeLimboResolution" /* TargetPurpose.LimboResolution */ , __PRIVATE_ListenSequence.ae));
	    }
	}

	async function __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(e, t, n) {
	    const r = __PRIVATE_debugCast(e), i = [], s = [], o = [];
	    r.ka.isEmpty() || (r.ka.forEach(((e, _) => {
	        o.push(r.Ha(_, t, n).then((e => {
	            var t;
	            // If there are changes, or we are handling a global snapshot, notify
	            // secondary clients to update query state.
	                        if ((e || n) && r.isPrimaryClient) {
	                // Query state is set to `current` if:
	                // - There is a view change and it is up-to-date, or,
	                // - There is a global snapshot, the Target is current, and no changes to be resolved
	                const i = e ? !e.fromCache : null === (t = null == n ? void 0 : n.targetChanges.get(_.targetId)) || void 0 === t ? void 0 : t.current;
	                r.sharedClientState.updateQueryState(_.targetId, i ? "current" : "not-current");
	            }
	            // Update views if there are actual changes.
	                        if (e) {
	                i.push(e);
	                const t = __PRIVATE_LocalViewChanges.Yi(_.targetId, e);
	                s.push(t);
	            }
	        })));
	    })), await Promise.all(o), r.La.p_(i), await async function __PRIVATE_localStoreNotifyLocalViewChanges(e, t) {
	        const n = __PRIVATE_debugCast(e);
	        try {
	            await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (e => PersistencePromise.forEach(t, (t => PersistencePromise.forEach(t.Hi, (r => n.persistence.referenceDelegate.addReference(e, t.targetId, r))).next((() => PersistencePromise.forEach(t.Ji, (r => n.persistence.referenceDelegate.removeReference(e, t.targetId, r)))))))));
	        } catch (e) {
	            if (!__PRIVATE_isIndexedDbTransactionError(e)) throw e;
	            // If `notifyLocalViewChanges` fails, we did not advance the sequence
	            // number for the documents that were included in this transaction.
	            // This might trigger them to be deleted earlier than they otherwise
	            // would have, but it should not invalidate the integrity of the data.
	            __PRIVATE_logDebug(Ot, "Failed to update sequence numbers: " + e);
	        }
	        for (const e of t) {
	            const t = e.targetId;
	            if (!e.fromCache) {
	                const e = n.Ts.get(t), r = e.snapshotVersion, i = e.withLastLimboFreeSnapshotVersion(r);
	                // Advance the last limbo free snapshot version
	                                n.Ts = n.Ts.insert(t, i);
	            }
	        }
	    }(r.localStore, s));
	}

	async function __PRIVATE_syncEngineHandleCredentialChange(e, t) {
	    const n = __PRIVATE_debugCast(e);
	    if (!n.currentUser.isEqual(t)) {
	        __PRIVATE_logDebug(Jt, "User change. New user:", t.toKey());
	        const e = await __PRIVATE_localStoreHandleUserChange(n.localStore, t);
	        n.currentUser = t, 
	        // Fails tasks waiting for pending writes requested by previous user.
	        function __PRIVATE_rejectOutstandingPendingWritesCallbacks(e, t) {
	            e.Ga.forEach((e => {
	                e.forEach((e => {
	                    e.reject(new FirestoreError(C.CANCELLED, t));
	                }));
	            })), e.Ga.clear();
	        }(n, "'waitForPendingWrites' promise is rejected due to a user change."), 
	        // TODO(b/114226417): Consider calling this only in the primary tab.
	        n.sharedClientState.handleUserChange(t, e.removedBatchIds, e.addedBatchIds), await __PRIVATE_syncEngineEmitNewSnapsAndNotifyLocalStore(n, e.Rs);
	    }
	}

	function __PRIVATE_syncEngineGetRemoteKeysForTarget(e, t) {
	    const n = __PRIVATE_debugCast(e), r = n.Ka.get(t);
	    if (r && r.Ba) return __PRIVATE_documentKeySet().add(r.key);
	    {
	        let e = __PRIVATE_documentKeySet();
	        const r = n.qa.get(t);
	        if (!r) return e;
	        for (const t of r) {
	            const r = n.ka.get(t);
	            e = e.unionWith(r.view.Sa);
	        }
	        return e;
	    }
	}

	function __PRIVATE_ensureWatchCallbacks(e) {
	    const t = __PRIVATE_debugCast(e);
	    return t.remoteStore.remoteSyncer.applyRemoteEvent = __PRIVATE_syncEngineApplyRemoteEvent.bind(null, t), 
	    t.remoteStore.remoteSyncer.getRemoteKeysForTarget = __PRIVATE_syncEngineGetRemoteKeysForTarget.bind(null, t), 
	    t.remoteStore.remoteSyncer.rejectListen = __PRIVATE_syncEngineRejectListen.bind(null, t), 
	    t.La.p_ = __PRIVATE_eventManagerOnWatchChange.bind(null, t.eventManager), t.La.Ja = __PRIVATE_eventManagerOnWatchError.bind(null, t.eventManager), 
	    t;
	}

	function __PRIVATE_syncEngineEnsureWriteCallbacks(e) {
	    const t = __PRIVATE_debugCast(e);
	    return t.remoteStore.remoteSyncer.applySuccessfulWrite = __PRIVATE_syncEngineApplySuccessfulWrite.bind(null, t), 
	    t.remoteStore.remoteSyncer.rejectFailedWrite = __PRIVATE_syncEngineRejectFailedWrite.bind(null, t), 
	    t;
	}

	class __PRIVATE_MemoryOfflineComponentProvider {
	    constructor() {
	        this.kind = "memory", this.synchronizeTabs = !1;
	    }
	    async initialize(e) {
	        this.serializer = __PRIVATE_newSerializer(e.databaseInfo.databaseId), this.sharedClientState = this.Za(e), 
	        this.persistence = this.Xa(e), await this.persistence.start(), this.localStore = this.eu(e), 
	        this.gcScheduler = this.tu(e, this.localStore), this.indexBackfillerScheduler = this.nu(e, this.localStore);
	    }
	    tu(e, t) {
	        return null;
	    }
	    nu(e, t) {
	        return null;
	    }
	    eu(e) {
	        return __PRIVATE_newLocalStore(this.persistence, new __PRIVATE_QueryEngine, e.initialUser, this.serializer);
	    }
	    Xa(e) {
	        return new __PRIVATE_MemoryPersistence(__PRIVATE_MemoryEagerDelegate.ri, this.serializer);
	    }
	    Za(e) {
	        return new __PRIVATE_MemorySharedClientState;
	    }
	    async terminate() {
	        var e, t;
	        null === (e = this.gcScheduler) || void 0 === e || e.stop(), null === (t = this.indexBackfillerScheduler) || void 0 === t || t.stop(), 
	        this.sharedClientState.shutdown(), await this.persistence.shutdown();
	    }
	}

	__PRIVATE_MemoryOfflineComponentProvider.provider = {
	    build: () => new __PRIVATE_MemoryOfflineComponentProvider
	};

	class __PRIVATE_LruGcMemoryOfflineComponentProvider extends __PRIVATE_MemoryOfflineComponentProvider {
	    constructor(e) {
	        super(), this.cacheSizeBytes = e;
	    }
	    tu(e, t) {
	        __PRIVATE_hardAssert(this.persistence.referenceDelegate instanceof __PRIVATE_MemoryLruDelegate);
	        const n = this.persistence.referenceDelegate.garbageCollector;
	        return new __PRIVATE_LruScheduler(n, e.asyncQueue, t);
	    }
	    Xa(e) {
	        const t = void 0 !== this.cacheSizeBytes ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
	        return new __PRIVATE_MemoryPersistence((e => __PRIVATE_MemoryLruDelegate.ri(e, t)), this.serializer);
	    }
	}

	/**
	 * Initializes and wires the components that are needed to interface with the
	 * network.
	 */ class OnlineComponentProvider {
	    async initialize(e, t) {
	        this.localStore || (this.localStore = e.localStore, this.sharedClientState = e.sharedClientState, 
	        this.datastore = this.createDatastore(t), this.remoteStore = this.createRemoteStore(t), 
	        this.eventManager = this.createEventManager(t), this.syncEngine = this.createSyncEngine(t, 
	        /* startAsPrimary=*/ !e.synchronizeTabs), this.sharedClientState.onlineStateHandler = e => __PRIVATE_syncEngineApplyOnlineStateChange(this.syncEngine, e, 1 /* OnlineStateSource.SharedClientState */), 
	        this.remoteStore.remoteSyncer.handleCredentialChange = __PRIVATE_syncEngineHandleCredentialChange.bind(null, this.syncEngine), 
	        await __PRIVATE_remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient));
	    }
	    createEventManager(e) {
	        return function __PRIVATE_newEventManager() {
	            return new __PRIVATE_EventManagerImpl;
	        }();
	    }
	    createDatastore(e) {
	        const t = __PRIVATE_newSerializer(e.databaseInfo.databaseId), n = function __PRIVATE_newConnection(e) {
	            return new __PRIVATE_WebChannelConnection(e);
	        }
	        /** Return the Platform-specific connectivity monitor. */ (e.databaseInfo);
	        return function __PRIVATE_newDatastore(e, t, n, r) {
	            return new __PRIVATE_DatastoreImpl(e, t, n, r);
	        }(e.authCredentials, e.appCheckCredentials, n, t);
	    }
	    createRemoteStore(e) {
	        return function __PRIVATE_newRemoteStore(e, t, n, r, i) {
	            return new __PRIVATE_RemoteStoreImpl(e, t, n, r, i);
	        }
	        /** Re-enables the network. Idempotent. */ (this.localStore, this.datastore, e.asyncQueue, (e => __PRIVATE_syncEngineApplyOnlineStateChange(this.syncEngine, e, 0 /* OnlineStateSource.RemoteStore */)), function __PRIVATE_newConnectivityMonitor() {
	            return __PRIVATE_BrowserConnectivityMonitor.D() ? new __PRIVATE_BrowserConnectivityMonitor : new __PRIVATE_NoopConnectivityMonitor;
	        }());
	    }
	    createSyncEngine(e, t) {
	        return function __PRIVATE_newSyncEngine(e, t, n, 
	        // PORTING NOTE: Manages state synchronization in multi-tab environments.
	        r, i, s, o) {
	            const _ = new __PRIVATE_SyncEngineImpl(e, t, n, r, i, s);
	            return o && (_.ja = !0), _;
	        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, e.initialUser, e.maxConcurrentLimboResolutions, t);
	    }
	    async terminate() {
	        var e, t;
	        await async function __PRIVATE_remoteStoreShutdown(e) {
	            const t = __PRIVATE_debugCast(e);
	            __PRIVATE_logDebug(zt, "RemoteStore shutting down."), t.W_.add(5 /* OfflineCause.Shutdown */), 
	            await __PRIVATE_disableNetworkInternal(t), t.z_.shutdown(), 
	            // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
	            // triggering spurious listener events with cached data, etc.
	            t.j_.set("Unknown" /* OnlineState.Unknown */);
	        }(this.remoteStore), null === (e = this.datastore) || void 0 === e || e.terminate(), 
	        null === (t = this.eventManager) || void 0 === t || t.terminate();
	    }
	}

	OnlineComponentProvider.provider = {
	    build: () => new OnlineComponentProvider
	};

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/*
	 * A wrapper implementation of Observer<T> that will dispatch events
	 * asynchronously. To allow immediate silencing, a mute call is added which
	 * causes events scheduled to no longer be raised.
	 */
	class __PRIVATE_AsyncObserver {
	    constructor(e) {
	        this.observer = e, 
	        /**
	         * When set to true, will not raise future events. Necessary to deal with
	         * async detachment of listener.
	         */
	        this.muted = !1;
	    }
	    next(e) {
	        this.muted || this.observer.next && this.iu(this.observer.next, e);
	    }
	    error(e) {
	        this.muted || (this.observer.error ? this.iu(this.observer.error, e) : __PRIVATE_logError("Uncaught Error in snapshot listener:", e.toString()));
	    }
	    su() {
	        this.muted = !0;
	    }
	    iu(e, t) {
	        setTimeout((() => {
	            this.muted || e(t);
	        }), 0);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Yt = "FirestoreClient";

	/**
	 * FirestoreClient is a top-level class that constructs and owns all of the //
	 * pieces of the client SDK architecture. It is responsible for creating the //
	 * async queue that is shared by all of the other components in the system. //
	 */
	class FirestoreClient {
	    constructor(e, t, 
	    /**
	     * Asynchronous queue responsible for all of our internal processing. When
	     * we get incoming work from the user (via public API) or the network
	     * (incoming GRPC messages), we should always schedule onto this queue.
	     * This ensures all of our work is properly serialized (e.g. we don't
	     * start processing a new operation while the previous one is waiting for
	     * an async I/O to complete).
	     */
	    n, r, i) {
	        this.authCredentials = e, this.appCheckCredentials = t, this.asyncQueue = n, this.databaseInfo = r, 
	        this.user = User.UNAUTHENTICATED, this.clientId = __PRIVATE_AutoId.newId(), this.authCredentialListener = () => Promise.resolve(), 
	        this.appCheckCredentialListener = () => Promise.resolve(), this._uninitializedComponentsProvider = i, 
	        this.authCredentials.start(n, (async e => {
	            __PRIVATE_logDebug(Yt, "Received user=", e.uid), await this.authCredentialListener(e), 
	            this.user = e;
	        })), this.appCheckCredentials.start(n, (e => (__PRIVATE_logDebug(Yt, "Received new app check token=", e), 
	        this.appCheckCredentialListener(e, this.user))));
	    }
	    get configuration() {
	        return {
	            asyncQueue: this.asyncQueue,
	            databaseInfo: this.databaseInfo,
	            clientId: this.clientId,
	            authCredentials: this.authCredentials,
	            appCheckCredentials: this.appCheckCredentials,
	            initialUser: this.user,
	            maxConcurrentLimboResolutions: 100
	        };
	    }
	    setCredentialChangeListener(e) {
	        this.authCredentialListener = e;
	    }
	    setAppCheckTokenChangeListener(e) {
	        this.appCheckCredentialListener = e;
	    }
	    terminate() {
	        this.asyncQueue.enterRestrictedMode();
	        const e = new __PRIVATE_Deferred;
	        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async () => {
	            try {
	                this._onlineComponents && await this._onlineComponents.terminate(), this._offlineComponents && await this._offlineComponents.terminate(), 
	                // The credentials provider must be terminated after shutting down the
	                // RemoteStore as it will prevent the RemoteStore from retrieving auth
	                // tokens.
	                this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), e.resolve();
	            } catch (t) {
	                const n = __PRIVATE_wrapInUserErrorIfRecoverable(t, "Failed to shutdown persistence");
	                e.reject(n);
	            }
	        })), e.promise;
	    }
	}

	async function __PRIVATE_setOfflineComponentProvider(e, t) {
	    e.asyncQueue.verifyOperationInProgress(), __PRIVATE_logDebug(Yt, "Initializing OfflineComponentProvider");
	    const n = e.configuration;
	    await t.initialize(n);
	    let r = n.initialUser;
	    e.setCredentialChangeListener((async e => {
	        r.isEqual(e) || (await __PRIVATE_localStoreHandleUserChange(t.localStore, e), r = e);
	    })), 
	    // When a user calls clearPersistence() in one client, all other clients
	    // need to be terminated to allow the delete to succeed.
	    t.persistence.setDatabaseDeletedListener((() => e.terminate())), e._offlineComponents = t;
	}

	async function __PRIVATE_setOnlineComponentProvider(e, t) {
	    e.asyncQueue.verifyOperationInProgress();
	    const n = await __PRIVATE_ensureOfflineComponents(e);
	    __PRIVATE_logDebug(Yt, "Initializing OnlineComponentProvider"), await t.initialize(n, e.configuration), 
	    // The CredentialChangeListener of the online component provider takes
	    // precedence over the offline component provider.
	    e.setCredentialChangeListener((e => __PRIVATE_remoteStoreHandleCredentialChange(t.remoteStore, e))), 
	    e.setAppCheckTokenChangeListener(((e, n) => __PRIVATE_remoteStoreHandleCredentialChange(t.remoteStore, n))), 
	    e._onlineComponents = t;
	}

	/**
	 * Decides whether the provided error allows us to gracefully disable
	 * persistence (as opposed to crashing the client).
	 */ async function __PRIVATE_ensureOfflineComponents(e) {
	    if (!e._offlineComponents) if (e._uninitializedComponentsProvider) {
	        __PRIVATE_logDebug(Yt, "Using user provided OfflineComponentProvider");
	        try {
	            await __PRIVATE_setOfflineComponentProvider(e, e._uninitializedComponentsProvider._offline);
	        } catch (t) {
	            const n = t;
	            if (!function __PRIVATE_canFallbackFromIndexedDbError(e) {
	                return "FirebaseError" === e.name ? e.code === C.FAILED_PRECONDITION || e.code === C.UNIMPLEMENTED : !("undefined" != typeof DOMException && e instanceof DOMException) || 
	                // When the browser is out of quota we could get either quota exceeded
	                // or an aborted error depending on whether the error happened during
	                // schema migration.
	                22 === e.code || 20 === e.code || 
	                // Firefox Private Browsing mode disables IndexedDb and returns
	                // INVALID_STATE for any usage.
	                11 === e.code;
	            }(n)) throw n;
	            __PRIVATE_logWarn("Error using user provided cache. Falling back to memory cache: " + n), 
	            await __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_MemoryOfflineComponentProvider);
	        }
	    } else __PRIVATE_logDebug(Yt, "Using default OfflineComponentProvider"), await __PRIVATE_setOfflineComponentProvider(e, new __PRIVATE_LruGcMemoryOfflineComponentProvider(void 0));
	    return e._offlineComponents;
	}

	async function __PRIVATE_ensureOnlineComponents(e) {
	    return e._onlineComponents || (e._uninitializedComponentsProvider ? (__PRIVATE_logDebug(Yt, "Using user provided OnlineComponentProvider"), 
	    await __PRIVATE_setOnlineComponentProvider(e, e._uninitializedComponentsProvider._online)) : (__PRIVATE_logDebug(Yt, "Using default OnlineComponentProvider"), 
	    await __PRIVATE_setOnlineComponentProvider(e, new OnlineComponentProvider))), e._onlineComponents;
	}

	function __PRIVATE_getSyncEngine(e) {
	    return __PRIVATE_ensureOnlineComponents(e).then((e => e.syncEngine));
	}

	async function __PRIVATE_getEventManager(e) {
	    const t = await __PRIVATE_ensureOnlineComponents(e), n = t.eventManager;
	    return n.onListen = __PRIVATE_syncEngineListen.bind(null, t.syncEngine), n.onUnlisten = __PRIVATE_syncEngineUnlisten.bind(null, t.syncEngine), 
	    n.onFirstRemoteStoreListen = __PRIVATE_triggerRemoteStoreListen.bind(null, t.syncEngine), 
	    n.onLastRemoteStoreUnlisten = __PRIVATE_triggerRemoteStoreUnlisten.bind(null, t.syncEngine), 
	    n;
	}

	function __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(e, t, n = {}) {
	    const r = new __PRIVATE_Deferred;
	    return e.asyncQueue.enqueueAndForget((async () => function __PRIVATE_readDocumentViaSnapshotListener(e, t, n, r, i) {
	        const s = new __PRIVATE_AsyncObserver({
	            next: _ => {
	                // Mute and remove query first before passing event to user to avoid
	                // user actions affecting the now stale query.
	                s.su(), t.enqueueAndForget((() => __PRIVATE_eventManagerUnlisten(e, o)));
	                const a = _.docs.has(n);
	                !a && _.fromCache ? 
	                // TODO(dimond): If we're online and the document doesn't
	                // exist then we resolve with a doc.exists set to false. If
	                // we're offline however, we reject the Promise in this
	                // case. Two options: 1) Cache the negative response from
	                // the server so we can deliver that even when you're
	                // offline 2) Actually reject the Promise in the online case
	                // if the document doesn't exist.
	                i.reject(new FirestoreError(C.UNAVAILABLE, "Failed to get document because the client is offline.")) : a && _.fromCache && r && "server" === r.source ? i.reject(new FirestoreError(C.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(_);
	            },
	            error: e => i.reject(e)
	        }), o = new __PRIVATE_QueryListener(__PRIVATE_newQueryForPath(n.path), s, {
	            includeMetadataChanges: !0,
	            Ta: !0
	        });
	        return __PRIVATE_eventManagerListen(e, o);
	    }(await __PRIVATE_getEventManager(e), e.asyncQueue, t, n, r))), r.promise;
	}

	/**
	 * @license
	 * Copyright 2023 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Compares two `ExperimentalLongPollingOptions` objects for equality.
	 */
	/**
	 * Creates and returns a new `ExperimentalLongPollingOptions` with the same
	 * option values as the given instance.
	 */
	function __PRIVATE_cloneLongPollingOptions(e) {
	    const t = {};
	    return void 0 !== e.timeoutSeconds && (t.timeoutSeconds = e.timeoutSeconds), t;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const Zt = new Map;

	/**
	 * An instance map that ensures only one Datastore exists per Firestore
	 * instance.
	 */
	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function __PRIVATE_validateNonEmptyArgument(e, t, n) {
	    if (!n) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${e}() cannot be called with an empty ${t}.`);
	}

	/**
	 * Validates that two boolean options are not set at the same time.
	 * @internal
	 */ function __PRIVATE_validateIsNotUsedTogether(e, t, n, r) {
	    if (!0 === t && !0 === r) throw new FirestoreError(C.INVALID_ARGUMENT, `${e} and ${n} cannot be used together.`);
	}

	/**
	 * Validates that `path` refers to a document (indicated by the fact it contains
	 * an even numbers of segments).
	 */ function __PRIVATE_validateDocumentPath(e) {
	    if (!DocumentKey.isDocumentKey(e)) throw new FirestoreError(C.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`);
	}

	/**
	 * Returns true if it's a non-null object without a custom prototype
	 * (i.e. excludes Array, Date, etc.).
	 */
	/** Returns a string describing the type / value of the provided input. */
	function __PRIVATE_valueDescription(e) {
	    if (void 0 === e) return "undefined";
	    if (null === e) return "null";
	    if ("string" == typeof e) return e.length > 20 && (e = `${e.substring(0, 20)}...`), 
	    JSON.stringify(e);
	    if ("number" == typeof e || "boolean" == typeof e) return "" + e;
	    if ("object" == typeof e) {
	        if (e instanceof Array) return "an array";
	        {
	            const t = 
	            /** try to get the constructor name for an object. */
	            function __PRIVATE_tryGetCustomObjectType(e) {
	                if (e.constructor) return e.constructor.name;
	                return null;
	            }
	            /**
	 * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
	 * underlying instance. Throws if  `obj` is not an instance of `T`.
	 *
	 * This cast is used in the Lite and Full SDK to verify instance types for
	 * arguments passed to the public API.
	 * @internal
	 */ (e);
	            return t ? `a custom ${t} object` : "an object";
	        }
	    }
	    return "function" == typeof e ? "a function" : fail();
	}

	function __PRIVATE_cast(e, 
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	t) {
	    if ("_delegate" in e && (
	    // Unwrap Compat types
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    e = e._delegate), !(e instanceof t)) {
	        if (t.name === e.constructor.name) throw new FirestoreError(C.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
	        {
	            const n = __PRIVATE_valueDescription(e);
	            throw new FirestoreError(C.INVALID_ARGUMENT, `Expected type '${t.name}', but it was: ${n}`);
	        }
	    }
	    return e;
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	// settings() defaults:
	const Xt = "firestore.googleapis.com", en = !0;

	/**
	 * A concrete type describing all the values that can be applied via a
	 * user-supplied `FirestoreSettings` object. This is a separate type so that
	 * defaults can be supplied and the value can be checked for equality.
	 */
	class FirestoreSettingsImpl {
	    constructor(e) {
	        var t, n;
	        if (void 0 === e.host) {
	            if (void 0 !== e.ssl) throw new FirestoreError(C.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
	            this.host = Xt, this.ssl = en;
	        } else this.host = e.host, this.ssl = null !== (t = e.ssl) && void 0 !== t ? t : en;
	        if (this.credentials = e.credentials, this.ignoreUndefinedProperties = !!e.ignoreUndefinedProperties, 
	        this.localCache = e.localCache, void 0 === e.cacheSizeBytes) this.cacheSizeBytes = St; else {
	            if (-1 !== e.cacheSizeBytes && e.cacheSizeBytes < Dt) throw new FirestoreError(C.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
	            this.cacheSizeBytes = e.cacheSizeBytes;
	        }
	        __PRIVATE_validateIsNotUsedTogether("experimentalForceLongPolling", e.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", e.experimentalAutoDetectLongPolling), 
	        this.experimentalForceLongPolling = !!e.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === e.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : 
	        // For backwards compatibility, coerce the value to boolean even though
	        // the TypeScript compiler has narrowed the type to boolean already.
	        // noinspection PointlessBooleanExpressionJS
	        this.experimentalAutoDetectLongPolling = !!e.experimentalAutoDetectLongPolling, 
	        this.experimentalLongPollingOptions = __PRIVATE_cloneLongPollingOptions(null !== (n = e.experimentalLongPollingOptions) && void 0 !== n ? n : {}), 
	        function __PRIVATE_validateLongPollingOptions(e) {
	            if (void 0 !== e.timeoutSeconds) {
	                if (isNaN(e.timeoutSeconds)) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e.timeoutSeconds} (must not be NaN)`);
	                if (e.timeoutSeconds < 5) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e.timeoutSeconds} (minimum allowed value is 5)`);
	                if (e.timeoutSeconds > 30) throw new FirestoreError(C.INVALID_ARGUMENT, `invalid long polling timeout: ${e.timeoutSeconds} (maximum allowed value is 30)`);
	            }
	        }
	        /**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	        /**
	 * The Cloud Firestore service interface.
	 *
	 * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.
	 */ (this.experimentalLongPollingOptions), this.useFetchStreams = !!e.useFetchStreams;
	    }
	    isEqual(e) {
	        return this.host === e.host && this.ssl === e.ssl && this.credentials === e.credentials && this.cacheSizeBytes === e.cacheSizeBytes && this.experimentalForceLongPolling === e.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === e.experimentalAutoDetectLongPolling && function __PRIVATE_longPollingOptionsEqual(e, t) {
	            return e.timeoutSeconds === t.timeoutSeconds;
	        }(this.experimentalLongPollingOptions, e.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === e.ignoreUndefinedProperties && this.useFetchStreams === e.useFetchStreams;
	    }
	}

	class Firestore$1 {
	    /** @hideconstructor */
	    constructor(e, t, n, r) {
	        this._authCredentials = e, this._appCheckCredentials = t, this._databaseId = n, 
	        this._app = r, 
	        /**
	         * Whether it's a Firestore or Firestore Lite instance.
	         */
	        this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new FirestoreSettingsImpl({}), 
	        this._settingsFrozen = !1, 
	        // A task that is assigned when the terminate() is invoked and resolved when
	        // all components have shut down. Otherwise, Firestore is not terminated,
	        // which can mean either the FirestoreClient is in the process of starting,
	        // or restarting.
	        this._terminateTask = "notTerminated";
	    }
	    /**
	     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
	     * instance.
	     */    get app() {
	        if (!this._app) throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
	        return this._app;
	    }
	    get _initialized() {
	        return this._settingsFrozen;
	    }
	    get _terminated() {
	        return "notTerminated" !== this._terminateTask;
	    }
	    _setSettings(e) {
	        if (this._settingsFrozen) throw new FirestoreError(C.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
	        this._settings = new FirestoreSettingsImpl(e), void 0 !== e.credentials && (this._authCredentials = function __PRIVATE_makeAuthCredentialsProvider(e) {
	            if (!e) return new __PRIVATE_EmptyAuthCredentialsProvider;
	            switch (e.type) {
	              case "firstParty":
	                return new __PRIVATE_FirstPartyAuthCredentialsProvider(e.sessionIndex || "0", e.iamToken || null, e.authTokenFactory || null);

	              case "provider":
	                return e.client;

	              default:
	                throw new FirestoreError(C.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
	            }
	        }(e.credentials));
	    }
	    _getSettings() {
	        return this._settings;
	    }
	    _freezeSettings() {
	        return this._settingsFrozen = !0, this._settings;
	    }
	    _delete() {
	        // The `_terminateTask` must be assigned future that completes when
	        // terminate is complete. The existence of this future puts SDK in state
	        // that will not accept further API interaction.
	        return "notTerminated" === this._terminateTask && (this._terminateTask = this._terminate()), 
	        this._terminateTask;
	    }
	    async _restart() {
	        // The `_terminateTask` must equal 'notTerminated' after restart to
	        // signal that client is in a state that accepts API calls.
	        "notTerminated" === this._terminateTask ? await this._terminate() : this._terminateTask = "notTerminated";
	    }
	    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {
	        return {
	            app: this._app,
	            databaseId: this._databaseId,
	            settings: this._settings
	        };
	    }
	    /**
	     * Terminates all components used by this client. Subclasses can override
	     * this method to clean up their own dependencies, but must also call this
	     * method.
	     *
	     * Only ever called once.
	     */    _terminate() {
	        /**
	 * Removes all components associated with the provided instance. Must be called
	 * when the `Firestore` instance is terminated.
	 */
	        return function __PRIVATE_removeComponents(e) {
	            const t = Zt.get(e);
	            t && (__PRIVATE_logDebug("ComponentProvider", "Removing Datastore"), Zt.delete(e), 
	            t.terminate());
	        }(this), Promise.resolve();
	    }
	}

	/**
	 * Modify this instance to communicate with the Cloud Firestore emulator.
	 *
	 * Note: This must be called before this instance has been used to do any
	 * operations.
	 *
	 * @param firestore - The `Firestore` instance to configure to connect to the
	 * emulator.
	 * @param host - the emulator host (ex: localhost).
	 * @param port - the emulator port (ex: 9000).
	 * @param options.mockUserToken - the mock auth token to use for unit testing
	 * Security Rules.
	 */ function connectFirestoreEmulator(e, t, n, r = {}) {
	    var i;
	    const s = (e = __PRIVATE_cast(e, Firestore$1))._getSettings(), o = `${t}:${n}`;
	    if (s.host !== Xt && s.host !== o && __PRIVATE_logWarn("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."), 
	    e._setSettings(Object.assign(Object.assign({}, s), {
	        host: o,
	        ssl: !1
	    })), r.mockUserToken) {
	        let t, n;
	        if ("string" == typeof r.mockUserToken) t = r.mockUserToken, n = User.MOCK_USER; else {
	            // Let createMockUserToken validate first (catches common mistakes like
	            // invalid field "uid" and missing field "sub" / "user_id".)
	            t = createMockUserToken(r.mockUserToken, null === (i = e._app) || void 0 === i ? void 0 : i.options.projectId);
	            const s = r.mockUserToken.sub || r.mockUserToken.user_id;
	            if (!s) throw new FirestoreError(C.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
	            n = new User(s);
	        }
	        e._authCredentials = new __PRIVATE_EmulatorAuthCredentialsProvider(new __PRIVATE_OAuthToken(t, n));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `Query` refers to a query which you can read or listen to. You can also
	 * construct refined `Query` objects by adding filters and ordering.
	 */ class Query {
	    // This is the lite version of the Query class in the main SDK.
	    /** @hideconstructor protected */
	    constructor(e, 
	    /**
	     * If provided, the `FirestoreDataConverter` associated with this instance.
	     */
	    t, n) {
	        this.converter = t, this._query = n, 
	        /** The type of this Firestore reference. */
	        this.type = "query", this.firestore = e;
	    }
	    withConverter(e) {
	        return new Query(this.firestore, e, this._query);
	    }
	}

	/**
	 * A `DocumentReference` refers to a document location in a Firestore database
	 * and can be used to write, read, or listen to the location. The document at
	 * the referenced location may or may not exist.
	 */ class DocumentReference {
	    /** @hideconstructor */
	    constructor(e, 
	    /**
	     * If provided, the `FirestoreDataConverter` associated with this instance.
	     */
	    t, n) {
	        this.converter = t, this._key = n, 
	        /** The type of this Firestore reference. */
	        this.type = "document", this.firestore = e;
	    }
	    get _path() {
	        return this._key.path;
	    }
	    /**
	     * The document's identifier within its collection.
	     */    get id() {
	        return this._key.path.lastSegment();
	    }
	    /**
	     * A string representing the path of the referenced document (relative
	     * to the root of the database).
	     */    get path() {
	        return this._key.path.canonicalString();
	    }
	    /**
	     * The collection this `DocumentReference` belongs to.
	     */    get parent() {
	        return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
	    }
	    withConverter(e) {
	        return new DocumentReference(this.firestore, e, this._key);
	    }
	}

	/**
	 * A `CollectionReference` object can be used for adding documents, getting
	 * document references, and querying for documents (using {@link (query:1)}).
	 */ class CollectionReference extends Query {
	    /** @hideconstructor */
	    constructor(e, t, n) {
	        super(e, t, __PRIVATE_newQueryForPath(n)), this._path = n, 
	        /** The type of this Firestore reference. */
	        this.type = "collection";
	    }
	    /** The collection's identifier. */    get id() {
	        return this._query.path.lastSegment();
	    }
	    /**
	     * A string representing the path of the referenced collection (relative
	     * to the root of the database).
	     */    get path() {
	        return this._query.path.canonicalString();
	    }
	    /**
	     * A reference to the containing `DocumentReference` if this is a
	     * subcollection. If this isn't a subcollection, the reference is null.
	     */    get parent() {
	        const e = this._path.popLast();
	        return e.isEmpty() ? null : new DocumentReference(this.firestore, 
	        /* converter= */ null, new DocumentKey(e));
	    }
	    withConverter(e) {
	        return new CollectionReference(this.firestore, e, this._path);
	    }
	}

	function doc(e, t, ...n) {
	    if (e = getModularInstance(e), 
	    // We allow omission of 'pathString' but explicitly prohibit passing in both
	    // 'undefined' and 'null'.
	    1 === arguments.length && (t = __PRIVATE_AutoId.newId()), __PRIVATE_validateNonEmptyArgument("doc", "path", t), 
	    e instanceof Firestore$1) {
	        const r = ResourcePath.fromString(t, ...n);
	        return __PRIVATE_validateDocumentPath(r), new DocumentReference(e, 
	        /* converter= */ null, new DocumentKey(r));
	    }
	    {
	        if (!(e instanceof DocumentReference || e instanceof CollectionReference)) throw new FirestoreError(C.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
	        const r = e._path.child(ResourcePath.fromString(t, ...n));
	        return __PRIVATE_validateDocumentPath(r), new DocumentReference(e.firestore, e instanceof CollectionReference ? e.converter : null, new DocumentKey(r));
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const tn = "AsyncQueue";

	class __PRIVATE_AsyncQueueImpl {
	    constructor(e = Promise.resolve()) {
	        // A list of retryable operations. Retryable operations are run in order and
	        // retried with backoff.
	        this.Vu = [], 
	        // Is this AsyncQueue being shut down? Once it is set to true, it will not
	        // be changed again.
	        this.mu = !1, 
	        // Operations scheduled to be queued in the future. Operations are
	        // automatically removed after they are run or canceled.
	        this.fu = [], 
	        // visible for testing
	        this.gu = null, 
	        // Flag set while there's an outstanding AsyncQueue operation, used for
	        // assertion sanity-checks.
	        this.pu = !1, 
	        // Enabled during shutdown on Safari to prevent future access to IndexedDB.
	        this.yu = !1, 
	        // List of TimerIds to fast-forward delays for.
	        this.wu = [], 
	        // Backoff timer used to schedule retries for retryable operations
	        this.a_ = new __PRIVATE_ExponentialBackoff(this, "async_queue_retry" /* TimerId.AsyncQueueRetry */), 
	        // Visibility handler that triggers an immediate retry of all retryable
	        // operations. Meant to speed up recovery when we regain file system access
	        // after page comes into foreground.
	        this.Su = () => {
	            const e = getDocument();
	            e && __PRIVATE_logDebug(tn, "Visibility state changed to " + e.visibilityState), 
	            this.a_.t_();
	        }, this.bu = e;
	        const t = getDocument();
	        t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Su);
	    }
	    get isShuttingDown() {
	        return this.mu;
	    }
	    /**
	     * Adds a new operation to the queue without waiting for it to complete (i.e.
	     * we ignore the Promise result).
	     */    enqueueAndForget(e) {
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.enqueue(e);
	    }
	    enqueueAndForgetEvenWhileRestricted(e) {
	        this.Du(), 
	        // eslint-disable-next-line @typescript-eslint/no-floating-promises
	        this.vu(e);
	    }
	    enterRestrictedMode(e) {
	        if (!this.mu) {
	            this.mu = !0, this.yu = e || !1;
	            const t = getDocument();
	            t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.Su);
	        }
	    }
	    enqueue(e) {
	        if (this.Du(), this.mu) 
	        // Return a Promise which never resolves.
	        return new Promise((() => {}));
	        // Create a deferred Promise that we can return to the callee. This
	        // allows us to return a "hanging Promise" only to the callee and still
	        // advance the queue even when the operation is not run.
	                const t = new __PRIVATE_Deferred;
	        return this.vu((() => this.mu && this.yu ? Promise.resolve() : (e().then(t.resolve, t.reject), 
	        t.promise))).then((() => t.promise));
	    }
	    enqueueRetryable(e) {
	        this.enqueueAndForget((() => (this.Vu.push(e), this.Cu())));
	    }
	    /**
	     * Runs the next operation from the retryable queue. If the operation fails,
	     * reschedules with backoff.
	     */    async Cu() {
	        if (0 !== this.Vu.length) {
	            try {
	                await this.Vu[0](), this.Vu.shift(), this.a_.reset();
	            } catch (e) {
	                if (!__PRIVATE_isIndexedDbTransactionError(e)) throw e;
	 // Failure will be handled by AsyncQueue
	                                __PRIVATE_logDebug(tn, "Operation failed with retryable error: " + e);
	            }
	            this.Vu.length > 0 && 
	            // If there are additional operations, we re-schedule `retryNextOp()`.
	            // This is necessary to run retryable operations that failed during
	            // their initial attempt since we don't know whether they are already
	            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
	            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
	            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
	            // call scheduled here.
	            // Since `backoffAndRun()` cancels an existing backoff and schedules a
	            // new backoff on every call, there is only ever a single additional
	            // operation in the queue.
	            this.a_.Xo((() => this.Cu()));
	        }
	    }
	    vu(e) {
	        const t = this.bu.then((() => (this.pu = !0, e().catch((e => {
	            this.gu = e, this.pu = !1;
	            const t = 
	            /**
	 * Chrome includes Error.message in Error.stack. Other browsers do not.
	 * This returns expected output of message + stack when available.
	 * @param error - Error or FirestoreError
	 */
	            function __PRIVATE_getMessageOrStack(e) {
	                let t = e.message || "";
	                e.stack && (t = e.stack.includes(e.message) ? e.stack : e.message + "\n" + e.stack);
	                return t;
	            }
	            /**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ (e);
	            // Re-throw the error so that this.tail becomes a rejected Promise and
	            // all further attempts to chain (via .then) will just short-circuit
	            // and return the rejected Promise.
	            throw __PRIVATE_logError("INTERNAL UNHANDLED ERROR: ", t), e;
	        })).then((e => (this.pu = !1, e))))));
	        return this.bu = t, t;
	    }
	    enqueueAfterDelay(e, t, n) {
	        this.Du(), 
	        // Fast-forward delays for timerIds that have been overridden.
	        this.wu.indexOf(e) > -1 && (t = 0);
	        const r = DelayedOperation.createAndSchedule(this, e, t, n, (e => this.Fu(e)));
	        return this.fu.push(r), r;
	    }
	    Du() {
	        this.gu && fail();
	    }
	    verifyOperationInProgress() {}
	    /**
	     * Waits until all currently queued tasks are finished executing. Delayed
	     * operations are not run.
	     */    async Mu() {
	        // Operations in the queue prior to draining may have enqueued additional
	        // operations. Keep draining the queue until the tail is no longer advanced,
	        // which indicates that no more new operations were enqueued and that all
	        // operations were executed.
	        let e;
	        do {
	            e = this.bu, await e;
	        } while (e !== this.bu);
	    }
	    /**
	     * For Tests: Determine if a delayed operation with a particular TimerId
	     * exists.
	     */    xu(e) {
	        for (const t of this.fu) if (t.timerId === e) return !0;
	        return !1;
	    }
	    /**
	     * For Tests: Runs some or all delayed operations early.
	     *
	     * @param lastTimerId - Delayed operations up to and including this TimerId
	     * will be drained. Pass TimerId.All to run all delayed operations.
	     * @returns a Promise that resolves once all operations have been run.
	     */    Ou(e) {
	        // Note that draining may generate more delayed ops, so we do that first.
	        return this.Mu().then((() => {
	            // Run ops in the same order they'd run if they ran naturally.
	            /* eslint-disable-next-line @typescript-eslint/no-floating-promises */
	            this.fu.sort(((e, t) => e.targetTimeMs - t.targetTimeMs));
	            for (const t of this.fu) if (t.skipDelay(), "all" /* TimerId.All */ !== e && t.timerId === e) break;
	            return this.Mu();
	        }));
	    }
	    /**
	     * For Tests: Skip all subsequent delays for a timer id.
	     */    Nu(e) {
	        this.wu.push(e);
	    }
	    /** Called once a DelayedOperation is run or canceled. */    Fu(e) {
	        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
	        const t = this.fu.indexOf(e);
	        /* eslint-disable-next-line @typescript-eslint/no-floating-promises */        this.fu.splice(t, 1);
	    }
	}

	/**
	 * The Cloud Firestore service interface.
	 *
	 * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.
	 */ class Firestore extends Firestore$1 {
	    /** @hideconstructor */
	    constructor(e, t, n, r) {
	        super(e, t, n, r), 
	        /**
	         * Whether it's a {@link Firestore} or Firestore Lite instance.
	         */
	        this.type = "firestore", this._queue = new __PRIVATE_AsyncQueueImpl, this._persistenceKey = (null == r ? void 0 : r.name) || "[DEFAULT]";
	    }
	    async _terminate() {
	        if (this._firestoreClient) {
	            const e = this._firestoreClient.terminate();
	            this._queue = new __PRIVATE_AsyncQueueImpl(e), this._firestoreClient = void 0, await e;
	        }
	    }
	}

	function getFirestore(e, n) {
	    const r = "object" == typeof e ? e : getApp(), i = "string" == typeof e ? e : n || rt, s = _getProvider(r, "firestore").getImmediate({
	        identifier: i
	    });
	    if (!s._initialized) {
	        const e = getDefaultEmulatorHostnameAndPort("firestore");
	        e && connectFirestoreEmulator(s, ...e);
	    }
	    return s;
	}

	/**
	 * @internal
	 */ function ensureFirestoreConfigured(e) {
	    if (e._terminated) throw new FirestoreError(C.FAILED_PRECONDITION, "The client has already been terminated.");
	    return e._firestoreClient || __PRIVATE_configureFirestore(e), e._firestoreClient;
	}

	function __PRIVATE_configureFirestore(e) {
	    var t, n, r;
	    const i = e._freezeSettings(), s = function __PRIVATE_makeDatabaseInfo(e, t, n, r) {
	        return new DatabaseInfo(e, t, n, r.host, r.ssl, r.experimentalForceLongPolling, r.experimentalAutoDetectLongPolling, __PRIVATE_cloneLongPollingOptions(r.experimentalLongPollingOptions), r.useFetchStreams);
	    }(e._databaseId, (null === (t = e._app) || void 0 === t ? void 0 : t.options.appId) || "", e._persistenceKey, i);
	    e._componentsProvider || (null === (n = i.localCache) || void 0 === n ? void 0 : n._offlineComponentProvider) && (null === (r = i.localCache) || void 0 === r ? void 0 : r._onlineComponentProvider) && (e._componentsProvider = {
	        _offline: i.localCache._offlineComponentProvider,
	        _online: i.localCache._onlineComponentProvider
	    }), e._firestoreClient = new FirestoreClient(e._authCredentials, e._appCheckCredentials, e._queue, s, e._componentsProvider && function __PRIVATE_buildComponentProvider(e) {
	        const t = null == e ? void 0 : e._online.build();
	        return {
	            _offline: null == e ? void 0 : e._offline.build(t),
	            _online: t
	        };
	    }
	    /**
	 * Attempts to enable persistent storage, if possible.
	 *
	 * On failure, `enableIndexedDbPersistence()` will reject the promise or
	 * throw an exception. There are several reasons why this can fail, which can be
	 * identified by the `code` on the error.
	 *
	 *   * failed-precondition: The app is already open in another browser tab.
	 *   * unimplemented: The browser is incompatible with the offline persistence
	 *     implementation.
	 *
	 * Note that even after a failure, the {@link Firestore} instance will remain
	 * usable, however offline persistence will be disabled.
	 *
	 * Note: `enableIndexedDbPersistence()` must be called before any other functions
	 * (other than {@link initializeFirestore}, {@link (getFirestore:1)} or
	 * {@link clearIndexedDbPersistence}.
	 *
	 * Persistence cannot be used in a Node.js environment.
	 *
	 * @param firestore - The {@link Firestore} instance to enable persistence for.
	 * @param persistenceSettings - Optional settings object to configure
	 * persistence.
	 * @returns A `Promise` that represents successfully enabling persistent storage.
	 * @deprecated This function will be removed in a future major release. Instead, set
	 * `FirestoreSettings.localCache` to an instance of `PersistentLocalCache` to
	 * turn on IndexedDb cache. Calling this function when `FirestoreSettings.localCache`
	 * is already specified will throw an exception.
	 */ (e._componentsProvider));
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing an array of bytes.
	 */ class Bytes {
	    /** @hideconstructor */
	    constructor(e) {
	        this._byteString = e;
	    }
	    /**
	     * Creates a new `Bytes` object from the given Base64 string, converting it to
	     * bytes.
	     *
	     * @param base64 - The Base64 string used to create the `Bytes` object.
	     */    static fromBase64String(e) {
	        try {
	            return new Bytes(ByteString.fromBase64String(e));
	        } catch (e) {
	            throw new FirestoreError(C.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
	        }
	    }
	    /**
	     * Creates a new `Bytes` object from the given Uint8Array.
	     *
	     * @param array - The Uint8Array used to create the `Bytes` object.
	     */    static fromUint8Array(e) {
	        return new Bytes(ByteString.fromUint8Array(e));
	    }
	    /**
	     * Returns the underlying bytes as a Base64-encoded string.
	     *
	     * @returns The Base64-encoded string created from the `Bytes` object.
	     */    toBase64() {
	        return this._byteString.toBase64();
	    }
	    /**
	     * Returns the underlying bytes in a new `Uint8Array`.
	     *
	     * @returns The Uint8Array created from the `Bytes` object.
	     */    toUint8Array() {
	        return this._byteString.toUint8Array();
	    }
	    /**
	     * Returns a string representation of the `Bytes` object.
	     *
	     * @returns A string representation of the `Bytes` object.
	     */    toString() {
	        return "Bytes(base64: " + this.toBase64() + ")";
	    }
	    /**
	     * Returns true if this `Bytes` object is equal to the provided one.
	     *
	     * @param other - The `Bytes` object to compare against.
	     * @returns true if this `Bytes` object is equal to the provided one.
	     */    isEqual(e) {
	        return this._byteString.isEqual(e._byteString);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `FieldPath` refers to a field in a document. The path may consist of a
	 * single field name (referring to a top-level field in the document), or a
	 * list of field names (referring to a nested field in the document).
	 *
	 * Create a `FieldPath` by providing field names. If more than one field
	 * name is provided, the path will point to a nested field in a document.
	 */ class FieldPath {
	    /**
	     * Creates a `FieldPath` from the provided field names. If more than one field
	     * name is provided, the path will point to a nested field in a document.
	     *
	     * @param fieldNames - A list of field names.
	     */
	    constructor(...e) {
	        for (let t = 0; t < e.length; ++t) if (0 === e[t].length) throw new FirestoreError(C.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
	        this._internalPath = new FieldPath$1(e);
	    }
	    /**
	     * Returns true if this `FieldPath` is equal to the provided one.
	     *
	     * @param other - The `FieldPath` to compare against.
	     * @returns true if this `FieldPath` is equal to the provided one.
	     */    isEqual(e) {
	        return this._internalPath.isEqual(e._internalPath);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Sentinel values that can be used when writing document fields with `set()`
	 * or `update()`.
	 */ class FieldValue {
	    /**
	     * @param _methodName - The public API endpoint that returns this class.
	     * @hideconstructor
	     */
	    constructor(e) {
	        this._methodName = e;
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * An immutable object representing a geographic location in Firestore. The
	 * location is represented as latitude/longitude pair.
	 *
	 * Latitude values are in the range of [-90, 90].
	 * Longitude values are in the range of [-180, 180].
	 */ class GeoPoint {
	    /**
	     * Creates a new immutable `GeoPoint` object with the provided latitude and
	     * longitude values.
	     * @param latitude - The latitude as number between -90 and 90.
	     * @param longitude - The longitude as number between -180 and 180.
	     */
	    constructor(e, t) {
	        if (!isFinite(e) || e < -90 || e > 90) throw new FirestoreError(C.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + e);
	        if (!isFinite(t) || t < -180 || t > 180) throw new FirestoreError(C.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + t);
	        this._lat = e, this._long = t;
	    }
	    /**
	     * The latitude of this `GeoPoint` instance.
	     */    get latitude() {
	        return this._lat;
	    }
	    /**
	     * The longitude of this `GeoPoint` instance.
	     */    get longitude() {
	        return this._long;
	    }
	    /**
	     * Returns true if this `GeoPoint` is equal to the provided one.
	     *
	     * @param other - The `GeoPoint` to compare against.
	     * @returns true if this `GeoPoint` is equal to the provided one.
	     */    isEqual(e) {
	        return this._lat === e._lat && this._long === e._long;
	    }
	    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {
	        return {
	            latitude: this._lat,
	            longitude: this._long
	        };
	    }
	    /**
	     * Actually private to JS consumers of our API, so this function is prefixed
	     * with an underscore.
	     */    _compareTo(e) {
	        return __PRIVATE_primitiveComparator(this._lat, e._lat) || __PRIVATE_primitiveComparator(this._long, e._long);
	    }
	}

	/**
	 * @license
	 * Copyright 2024 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Represents a vector type in Firestore documents.
	 * Create an instance with {@link FieldValue.vector}.
	 *
	 * @class VectorValue
	 */ class VectorValue {
	    /**
	     * @private
	     * @internal
	     */
	    constructor(e) {
	        // Making a copy of the parameter.
	        this._values = (e || []).map((e => e));
	    }
	    /**
	     * Returns a copy of the raw number array form of the vector.
	     */    toArray() {
	        return this._values.map((e => e));
	    }
	    /**
	     * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.
	     */    isEqual(e) {
	        return function __PRIVATE_isPrimitiveArrayEqual(e, t) {
	            if (e.length !== t.length) return !1;
	            for (let n = 0; n < e.length; ++n) if (e[n] !== t[n]) return !1;
	            return !0;
	        }(this._values, e._values);
	    }
	}

	/**
	 * @license
	 * Copyright 2017 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */ const rn = /^__.*__$/;

	/** The result of parsing "update" data (i.e. for an updateData call). */ class ParsedUpdateData {
	    constructor(e, 
	    // The fieldMask does not include document transforms.
	    t, n) {
	        this.data = e, this.fieldMask = t, this.fieldTransforms = n;
	    }
	    toMutation(e, t) {
	        return new __PRIVATE_PatchMutation(e, this.data, this.fieldMask, t, this.fieldTransforms);
	    }
	}

	function __PRIVATE_isWrite(e) {
	    switch (e) {
	      case 0 /* UserDataSource.Set */ :
	 // fall through
	              case 2 /* UserDataSource.MergeSet */ :
	 // fall through
	              case 1 /* UserDataSource.Update */ :
	        return !0;

	      case 3 /* UserDataSource.Argument */ :
	      case 4 /* UserDataSource.ArrayArgument */ :
	        return !1;

	      default:
	        throw fail();
	    }
	}

	/** A "context" object passed around while parsing user data. */ class __PRIVATE_ParseContextImpl {
	    /**
	     * Initializes a ParseContext with the given source and path.
	     *
	     * @param settings - The settings for the parser.
	     * @param databaseId - The database ID of the Firestore instance.
	     * @param serializer - The serializer to use to generate the Value proto.
	     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
	     * rather than throw.
	     * @param fieldTransforms - A mutable list of field transforms encountered
	     * while parsing the data.
	     * @param fieldMask - A mutable list of field paths encountered while parsing
	     * the data.
	     *
	     * TODO(b/34871131): We don't support array paths right now, so path can be
	     * null to indicate the context represents any location within an array (in
	     * which case certain features will not work and errors will be somewhat
	     * compromised).
	     */
	    constructor(e, t, n, r, i, s) {
	        this.settings = e, this.databaseId = t, this.serializer = n, this.ignoreUndefinedProperties = r, 
	        // Minor hack: If fieldTransforms is undefined, we assume this is an
	        // external call and we need to validate the entire path.
	        void 0 === i && this.Bu(), this.fieldTransforms = i || [], this.fieldMask = s || [];
	    }
	    get path() {
	        return this.settings.path;
	    }
	    get Lu() {
	        return this.settings.Lu;
	    }
	    /** Returns a new context with the specified settings overwritten. */    ku(e) {
	        return new __PRIVATE_ParseContextImpl(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
	    }
	    qu(e) {
	        var t;
	        const n = null === (t = this.path) || void 0 === t ? void 0 : t.child(e), r = this.ku({
	            path: n,
	            Qu: !1
	        });
	        return r.$u(e), r;
	    }
	    Ku(e) {
	        var t;
	        const n = null === (t = this.path) || void 0 === t ? void 0 : t.child(e), r = this.ku({
	            path: n,
	            Qu: !1
	        });
	        return r.Bu(), r;
	    }
	    Uu(e) {
	        // TODO(b/34871131): We don't support array paths right now; so make path
	        // undefined.
	        return this.ku({
	            path: void 0,
	            Qu: !0
	        });
	    }
	    Wu(e) {
	        return __PRIVATE_createError(e, this.settings.methodName, this.settings.Gu || !1, this.path, this.settings.zu);
	    }
	    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(e) {
	        return void 0 !== this.fieldMask.find((t => e.isPrefixOf(t))) || void 0 !== this.fieldTransforms.find((t => e.isPrefixOf(t.field)));
	    }
	    Bu() {
	        // TODO(b/34871131): Remove null check once we have proper paths for fields
	        // within arrays.
	        if (this.path) for (let e = 0; e < this.path.length; e++) this.$u(this.path.get(e));
	    }
	    $u(e) {
	        if (0 === e.length) throw this.Wu("Document fields must not be empty");
	        if (__PRIVATE_isWrite(this.Lu) && rn.test(e)) throw this.Wu('Document fields cannot begin and end with "__"');
	    }
	}

	/**
	 * Helper for parsing raw user input (provided via the API) into internal model
	 * classes.
	 */ class __PRIVATE_UserDataReader {
	    constructor(e, t, n) {
	        this.databaseId = e, this.ignoreUndefinedProperties = t, this.serializer = n || __PRIVATE_newSerializer(e);
	    }
	    /** Creates a new top-level parse context. */    ju(e, t, n, r = !1) {
	        return new __PRIVATE_ParseContextImpl({
	            Lu: e,
	            methodName: t,
	            zu: n,
	            path: FieldPath$1.emptyPath(),
	            Qu: !1,
	            Gu: r
	        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
	    }
	}

	function __PRIVATE_newUserDataReader(e) {
	    const t = e._freezeSettings(), n = __PRIVATE_newSerializer(e._databaseId);
	    return new __PRIVATE_UserDataReader(e._databaseId, !!t.ignoreUndefinedProperties, n);
	}

	class __PRIVATE_DeleteFieldValueImpl extends FieldValue {
	    _toFieldTransform(e) {
	        if (2 /* UserDataSource.MergeSet */ !== e.Lu) throw 1 /* UserDataSource.Update */ === e.Lu ? e.Wu(`${this._methodName}() can only appear at the top level of your update data`) : e.Wu(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
	        // No transform to add for a delete, but we need to add it to our
	        // fieldMask so it gets deleted.
	        return e.fieldMask.push(e.path), null;
	    }
	    isEqual(e) {
	        return e instanceof __PRIVATE_DeleteFieldValueImpl;
	    }
	}

	/** Parse update data from an update() call. */ function __PRIVATE_parseUpdateData(e, t, n, r) {
	    const i = e.ju(1 /* UserDataSource.Update */ , t, n);
	    __PRIVATE_validatePlainObject("Data must be an object, but it was:", i, r);
	    const s = [], o = ObjectValue.empty();
	    forEach(r, ((e, r) => {
	        const _ = __PRIVATE_fieldPathFromDotSeparatedString(t, e, n);
	        // For Compat types, we have to "extract" the underlying types before
	        // performing validation.
	                r = getModularInstance(r);
	        const a = i.Ku(_);
	        if (r instanceof __PRIVATE_DeleteFieldValueImpl) 
	        // Add it to the field mask, but don't add anything to updateData.
	        s.push(_); else {
	            const e = __PRIVATE_parseData(r, a);
	            null != e && (s.push(_), o.set(_, e));
	        }
	    }));
	    const _ = new FieldMask(s);
	    return new ParsedUpdateData(o, _, i.fieldTransforms);
	}

	/** Parse update data from a list of field/value arguments. */ function __PRIVATE_parseUpdateVarargs(e, t, n, r, i, s) {
	    const o = e.ju(1 /* UserDataSource.Update */ , t, n), _ = [ __PRIVATE_fieldPathFromArgument$1(t, r, n) ], a = [ i ];
	    if (s.length % 2 != 0) throw new FirestoreError(C.INVALID_ARGUMENT, `Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);
	    for (let e = 0; e < s.length; e += 2) _.push(__PRIVATE_fieldPathFromArgument$1(t, s[e])), 
	    a.push(s[e + 1]);
	    const u = [], c = ObjectValue.empty();
	    // We iterate in reverse order to pick the last value for a field if the
	    // user specified the field multiple times.
	    for (let e = _.length - 1; e >= 0; --e) if (!__PRIVATE_fieldMaskContains(u, _[e])) {
	        const t = _[e];
	        let n = a[e];
	        // For Compat types, we have to "extract" the underlying types before
	        // performing validation.
	                n = getModularInstance(n);
	        const r = o.Ku(t);
	        if (n instanceof __PRIVATE_DeleteFieldValueImpl) 
	        // Add it to the field mask, but don't add anything to updateData.
	        u.push(t); else {
	            const e = __PRIVATE_parseData(n, r);
	            null != e && (u.push(t), c.set(t, e));
	        }
	    }
	    const l = new FieldMask(u);
	    return new ParsedUpdateData(c, l, o.fieldTransforms);
	}

	/**
	 * Parses user data to Protobuf Values.
	 *
	 * @param input - Data to be parsed.
	 * @param context - A context object representing the current path being parsed,
	 * the source of the data being parsed, etc.
	 * @returns The parsed value, or null if the value was a FieldValue sentinel
	 * that should not be included in the resulting parsed data.
	 */ function __PRIVATE_parseData(e, t) {
	    if (__PRIVATE_looksLikeJsonObject(
	    // Unwrap the API type from the Compat SDK. This will return the API type
	    // from firestore-exp.
	    e = getModularInstance(e))) return __PRIVATE_validatePlainObject("Unsupported field value:", t, e), 
	    __PRIVATE_parseObject(e, t);
	    if (e instanceof FieldValue) 
	    // FieldValues usually parse into transforms (except deleteField())
	    // in which case we do not want to include this field in our parsed data
	    // (as doing so will overwrite the field directly prior to the transform
	    // trying to transform it). So we don't add this location to
	    // context.fieldMask and we return null as our parsing result.
	    /**
	 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
	 * context.fieldTransforms.
	 */
	    return function __PRIVATE_parseSentinelFieldValue(e, t) {
	        // Sentinels are only supported with writes, and not within arrays.
	        if (!__PRIVATE_isWrite(t.Lu)) throw t.Wu(`${e._methodName}() can only be used with update() and set()`);
	        if (!t.path) throw t.Wu(`${e._methodName}() is not currently supported inside arrays`);
	        const n = e._toFieldTransform(t);
	        n && t.fieldTransforms.push(n);
	    }
	    /**
	 * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
	 *
	 * @returns The parsed value
	 */ (e, t), null;
	    if (void 0 === e && t.ignoreUndefinedProperties) 
	    // If the input is undefined it can never participate in the fieldMask, so
	    // don't handle this below. If `ignoreUndefinedProperties` is false,
	    // `parseScalarValue` will reject an undefined value.
	    return null;
	    if (
	    // If context.path is null we are inside an array and we don't support
	    // field mask paths more granular than the top-level array.
	    t.path && t.fieldMask.push(t.path), e instanceof Array) {
	        // TODO(b/34871131): Include the path containing the array in the error
	        // message.
	        // In the case of IN queries, the parsed data is an array (representing
	        // the set of values to be included for the IN query) that may directly
	        // contain additional arrays (each representing an individual field
	        // value), so we disable this validation.
	        if (t.settings.Qu && 4 /* UserDataSource.ArrayArgument */ !== t.Lu) throw t.Wu("Nested arrays are not supported");
	        return function __PRIVATE_parseArray(e, t) {
	            const n = [];
	            let r = 0;
	            for (const i of e) {
	                let e = __PRIVATE_parseData(i, t.Uu(r));
	                null == e && (
	                // Just include nulls in the array for fields being replaced with a
	                // sentinel.
	                e = {
	                    nullValue: "NULL_VALUE"
	                }), n.push(e), r++;
	            }
	            return {
	                arrayValue: {
	                    values: n
	                }
	            };
	        }(e, t);
	    }
	    return function __PRIVATE_parseScalarValue(e, t) {
	        if (null === (e = getModularInstance(e))) return {
	            nullValue: "NULL_VALUE"
	        };
	        if ("number" == typeof e) return toNumber(t.serializer, e);
	        if ("boolean" == typeof e) return {
	            booleanValue: e
	        };
	        if ("string" == typeof e) return {
	            stringValue: e
	        };
	        if (e instanceof Date) {
	            const n = Timestamp.fromDate(e);
	            return {
	                timestampValue: toTimestamp(t.serializer, n)
	            };
	        }
	        if (e instanceof Timestamp) {
	            // Firestore backend truncates precision down to microseconds. To ensure
	            // offline mode works the same with regards to truncation, perform the
	            // truncation immediately without waiting for the backend to do that.
	            const n = new Timestamp(e.seconds, 1e3 * Math.floor(e.nanoseconds / 1e3));
	            return {
	                timestampValue: toTimestamp(t.serializer, n)
	            };
	        }
	        if (e instanceof GeoPoint) return {
	            geoPointValue: {
	                latitude: e.latitude,
	                longitude: e.longitude
	            }
	        };
	        if (e instanceof Bytes) return {
	            bytesValue: __PRIVATE_toBytes(t.serializer, e._byteString)
	        };
	        if (e instanceof DocumentReference) {
	            const n = t.databaseId, r = e.firestore._databaseId;
	            if (!r.isEqual(n)) throw t.Wu(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);
	            return {
	                referenceValue: __PRIVATE_toResourceName(e.firestore._databaseId || t.databaseId, e._key.path)
	            };
	        }
	        if (e instanceof VectorValue) 
	        /**
	 * Creates a new VectorValue proto value (using the internal format).
	 */
	        return function __PRIVATE_parseVectorValue(e, t) {
	            const n = {
	                fields: {
	                    [it]: {
	                        stringValue: _t
	                    },
	                    [at]: {
	                        arrayValue: {
	                            values: e.toArray().map((e => {
	                                if ("number" != typeof e) throw t.Wu("VectorValues must only contain numeric values.");
	                                return __PRIVATE_toDouble(t.serializer, e);
	                            }))
	                        }
	                    }
	                }
	            };
	            return {
	                mapValue: n
	            };
	        }
	        /**
	 * Checks whether an object looks like a JSON object that should be converted
	 * into a struct. Normal class/prototype instances are considered to look like
	 * JSON objects since they should be converted to a struct value. Arrays, Dates,
	 * GeoPoints, etc. are not considered to look like JSON objects since they map
	 * to specific FieldValue types other than ObjectValue.
	 */ (e, t);
	        throw t.Wu(`Unsupported field value: ${__PRIVATE_valueDescription(e)}`);
	    }(e, t);
	}

	function __PRIVATE_parseObject(e, t) {
	    const n = {};
	    return isEmpty(e) ? 
	    // If we encounter an empty object, we explicitly add it to the update
	    // mask to ensure that the server creates a map entry.
	    t.path && t.path.length > 0 && t.fieldMask.push(t.path) : forEach(e, ((e, r) => {
	        const i = __PRIVATE_parseData(r, t.qu(e));
	        null != i && (n[e] = i);
	    })), {
	        mapValue: {
	            fields: n
	        }
	    };
	}

	function __PRIVATE_looksLikeJsonObject(e) {
	    return !("object" != typeof e || null === e || e instanceof Array || e instanceof Date || e instanceof Timestamp || e instanceof GeoPoint || e instanceof Bytes || e instanceof DocumentReference || e instanceof FieldValue || e instanceof VectorValue);
	}

	function __PRIVATE_validatePlainObject(e, t, n) {
	    if (!__PRIVATE_looksLikeJsonObject(n) || !function __PRIVATE_isPlainObject(e) {
	        return "object" == typeof e && null !== e && (Object.getPrototypeOf(e) === Object.prototype || null === Object.getPrototypeOf(e));
	    }(n)) {
	        const r = __PRIVATE_valueDescription(n);
	        throw "an object" === r ? t.Wu(e + " a custom object") : t.Wu(e + " " + r);
	    }
	}

	/**
	 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
	 */ function __PRIVATE_fieldPathFromArgument$1(e, t, n) {
	    if ((
	    // If required, replace the FieldPath Compat class with the firestore-exp
	    // FieldPath.
	    t = getModularInstance(t)) instanceof FieldPath) return t._internalPath;
	    if ("string" == typeof t) return __PRIVATE_fieldPathFromDotSeparatedString(e, t);
	    throw __PRIVATE_createError("Field path arguments must be of type string or ", e, 
	    /* hasConverter= */ !1, 
	    /* path= */ void 0, n);
	}

	/**
	 * Matches any characters in a field path string that are reserved.
	 */ const sn = new RegExp("[~\\*/\\[\\]]");

	/**
	 * Wraps fromDotSeparatedString with an error message about the method that
	 * was thrown.
	 * @param methodName - The publicly visible method name
	 * @param path - The dot-separated string form of a field path which will be
	 * split on dots.
	 * @param targetDoc - The document against which the field path will be
	 * evaluated.
	 */ function __PRIVATE_fieldPathFromDotSeparatedString(e, t, n) {
	    if (t.search(sn) >= 0) throw __PRIVATE_createError(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`, e, 
	    /* hasConverter= */ !1, 
	    /* path= */ void 0, n);
	    try {
	        return new FieldPath(...t.split("."))._internalPath;
	    } catch (r) {
	        throw __PRIVATE_createError(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, e, 
	        /* hasConverter= */ !1, 
	        /* path= */ void 0, n);
	    }
	}

	function __PRIVATE_createError(e, t, n, r, i) {
	    const s = r && !r.isEmpty(), o = void 0 !== i;
	    let _ = `Function ${t}() called with invalid data`;
	    n && (_ += " (via `toFirestore()`)"), _ += ". ";
	    let a = "";
	    return (s || o) && (a += " (found", s && (a += ` in field ${r}`), o && (a += ` in document ${i}`), 
	    a += ")"), new FirestoreError(C.INVALID_ARGUMENT, _ + e + a);
	}

	/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function __PRIVATE_fieldMaskContains(e, t) {
	    return e.some((e => e.isEqual(t)));
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * A `DocumentSnapshot` contains data read from a document in your Firestore
	 * database. The data can be extracted with `.data()` or `.get(<field>)` to
	 * get a specific field.
	 *
	 * For a `DocumentSnapshot` that points to a non-existing document, any data
	 * access will return 'undefined'. You can use the `exists()` method to
	 * explicitly verify a document's existence.
	 */ class DocumentSnapshot$1 {
	    // Note: This class is stripped down version of the DocumentSnapshot in
	    // the legacy SDK. The changes are:
	    // - No support for SnapshotMetadata.
	    // - No support for SnapshotOptions.
	    /** @hideconstructor protected */
	    constructor(e, t, n, r, i) {
	        this._firestore = e, this._userDataWriter = t, this._key = n, this._document = r, 
	        this._converter = i;
	    }
	    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
	        return this._key.path.lastSegment();
	    }
	    /**
	     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
	     */    get ref() {
	        return new DocumentReference(this._firestore, this._converter, this._key);
	    }
	    /**
	     * Signals whether or not the document at the snapshot's location exists.
	     *
	     * @returns true if the document exists.
	     */    exists() {
	        return null !== this._document;
	    }
	    /**
	     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
	     * the document doesn't exist.
	     *
	     * @returns An `Object` containing all fields in the document or `undefined`
	     * if the document doesn't exist.
	     */    data() {
	        if (this._document) {
	            if (this._converter) {
	                // We only want to use the converter and create a new DocumentSnapshot
	                // if a converter has been provided.
	                const e = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, 
	                /* converter= */ null);
	                return this._converter.fromFirestore(e);
	            }
	            return this._userDataWriter.convertValue(this._document.data.value);
	        }
	    }
	    /**
	     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	     * document or field doesn't exist.
	     *
	     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	     * field.
	     * @returns The data at the specified field location or undefined if no such
	     * field exists in the document.
	     */
	    // We are using `any` here to avoid an explicit cast by our users.
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    get(e) {
	        if (this._document) {
	            const t = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
	            if (null !== t) return this._userDataWriter.convertValue(t);
	        }
	    }
	}

	/**
	 * A `QueryDocumentSnapshot` contains data read from a document in your
	 * Firestore database as part of a query. The document is guaranteed to exist
	 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
	 * specific field.
	 *
	 * A `QueryDocumentSnapshot` offers the same API surface as a
	 * `DocumentSnapshot`. Since query results contain only existing documents, the
	 * `exists` property will always be true and `data()` will never return
	 * 'undefined'.
	 */ class QueryDocumentSnapshot$1 extends DocumentSnapshot$1 {
	    /**
	     * Retrieves all fields in the document as an `Object`.
	     *
	     * @override
	     * @returns An `Object` containing all fields in the document.
	     */
	    data() {
	        return super.data();
	    }
	}

	/**
	 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
	 */ function __PRIVATE_fieldPathFromArgument(e, t) {
	    return "string" == typeof t ? __PRIVATE_fieldPathFromDotSeparatedString(e, t) : t instanceof FieldPath ? t._internalPath : t._delegate._internalPath;
	}

	class AbstractUserDataWriter {
	    convertValue(e, t = "none") {
	        switch (__PRIVATE_typeOrder(e)) {
	          case 0 /* TypeOrder.NullValue */ :
	            return null;

	          case 1 /* TypeOrder.BooleanValue */ :
	            return e.booleanValue;

	          case 2 /* TypeOrder.NumberValue */ :
	            return __PRIVATE_normalizeNumber(e.integerValue || e.doubleValue);

	          case 3 /* TypeOrder.TimestampValue */ :
	            return this.convertTimestamp(e.timestampValue);

	          case 4 /* TypeOrder.ServerTimestampValue */ :
	            return this.convertServerTimestamp(e, t);

	          case 5 /* TypeOrder.StringValue */ :
	            return e.stringValue;

	          case 6 /* TypeOrder.BlobValue */ :
	            return this.convertBytes(__PRIVATE_normalizeByteString(e.bytesValue));

	          case 7 /* TypeOrder.RefValue */ :
	            return this.convertReference(e.referenceValue);

	          case 8 /* TypeOrder.GeoPointValue */ :
	            return this.convertGeoPoint(e.geoPointValue);

	          case 9 /* TypeOrder.ArrayValue */ :
	            return this.convertArray(e.arrayValue, t);

	          case 11 /* TypeOrder.ObjectValue */ :
	            return this.convertObject(e.mapValue, t);

	          case 10 /* TypeOrder.VectorValue */ :
	            return this.convertVectorValue(e.mapValue);

	          default:
	            throw fail();
	        }
	    }
	    convertObject(e, t) {
	        return this.convertObjectMap(e.fields, t);
	    }
	    /**
	     * @internal
	     */    convertObjectMap(e, t = "none") {
	        const n = {};
	        return forEach(e, ((e, r) => {
	            n[e] = this.convertValue(r, t);
	        })), n;
	    }
	    /**
	     * @internal
	     */    convertVectorValue(e) {
	        var t, n, r;
	        const i = null === (r = null === (n = null === (t = e.fields) || void 0 === t ? void 0 : t[at].arrayValue) || void 0 === n ? void 0 : n.values) || void 0 === r ? void 0 : r.map((e => __PRIVATE_normalizeNumber(e.doubleValue)));
	        return new VectorValue(i);
	    }
	    convertGeoPoint(e) {
	        return new GeoPoint(__PRIVATE_normalizeNumber(e.latitude), __PRIVATE_normalizeNumber(e.longitude));
	    }
	    convertArray(e, t) {
	        return (e.values || []).map((e => this.convertValue(e, t)));
	    }
	    convertServerTimestamp(e, t) {
	        switch (t) {
	          case "previous":
	            const n = __PRIVATE_getPreviousValue(e);
	            return null == n ? null : this.convertValue(n, t);

	          case "estimate":
	            return this.convertTimestamp(__PRIVATE_getLocalWriteTime(e));

	          default:
	            return null;
	        }
	    }
	    convertTimestamp(e) {
	        const t = __PRIVATE_normalizeTimestamp(e);
	        return new Timestamp(t.seconds, t.nanos);
	    }
	    convertDocumentKey(e, t) {
	        const n = ResourcePath.fromString(e);
	        __PRIVATE_hardAssert(__PRIVATE_isValidResourceName(n));
	        const r = new DatabaseId(n.get(1), n.get(3)), i = new DocumentKey(n.popFirst(5));
	        return r.isEqual(t) || 
	        // TODO(b/64130202): Somehow support foreign references.
	        __PRIVATE_logError(`Document ${i} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`), 
	        i;
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Metadata about a snapshot, describing the state of the snapshot.
	 */ class SnapshotMetadata {
	    /** @hideconstructor */
	    constructor(e, t) {
	        this.hasPendingWrites = e, this.fromCache = t;
	    }
	    /**
	     * Returns true if this `SnapshotMetadata` is equal to the provided one.
	     *
	     * @param other - The `SnapshotMetadata` to compare against.
	     * @returns true if this `SnapshotMetadata` is equal to the provided one.
	     */    isEqual(e) {
	        return this.hasPendingWrites === e.hasPendingWrites && this.fromCache === e.fromCache;
	    }
	}

	/**
	 * A `DocumentSnapshot` contains data read from a document in your Firestore
	 * database. The data can be extracted with `.data()` or `.get(<field>)` to
	 * get a specific field.
	 *
	 * For a `DocumentSnapshot` that points to a non-existing document, any data
	 * access will return 'undefined'. You can use the `exists()` method to
	 * explicitly verify a document's existence.
	 */ class DocumentSnapshot extends DocumentSnapshot$1 {
	    /** @hideconstructor protected */
	    constructor(e, t, n, r, i, s) {
	        super(e, t, n, r, s), this._firestore = e, this._firestoreImpl = e, this.metadata = i;
	    }
	    /**
	     * Returns whether or not the data exists. True if the document exists.
	     */    exists() {
	        return super.exists();
	    }
	    /**
	     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
	     * the document doesn't exist.
	     *
	     * By default, `serverTimestamp()` values that have not yet been
	     * set to their final value will be returned as `null`. You can override
	     * this by passing an options object.
	     *
	     * @param options - An options object to configure how data is retrieved from
	     * the snapshot (for example the desired behavior for server timestamps that
	     * have not yet been set to their final value).
	     * @returns An `Object` containing all fields in the document or `undefined` if
	     * the document doesn't exist.
	     */    data(e = {}) {
	        if (this._document) {
	            if (this._converter) {
	                // We only want to use the converter and create a new DocumentSnapshot
	                // if a converter has been provided.
	                const t = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, 
	                /* converter= */ null);
	                return this._converter.fromFirestore(t, e);
	            }
	            return this._userDataWriter.convertValue(this._document.data.value, e.serverTimestamps);
	        }
	    }
	    /**
	     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
	     * document or field doesn't exist.
	     *
	     * By default, a `serverTimestamp()` that has not yet been set to
	     * its final value will be returned as `null`. You can override this by
	     * passing an options object.
	     *
	     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
	     * field.
	     * @param options - An options object to configure how the field is retrieved
	     * from the snapshot (for example the desired behavior for server timestamps
	     * that have not yet been set to their final value).
	     * @returns The data at the specified field location or undefined if no such
	     * field exists in the document.
	     */
	    // We are using `any` here to avoid an explicit cast by our users.
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    get(e, t = {}) {
	        if (this._document) {
	            const n = this._document.data.field(__PRIVATE_fieldPathFromArgument("DocumentSnapshot.get", e));
	            if (null !== n) return this._userDataWriter.convertValue(n, t.serverTimestamps);
	        }
	    }
	}

	/**
	 * A `QueryDocumentSnapshot` contains data read from a document in your
	 * Firestore database as part of a query. The document is guaranteed to exist
	 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
	 * specific field.
	 *
	 * A `QueryDocumentSnapshot` offers the same API surface as a
	 * `DocumentSnapshot`. Since query results contain only existing documents, the
	 * `exists` property will always be true and `data()` will never return
	 * 'undefined'.
	 */ class QueryDocumentSnapshot extends DocumentSnapshot {
	    /**
	     * Retrieves all fields in the document as an `Object`.
	     *
	     * By default, `serverTimestamp()` values that have not yet been
	     * set to their final value will be returned as `null`. You can override
	     * this by passing an options object.
	     *
	     * @override
	     * @param options - An options object to configure how data is retrieved from
	     * the snapshot (for example the desired behavior for server timestamps that
	     * have not yet been set to their final value).
	     * @returns An `Object` containing all fields in the document.
	     */
	    data(e = {}) {
	        return super.data(e);
	    }
	}

	/**
	 * @license
	 * Copyright 2020 Google LLC
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	/**
	 * Reads the document referred to by this `DocumentReference`.
	 *
	 * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
	 * for data from the server, but it may return cached data or fail if you are
	 * offline and the server cannot be reached. To specify this behavior, invoke
	 * {@link getDocFromCache} or {@link getDocFromServer}.
	 *
	 * @param reference - The reference of the document to fetch.
	 * @returns A Promise resolved with a `DocumentSnapshot` containing the
	 * current document contents.
	 */ function getDoc(e) {
	    e = __PRIVATE_cast(e, DocumentReference);
	    const t = __PRIVATE_cast(e.firestore, Firestore);
	    return __PRIVATE_firestoreClientGetDocumentViaSnapshotListener(ensureFirestoreConfigured(t), e._key).then((n => __PRIVATE_convertToDocSnapshot(t, e, n)));
	}

	class __PRIVATE_ExpUserDataWriter extends AbstractUserDataWriter {
	    constructor(e) {
	        super(), this.firestore = e;
	    }
	    convertBytes(e) {
	        return new Bytes(e);
	    }
	    convertReference(e) {
	        const t = this.convertDocumentKey(e, this.firestore._databaseId);
	        return new DocumentReference(this.firestore, /* converter= */ null, t);
	    }
	}

	function updateDoc(e, t, n, ...r) {
	    e = __PRIVATE_cast(e, DocumentReference);
	    const i = __PRIVATE_cast(e.firestore, Firestore), s = __PRIVATE_newUserDataReader(i);
	    let o;
	    o = "string" == typeof (
	    // For Compat types, we have to "extract" the underlying types before
	    // performing validation.
	    t = getModularInstance(t)) || t instanceof FieldPath ? __PRIVATE_parseUpdateVarargs(s, "updateDoc", e._key, t, n, r) : __PRIVATE_parseUpdateData(s, "updateDoc", e._key, t);
	    return executeWrite(i, [ o.toMutation(e._key, Precondition.exists(!0)) ]);
	}

	/**
	 * Locally writes `mutations` on the async queue.
	 * @internal
	 */ function executeWrite(e, t) {
	    return function __PRIVATE_firestoreClientWrite(e, t) {
	        const n = new __PRIVATE_Deferred;
	        return e.asyncQueue.enqueueAndForget((async () => __PRIVATE_syncEngineWrite(await __PRIVATE_getSyncEngine(e), t, n))), 
	        n.promise;
	    }(ensureFirestoreConfigured(e), t);
	}

	/**
	 * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
	 * to a {@link DocumentSnapshot}.
	 */ function __PRIVATE_convertToDocSnapshot(e, t, n) {
	    const r = n.docs.get(t._key), i = new __PRIVATE_ExpUserDataWriter(e);
	    return new DocumentSnapshot(e, i, t._key, r, new SnapshotMetadata(n.hasPendingWrites, n.fromCache), t.converter);
	}

	/**
	 * Cloud Firestore
	 *
	 * @packageDocumentation
	 */ !function __PRIVATE_registerFirestore(e, t = !0) {
	    !function __PRIVATE_setSDKVersion(e) {
	        D = e;
	    }(SDK_VERSION), _registerComponent(new Component("firestore", ((e, {instanceIdentifier: n, options: r}) => {
	        const i = e.getProvider("app").getImmediate(), s = new Firestore(new __PRIVATE_FirebaseAuthCredentialsProvider(e.getProvider("auth-internal")), new __PRIVATE_FirebaseAppCheckTokenProvider(i, e.getProvider("app-check-internal")), function __PRIVATE_databaseIdFromApp(e, t) {
	            if (!Object.prototype.hasOwnProperty.apply(e.options, [ "projectId" ])) throw new FirestoreError(C.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
	            return new DatabaseId(e.options.projectId, t);
	        }(i, n), i);
	        return r = Object.assign({
	            useFetchStreams: t
	        }, r), s._setSettings(r), s;
	    }), "PUBLIC").setMultipleInstances(!0)), registerVersion(S, b, e), 
	    // BUILD_TARGET will be replaced by values like esm2017, cjs2017, etc during the compilation
	    registerVersion(S, b, "esm2017");
	}();

	// Import the functions you need from the SDKs you need

	// Your web app's Firebase configuration
	var firebaseConfig = {
	  apiKey: "AIzaSyCRtIE-jx4XRCWc5yf-8sBGMnkf4_0KkO0",
	  authDomain: "jyunaut.firebaseapp.com",
	  projectId: "jyunaut",
	  storageBucket: "jyunaut.firebasestorage.app",
	  messagingSenderId: "511001489934",
	  appId: "1:511001489934:web:e87eaf8029df6f0e41025f"
	};

	// Initialize Firebase
	var app$1 = initializeApp(firebaseConfig);
	var db = getFirestore(app$1);

	var AudioManager = /*#__PURE__*/function () {
	  function AudioManager() {
	    _classCallCheck(this, AudioManager);
	    this.audioContext = new AudioContext();
	    this.audioBuffer = null;
	    this.gainNode = this.audioContext.createGain();
	    this.gainNode.connect(this.audioContext.destination);
	  }
	  return _createClass(AudioManager, [{
	    key: "loadAudio",
	    value: function () {
	      var _loadAudio = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {
	        var response, arrayBuffer;
	        return _regeneratorRuntime().wrap(function _callee$(_context) {
	          while (1) switch (_context.prev = _context.next) {
	            case 0:
	              _context.next = 2;
	              return fetch(url);
	            case 2:
	              response = _context.sent;
	              _context.next = 5;
	              return response.arrayBuffer();
	            case 5:
	              arrayBuffer = _context.sent;
	              _context.next = 8;
	              return this.audioContext.decodeAudioData(arrayBuffer);
	            case 8:
	              this.audioBuffer = _context.sent;
	            case 9:
	            case "end":
	              return _context.stop();
	          }
	        }, _callee, this);
	      }));
	      function loadAudio(_x) {
	        return _loadAudio.apply(this, arguments);
	      }
	      return loadAudio;
	    }()
	  }, {
	    key: "playSFX",
	    value: function playSFX() {
	      var source = this.audioContext.createBufferSource();
	      source.buffer = this.audioBuffer;
	      source.playbackRate.value = Math.random() * 0.5 + 1.25; // Random pitch between 1.25 and 1.75
	      source.connect(this.gainNode);
	      source.start(0);
	    }
	  }, {
	    key: "setVolume",
	    value: function setVolume(value) {
	      this.gainNode.gain.value = value;
	      console.log(this.gainNode.gain.value);
	    }
	  }]);
	}();

	var _SpeedLinesEffect_brand = /*#__PURE__*/new WeakSet();
	var SpeedLinesEffect = /*#__PURE__*/function () {
	  function SpeedLinesEffect(amount) {
	    var minLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
	    var maxLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 900;
	    var opacity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
	    _classCallCheck(this, SpeedLinesEffect);
	    _classPrivateMethodInitSpec(this, _SpeedLinesEffect_brand);
	    this.speedLines = [];
	    this.minLength = minLength;
	    this.maxLength = maxLength;
	    this.opacity = opacity;
	    this.enabled = false;
	    for (var i = 0; i < amount; i++) {
	      this.speedLines.push(_assertClassBrand(_SpeedLinesEffect_brand, this, _createSpeedLine).call(this));
	    }
	    this.speedLines.forEach(function (speedLine) {
	      speedLine.style.display = 'none';
	    });
	  }
	  return _createClass(SpeedLinesEffect, [{
	    key: "enableSpeedLines",
	    value: function enableSpeedLines() {
	      if (this.enabled) {
	        return;
	      }
	      this.speedLines.forEach(function (speedLine) {
	        speedLine.style.display = 'block';
	      });
	      this.enabled = true;
	    }
	  }, {
	    key: "disableSpeedLines",
	    value: function disableSpeedLines() {
	      if (!this.enabled) {
	        return;
	      }
	      this.speedLines.forEach(function (speedLine) {
	        speedLine.style.display = 'none';
	      });
	      this.enabled = false;
	    }
	  }, {
	    key: "setSpeedLineOpacity",
	    value: function setSpeedLineOpacity(opacity) {
	      this.speedLines.forEach(function (speedLine) {
	        speedLine.style.opacity = opacity;
	      });
	    }
	  }, {
	    key: "randomizePositions",
	    value: function randomizePositions() {
	      var _this = this;
	      this.speedLines.forEach(function (speedLine) {
	        _assertClassBrand(_SpeedLinesEffect_brand, _this, _setPosition).call(_this, speedLine, Math.random() * 360);
	      });
	    }
	  }, {
	    key: "shiftPositions",
	    value: function shiftPositions(angleDelta) {
	      var _this2 = this;
	      this.speedLines.forEach(function (speedLine) {
	        var currentAngle = parseFloat(speedLine.dataset.angle);
	        _assertClassBrand(_SpeedLinesEffect_brand, _this2, _setPosition).call(_this2, speedLine, currentAngle + angleDelta);
	      });
	    }
	  }]);
	}();
	function _createSpeedLine() {
	  var triangle = document.createElement('div');
	  triangle.style.position = 'absolute';
	  triangle.style.borderLeft = '10px solid transparent';
	  triangle.style.borderRight = '10px solid transparent';
	  triangle.style.borderBottom = '10px solid white';
	  triangle.style.maskImage = 'linear-gradient(to top, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0))';
	  triangle.style.borderBottomWidth = "".concat(Math.random() * (this.maxLength - this.minLength) + this.minLength, "px");
	  triangle.style.opacity = this.opacity;
	  triangle.style.zIndex = 1000;
	  _assertClassBrand(_SpeedLinesEffect_brand, this, _setPosition).call(this, triangle, Math.random() * 360);
	  document.body.appendChild(triangle);
	  return triangle;
	}
	function _setPosition(triangle, angle) {
	  var radius = Math.max(window.innerWidth, window.innerHeight) / 2 + 100;
	  var centerX = window.innerWidth / 2;
	  var centerY = window.innerHeight / 2;
	  var x = centerX + radius * Math.cos(angle * Math.PI / 180);
	  var y = centerY + radius * Math.sin(angle * Math.PI / 180);
	  triangle.style.left = "".concat(x, "px");
	  triangle.style.top = "".concat(y, "px");
	  triangle.style.transform = "rotate(".concat(angle - 90, "deg)");
	  triangle.dataset.angle = angle;
	}

	// Update the global counter from the firebase database
	var globalCounterInterval = 30;
	var globalTimer = 30;
	var globalCounterToAdd = 0;
	var globalCounterElement;

	// Update the local counter from the local storage
	var totalCounter = parseInt(localStorage.getItem('totalCounter')) || 0;
	var totalCounterElement;

	// Update the clicks per flush counter every 10 seconds
	var cpfCounter = 0;
	var cpfLastCount = 0;
	var cpfCounterElement;
	var clickTimestamps = [];

	// Flush Counters
	var flushInterval = 2;
	var flushTimer = 2;
	var amountToFlush = 0;
	var flushCounter = parseInt(localStorage.getItem('flushCounter')) || 0;
	var flushCounterElement;

	// Three.js variables
	var scene, camera, renderer;
	var canvas;
	var lastFrameTime = Date.now() / 1000;

	// Spine variables
	var skeletonMesh;
	var atlas;
	var atlasLoader;
	var assetManager;
	var baseUrl = '/PokuClick/assets/' ;
	var skeletonFile = 'Sprout.json';
	var atlasFile = skeletonFile.replace('-pro', '').replace('-ess', '').replace('.json', '.atlas');
	var anim_idle = 'sitting';
	var anim_run = 'run';
	var anim_run_stop = 'run_stop';
	var anim_pressed = 'sitting_press';
	var anim_sitting_mouth_open = 'sitting_mouthOpen';
	var anim_pressed_rainbow = 'sitting_press_rainbow';

	// Audio variables
	var audioManager;

	// Speed lines effect
	var speedLinesEffect = new SpeedLinesEffect(20, 400, 900, 1);
	var App = /*#__PURE__*/function () {
	  function App() {
	    _classCallCheck(this, App);
	  }
	  return _createClass(App, [{
	    key: "init",
	    value: function init() {
	      // create the camera, scene and renderer (WebGL)
	      var width = window.innerWidth,
	        height = window.innerHeight;
	      camera = new PerspectiveCamera(75, width / height, 1, 3000);
	      camera.position.y = 300;
	      camera.position.z = 500;
	      camera.setRotationFromEuler(new Euler(0, 0, 0));
	      scene = new Scene();
	      scene.background = new Color$1(0xF0BB57);
	      renderer = new WebGLRenderer();
	      renderer.setSize(width, height);
	      renderer.domElement.id = 'canvas';
	      document.body.appendChild(renderer.domElement);
	      canvas = renderer.domElement;
	      window.addEventListener('resize', onWindowResize, false);

	      // Load the assets required to display the sprout
	      assetManager = new AssetManager(baseUrl + "sprout/");
	      assetManager.loadText(skeletonFile);
	      assetManager.loadTextureAtlas(atlasFile);
	      requestAnimationFrame(load);

	      // Prevent right-click context menu
	      document.addEventListener('contextmenu', function (event) {
	        event.preventDefault();
	      });

	      // Update the global counter from the firebase database
	      globalCounterElement = document.getElementById('global-counter');
	      updateGlobalCounter(0, 0);

	      // Update the local counter from the local storage	
	      totalCounterElement = document.getElementById('total-counter');
	      totalCounterElement.textContent = totalCounter;

	      // Update the clicks per flush counter every 10 seconds
	      cpfCounter = 0;
	      cpfLastCount = totalCounter;
	      cpfCounterElement = document.getElementById('cpf-counter');
	      flushCounterElement = document.getElementById('flushed-counter');
	      flushCounterElement.textContent = flushCounter;
	      clickTimestamps = [];

	      // Setup the audio manager
	      audioManager = new AudioManager();
	      audioManager.loadAudio(baseUrl + "Oof_04.wav");
	      audioManager.setVolume(localStorage.getItem('volume') / 100 || 0.5);
	      var volumeSliderElement = document.getElementById('volume-slider');
	      volumeSliderElement.value = localStorage.getItem('volume') || 50;
	      var volumeSlider = document.getElementById('volume-slider');
	      volumeSlider.addEventListener('input', function () {
	        audioManager.setVolume(volumeSlider.value / 100);
	        localStorage.setItem('volume', volumeSlider.value);
	      });
	      setInterval(updateCPFCounter, 1000);
	    }
	  }]);
	}();
	function load() {
	  if (assetManager.isLoadingComplete()) {
	    // Load the texture atlas using name.atlas and name.png from the AssetManager.
	    // The function passed to TextureAtlas is used to resolve relative paths.
	    atlas = assetManager.require(atlasFile);

	    // Create an AtlasAttachmentLoader that resolves region, mesh, boundingbox and path attachments
	    atlasLoader = new AtlasAttachmentLoader(atlas);

	    // Create a SkeletonJson instance for parsing the .json file
	    var skeletonJson = new SkeletonJson(atlasLoader);
	    skeletonJson.scale = 0.4;
	    var skeletonData = skeletonJson.readSkeletonData(assetManager.require(skeletonFile));

	    // Create a SkeletonMesh from the data and attach it to the scene
	    skeletonMesh = new SkeletonMesh(skeletonData);
	    skeletonMesh.position.set(3000, 0, 0);
	    skeletonMesh.state.setAnimation(0, anim_idle, true);
	    scene.add(skeletonMesh);
	    playIntro();
	    requestAnimationFrame(render);
	  } else {
	    requestAnimationFrame(load);
	  }
	}
	function render() {
	  // Calculate delta time for animation purposes
	  var now = Date.now() / 1000;
	  var delta = now - lastFrameTime;
	  lastFrameTime = now;

	  // Update the animation
	  skeletonMesh.update(delta);

	  // Update the timers
	  updateFlushTimer(delta);
	  updateGlobalTimer(delta);

	  // Update the water level
	  updateWaterLevel(delta);

	  // Update the speed lines effect
	  updateInitialDState(delta);

	  // Render the scene
	  renderer.render(scene, camera);
	  requestAnimationFrame(render);
	}
	var raycaster = new Raycaster();
	function onCanvasClick(event) {
	  // Calculate mouse position in normalized device coordinates (-1 to +1) for both components
	  var mouse = {
	    x: event.clientX / window.innerWidth * 2 - 1,
	    y: -(event.clientY / window.innerHeight) * 2 + 1
	  };

	  // Create a raycaster and set its position from the camera and mouse coordinates
	  raycaster.setFromCamera(mouse, camera);

	  // Calculate objects intersecting the picking ray
	  var intersects = raycaster.intersectObject(skeletonMesh, true);
	  if (intersects.length > 0) {
	    playPressedAnimation();
	    updateCounter();
	    audioManager.playSFX();
	  }
	}
	function playIntro() {
	  return _playIntro.apply(this, arguments);
	}
	function _playIntro() {
	  _playIntro = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
	    var targetPosition;
	    return _regeneratorRuntime().wrap(function _callee$(_context) {
	      while (1) switch (_context.prev = _context.next) {
	        case 0:
	          // Make the sprout run to the screen
	          skeletonMesh.state.setAnimation(0, anim_run, true);

	          // Tween the sprout's position to the center of the screen
	          targetPosition = {
	            x: 0,
	            y: 0
	          };
	          gsapWithCSS.to(skeletonMesh.position, {
	            duration: 2,
	            x: targetPosition.x,
	            y: targetPosition.y,
	            ease: 'none'
	          });
	          _context.next = 5;
	          return waitForSeconds(2);
	        case 5:
	          skeletonMesh.state.setAnimation(0, anim_run_stop, false).listener = {
	            complete: function complete(trackEntry) {
	              // When the run_stop animation is complete, switch to the idle animation
	              var entry = skeletonMesh.state.setAnimation(0, anim_idle, true);
	              entry.mixDuration = 0.2;
	              canvas.addEventListener('pointerdown', onCanvasClick, false);
	            }
	          };
	        case 6:
	        case "end":
	          return _context.stop();
	      }
	    }, _callee);
	  }));
	  return _playIntro.apply(this, arguments);
	}
	var globalCounterIncrement;
	function updateGlobalCounter(_x) {
	  return _updateGlobalCounter.apply(this, arguments);
	}
	function _updateGlobalCounter() {
	  _updateGlobalCounter = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(amount) {
	    var duration,
	      globalCounterRef,
	      docSnap,
	      targetValue,
	      _args2 = arguments;
	    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
	      while (1) switch (_context2.prev = _context2.next) {
	        case 0:
	          duration = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 100;
	          globalCounterToAdd = 0;
	          globalCounterRef = doc(db, 'global', 'score');
	          _context2.next = 5;
	          return getDoc(globalCounterRef);
	        case 5:
	          docSnap = _context2.sent;
	          if (!docSnap.exists()) {
	            _context2.next = 14;
	            break;
	          }
	          console.log('Firestore read performed');
	          targetValue = docSnap.data().litersFlushed + amount;
	          incrementGlobalCounter(globalCounterElement, docSnap.data().litersFlushed, amount, duration);
	          if (!(targetValue !== docSnap.data().litersFlushed)) {
	            _context2.next = 14;
	            break;
	          }
	          _context2.next = 13;
	          return updateDoc(globalCounterRef, {
	            litersFlushed: targetValue
	          });
	        case 13:
	          console.log('Firestore write performed');
	        case 14:
	        case "end":
	          return _context2.stop();
	      }
	    }, _callee2);
	  }));
	  return _updateGlobalCounter.apply(this, arguments);
	}
	function incrementGlobalCounter(counterElement, count, increment) {
	  var duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
	  if (globalCounterIncrement) {
	    clearInterval(globalCounterIncrement);
	  }
	  globalCounterIncrement = incrementCounter(counterElement, count, increment, false, duration);
	}
	function updateCounter() {
	  totalCounter++;
	  amountToFlush++;
	  localStorage.setItem('totalCounter', totalCounter);
	  totalCounterElement.textContent = totalCounter;

	  // Animate the local counter using GSAP
	  gsapWithCSS.fromTo(totalCounterElement, {
	    y: 0
	  }, {
	    y: -5,
	    duration: 0.1,
	    repeat: 1,
	    yoyoEase: 'power2.out'
	  });
	}
	function playPressedAnimation() {
	  var pressedAnimation = isFlushingProxy.value ? anim_pressed_rainbow : anim_pressed;
	  var trackEntry = skeletonMesh.state.setAnimation(1, pressedAnimation, false);
	  trackEntry.alpha = 1;
	  trackEntry.listener = {
	    complete: function complete(trackEntry) {
	      skeletonMesh.state.setEmptyAnimation(1, 0.2);
	    }
	  };
	}
	var isFlushingHandler = {
	  set: function set(target, property, value) {
	    if (property === 'value') {
	      if (target[property] === false && value === true) {
	        skeletonMesh.state.setAnimation(0, anim_sitting_mouth_open, true).mixDuration = 0.25;
	      } else if (target[property] === true && value === false) {
	        skeletonMesh.state.setAnimation(0, anim_idle, true).mixDuration = 0.25;
	      }
	    }
	    target[property] = value;
	    return true;
	  }
	};
	function onWindowResize() {
	  camera.aspect = window.innerWidth / window.innerHeight;
	  camera.updateProjectionMatrix();
	  renderer.setSize(window.innerWidth, window.innerHeight);
	}
	function waitForSeconds(seconds) {
	  return new Promise(function (resolve) {
	    return setTimeout(resolve, seconds * 1000);
	  });
	}
	var clickTimestampsCapacity = 10;
	function updateCPFCounter() {
	  // Update the clicks per flush counter
	  var diff = totalCounter - cpfLastCount;
	  clickTimestamps.push(diff);
	  if (clickTimestamps.length > clickTimestampsCapacity) {
	    clickTimestamps.shift();
	  }

	  // Calculate the rolling average of the clicks per flush counter
	  var sum = 0;
	  for (var i = 0; i < clickTimestamps.length; i++) {
	    sum += clickTimestamps[i];
	  }
	  cpfCounter = flushInterval * sum / clickTimestamps.length;
	  cpfCounterElement.textContent = cpfCounter.toFixed(0);
	  cpfLastCount = totalCounter;
	}
	function updateGlobalTimer(deltaTime) {
	  globalTimer -= deltaTime;
	  if (globalTimer <= 0) {
	    globalTimer = globalCounterInterval;
	    updateGlobalCounter(globalCounterToAdd);
	  }
	}
	function updateFlushTimer(deltaTime) {
	  flushTimer -= deltaTime;
	  if (flushTimer <= 0) {
	    flushTimer = flushInterval;
	    flush();
	  }
	}
	var isFlushingProxy = new Proxy({
	  value: false
	}, isFlushingHandler);
	var flushCounterIncrement;
	function flush() {
	  // Update the global counter from the firebase database
	  globalCounterToAdd += amountToFlush;

	  // Update the local counter from the local storage
	  if (flushCounterIncrement) {
	    clearInterval(flushCounterIncrement);
	  }
	  flushCounterIncrement = incrementCounter(flushCounterElement, flushCounter, amountToFlush, true);
	  flushCounter += amountToFlush;
	  localStorage.setItem('flushCounter', flushCounter);
	  amountToFlush = 0;
	}
	function incrementCounter(counterElement, count, increment) {
	  var updateFlushing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	  var duration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
	  if (duration <= 0) {
	    counterElement.textContent = count + increment;
	    return;
	  }
	  var interval;
	  if (increment <= 0) {
	    if (count > parseInt(counterElement.textContent)) {
	      var startValue = parseInt(counterElement.textContent);
	      var _endValue = count;
	      interval = setInterval(function () {
	        startValue++;
	        counterElement.textContent = startValue;
	        if (startValue >= _endValue) {
	          clearInterval(interval);
	          if (updateFlushing) {
	            isFlushingProxy.value = false;
	          }
	        }
	        gsapWithCSS.fromTo(counterElement, {
	          y: 0
	        }, {
	          y: -5,
	          duration: 0.1,
	          repeat: 1,
	          yoyoEase: 'power2.out'
	        });
	      }, duration);
	    }
	    return interval;
	  }
	  if (updateFlushing && increment >= 5) {
	    isFlushingProxy.value = true;
	  }
	  var endValue = count + increment;
	  interval = setInterval(function () {
	    count++;
	    counterElement.textContent = count;
	    if (count >= endValue) {
	      clearInterval(interval);
	      if (updateFlushing) {
	        isFlushingProxy.value = false;
	      }
	    }
	    gsapWithCSS.fromTo(counterElement, {
	      y: 0
	    }, {
	      y: -5,
	      duration: 0.1,
	      repeat: 1,
	      yoyoEase: 'power2.out'
	    });
	  }, duration);
	  return interval;
	}
	function updateWaterLevel(deltaTime) {
	  var waterElement = document.querySelector('.water');
	  var value = lerp(waterElement.style.height.replace('%', ''), amountToFlush * 2, deltaTime * 0.8);
	  waterElement.style.height = "".concat(value, "%");
	}
	var initialDStateInterval = 0.03;
	var initialDStateTimer = initialDStateInterval;
	function updateInitialDState(deltaTime) {
	  if (initialDStateTimer > 0) {
	    initialDStateTimer -= deltaTime;
	  } else {
	    initialDStateTimer = initialDStateInterval;
	    if (cpfCounter > 10) {
	      speedLinesEffect.enableSpeedLines();
	      speedLinesEffect.shiftPositions(30);
	      console.log('Speed lines enabled');
	    } else {
	      speedLinesEffect.disableSpeedLines();
	      console.log('Speed lines disabled');
	    }
	  }
	}
	function lerp(start, end, t) {
	  return start * (1 - t) + end * t;
	}

	var VolumeSlider = /*#__PURE__*/function (_React$Component) {
	  function VolumeSlider() {
	    _classCallCheck(this, VolumeSlider);
	    return _callSuper(this, VolumeSlider, arguments);
	  }
	  _inherits(VolumeSlider, _React$Component);
	  return _createClass(VolumeSlider, [{
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/React.createElement("div", {
	        className: "volume-slider-container"
	      }, /*#__PURE__*/React.createElement("img", {
	        src: "/PokuClick/assets/volume-icon.png",
	        alt: "Volume Icon",
	        "class": "volume-icon"
	      }), /*#__PURE__*/React.createElement("input", {
	        type: "range",
	        id: "volume-slider",
	        min: "0",
	        max: "100",
	        defaultValue: "50"
	      }));
	    }
	  }]);
	}(React.Component);

	var ClickCounter = /*#__PURE__*/function (_React$Component) {
	  function ClickCounter() {
	    _classCallCheck(this, ClickCounter);
	    return _callSuper(this, ClickCounter, arguments);
	  }
	  _inherits(ClickCounter, _React$Component);
	  return _createClass(ClickCounter, [{
	    key: "render",
	    value: function render() {
	      return /*#__PURE__*/React.createElement("div", {
	        className: "click-counter-container"
	      }, /*#__PURE__*/React.createElement("h1", {
	        htmlFor: "click-counter"
	      }, this.props.label), /*#__PURE__*/React.createElement("h1", {
	        id: this.props.id
	      }, "0"));
	    }
	  }]);
	}(React.Component);

	// Render the React component
	ReactDOM.render(/*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(VolumeSlider, null), /*#__PURE__*/React.createElement("div", {
	  id: "counters"
	}, /*#__PURE__*/React.createElement(ClickCounter, {
	  id: "global-counter",
	  label: "Liters Flushed (Global)"
	}), /*#__PURE__*/React.createElement(ClickCounter, {
	  id: "flushed-counter",
	  label: "Liters Flushed (Yours)"
	}), /*#__PURE__*/React.createElement(ClickCounter, {
	  id: "cpf-counter",
	  label: "Liters Per Flush"
	}), /*#__PURE__*/React.createElement(ClickCounter, {
	  id: "total-counter",
	  label: "Clicks"
	}))), document.getElementById('root'));
	var app = new App();
	app.init();

})();
//# sourceMappingURL=bundle.js.map
